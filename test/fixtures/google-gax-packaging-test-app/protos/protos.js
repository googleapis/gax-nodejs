// Copyright 2021 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*eslint-disable block-scoped-var, id-length, no-control-regex, no-magic-numbers, no-prototype-builtins, no-redeclare, no-shadow, no-var, sort-vars*/
(function(global, factory) { /* global define, require, module */

    /* AMD */ if (typeof define === 'function' && define.amd)
        define(["protobufjs/minimal"], factory);

    /* CommonJS */ else if (typeof require === 'function' && typeof module === 'object' && module && module.exports)
        module.exports = factory(require("google-gax").protobufMinimal);

})(this, function($protobuf) {
    "use strict";

    // Common aliases
    var $Reader = $protobuf.Reader, $Writer = $protobuf.Writer, $util = $protobuf.util;
    
    // Exported root namespace
    var $root = $protobuf.roots.showcase_protos || ($protobuf.roots.showcase_protos = {});
    
    $root.google = (function() {
    
        /**
         * Namespace google.
         * @exports google
         * @namespace
         */
        var google = {};
    
        google.showcase = (function() {
    
            /**
             * Namespace showcase.
             * @memberof google
             * @namespace
             */
            var showcase = {};
    
            showcase.v1beta1 = (function() {
    
                /**
                 * Namespace v1beta1.
                 * @memberof google.showcase
                 * @namespace
                 */
                var v1beta1 = {};
    
                v1beta1.Echo = (function() {
    
                    /**
                     * Constructs a new Echo service.
                     * @memberof google.showcase.v1beta1
                     * @classdesc Represents an Echo
                     * @extends $protobuf.rpc.Service
                     * @constructor
                     * @param {$protobuf.RPCImpl} rpcImpl RPC implementation
                     * @param {boolean} [requestDelimited=false] Whether requests are length-delimited
                     * @param {boolean} [responseDelimited=false] Whether responses are length-delimited
                     */
                    function Echo(rpcImpl, requestDelimited, responseDelimited) {
                        $protobuf.rpc.Service.call(this, rpcImpl, requestDelimited, responseDelimited);
                    }
    
                    (Echo.prototype = Object.create($protobuf.rpc.Service.prototype)).constructor = Echo;
    
                    /**
                     * Creates new Echo service using the specified rpc implementation.
                     * @function create
                     * @memberof google.showcase.v1beta1.Echo
                     * @static
                     * @param {$protobuf.RPCImpl} rpcImpl RPC implementation
                     * @param {boolean} [requestDelimited=false] Whether requests are length-delimited
                     * @param {boolean} [responseDelimited=false] Whether responses are length-delimited
                     * @returns {Echo} RPC service. Useful where requests and/or responses are streamed.
                     */
                    Echo.create = function create(rpcImpl, requestDelimited, responseDelimited) {
                        return new this(rpcImpl, requestDelimited, responseDelimited);
                    };
    
                    /**
                     * Callback as used by {@link google.showcase.v1beta1.Echo#echo}.
                     * @memberof google.showcase.v1beta1.Echo
                     * @typedef EchoCallback
                     * @type {function}
                     * @param {Error|null} error Error, if any
                     * @param {google.showcase.v1beta1.EchoResponse} [response] EchoResponse
                     */
    
                    /**
                     * Calls Echo.
                     * @function echo
                     * @memberof google.showcase.v1beta1.Echo
                     * @instance
                     * @param {google.showcase.v1beta1.IEchoRequest} request EchoRequest message or plain object
                     * @param {google.showcase.v1beta1.Echo.EchoCallback} callback Node-style callback called with the error, if any, and EchoResponse
                     * @returns {undefined}
                     * @variation 1
                     */
                    Object.defineProperty(Echo.prototype.echo = function echo(request, callback) {
                        return this.rpcCall(echo, $root.google.showcase.v1beta1.EchoRequest, $root.google.showcase.v1beta1.EchoResponse, request, callback);
                    }, "name", { value: "Echo" });
    
                    /**
                     * Calls Echo.
                     * @function echo
                     * @memberof google.showcase.v1beta1.Echo
                     * @instance
                     * @param {google.showcase.v1beta1.IEchoRequest} request EchoRequest message or plain object
                     * @returns {Promise<google.showcase.v1beta1.EchoResponse>} Promise
                     * @variation 2
                     */
    
                    /**
                     * Callback as used by {@link google.showcase.v1beta1.Echo#expand}.
                     * @memberof google.showcase.v1beta1.Echo
                     * @typedef ExpandCallback
                     * @type {function}
                     * @param {Error|null} error Error, if any
                     * @param {google.showcase.v1beta1.EchoResponse} [response] EchoResponse
                     */
    
                    /**
                     * Calls Expand.
                     * @function expand
                     * @memberof google.showcase.v1beta1.Echo
                     * @instance
                     * @param {google.showcase.v1beta1.IExpandRequest} request ExpandRequest message or plain object
                     * @param {google.showcase.v1beta1.Echo.ExpandCallback} callback Node-style callback called with the error, if any, and EchoResponse
                     * @returns {undefined}
                     * @variation 1
                     */
                    Object.defineProperty(Echo.prototype.expand = function expand(request, callback) {
                        return this.rpcCall(expand, $root.google.showcase.v1beta1.ExpandRequest, $root.google.showcase.v1beta1.EchoResponse, request, callback);
                    }, "name", { value: "Expand" });
    
                    /**
                     * Calls Expand.
                     * @function expand
                     * @memberof google.showcase.v1beta1.Echo
                     * @instance
                     * @param {google.showcase.v1beta1.IExpandRequest} request ExpandRequest message or plain object
                     * @returns {Promise<google.showcase.v1beta1.EchoResponse>} Promise
                     * @variation 2
                     */
    
                    /**
                     * Callback as used by {@link google.showcase.v1beta1.Echo#collect}.
                     * @memberof google.showcase.v1beta1.Echo
                     * @typedef CollectCallback
                     * @type {function}
                     * @param {Error|null} error Error, if any
                     * @param {google.showcase.v1beta1.EchoResponse} [response] EchoResponse
                     */
    
                    /**
                     * Calls Collect.
                     * @function collect
                     * @memberof google.showcase.v1beta1.Echo
                     * @instance
                     * @param {google.showcase.v1beta1.IEchoRequest} request EchoRequest message or plain object
                     * @param {google.showcase.v1beta1.Echo.CollectCallback} callback Node-style callback called with the error, if any, and EchoResponse
                     * @returns {undefined}
                     * @variation 1
                     */
                    Object.defineProperty(Echo.prototype.collect = function collect(request, callback) {
                        return this.rpcCall(collect, $root.google.showcase.v1beta1.EchoRequest, $root.google.showcase.v1beta1.EchoResponse, request, callback);
                    }, "name", { value: "Collect" });
    
                    /**
                     * Calls Collect.
                     * @function collect
                     * @memberof google.showcase.v1beta1.Echo
                     * @instance
                     * @param {google.showcase.v1beta1.IEchoRequest} request EchoRequest message or plain object
                     * @returns {Promise<google.showcase.v1beta1.EchoResponse>} Promise
                     * @variation 2
                     */
    
                    /**
                     * Callback as used by {@link google.showcase.v1beta1.Echo#chat}.
                     * @memberof google.showcase.v1beta1.Echo
                     * @typedef ChatCallback
                     * @type {function}
                     * @param {Error|null} error Error, if any
                     * @param {google.showcase.v1beta1.EchoResponse} [response] EchoResponse
                     */
    
                    /**
                     * Calls Chat.
                     * @function chat
                     * @memberof google.showcase.v1beta1.Echo
                     * @instance
                     * @param {google.showcase.v1beta1.IEchoRequest} request EchoRequest message or plain object
                     * @param {google.showcase.v1beta1.Echo.ChatCallback} callback Node-style callback called with the error, if any, and EchoResponse
                     * @returns {undefined}
                     * @variation 1
                     */
                    Object.defineProperty(Echo.prototype.chat = function chat(request, callback) {
                        return this.rpcCall(chat, $root.google.showcase.v1beta1.EchoRequest, $root.google.showcase.v1beta1.EchoResponse, request, callback);
                    }, "name", { value: "Chat" });
    
                    /**
                     * Calls Chat.
                     * @function chat
                     * @memberof google.showcase.v1beta1.Echo
                     * @instance
                     * @param {google.showcase.v1beta1.IEchoRequest} request EchoRequest message or plain object
                     * @returns {Promise<google.showcase.v1beta1.EchoResponse>} Promise
                     * @variation 2
                     */
    
                    /**
                     * Callback as used by {@link google.showcase.v1beta1.Echo#pagedExpand}.
                     * @memberof google.showcase.v1beta1.Echo
                     * @typedef PagedExpandCallback
                     * @type {function}
                     * @param {Error|null} error Error, if any
                     * @param {google.showcase.v1beta1.PagedExpandResponse} [response] PagedExpandResponse
                     */
    
                    /**
                     * Calls PagedExpand.
                     * @function pagedExpand
                     * @memberof google.showcase.v1beta1.Echo
                     * @instance
                     * @param {google.showcase.v1beta1.IPagedExpandRequest} request PagedExpandRequest message or plain object
                     * @param {google.showcase.v1beta1.Echo.PagedExpandCallback} callback Node-style callback called with the error, if any, and PagedExpandResponse
                     * @returns {undefined}
                     * @variation 1
                     */
                    Object.defineProperty(Echo.prototype.pagedExpand = function pagedExpand(request, callback) {
                        return this.rpcCall(pagedExpand, $root.google.showcase.v1beta1.PagedExpandRequest, $root.google.showcase.v1beta1.PagedExpandResponse, request, callback);
                    }, "name", { value: "PagedExpand" });
    
                    /**
                     * Calls PagedExpand.
                     * @function pagedExpand
                     * @memberof google.showcase.v1beta1.Echo
                     * @instance
                     * @param {google.showcase.v1beta1.IPagedExpandRequest} request PagedExpandRequest message or plain object
                     * @returns {Promise<google.showcase.v1beta1.PagedExpandResponse>} Promise
                     * @variation 2
                     */
    
                    /**
                     * Callback as used by {@link google.showcase.v1beta1.Echo#wait}.
                     * @memberof google.showcase.v1beta1.Echo
                     * @typedef WaitCallback
                     * @type {function}
                     * @param {Error|null} error Error, if any
                     * @param {google.longrunning.Operation} [response] Operation
                     */
    
                    /**
                     * Calls Wait.
                     * @function wait
                     * @memberof google.showcase.v1beta1.Echo
                     * @instance
                     * @param {google.showcase.v1beta1.IWaitRequest} request WaitRequest message or plain object
                     * @param {google.showcase.v1beta1.Echo.WaitCallback} callback Node-style callback called with the error, if any, and Operation
                     * @returns {undefined}
                     * @variation 1
                     */
                    Object.defineProperty(Echo.prototype.wait = function wait(request, callback) {
                        return this.rpcCall(wait, $root.google.showcase.v1beta1.WaitRequest, $root.google.longrunning.Operation, request, callback);
                    }, "name", { value: "Wait" });
    
                    /**
                     * Calls Wait.
                     * @function wait
                     * @memberof google.showcase.v1beta1.Echo
                     * @instance
                     * @param {google.showcase.v1beta1.IWaitRequest} request WaitRequest message or plain object
                     * @returns {Promise<google.longrunning.Operation>} Promise
                     * @variation 2
                     */
    
                    /**
                     * Callback as used by {@link google.showcase.v1beta1.Echo#block}.
                     * @memberof google.showcase.v1beta1.Echo
                     * @typedef BlockCallback
                     * @type {function}
                     * @param {Error|null} error Error, if any
                     * @param {google.showcase.v1beta1.BlockResponse} [response] BlockResponse
                     */
    
                    /**
                     * Calls Block.
                     * @function block
                     * @memberof google.showcase.v1beta1.Echo
                     * @instance
                     * @param {google.showcase.v1beta1.IBlockRequest} request BlockRequest message or plain object
                     * @param {google.showcase.v1beta1.Echo.BlockCallback} callback Node-style callback called with the error, if any, and BlockResponse
                     * @returns {undefined}
                     * @variation 1
                     */
                    Object.defineProperty(Echo.prototype.block = function block(request, callback) {
                        return this.rpcCall(block, $root.google.showcase.v1beta1.BlockRequest, $root.google.showcase.v1beta1.BlockResponse, request, callback);
                    }, "name", { value: "Block" });
    
                    /**
                     * Calls Block.
                     * @function block
                     * @memberof google.showcase.v1beta1.Echo
                     * @instance
                     * @param {google.showcase.v1beta1.IBlockRequest} request BlockRequest message or plain object
                     * @returns {Promise<google.showcase.v1beta1.BlockResponse>} Promise
                     * @variation 2
                     */
    
                    return Echo;
                })();
    
                v1beta1.EchoRequest = (function() {
    
                    /**
                     * Properties of an EchoRequest.
                     * @memberof google.showcase.v1beta1
                     * @interface IEchoRequest
                     * @property {string|null} [content] EchoRequest content
                     * @property {google.rpc.IStatus|null} [error] EchoRequest error
                     */
    
                    /**
                     * Constructs a new EchoRequest.
                     * @memberof google.showcase.v1beta1
                     * @classdesc Represents an EchoRequest.
                     * @implements IEchoRequest
                     * @constructor
                     * @param {google.showcase.v1beta1.IEchoRequest=} [properties] Properties to set
                     */
                    function EchoRequest(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * EchoRequest content.
                     * @member {string|null|undefined} content
                     * @memberof google.showcase.v1beta1.EchoRequest
                     * @instance
                     */
                    EchoRequest.prototype.content = null;
    
                    /**
                     * EchoRequest error.
                     * @member {google.rpc.IStatus|null|undefined} error
                     * @memberof google.showcase.v1beta1.EchoRequest
                     * @instance
                     */
                    EchoRequest.prototype.error = null;
    
                    // OneOf field names bound to virtual getters and setters
                    var $oneOfFields;
    
                    /**
                     * EchoRequest response.
                     * @member {"content"|"error"|undefined} response
                     * @memberof google.showcase.v1beta1.EchoRequest
                     * @instance
                     */
                    Object.defineProperty(EchoRequest.prototype, "response", {
                        get: $util.oneOfGetter($oneOfFields = ["content", "error"]),
                        set: $util.oneOfSetter($oneOfFields)
                    });
    
                    /**
                     * Creates a new EchoRequest instance using the specified properties.
                     * @function create
                     * @memberof google.showcase.v1beta1.EchoRequest
                     * @static
                     * @param {google.showcase.v1beta1.IEchoRequest=} [properties] Properties to set
                     * @returns {google.showcase.v1beta1.EchoRequest} EchoRequest instance
                     */
                    EchoRequest.create = function create(properties) {
                        return new EchoRequest(properties);
                    };
    
                    /**
                     * Encodes the specified EchoRequest message. Does not implicitly {@link google.showcase.v1beta1.EchoRequest.verify|verify} messages.
                     * @function encode
                     * @memberof google.showcase.v1beta1.EchoRequest
                     * @static
                     * @param {google.showcase.v1beta1.IEchoRequest} message EchoRequest message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    EchoRequest.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.content != null && Object.hasOwnProperty.call(message, "content"))
                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.content);
                        if (message.error != null && Object.hasOwnProperty.call(message, "error"))
                            $root.google.rpc.Status.encode(message.error, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                        return writer;
                    };
    
                    /**
                     * Encodes the specified EchoRequest message, length delimited. Does not implicitly {@link google.showcase.v1beta1.EchoRequest.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof google.showcase.v1beta1.EchoRequest
                     * @static
                     * @param {google.showcase.v1beta1.IEchoRequest} message EchoRequest message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    EchoRequest.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes an EchoRequest message from the specified reader or buffer.
                     * @function decode
                     * @memberof google.showcase.v1beta1.EchoRequest
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {google.showcase.v1beta1.EchoRequest} EchoRequest
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    EchoRequest.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.showcase.v1beta1.EchoRequest();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.content = reader.string();
                                break;
                            case 2:
                                message.error = $root.google.rpc.Status.decode(reader, reader.uint32());
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes an EchoRequest message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof google.showcase.v1beta1.EchoRequest
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {google.showcase.v1beta1.EchoRequest} EchoRequest
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    EchoRequest.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies an EchoRequest message.
                     * @function verify
                     * @memberof google.showcase.v1beta1.EchoRequest
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    EchoRequest.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        var properties = {};
                        if (message.content != null && message.hasOwnProperty("content")) {
                            properties.response = 1;
                            if (!$util.isString(message.content))
                                return "content: string expected";
                        }
                        if (message.error != null && message.hasOwnProperty("error")) {
                            if (properties.response === 1)
                                return "response: multiple values";
                            properties.response = 1;
                            {
                                var error = $root.google.rpc.Status.verify(message.error);
                                if (error)
                                    return "error." + error;
                            }
                        }
                        return null;
                    };
    
                    /**
                     * Creates an EchoRequest message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof google.showcase.v1beta1.EchoRequest
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {google.showcase.v1beta1.EchoRequest} EchoRequest
                     */
                    EchoRequest.fromObject = function fromObject(object) {
                        if (object instanceof $root.google.showcase.v1beta1.EchoRequest)
                            return object;
                        var message = new $root.google.showcase.v1beta1.EchoRequest();
                        if (object.content != null)
                            message.content = String(object.content);
                        if (object.error != null) {
                            if (typeof object.error !== "object")
                                throw TypeError(".google.showcase.v1beta1.EchoRequest.error: object expected");
                            message.error = $root.google.rpc.Status.fromObject(object.error);
                        }
                        return message;
                    };
    
                    /**
                     * Creates a plain object from an EchoRequest message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof google.showcase.v1beta1.EchoRequest
                     * @static
                     * @param {google.showcase.v1beta1.EchoRequest} message EchoRequest
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    EchoRequest.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (message.content != null && message.hasOwnProperty("content")) {
                            object.content = message.content;
                            if (options.oneofs)
                                object.response = "content";
                        }
                        if (message.error != null && message.hasOwnProperty("error")) {
                            object.error = $root.google.rpc.Status.toObject(message.error, options);
                            if (options.oneofs)
                                object.response = "error";
                        }
                        return object;
                    };
    
                    /**
                     * Converts this EchoRequest to JSON.
                     * @function toJSON
                     * @memberof google.showcase.v1beta1.EchoRequest
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    EchoRequest.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    return EchoRequest;
                })();
    
                v1beta1.EchoResponse = (function() {
    
                    /**
                     * Properties of an EchoResponse.
                     * @memberof google.showcase.v1beta1
                     * @interface IEchoResponse
                     * @property {string|null} [content] EchoResponse content
                     */
    
                    /**
                     * Constructs a new EchoResponse.
                     * @memberof google.showcase.v1beta1
                     * @classdesc Represents an EchoResponse.
                     * @implements IEchoResponse
                     * @constructor
                     * @param {google.showcase.v1beta1.IEchoResponse=} [properties] Properties to set
                     */
                    function EchoResponse(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * EchoResponse content.
                     * @member {string} content
                     * @memberof google.showcase.v1beta1.EchoResponse
                     * @instance
                     */
                    EchoResponse.prototype.content = "";
    
                    /**
                     * Creates a new EchoResponse instance using the specified properties.
                     * @function create
                     * @memberof google.showcase.v1beta1.EchoResponse
                     * @static
                     * @param {google.showcase.v1beta1.IEchoResponse=} [properties] Properties to set
                     * @returns {google.showcase.v1beta1.EchoResponse} EchoResponse instance
                     */
                    EchoResponse.create = function create(properties) {
                        return new EchoResponse(properties);
                    };
    
                    /**
                     * Encodes the specified EchoResponse message. Does not implicitly {@link google.showcase.v1beta1.EchoResponse.verify|verify} messages.
                     * @function encode
                     * @memberof google.showcase.v1beta1.EchoResponse
                     * @static
                     * @param {google.showcase.v1beta1.IEchoResponse} message EchoResponse message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    EchoResponse.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.content != null && Object.hasOwnProperty.call(message, "content"))
                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.content);
                        return writer;
                    };
    
                    /**
                     * Encodes the specified EchoResponse message, length delimited. Does not implicitly {@link google.showcase.v1beta1.EchoResponse.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof google.showcase.v1beta1.EchoResponse
                     * @static
                     * @param {google.showcase.v1beta1.IEchoResponse} message EchoResponse message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    EchoResponse.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes an EchoResponse message from the specified reader or buffer.
                     * @function decode
                     * @memberof google.showcase.v1beta1.EchoResponse
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {google.showcase.v1beta1.EchoResponse} EchoResponse
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    EchoResponse.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.showcase.v1beta1.EchoResponse();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.content = reader.string();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes an EchoResponse message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof google.showcase.v1beta1.EchoResponse
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {google.showcase.v1beta1.EchoResponse} EchoResponse
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    EchoResponse.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies an EchoResponse message.
                     * @function verify
                     * @memberof google.showcase.v1beta1.EchoResponse
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    EchoResponse.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.content != null && message.hasOwnProperty("content"))
                            if (!$util.isString(message.content))
                                return "content: string expected";
                        return null;
                    };
    
                    /**
                     * Creates an EchoResponse message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof google.showcase.v1beta1.EchoResponse
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {google.showcase.v1beta1.EchoResponse} EchoResponse
                     */
                    EchoResponse.fromObject = function fromObject(object) {
                        if (object instanceof $root.google.showcase.v1beta1.EchoResponse)
                            return object;
                        var message = new $root.google.showcase.v1beta1.EchoResponse();
                        if (object.content != null)
                            message.content = String(object.content);
                        return message;
                    };
    
                    /**
                     * Creates a plain object from an EchoResponse message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof google.showcase.v1beta1.EchoResponse
                     * @static
                     * @param {google.showcase.v1beta1.EchoResponse} message EchoResponse
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    EchoResponse.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults)
                            object.content = "";
                        if (message.content != null && message.hasOwnProperty("content"))
                            object.content = message.content;
                        return object;
                    };
    
                    /**
                     * Converts this EchoResponse to JSON.
                     * @function toJSON
                     * @memberof google.showcase.v1beta1.EchoResponse
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    EchoResponse.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    return EchoResponse;
                })();
    
                v1beta1.ExpandRequest = (function() {
    
                    /**
                     * Properties of an ExpandRequest.
                     * @memberof google.showcase.v1beta1
                     * @interface IExpandRequest
                     * @property {string|null} [content] ExpandRequest content
                     * @property {google.rpc.IStatus|null} [error] ExpandRequest error
                     */
    
                    /**
                     * Constructs a new ExpandRequest.
                     * @memberof google.showcase.v1beta1
                     * @classdesc Represents an ExpandRequest.
                     * @implements IExpandRequest
                     * @constructor
                     * @param {google.showcase.v1beta1.IExpandRequest=} [properties] Properties to set
                     */
                    function ExpandRequest(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * ExpandRequest content.
                     * @member {string} content
                     * @memberof google.showcase.v1beta1.ExpandRequest
                     * @instance
                     */
                    ExpandRequest.prototype.content = "";
    
                    /**
                     * ExpandRequest error.
                     * @member {google.rpc.IStatus|null|undefined} error
                     * @memberof google.showcase.v1beta1.ExpandRequest
                     * @instance
                     */
                    ExpandRequest.prototype.error = null;
    
                    /**
                     * Creates a new ExpandRequest instance using the specified properties.
                     * @function create
                     * @memberof google.showcase.v1beta1.ExpandRequest
                     * @static
                     * @param {google.showcase.v1beta1.IExpandRequest=} [properties] Properties to set
                     * @returns {google.showcase.v1beta1.ExpandRequest} ExpandRequest instance
                     */
                    ExpandRequest.create = function create(properties) {
                        return new ExpandRequest(properties);
                    };
    
                    /**
                     * Encodes the specified ExpandRequest message. Does not implicitly {@link google.showcase.v1beta1.ExpandRequest.verify|verify} messages.
                     * @function encode
                     * @memberof google.showcase.v1beta1.ExpandRequest
                     * @static
                     * @param {google.showcase.v1beta1.IExpandRequest} message ExpandRequest message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    ExpandRequest.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.content != null && Object.hasOwnProperty.call(message, "content"))
                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.content);
                        if (message.error != null && Object.hasOwnProperty.call(message, "error"))
                            $root.google.rpc.Status.encode(message.error, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                        return writer;
                    };
    
                    /**
                     * Encodes the specified ExpandRequest message, length delimited. Does not implicitly {@link google.showcase.v1beta1.ExpandRequest.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof google.showcase.v1beta1.ExpandRequest
                     * @static
                     * @param {google.showcase.v1beta1.IExpandRequest} message ExpandRequest message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    ExpandRequest.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes an ExpandRequest message from the specified reader or buffer.
                     * @function decode
                     * @memberof google.showcase.v1beta1.ExpandRequest
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {google.showcase.v1beta1.ExpandRequest} ExpandRequest
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    ExpandRequest.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.showcase.v1beta1.ExpandRequest();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.content = reader.string();
                                break;
                            case 2:
                                message.error = $root.google.rpc.Status.decode(reader, reader.uint32());
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes an ExpandRequest message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof google.showcase.v1beta1.ExpandRequest
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {google.showcase.v1beta1.ExpandRequest} ExpandRequest
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    ExpandRequest.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies an ExpandRequest message.
                     * @function verify
                     * @memberof google.showcase.v1beta1.ExpandRequest
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    ExpandRequest.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.content != null && message.hasOwnProperty("content"))
                            if (!$util.isString(message.content))
                                return "content: string expected";
                        if (message.error != null && message.hasOwnProperty("error")) {
                            var error = $root.google.rpc.Status.verify(message.error);
                            if (error)
                                return "error." + error;
                        }
                        return null;
                    };
    
                    /**
                     * Creates an ExpandRequest message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof google.showcase.v1beta1.ExpandRequest
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {google.showcase.v1beta1.ExpandRequest} ExpandRequest
                     */
                    ExpandRequest.fromObject = function fromObject(object) {
                        if (object instanceof $root.google.showcase.v1beta1.ExpandRequest)
                            return object;
                        var message = new $root.google.showcase.v1beta1.ExpandRequest();
                        if (object.content != null)
                            message.content = String(object.content);
                        if (object.error != null) {
                            if (typeof object.error !== "object")
                                throw TypeError(".google.showcase.v1beta1.ExpandRequest.error: object expected");
                            message.error = $root.google.rpc.Status.fromObject(object.error);
                        }
                        return message;
                    };
    
                    /**
                     * Creates a plain object from an ExpandRequest message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof google.showcase.v1beta1.ExpandRequest
                     * @static
                     * @param {google.showcase.v1beta1.ExpandRequest} message ExpandRequest
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    ExpandRequest.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults) {
                            object.content = "";
                            object.error = null;
                        }
                        if (message.content != null && message.hasOwnProperty("content"))
                            object.content = message.content;
                        if (message.error != null && message.hasOwnProperty("error"))
                            object.error = $root.google.rpc.Status.toObject(message.error, options);
                        return object;
                    };
    
                    /**
                     * Converts this ExpandRequest to JSON.
                     * @function toJSON
                     * @memberof google.showcase.v1beta1.ExpandRequest
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    ExpandRequest.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    return ExpandRequest;
                })();
    
                v1beta1.PagedExpandRequest = (function() {
    
                    /**
                     * Properties of a PagedExpandRequest.
                     * @memberof google.showcase.v1beta1
                     * @interface IPagedExpandRequest
                     * @property {string|null} [content] PagedExpandRequest content
                     * @property {number|null} [pageSize] PagedExpandRequest pageSize
                     * @property {string|null} [pageToken] PagedExpandRequest pageToken
                     */
    
                    /**
                     * Constructs a new PagedExpandRequest.
                     * @memberof google.showcase.v1beta1
                     * @classdesc Represents a PagedExpandRequest.
                     * @implements IPagedExpandRequest
                     * @constructor
                     * @param {google.showcase.v1beta1.IPagedExpandRequest=} [properties] Properties to set
                     */
                    function PagedExpandRequest(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * PagedExpandRequest content.
                     * @member {string} content
                     * @memberof google.showcase.v1beta1.PagedExpandRequest
                     * @instance
                     */
                    PagedExpandRequest.prototype.content = "";
    
                    /**
                     * PagedExpandRequest pageSize.
                     * @member {number} pageSize
                     * @memberof google.showcase.v1beta1.PagedExpandRequest
                     * @instance
                     */
                    PagedExpandRequest.prototype.pageSize = 0;
    
                    /**
                     * PagedExpandRequest pageToken.
                     * @member {string} pageToken
                     * @memberof google.showcase.v1beta1.PagedExpandRequest
                     * @instance
                     */
                    PagedExpandRequest.prototype.pageToken = "";
    
                    /**
                     * Creates a new PagedExpandRequest instance using the specified properties.
                     * @function create
                     * @memberof google.showcase.v1beta1.PagedExpandRequest
                     * @static
                     * @param {google.showcase.v1beta1.IPagedExpandRequest=} [properties] Properties to set
                     * @returns {google.showcase.v1beta1.PagedExpandRequest} PagedExpandRequest instance
                     */
                    PagedExpandRequest.create = function create(properties) {
                        return new PagedExpandRequest(properties);
                    };
    
                    /**
                     * Encodes the specified PagedExpandRequest message. Does not implicitly {@link google.showcase.v1beta1.PagedExpandRequest.verify|verify} messages.
                     * @function encode
                     * @memberof google.showcase.v1beta1.PagedExpandRequest
                     * @static
                     * @param {google.showcase.v1beta1.IPagedExpandRequest} message PagedExpandRequest message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    PagedExpandRequest.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.content != null && Object.hasOwnProperty.call(message, "content"))
                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.content);
                        if (message.pageSize != null && Object.hasOwnProperty.call(message, "pageSize"))
                            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.pageSize);
                        if (message.pageToken != null && Object.hasOwnProperty.call(message, "pageToken"))
                            writer.uint32(/* id 3, wireType 2 =*/26).string(message.pageToken);
                        return writer;
                    };
    
                    /**
                     * Encodes the specified PagedExpandRequest message, length delimited. Does not implicitly {@link google.showcase.v1beta1.PagedExpandRequest.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof google.showcase.v1beta1.PagedExpandRequest
                     * @static
                     * @param {google.showcase.v1beta1.IPagedExpandRequest} message PagedExpandRequest message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    PagedExpandRequest.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a PagedExpandRequest message from the specified reader or buffer.
                     * @function decode
                     * @memberof google.showcase.v1beta1.PagedExpandRequest
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {google.showcase.v1beta1.PagedExpandRequest} PagedExpandRequest
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    PagedExpandRequest.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.showcase.v1beta1.PagedExpandRequest();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.content = reader.string();
                                break;
                            case 2:
                                message.pageSize = reader.int32();
                                break;
                            case 3:
                                message.pageToken = reader.string();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a PagedExpandRequest message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof google.showcase.v1beta1.PagedExpandRequest
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {google.showcase.v1beta1.PagedExpandRequest} PagedExpandRequest
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    PagedExpandRequest.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a PagedExpandRequest message.
                     * @function verify
                     * @memberof google.showcase.v1beta1.PagedExpandRequest
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    PagedExpandRequest.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.content != null && message.hasOwnProperty("content"))
                            if (!$util.isString(message.content))
                                return "content: string expected";
                        if (message.pageSize != null && message.hasOwnProperty("pageSize"))
                            if (!$util.isInteger(message.pageSize))
                                return "pageSize: integer expected";
                        if (message.pageToken != null && message.hasOwnProperty("pageToken"))
                            if (!$util.isString(message.pageToken))
                                return "pageToken: string expected";
                        return null;
                    };
    
                    /**
                     * Creates a PagedExpandRequest message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof google.showcase.v1beta1.PagedExpandRequest
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {google.showcase.v1beta1.PagedExpandRequest} PagedExpandRequest
                     */
                    PagedExpandRequest.fromObject = function fromObject(object) {
                        if (object instanceof $root.google.showcase.v1beta1.PagedExpandRequest)
                            return object;
                        var message = new $root.google.showcase.v1beta1.PagedExpandRequest();
                        if (object.content != null)
                            message.content = String(object.content);
                        if (object.pageSize != null)
                            message.pageSize = object.pageSize | 0;
                        if (object.pageToken != null)
                            message.pageToken = String(object.pageToken);
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a PagedExpandRequest message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof google.showcase.v1beta1.PagedExpandRequest
                     * @static
                     * @param {google.showcase.v1beta1.PagedExpandRequest} message PagedExpandRequest
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    PagedExpandRequest.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults) {
                            object.content = "";
                            object.pageSize = 0;
                            object.pageToken = "";
                        }
                        if (message.content != null && message.hasOwnProperty("content"))
                            object.content = message.content;
                        if (message.pageSize != null && message.hasOwnProperty("pageSize"))
                            object.pageSize = message.pageSize;
                        if (message.pageToken != null && message.hasOwnProperty("pageToken"))
                            object.pageToken = message.pageToken;
                        return object;
                    };
    
                    /**
                     * Converts this PagedExpandRequest to JSON.
                     * @function toJSON
                     * @memberof google.showcase.v1beta1.PagedExpandRequest
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    PagedExpandRequest.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    return PagedExpandRequest;
                })();
    
                v1beta1.PagedExpandResponse = (function() {
    
                    /**
                     * Properties of a PagedExpandResponse.
                     * @memberof google.showcase.v1beta1
                     * @interface IPagedExpandResponse
                     * @property {Array.<google.showcase.v1beta1.IEchoResponse>|null} [responses] PagedExpandResponse responses
                     * @property {string|null} [nextPageToken] PagedExpandResponse nextPageToken
                     */
    
                    /**
                     * Constructs a new PagedExpandResponse.
                     * @memberof google.showcase.v1beta1
                     * @classdesc Represents a PagedExpandResponse.
                     * @implements IPagedExpandResponse
                     * @constructor
                     * @param {google.showcase.v1beta1.IPagedExpandResponse=} [properties] Properties to set
                     */
                    function PagedExpandResponse(properties) {
                        this.responses = [];
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * PagedExpandResponse responses.
                     * @member {Array.<google.showcase.v1beta1.IEchoResponse>} responses
                     * @memberof google.showcase.v1beta1.PagedExpandResponse
                     * @instance
                     */
                    PagedExpandResponse.prototype.responses = $util.emptyArray;
    
                    /**
                     * PagedExpandResponse nextPageToken.
                     * @member {string} nextPageToken
                     * @memberof google.showcase.v1beta1.PagedExpandResponse
                     * @instance
                     */
                    PagedExpandResponse.prototype.nextPageToken = "";
    
                    /**
                     * Creates a new PagedExpandResponse instance using the specified properties.
                     * @function create
                     * @memberof google.showcase.v1beta1.PagedExpandResponse
                     * @static
                     * @param {google.showcase.v1beta1.IPagedExpandResponse=} [properties] Properties to set
                     * @returns {google.showcase.v1beta1.PagedExpandResponse} PagedExpandResponse instance
                     */
                    PagedExpandResponse.create = function create(properties) {
                        return new PagedExpandResponse(properties);
                    };
    
                    /**
                     * Encodes the specified PagedExpandResponse message. Does not implicitly {@link google.showcase.v1beta1.PagedExpandResponse.verify|verify} messages.
                     * @function encode
                     * @memberof google.showcase.v1beta1.PagedExpandResponse
                     * @static
                     * @param {google.showcase.v1beta1.IPagedExpandResponse} message PagedExpandResponse message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    PagedExpandResponse.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.responses != null && message.responses.length)
                            for (var i = 0; i < message.responses.length; ++i)
                                $root.google.showcase.v1beta1.EchoResponse.encode(message.responses[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                        if (message.nextPageToken != null && Object.hasOwnProperty.call(message, "nextPageToken"))
                            writer.uint32(/* id 2, wireType 2 =*/18).string(message.nextPageToken);
                        return writer;
                    };
    
                    /**
                     * Encodes the specified PagedExpandResponse message, length delimited. Does not implicitly {@link google.showcase.v1beta1.PagedExpandResponse.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof google.showcase.v1beta1.PagedExpandResponse
                     * @static
                     * @param {google.showcase.v1beta1.IPagedExpandResponse} message PagedExpandResponse message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    PagedExpandResponse.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a PagedExpandResponse message from the specified reader or buffer.
                     * @function decode
                     * @memberof google.showcase.v1beta1.PagedExpandResponse
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {google.showcase.v1beta1.PagedExpandResponse} PagedExpandResponse
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    PagedExpandResponse.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.showcase.v1beta1.PagedExpandResponse();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                if (!(message.responses && message.responses.length))
                                    message.responses = [];
                                message.responses.push($root.google.showcase.v1beta1.EchoResponse.decode(reader, reader.uint32()));
                                break;
                            case 2:
                                message.nextPageToken = reader.string();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a PagedExpandResponse message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof google.showcase.v1beta1.PagedExpandResponse
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {google.showcase.v1beta1.PagedExpandResponse} PagedExpandResponse
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    PagedExpandResponse.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a PagedExpandResponse message.
                     * @function verify
                     * @memberof google.showcase.v1beta1.PagedExpandResponse
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    PagedExpandResponse.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.responses != null && message.hasOwnProperty("responses")) {
                            if (!Array.isArray(message.responses))
                                return "responses: array expected";
                            for (var i = 0; i < message.responses.length; ++i) {
                                var error = $root.google.showcase.v1beta1.EchoResponse.verify(message.responses[i]);
                                if (error)
                                    return "responses." + error;
                            }
                        }
                        if (message.nextPageToken != null && message.hasOwnProperty("nextPageToken"))
                            if (!$util.isString(message.nextPageToken))
                                return "nextPageToken: string expected";
                        return null;
                    };
    
                    /**
                     * Creates a PagedExpandResponse message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof google.showcase.v1beta1.PagedExpandResponse
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {google.showcase.v1beta1.PagedExpandResponse} PagedExpandResponse
                     */
                    PagedExpandResponse.fromObject = function fromObject(object) {
                        if (object instanceof $root.google.showcase.v1beta1.PagedExpandResponse)
                            return object;
                        var message = new $root.google.showcase.v1beta1.PagedExpandResponse();
                        if (object.responses) {
                            if (!Array.isArray(object.responses))
                                throw TypeError(".google.showcase.v1beta1.PagedExpandResponse.responses: array expected");
                            message.responses = [];
                            for (var i = 0; i < object.responses.length; ++i) {
                                if (typeof object.responses[i] !== "object")
                                    throw TypeError(".google.showcase.v1beta1.PagedExpandResponse.responses: object expected");
                                message.responses[i] = $root.google.showcase.v1beta1.EchoResponse.fromObject(object.responses[i]);
                            }
                        }
                        if (object.nextPageToken != null)
                            message.nextPageToken = String(object.nextPageToken);
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a PagedExpandResponse message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof google.showcase.v1beta1.PagedExpandResponse
                     * @static
                     * @param {google.showcase.v1beta1.PagedExpandResponse} message PagedExpandResponse
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    PagedExpandResponse.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.arrays || options.defaults)
                            object.responses = [];
                        if (options.defaults)
                            object.nextPageToken = "";
                        if (message.responses && message.responses.length) {
                            object.responses = [];
                            for (var j = 0; j < message.responses.length; ++j)
                                object.responses[j] = $root.google.showcase.v1beta1.EchoResponse.toObject(message.responses[j], options);
                        }
                        if (message.nextPageToken != null && message.hasOwnProperty("nextPageToken"))
                            object.nextPageToken = message.nextPageToken;
                        return object;
                    };
    
                    /**
                     * Converts this PagedExpandResponse to JSON.
                     * @function toJSON
                     * @memberof google.showcase.v1beta1.PagedExpandResponse
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    PagedExpandResponse.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    return PagedExpandResponse;
                })();
    
                v1beta1.WaitRequest = (function() {
    
                    /**
                     * Properties of a WaitRequest.
                     * @memberof google.showcase.v1beta1
                     * @interface IWaitRequest
                     * @property {google.protobuf.ITimestamp|null} [endTime] WaitRequest endTime
                     * @property {google.protobuf.IDuration|null} [ttl] WaitRequest ttl
                     * @property {google.rpc.IStatus|null} [error] WaitRequest error
                     * @property {google.showcase.v1beta1.IWaitResponse|null} [success] WaitRequest success
                     */
    
                    /**
                     * Constructs a new WaitRequest.
                     * @memberof google.showcase.v1beta1
                     * @classdesc Represents a WaitRequest.
                     * @implements IWaitRequest
                     * @constructor
                     * @param {google.showcase.v1beta1.IWaitRequest=} [properties] Properties to set
                     */
                    function WaitRequest(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * WaitRequest endTime.
                     * @member {google.protobuf.ITimestamp|null|undefined} endTime
                     * @memberof google.showcase.v1beta1.WaitRequest
                     * @instance
                     */
                    WaitRequest.prototype.endTime = null;
    
                    /**
                     * WaitRequest ttl.
                     * @member {google.protobuf.IDuration|null|undefined} ttl
                     * @memberof google.showcase.v1beta1.WaitRequest
                     * @instance
                     */
                    WaitRequest.prototype.ttl = null;
    
                    /**
                     * WaitRequest error.
                     * @member {google.rpc.IStatus|null|undefined} error
                     * @memberof google.showcase.v1beta1.WaitRequest
                     * @instance
                     */
                    WaitRequest.prototype.error = null;
    
                    /**
                     * WaitRequest success.
                     * @member {google.showcase.v1beta1.IWaitResponse|null|undefined} success
                     * @memberof google.showcase.v1beta1.WaitRequest
                     * @instance
                     */
                    WaitRequest.prototype.success = null;
    
                    // OneOf field names bound to virtual getters and setters
                    var $oneOfFields;
    
                    /**
                     * WaitRequest end.
                     * @member {"endTime"|"ttl"|undefined} end
                     * @memberof google.showcase.v1beta1.WaitRequest
                     * @instance
                     */
                    Object.defineProperty(WaitRequest.prototype, "end", {
                        get: $util.oneOfGetter($oneOfFields = ["endTime", "ttl"]),
                        set: $util.oneOfSetter($oneOfFields)
                    });
    
                    /**
                     * WaitRequest response.
                     * @member {"error"|"success"|undefined} response
                     * @memberof google.showcase.v1beta1.WaitRequest
                     * @instance
                     */
                    Object.defineProperty(WaitRequest.prototype, "response", {
                        get: $util.oneOfGetter($oneOfFields = ["error", "success"]),
                        set: $util.oneOfSetter($oneOfFields)
                    });
    
                    /**
                     * Creates a new WaitRequest instance using the specified properties.
                     * @function create
                     * @memberof google.showcase.v1beta1.WaitRequest
                     * @static
                     * @param {google.showcase.v1beta1.IWaitRequest=} [properties] Properties to set
                     * @returns {google.showcase.v1beta1.WaitRequest} WaitRequest instance
                     */
                    WaitRequest.create = function create(properties) {
                        return new WaitRequest(properties);
                    };
    
                    /**
                     * Encodes the specified WaitRequest message. Does not implicitly {@link google.showcase.v1beta1.WaitRequest.verify|verify} messages.
                     * @function encode
                     * @memberof google.showcase.v1beta1.WaitRequest
                     * @static
                     * @param {google.showcase.v1beta1.IWaitRequest} message WaitRequest message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    WaitRequest.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.endTime != null && Object.hasOwnProperty.call(message, "endTime"))
                            $root.google.protobuf.Timestamp.encode(message.endTime, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                        if (message.error != null && Object.hasOwnProperty.call(message, "error"))
                            $root.google.rpc.Status.encode(message.error, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                        if (message.success != null && Object.hasOwnProperty.call(message, "success"))
                            $root.google.showcase.v1beta1.WaitResponse.encode(message.success, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                        if (message.ttl != null && Object.hasOwnProperty.call(message, "ttl"))
                            $root.google.protobuf.Duration.encode(message.ttl, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                        return writer;
                    };
    
                    /**
                     * Encodes the specified WaitRequest message, length delimited. Does not implicitly {@link google.showcase.v1beta1.WaitRequest.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof google.showcase.v1beta1.WaitRequest
                     * @static
                     * @param {google.showcase.v1beta1.IWaitRequest} message WaitRequest message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    WaitRequest.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a WaitRequest message from the specified reader or buffer.
                     * @function decode
                     * @memberof google.showcase.v1beta1.WaitRequest
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {google.showcase.v1beta1.WaitRequest} WaitRequest
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    WaitRequest.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.showcase.v1beta1.WaitRequest();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.endTime = $root.google.protobuf.Timestamp.decode(reader, reader.uint32());
                                break;
                            case 4:
                                message.ttl = $root.google.protobuf.Duration.decode(reader, reader.uint32());
                                break;
                            case 2:
                                message.error = $root.google.rpc.Status.decode(reader, reader.uint32());
                                break;
                            case 3:
                                message.success = $root.google.showcase.v1beta1.WaitResponse.decode(reader, reader.uint32());
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a WaitRequest message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof google.showcase.v1beta1.WaitRequest
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {google.showcase.v1beta1.WaitRequest} WaitRequest
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    WaitRequest.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a WaitRequest message.
                     * @function verify
                     * @memberof google.showcase.v1beta1.WaitRequest
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    WaitRequest.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        var properties = {};
                        if (message.endTime != null && message.hasOwnProperty("endTime")) {
                            properties.end = 1;
                            {
                                var error = $root.google.protobuf.Timestamp.verify(message.endTime);
                                if (error)
                                    return "endTime." + error;
                            }
                        }
                        if (message.ttl != null && message.hasOwnProperty("ttl")) {
                            if (properties.end === 1)
                                return "end: multiple values";
                            properties.end = 1;
                            {
                                var error = $root.google.protobuf.Duration.verify(message.ttl);
                                if (error)
                                    return "ttl." + error;
                            }
                        }
                        if (message.error != null && message.hasOwnProperty("error")) {
                            properties.response = 1;
                            {
                                var error = $root.google.rpc.Status.verify(message.error);
                                if (error)
                                    return "error." + error;
                            }
                        }
                        if (message.success != null && message.hasOwnProperty("success")) {
                            if (properties.response === 1)
                                return "response: multiple values";
                            properties.response = 1;
                            {
                                var error = $root.google.showcase.v1beta1.WaitResponse.verify(message.success);
                                if (error)
                                    return "success." + error;
                            }
                        }
                        return null;
                    };
    
                    /**
                     * Creates a WaitRequest message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof google.showcase.v1beta1.WaitRequest
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {google.showcase.v1beta1.WaitRequest} WaitRequest
                     */
                    WaitRequest.fromObject = function fromObject(object) {
                        if (object instanceof $root.google.showcase.v1beta1.WaitRequest)
                            return object;
                        var message = new $root.google.showcase.v1beta1.WaitRequest();
                        if (object.endTime != null) {
                            if (typeof object.endTime !== "object")
                                throw TypeError(".google.showcase.v1beta1.WaitRequest.endTime: object expected");
                            message.endTime = $root.google.protobuf.Timestamp.fromObject(object.endTime);
                        }
                        if (object.ttl != null) {
                            if (typeof object.ttl !== "object")
                                throw TypeError(".google.showcase.v1beta1.WaitRequest.ttl: object expected");
                            message.ttl = $root.google.protobuf.Duration.fromObject(object.ttl);
                        }
                        if (object.error != null) {
                            if (typeof object.error !== "object")
                                throw TypeError(".google.showcase.v1beta1.WaitRequest.error: object expected");
                            message.error = $root.google.rpc.Status.fromObject(object.error);
                        }
                        if (object.success != null) {
                            if (typeof object.success !== "object")
                                throw TypeError(".google.showcase.v1beta1.WaitRequest.success: object expected");
                            message.success = $root.google.showcase.v1beta1.WaitResponse.fromObject(object.success);
                        }
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a WaitRequest message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof google.showcase.v1beta1.WaitRequest
                     * @static
                     * @param {google.showcase.v1beta1.WaitRequest} message WaitRequest
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    WaitRequest.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (message.endTime != null && message.hasOwnProperty("endTime")) {
                            object.endTime = $root.google.protobuf.Timestamp.toObject(message.endTime, options);
                            if (options.oneofs)
                                object.end = "endTime";
                        }
                        if (message.error != null && message.hasOwnProperty("error")) {
                            object.error = $root.google.rpc.Status.toObject(message.error, options);
                            if (options.oneofs)
                                object.response = "error";
                        }
                        if (message.success != null && message.hasOwnProperty("success")) {
                            object.success = $root.google.showcase.v1beta1.WaitResponse.toObject(message.success, options);
                            if (options.oneofs)
                                object.response = "success";
                        }
                        if (message.ttl != null && message.hasOwnProperty("ttl")) {
                            object.ttl = $root.google.protobuf.Duration.toObject(message.ttl, options);
                            if (options.oneofs)
                                object.end = "ttl";
                        }
                        return object;
                    };
    
                    /**
                     * Converts this WaitRequest to JSON.
                     * @function toJSON
                     * @memberof google.showcase.v1beta1.WaitRequest
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    WaitRequest.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    return WaitRequest;
                })();
    
                v1beta1.WaitResponse = (function() {
    
                    /**
                     * Properties of a WaitResponse.
                     * @memberof google.showcase.v1beta1
                     * @interface IWaitResponse
                     * @property {string|null} [content] WaitResponse content
                     */
    
                    /**
                     * Constructs a new WaitResponse.
                     * @memberof google.showcase.v1beta1
                     * @classdesc Represents a WaitResponse.
                     * @implements IWaitResponse
                     * @constructor
                     * @param {google.showcase.v1beta1.IWaitResponse=} [properties] Properties to set
                     */
                    function WaitResponse(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * WaitResponse content.
                     * @member {string} content
                     * @memberof google.showcase.v1beta1.WaitResponse
                     * @instance
                     */
                    WaitResponse.prototype.content = "";
    
                    /**
                     * Creates a new WaitResponse instance using the specified properties.
                     * @function create
                     * @memberof google.showcase.v1beta1.WaitResponse
                     * @static
                     * @param {google.showcase.v1beta1.IWaitResponse=} [properties] Properties to set
                     * @returns {google.showcase.v1beta1.WaitResponse} WaitResponse instance
                     */
                    WaitResponse.create = function create(properties) {
                        return new WaitResponse(properties);
                    };
    
                    /**
                     * Encodes the specified WaitResponse message. Does not implicitly {@link google.showcase.v1beta1.WaitResponse.verify|verify} messages.
                     * @function encode
                     * @memberof google.showcase.v1beta1.WaitResponse
                     * @static
                     * @param {google.showcase.v1beta1.IWaitResponse} message WaitResponse message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    WaitResponse.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.content != null && Object.hasOwnProperty.call(message, "content"))
                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.content);
                        return writer;
                    };
    
                    /**
                     * Encodes the specified WaitResponse message, length delimited. Does not implicitly {@link google.showcase.v1beta1.WaitResponse.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof google.showcase.v1beta1.WaitResponse
                     * @static
                     * @param {google.showcase.v1beta1.IWaitResponse} message WaitResponse message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    WaitResponse.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a WaitResponse message from the specified reader or buffer.
                     * @function decode
                     * @memberof google.showcase.v1beta1.WaitResponse
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {google.showcase.v1beta1.WaitResponse} WaitResponse
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    WaitResponse.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.showcase.v1beta1.WaitResponse();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.content = reader.string();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a WaitResponse message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof google.showcase.v1beta1.WaitResponse
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {google.showcase.v1beta1.WaitResponse} WaitResponse
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    WaitResponse.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a WaitResponse message.
                     * @function verify
                     * @memberof google.showcase.v1beta1.WaitResponse
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    WaitResponse.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.content != null && message.hasOwnProperty("content"))
                            if (!$util.isString(message.content))
                                return "content: string expected";
                        return null;
                    };
    
                    /**
                     * Creates a WaitResponse message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof google.showcase.v1beta1.WaitResponse
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {google.showcase.v1beta1.WaitResponse} WaitResponse
                     */
                    WaitResponse.fromObject = function fromObject(object) {
                        if (object instanceof $root.google.showcase.v1beta1.WaitResponse)
                            return object;
                        var message = new $root.google.showcase.v1beta1.WaitResponse();
                        if (object.content != null)
                            message.content = String(object.content);
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a WaitResponse message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof google.showcase.v1beta1.WaitResponse
                     * @static
                     * @param {google.showcase.v1beta1.WaitResponse} message WaitResponse
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    WaitResponse.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults)
                            object.content = "";
                        if (message.content != null && message.hasOwnProperty("content"))
                            object.content = message.content;
                        return object;
                    };
    
                    /**
                     * Converts this WaitResponse to JSON.
                     * @function toJSON
                     * @memberof google.showcase.v1beta1.WaitResponse
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    WaitResponse.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    return WaitResponse;
                })();
    
                v1beta1.WaitMetadata = (function() {
    
                    /**
                     * Properties of a WaitMetadata.
                     * @memberof google.showcase.v1beta1
                     * @interface IWaitMetadata
                     * @property {google.protobuf.ITimestamp|null} [endTime] WaitMetadata endTime
                     */
    
                    /**
                     * Constructs a new WaitMetadata.
                     * @memberof google.showcase.v1beta1
                     * @classdesc Represents a WaitMetadata.
                     * @implements IWaitMetadata
                     * @constructor
                     * @param {google.showcase.v1beta1.IWaitMetadata=} [properties] Properties to set
                     */
                    function WaitMetadata(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * WaitMetadata endTime.
                     * @member {google.protobuf.ITimestamp|null|undefined} endTime
                     * @memberof google.showcase.v1beta1.WaitMetadata
                     * @instance
                     */
                    WaitMetadata.prototype.endTime = null;
    
                    /**
                     * Creates a new WaitMetadata instance using the specified properties.
                     * @function create
                     * @memberof google.showcase.v1beta1.WaitMetadata
                     * @static
                     * @param {google.showcase.v1beta1.IWaitMetadata=} [properties] Properties to set
                     * @returns {google.showcase.v1beta1.WaitMetadata} WaitMetadata instance
                     */
                    WaitMetadata.create = function create(properties) {
                        return new WaitMetadata(properties);
                    };
    
                    /**
                     * Encodes the specified WaitMetadata message. Does not implicitly {@link google.showcase.v1beta1.WaitMetadata.verify|verify} messages.
                     * @function encode
                     * @memberof google.showcase.v1beta1.WaitMetadata
                     * @static
                     * @param {google.showcase.v1beta1.IWaitMetadata} message WaitMetadata message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    WaitMetadata.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.endTime != null && Object.hasOwnProperty.call(message, "endTime"))
                            $root.google.protobuf.Timestamp.encode(message.endTime, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                        return writer;
                    };
    
                    /**
                     * Encodes the specified WaitMetadata message, length delimited. Does not implicitly {@link google.showcase.v1beta1.WaitMetadata.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof google.showcase.v1beta1.WaitMetadata
                     * @static
                     * @param {google.showcase.v1beta1.IWaitMetadata} message WaitMetadata message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    WaitMetadata.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a WaitMetadata message from the specified reader or buffer.
                     * @function decode
                     * @memberof google.showcase.v1beta1.WaitMetadata
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {google.showcase.v1beta1.WaitMetadata} WaitMetadata
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    WaitMetadata.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.showcase.v1beta1.WaitMetadata();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.endTime = $root.google.protobuf.Timestamp.decode(reader, reader.uint32());
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a WaitMetadata message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof google.showcase.v1beta1.WaitMetadata
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {google.showcase.v1beta1.WaitMetadata} WaitMetadata
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    WaitMetadata.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a WaitMetadata message.
                     * @function verify
                     * @memberof google.showcase.v1beta1.WaitMetadata
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    WaitMetadata.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.endTime != null && message.hasOwnProperty("endTime")) {
                            var error = $root.google.protobuf.Timestamp.verify(message.endTime);
                            if (error)
                                return "endTime." + error;
                        }
                        return null;
                    };
    
                    /**
                     * Creates a WaitMetadata message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof google.showcase.v1beta1.WaitMetadata
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {google.showcase.v1beta1.WaitMetadata} WaitMetadata
                     */
                    WaitMetadata.fromObject = function fromObject(object) {
                        if (object instanceof $root.google.showcase.v1beta1.WaitMetadata)
                            return object;
                        var message = new $root.google.showcase.v1beta1.WaitMetadata();
                        if (object.endTime != null) {
                            if (typeof object.endTime !== "object")
                                throw TypeError(".google.showcase.v1beta1.WaitMetadata.endTime: object expected");
                            message.endTime = $root.google.protobuf.Timestamp.fromObject(object.endTime);
                        }
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a WaitMetadata message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof google.showcase.v1beta1.WaitMetadata
                     * @static
                     * @param {google.showcase.v1beta1.WaitMetadata} message WaitMetadata
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    WaitMetadata.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults)
                            object.endTime = null;
                        if (message.endTime != null && message.hasOwnProperty("endTime"))
                            object.endTime = $root.google.protobuf.Timestamp.toObject(message.endTime, options);
                        return object;
                    };
    
                    /**
                     * Converts this WaitMetadata to JSON.
                     * @function toJSON
                     * @memberof google.showcase.v1beta1.WaitMetadata
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    WaitMetadata.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    return WaitMetadata;
                })();
    
                v1beta1.BlockRequest = (function() {
    
                    /**
                     * Properties of a BlockRequest.
                     * @memberof google.showcase.v1beta1
                     * @interface IBlockRequest
                     * @property {google.protobuf.IDuration|null} [responseDelay] BlockRequest responseDelay
                     * @property {google.rpc.IStatus|null} [error] BlockRequest error
                     * @property {google.showcase.v1beta1.IBlockResponse|null} [success] BlockRequest success
                     */
    
                    /**
                     * Constructs a new BlockRequest.
                     * @memberof google.showcase.v1beta1
                     * @classdesc Represents a BlockRequest.
                     * @implements IBlockRequest
                     * @constructor
                     * @param {google.showcase.v1beta1.IBlockRequest=} [properties] Properties to set
                     */
                    function BlockRequest(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * BlockRequest responseDelay.
                     * @member {google.protobuf.IDuration|null|undefined} responseDelay
                     * @memberof google.showcase.v1beta1.BlockRequest
                     * @instance
                     */
                    BlockRequest.prototype.responseDelay = null;
    
                    /**
                     * BlockRequest error.
                     * @member {google.rpc.IStatus|null|undefined} error
                     * @memberof google.showcase.v1beta1.BlockRequest
                     * @instance
                     */
                    BlockRequest.prototype.error = null;
    
                    /**
                     * BlockRequest success.
                     * @member {google.showcase.v1beta1.IBlockResponse|null|undefined} success
                     * @memberof google.showcase.v1beta1.BlockRequest
                     * @instance
                     */
                    BlockRequest.prototype.success = null;
    
                    // OneOf field names bound to virtual getters and setters
                    var $oneOfFields;
    
                    /**
                     * BlockRequest response.
                     * @member {"error"|"success"|undefined} response
                     * @memberof google.showcase.v1beta1.BlockRequest
                     * @instance
                     */
                    Object.defineProperty(BlockRequest.prototype, "response", {
                        get: $util.oneOfGetter($oneOfFields = ["error", "success"]),
                        set: $util.oneOfSetter($oneOfFields)
                    });
    
                    /**
                     * Creates a new BlockRequest instance using the specified properties.
                     * @function create
                     * @memberof google.showcase.v1beta1.BlockRequest
                     * @static
                     * @param {google.showcase.v1beta1.IBlockRequest=} [properties] Properties to set
                     * @returns {google.showcase.v1beta1.BlockRequest} BlockRequest instance
                     */
                    BlockRequest.create = function create(properties) {
                        return new BlockRequest(properties);
                    };
    
                    /**
                     * Encodes the specified BlockRequest message. Does not implicitly {@link google.showcase.v1beta1.BlockRequest.verify|verify} messages.
                     * @function encode
                     * @memberof google.showcase.v1beta1.BlockRequest
                     * @static
                     * @param {google.showcase.v1beta1.IBlockRequest} message BlockRequest message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    BlockRequest.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.responseDelay != null && Object.hasOwnProperty.call(message, "responseDelay"))
                            $root.google.protobuf.Duration.encode(message.responseDelay, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                        if (message.error != null && Object.hasOwnProperty.call(message, "error"))
                            $root.google.rpc.Status.encode(message.error, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                        if (message.success != null && Object.hasOwnProperty.call(message, "success"))
                            $root.google.showcase.v1beta1.BlockResponse.encode(message.success, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                        return writer;
                    };
    
                    /**
                     * Encodes the specified BlockRequest message, length delimited. Does not implicitly {@link google.showcase.v1beta1.BlockRequest.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof google.showcase.v1beta1.BlockRequest
                     * @static
                     * @param {google.showcase.v1beta1.IBlockRequest} message BlockRequest message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    BlockRequest.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a BlockRequest message from the specified reader or buffer.
                     * @function decode
                     * @memberof google.showcase.v1beta1.BlockRequest
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {google.showcase.v1beta1.BlockRequest} BlockRequest
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    BlockRequest.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.showcase.v1beta1.BlockRequest();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.responseDelay = $root.google.protobuf.Duration.decode(reader, reader.uint32());
                                break;
                            case 2:
                                message.error = $root.google.rpc.Status.decode(reader, reader.uint32());
                                break;
                            case 3:
                                message.success = $root.google.showcase.v1beta1.BlockResponse.decode(reader, reader.uint32());
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a BlockRequest message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof google.showcase.v1beta1.BlockRequest
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {google.showcase.v1beta1.BlockRequest} BlockRequest
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    BlockRequest.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a BlockRequest message.
                     * @function verify
                     * @memberof google.showcase.v1beta1.BlockRequest
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    BlockRequest.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        var properties = {};
                        if (message.responseDelay != null && message.hasOwnProperty("responseDelay")) {
                            var error = $root.google.protobuf.Duration.verify(message.responseDelay);
                            if (error)
                                return "responseDelay." + error;
                        }
                        if (message.error != null && message.hasOwnProperty("error")) {
                            properties.response = 1;
                            {
                                var error = $root.google.rpc.Status.verify(message.error);
                                if (error)
                                    return "error." + error;
                            }
                        }
                        if (message.success != null && message.hasOwnProperty("success")) {
                            if (properties.response === 1)
                                return "response: multiple values";
                            properties.response = 1;
                            {
                                var error = $root.google.showcase.v1beta1.BlockResponse.verify(message.success);
                                if (error)
                                    return "success." + error;
                            }
                        }
                        return null;
                    };
    
                    /**
                     * Creates a BlockRequest message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof google.showcase.v1beta1.BlockRequest
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {google.showcase.v1beta1.BlockRequest} BlockRequest
                     */
                    BlockRequest.fromObject = function fromObject(object) {
                        if (object instanceof $root.google.showcase.v1beta1.BlockRequest)
                            return object;
                        var message = new $root.google.showcase.v1beta1.BlockRequest();
                        if (object.responseDelay != null) {
                            if (typeof object.responseDelay !== "object")
                                throw TypeError(".google.showcase.v1beta1.BlockRequest.responseDelay: object expected");
                            message.responseDelay = $root.google.protobuf.Duration.fromObject(object.responseDelay);
                        }
                        if (object.error != null) {
                            if (typeof object.error !== "object")
                                throw TypeError(".google.showcase.v1beta1.BlockRequest.error: object expected");
                            message.error = $root.google.rpc.Status.fromObject(object.error);
                        }
                        if (object.success != null) {
                            if (typeof object.success !== "object")
                                throw TypeError(".google.showcase.v1beta1.BlockRequest.success: object expected");
                            message.success = $root.google.showcase.v1beta1.BlockResponse.fromObject(object.success);
                        }
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a BlockRequest message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof google.showcase.v1beta1.BlockRequest
                     * @static
                     * @param {google.showcase.v1beta1.BlockRequest} message BlockRequest
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    BlockRequest.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults)
                            object.responseDelay = null;
                        if (message.responseDelay != null && message.hasOwnProperty("responseDelay"))
                            object.responseDelay = $root.google.protobuf.Duration.toObject(message.responseDelay, options);
                        if (message.error != null && message.hasOwnProperty("error")) {
                            object.error = $root.google.rpc.Status.toObject(message.error, options);
                            if (options.oneofs)
                                object.response = "error";
                        }
                        if (message.success != null && message.hasOwnProperty("success")) {
                            object.success = $root.google.showcase.v1beta1.BlockResponse.toObject(message.success, options);
                            if (options.oneofs)
                                object.response = "success";
                        }
                        return object;
                    };
    
                    /**
                     * Converts this BlockRequest to JSON.
                     * @function toJSON
                     * @memberof google.showcase.v1beta1.BlockRequest
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    BlockRequest.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    return BlockRequest;
                })();
    
                v1beta1.BlockResponse = (function() {
    
                    /**
                     * Properties of a BlockResponse.
                     * @memberof google.showcase.v1beta1
                     * @interface IBlockResponse
                     * @property {string|null} [content] BlockResponse content
                     */
    
                    /**
                     * Constructs a new BlockResponse.
                     * @memberof google.showcase.v1beta1
                     * @classdesc Represents a BlockResponse.
                     * @implements IBlockResponse
                     * @constructor
                     * @param {google.showcase.v1beta1.IBlockResponse=} [properties] Properties to set
                     */
                    function BlockResponse(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * BlockResponse content.
                     * @member {string} content
                     * @memberof google.showcase.v1beta1.BlockResponse
                     * @instance
                     */
                    BlockResponse.prototype.content = "";
    
                    /**
                     * Creates a new BlockResponse instance using the specified properties.
                     * @function create
                     * @memberof google.showcase.v1beta1.BlockResponse
                     * @static
                     * @param {google.showcase.v1beta1.IBlockResponse=} [properties] Properties to set
                     * @returns {google.showcase.v1beta1.BlockResponse} BlockResponse instance
                     */
                    BlockResponse.create = function create(properties) {
                        return new BlockResponse(properties);
                    };
    
                    /**
                     * Encodes the specified BlockResponse message. Does not implicitly {@link google.showcase.v1beta1.BlockResponse.verify|verify} messages.
                     * @function encode
                     * @memberof google.showcase.v1beta1.BlockResponse
                     * @static
                     * @param {google.showcase.v1beta1.IBlockResponse} message BlockResponse message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    BlockResponse.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.content != null && Object.hasOwnProperty.call(message, "content"))
                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.content);
                        return writer;
                    };
    
                    /**
                     * Encodes the specified BlockResponse message, length delimited. Does not implicitly {@link google.showcase.v1beta1.BlockResponse.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof google.showcase.v1beta1.BlockResponse
                     * @static
                     * @param {google.showcase.v1beta1.IBlockResponse} message BlockResponse message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    BlockResponse.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a BlockResponse message from the specified reader or buffer.
                     * @function decode
                     * @memberof google.showcase.v1beta1.BlockResponse
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {google.showcase.v1beta1.BlockResponse} BlockResponse
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    BlockResponse.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.showcase.v1beta1.BlockResponse();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.content = reader.string();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a BlockResponse message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof google.showcase.v1beta1.BlockResponse
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {google.showcase.v1beta1.BlockResponse} BlockResponse
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    BlockResponse.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a BlockResponse message.
                     * @function verify
                     * @memberof google.showcase.v1beta1.BlockResponse
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    BlockResponse.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.content != null && message.hasOwnProperty("content"))
                            if (!$util.isString(message.content))
                                return "content: string expected";
                        return null;
                    };
    
                    /**
                     * Creates a BlockResponse message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof google.showcase.v1beta1.BlockResponse
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {google.showcase.v1beta1.BlockResponse} BlockResponse
                     */
                    BlockResponse.fromObject = function fromObject(object) {
                        if (object instanceof $root.google.showcase.v1beta1.BlockResponse)
                            return object;
                        var message = new $root.google.showcase.v1beta1.BlockResponse();
                        if (object.content != null)
                            message.content = String(object.content);
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a BlockResponse message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof google.showcase.v1beta1.BlockResponse
                     * @static
                     * @param {google.showcase.v1beta1.BlockResponse} message BlockResponse
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    BlockResponse.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults)
                            object.content = "";
                        if (message.content != null && message.hasOwnProperty("content"))
                            object.content = message.content;
                        return object;
                    };
    
                    /**
                     * Converts this BlockResponse to JSON.
                     * @function toJSON
                     * @memberof google.showcase.v1beta1.BlockResponse
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    BlockResponse.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    return BlockResponse;
                })();
    
                v1beta1.Identity = (function() {
    
                    /**
                     * Constructs a new Identity service.
                     * @memberof google.showcase.v1beta1
                     * @classdesc Represents an Identity
                     * @extends $protobuf.rpc.Service
                     * @constructor
                     * @param {$protobuf.RPCImpl} rpcImpl RPC implementation
                     * @param {boolean} [requestDelimited=false] Whether requests are length-delimited
                     * @param {boolean} [responseDelimited=false] Whether responses are length-delimited
                     */
                    function Identity(rpcImpl, requestDelimited, responseDelimited) {
                        $protobuf.rpc.Service.call(this, rpcImpl, requestDelimited, responseDelimited);
                    }
    
                    (Identity.prototype = Object.create($protobuf.rpc.Service.prototype)).constructor = Identity;
    
                    /**
                     * Creates new Identity service using the specified rpc implementation.
                     * @function create
                     * @memberof google.showcase.v1beta1.Identity
                     * @static
                     * @param {$protobuf.RPCImpl} rpcImpl RPC implementation
                     * @param {boolean} [requestDelimited=false] Whether requests are length-delimited
                     * @param {boolean} [responseDelimited=false] Whether responses are length-delimited
                     * @returns {Identity} RPC service. Useful where requests and/or responses are streamed.
                     */
                    Identity.create = function create(rpcImpl, requestDelimited, responseDelimited) {
                        return new this(rpcImpl, requestDelimited, responseDelimited);
                    };
    
                    /**
                     * Callback as used by {@link google.showcase.v1beta1.Identity#createUser}.
                     * @memberof google.showcase.v1beta1.Identity
                     * @typedef CreateUserCallback
                     * @type {function}
                     * @param {Error|null} error Error, if any
                     * @param {google.showcase.v1beta1.User} [response] User
                     */
    
                    /**
                     * Calls CreateUser.
                     * @function createUser
                     * @memberof google.showcase.v1beta1.Identity
                     * @instance
                     * @param {google.showcase.v1beta1.ICreateUserRequest} request CreateUserRequest message or plain object
                     * @param {google.showcase.v1beta1.Identity.CreateUserCallback} callback Node-style callback called with the error, if any, and User
                     * @returns {undefined}
                     * @variation 1
                     */
                    Object.defineProperty(Identity.prototype.createUser = function createUser(request, callback) {
                        return this.rpcCall(createUser, $root.google.showcase.v1beta1.CreateUserRequest, $root.google.showcase.v1beta1.User, request, callback);
                    }, "name", { value: "CreateUser" });
    
                    /**
                     * Calls CreateUser.
                     * @function createUser
                     * @memberof google.showcase.v1beta1.Identity
                     * @instance
                     * @param {google.showcase.v1beta1.ICreateUserRequest} request CreateUserRequest message or plain object
                     * @returns {Promise<google.showcase.v1beta1.User>} Promise
                     * @variation 2
                     */
    
                    /**
                     * Callback as used by {@link google.showcase.v1beta1.Identity#getUser}.
                     * @memberof google.showcase.v1beta1.Identity
                     * @typedef GetUserCallback
                     * @type {function}
                     * @param {Error|null} error Error, if any
                     * @param {google.showcase.v1beta1.User} [response] User
                     */
    
                    /**
                     * Calls GetUser.
                     * @function getUser
                     * @memberof google.showcase.v1beta1.Identity
                     * @instance
                     * @param {google.showcase.v1beta1.IGetUserRequest} request GetUserRequest message or plain object
                     * @param {google.showcase.v1beta1.Identity.GetUserCallback} callback Node-style callback called with the error, if any, and User
                     * @returns {undefined}
                     * @variation 1
                     */
                    Object.defineProperty(Identity.prototype.getUser = function getUser(request, callback) {
                        return this.rpcCall(getUser, $root.google.showcase.v1beta1.GetUserRequest, $root.google.showcase.v1beta1.User, request, callback);
                    }, "name", { value: "GetUser" });
    
                    /**
                     * Calls GetUser.
                     * @function getUser
                     * @memberof google.showcase.v1beta1.Identity
                     * @instance
                     * @param {google.showcase.v1beta1.IGetUserRequest} request GetUserRequest message or plain object
                     * @returns {Promise<google.showcase.v1beta1.User>} Promise
                     * @variation 2
                     */
    
                    /**
                     * Callback as used by {@link google.showcase.v1beta1.Identity#updateUser}.
                     * @memberof google.showcase.v1beta1.Identity
                     * @typedef UpdateUserCallback
                     * @type {function}
                     * @param {Error|null} error Error, if any
                     * @param {google.showcase.v1beta1.User} [response] User
                     */
    
                    /**
                     * Calls UpdateUser.
                     * @function updateUser
                     * @memberof google.showcase.v1beta1.Identity
                     * @instance
                     * @param {google.showcase.v1beta1.IUpdateUserRequest} request UpdateUserRequest message or plain object
                     * @param {google.showcase.v1beta1.Identity.UpdateUserCallback} callback Node-style callback called with the error, if any, and User
                     * @returns {undefined}
                     * @variation 1
                     */
                    Object.defineProperty(Identity.prototype.updateUser = function updateUser(request, callback) {
                        return this.rpcCall(updateUser, $root.google.showcase.v1beta1.UpdateUserRequest, $root.google.showcase.v1beta1.User, request, callback);
                    }, "name", { value: "UpdateUser" });
    
                    /**
                     * Calls UpdateUser.
                     * @function updateUser
                     * @memberof google.showcase.v1beta1.Identity
                     * @instance
                     * @param {google.showcase.v1beta1.IUpdateUserRequest} request UpdateUserRequest message or plain object
                     * @returns {Promise<google.showcase.v1beta1.User>} Promise
                     * @variation 2
                     */
    
                    /**
                     * Callback as used by {@link google.showcase.v1beta1.Identity#deleteUser}.
                     * @memberof google.showcase.v1beta1.Identity
                     * @typedef DeleteUserCallback
                     * @type {function}
                     * @param {Error|null} error Error, if any
                     * @param {google.protobuf.Empty} [response] Empty
                     */
    
                    /**
                     * Calls DeleteUser.
                     * @function deleteUser
                     * @memberof google.showcase.v1beta1.Identity
                     * @instance
                     * @param {google.showcase.v1beta1.IDeleteUserRequest} request DeleteUserRequest message or plain object
                     * @param {google.showcase.v1beta1.Identity.DeleteUserCallback} callback Node-style callback called with the error, if any, and Empty
                     * @returns {undefined}
                     * @variation 1
                     */
                    Object.defineProperty(Identity.prototype.deleteUser = function deleteUser(request, callback) {
                        return this.rpcCall(deleteUser, $root.google.showcase.v1beta1.DeleteUserRequest, $root.google.protobuf.Empty, request, callback);
                    }, "name", { value: "DeleteUser" });
    
                    /**
                     * Calls DeleteUser.
                     * @function deleteUser
                     * @memberof google.showcase.v1beta1.Identity
                     * @instance
                     * @param {google.showcase.v1beta1.IDeleteUserRequest} request DeleteUserRequest message or plain object
                     * @returns {Promise<google.protobuf.Empty>} Promise
                     * @variation 2
                     */
    
                    /**
                     * Callback as used by {@link google.showcase.v1beta1.Identity#listUsers}.
                     * @memberof google.showcase.v1beta1.Identity
                     * @typedef ListUsersCallback
                     * @type {function}
                     * @param {Error|null} error Error, if any
                     * @param {google.showcase.v1beta1.ListUsersResponse} [response] ListUsersResponse
                     */
    
                    /**
                     * Calls ListUsers.
                     * @function listUsers
                     * @memberof google.showcase.v1beta1.Identity
                     * @instance
                     * @param {google.showcase.v1beta1.IListUsersRequest} request ListUsersRequest message or plain object
                     * @param {google.showcase.v1beta1.Identity.ListUsersCallback} callback Node-style callback called with the error, if any, and ListUsersResponse
                     * @returns {undefined}
                     * @variation 1
                     */
                    Object.defineProperty(Identity.prototype.listUsers = function listUsers(request, callback) {
                        return this.rpcCall(listUsers, $root.google.showcase.v1beta1.ListUsersRequest, $root.google.showcase.v1beta1.ListUsersResponse, request, callback);
                    }, "name", { value: "ListUsers" });
    
                    /**
                     * Calls ListUsers.
                     * @function listUsers
                     * @memberof google.showcase.v1beta1.Identity
                     * @instance
                     * @param {google.showcase.v1beta1.IListUsersRequest} request ListUsersRequest message or plain object
                     * @returns {Promise<google.showcase.v1beta1.ListUsersResponse>} Promise
                     * @variation 2
                     */
    
                    return Identity;
                })();
    
                v1beta1.User = (function() {
    
                    /**
                     * Properties of a User.
                     * @memberof google.showcase.v1beta1
                     * @interface IUser
                     * @property {string|null} [name] User name
                     * @property {string|null} [displayName] User displayName
                     * @property {string|null} [email] User email
                     * @property {google.protobuf.ITimestamp|null} [createTime] User createTime
                     * @property {google.protobuf.ITimestamp|null} [updateTime] User updateTime
                     */
    
                    /**
                     * Constructs a new User.
                     * @memberof google.showcase.v1beta1
                     * @classdesc Represents a User.
                     * @implements IUser
                     * @constructor
                     * @param {google.showcase.v1beta1.IUser=} [properties] Properties to set
                     */
                    function User(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * User name.
                     * @member {string} name
                     * @memberof google.showcase.v1beta1.User
                     * @instance
                     */
                    User.prototype.name = "";
    
                    /**
                     * User displayName.
                     * @member {string} displayName
                     * @memberof google.showcase.v1beta1.User
                     * @instance
                     */
                    User.prototype.displayName = "";
    
                    /**
                     * User email.
                     * @member {string} email
                     * @memberof google.showcase.v1beta1.User
                     * @instance
                     */
                    User.prototype.email = "";
    
                    /**
                     * User createTime.
                     * @member {google.protobuf.ITimestamp|null|undefined} createTime
                     * @memberof google.showcase.v1beta1.User
                     * @instance
                     */
                    User.prototype.createTime = null;
    
                    /**
                     * User updateTime.
                     * @member {google.protobuf.ITimestamp|null|undefined} updateTime
                     * @memberof google.showcase.v1beta1.User
                     * @instance
                     */
                    User.prototype.updateTime = null;
    
                    /**
                     * Creates a new User instance using the specified properties.
                     * @function create
                     * @memberof google.showcase.v1beta1.User
                     * @static
                     * @param {google.showcase.v1beta1.IUser=} [properties] Properties to set
                     * @returns {google.showcase.v1beta1.User} User instance
                     */
                    User.create = function create(properties) {
                        return new User(properties);
                    };
    
                    /**
                     * Encodes the specified User message. Does not implicitly {@link google.showcase.v1beta1.User.verify|verify} messages.
                     * @function encode
                     * @memberof google.showcase.v1beta1.User
                     * @static
                     * @param {google.showcase.v1beta1.IUser} message User message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    User.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                        if (message.displayName != null && Object.hasOwnProperty.call(message, "displayName"))
                            writer.uint32(/* id 2, wireType 2 =*/18).string(message.displayName);
                        if (message.email != null && Object.hasOwnProperty.call(message, "email"))
                            writer.uint32(/* id 3, wireType 2 =*/26).string(message.email);
                        if (message.createTime != null && Object.hasOwnProperty.call(message, "createTime"))
                            $root.google.protobuf.Timestamp.encode(message.createTime, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                        if (message.updateTime != null && Object.hasOwnProperty.call(message, "updateTime"))
                            $root.google.protobuf.Timestamp.encode(message.updateTime, writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();
                        return writer;
                    };
    
                    /**
                     * Encodes the specified User message, length delimited. Does not implicitly {@link google.showcase.v1beta1.User.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof google.showcase.v1beta1.User
                     * @static
                     * @param {google.showcase.v1beta1.IUser} message User message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    User.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a User message from the specified reader or buffer.
                     * @function decode
                     * @memberof google.showcase.v1beta1.User
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {google.showcase.v1beta1.User} User
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    User.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.showcase.v1beta1.User();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.name = reader.string();
                                break;
                            case 2:
                                message.displayName = reader.string();
                                break;
                            case 3:
                                message.email = reader.string();
                                break;
                            case 4:
                                message.createTime = $root.google.protobuf.Timestamp.decode(reader, reader.uint32());
                                break;
                            case 5:
                                message.updateTime = $root.google.protobuf.Timestamp.decode(reader, reader.uint32());
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a User message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof google.showcase.v1beta1.User
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {google.showcase.v1beta1.User} User
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    User.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a User message.
                     * @function verify
                     * @memberof google.showcase.v1beta1.User
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    User.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.name != null && message.hasOwnProperty("name"))
                            if (!$util.isString(message.name))
                                return "name: string expected";
                        if (message.displayName != null && message.hasOwnProperty("displayName"))
                            if (!$util.isString(message.displayName))
                                return "displayName: string expected";
                        if (message.email != null && message.hasOwnProperty("email"))
                            if (!$util.isString(message.email))
                                return "email: string expected";
                        if (message.createTime != null && message.hasOwnProperty("createTime")) {
                            var error = $root.google.protobuf.Timestamp.verify(message.createTime);
                            if (error)
                                return "createTime." + error;
                        }
                        if (message.updateTime != null && message.hasOwnProperty("updateTime")) {
                            var error = $root.google.protobuf.Timestamp.verify(message.updateTime);
                            if (error)
                                return "updateTime." + error;
                        }
                        return null;
                    };
    
                    /**
                     * Creates a User message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof google.showcase.v1beta1.User
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {google.showcase.v1beta1.User} User
                     */
                    User.fromObject = function fromObject(object) {
                        if (object instanceof $root.google.showcase.v1beta1.User)
                            return object;
                        var message = new $root.google.showcase.v1beta1.User();
                        if (object.name != null)
                            message.name = String(object.name);
                        if (object.displayName != null)
                            message.displayName = String(object.displayName);
                        if (object.email != null)
                            message.email = String(object.email);
                        if (object.createTime != null) {
                            if (typeof object.createTime !== "object")
                                throw TypeError(".google.showcase.v1beta1.User.createTime: object expected");
                            message.createTime = $root.google.protobuf.Timestamp.fromObject(object.createTime);
                        }
                        if (object.updateTime != null) {
                            if (typeof object.updateTime !== "object")
                                throw TypeError(".google.showcase.v1beta1.User.updateTime: object expected");
                            message.updateTime = $root.google.protobuf.Timestamp.fromObject(object.updateTime);
                        }
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a User message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof google.showcase.v1beta1.User
                     * @static
                     * @param {google.showcase.v1beta1.User} message User
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    User.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults) {
                            object.name = "";
                            object.displayName = "";
                            object.email = "";
                            object.createTime = null;
                            object.updateTime = null;
                        }
                        if (message.name != null && message.hasOwnProperty("name"))
                            object.name = message.name;
                        if (message.displayName != null && message.hasOwnProperty("displayName"))
                            object.displayName = message.displayName;
                        if (message.email != null && message.hasOwnProperty("email"))
                            object.email = message.email;
                        if (message.createTime != null && message.hasOwnProperty("createTime"))
                            object.createTime = $root.google.protobuf.Timestamp.toObject(message.createTime, options);
                        if (message.updateTime != null && message.hasOwnProperty("updateTime"))
                            object.updateTime = $root.google.protobuf.Timestamp.toObject(message.updateTime, options);
                        return object;
                    };
    
                    /**
                     * Converts this User to JSON.
                     * @function toJSON
                     * @memberof google.showcase.v1beta1.User
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    User.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    return User;
                })();
    
                v1beta1.CreateUserRequest = (function() {
    
                    /**
                     * Properties of a CreateUserRequest.
                     * @memberof google.showcase.v1beta1
                     * @interface ICreateUserRequest
                     * @property {google.showcase.v1beta1.IUser|null} [user] CreateUserRequest user
                     */
    
                    /**
                     * Constructs a new CreateUserRequest.
                     * @memberof google.showcase.v1beta1
                     * @classdesc Represents a CreateUserRequest.
                     * @implements ICreateUserRequest
                     * @constructor
                     * @param {google.showcase.v1beta1.ICreateUserRequest=} [properties] Properties to set
                     */
                    function CreateUserRequest(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * CreateUserRequest user.
                     * @member {google.showcase.v1beta1.IUser|null|undefined} user
                     * @memberof google.showcase.v1beta1.CreateUserRequest
                     * @instance
                     */
                    CreateUserRequest.prototype.user = null;
    
                    /**
                     * Creates a new CreateUserRequest instance using the specified properties.
                     * @function create
                     * @memberof google.showcase.v1beta1.CreateUserRequest
                     * @static
                     * @param {google.showcase.v1beta1.ICreateUserRequest=} [properties] Properties to set
                     * @returns {google.showcase.v1beta1.CreateUserRequest} CreateUserRequest instance
                     */
                    CreateUserRequest.create = function create(properties) {
                        return new CreateUserRequest(properties);
                    };
    
                    /**
                     * Encodes the specified CreateUserRequest message. Does not implicitly {@link google.showcase.v1beta1.CreateUserRequest.verify|verify} messages.
                     * @function encode
                     * @memberof google.showcase.v1beta1.CreateUserRequest
                     * @static
                     * @param {google.showcase.v1beta1.ICreateUserRequest} message CreateUserRequest message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    CreateUserRequest.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.user != null && Object.hasOwnProperty.call(message, "user"))
                            $root.google.showcase.v1beta1.User.encode(message.user, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                        return writer;
                    };
    
                    /**
                     * Encodes the specified CreateUserRequest message, length delimited. Does not implicitly {@link google.showcase.v1beta1.CreateUserRequest.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof google.showcase.v1beta1.CreateUserRequest
                     * @static
                     * @param {google.showcase.v1beta1.ICreateUserRequest} message CreateUserRequest message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    CreateUserRequest.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a CreateUserRequest message from the specified reader or buffer.
                     * @function decode
                     * @memberof google.showcase.v1beta1.CreateUserRequest
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {google.showcase.v1beta1.CreateUserRequest} CreateUserRequest
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    CreateUserRequest.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.showcase.v1beta1.CreateUserRequest();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.user = $root.google.showcase.v1beta1.User.decode(reader, reader.uint32());
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a CreateUserRequest message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof google.showcase.v1beta1.CreateUserRequest
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {google.showcase.v1beta1.CreateUserRequest} CreateUserRequest
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    CreateUserRequest.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a CreateUserRequest message.
                     * @function verify
                     * @memberof google.showcase.v1beta1.CreateUserRequest
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    CreateUserRequest.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.user != null && message.hasOwnProperty("user")) {
                            var error = $root.google.showcase.v1beta1.User.verify(message.user);
                            if (error)
                                return "user." + error;
                        }
                        return null;
                    };
    
                    /**
                     * Creates a CreateUserRequest message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof google.showcase.v1beta1.CreateUserRequest
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {google.showcase.v1beta1.CreateUserRequest} CreateUserRequest
                     */
                    CreateUserRequest.fromObject = function fromObject(object) {
                        if (object instanceof $root.google.showcase.v1beta1.CreateUserRequest)
                            return object;
                        var message = new $root.google.showcase.v1beta1.CreateUserRequest();
                        if (object.user != null) {
                            if (typeof object.user !== "object")
                                throw TypeError(".google.showcase.v1beta1.CreateUserRequest.user: object expected");
                            message.user = $root.google.showcase.v1beta1.User.fromObject(object.user);
                        }
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a CreateUserRequest message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof google.showcase.v1beta1.CreateUserRequest
                     * @static
                     * @param {google.showcase.v1beta1.CreateUserRequest} message CreateUserRequest
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    CreateUserRequest.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults)
                            object.user = null;
                        if (message.user != null && message.hasOwnProperty("user"))
                            object.user = $root.google.showcase.v1beta1.User.toObject(message.user, options);
                        return object;
                    };
    
                    /**
                     * Converts this CreateUserRequest to JSON.
                     * @function toJSON
                     * @memberof google.showcase.v1beta1.CreateUserRequest
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    CreateUserRequest.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    return CreateUserRequest;
                })();
    
                v1beta1.GetUserRequest = (function() {
    
                    /**
                     * Properties of a GetUserRequest.
                     * @memberof google.showcase.v1beta1
                     * @interface IGetUserRequest
                     * @property {string|null} [name] GetUserRequest name
                     */
    
                    /**
                     * Constructs a new GetUserRequest.
                     * @memberof google.showcase.v1beta1
                     * @classdesc Represents a GetUserRequest.
                     * @implements IGetUserRequest
                     * @constructor
                     * @param {google.showcase.v1beta1.IGetUserRequest=} [properties] Properties to set
                     */
                    function GetUserRequest(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * GetUserRequest name.
                     * @member {string} name
                     * @memberof google.showcase.v1beta1.GetUserRequest
                     * @instance
                     */
                    GetUserRequest.prototype.name = "";
    
                    /**
                     * Creates a new GetUserRequest instance using the specified properties.
                     * @function create
                     * @memberof google.showcase.v1beta1.GetUserRequest
                     * @static
                     * @param {google.showcase.v1beta1.IGetUserRequest=} [properties] Properties to set
                     * @returns {google.showcase.v1beta1.GetUserRequest} GetUserRequest instance
                     */
                    GetUserRequest.create = function create(properties) {
                        return new GetUserRequest(properties);
                    };
    
                    /**
                     * Encodes the specified GetUserRequest message. Does not implicitly {@link google.showcase.v1beta1.GetUserRequest.verify|verify} messages.
                     * @function encode
                     * @memberof google.showcase.v1beta1.GetUserRequest
                     * @static
                     * @param {google.showcase.v1beta1.IGetUserRequest} message GetUserRequest message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    GetUserRequest.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                        return writer;
                    };
    
                    /**
                     * Encodes the specified GetUserRequest message, length delimited. Does not implicitly {@link google.showcase.v1beta1.GetUserRequest.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof google.showcase.v1beta1.GetUserRequest
                     * @static
                     * @param {google.showcase.v1beta1.IGetUserRequest} message GetUserRequest message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    GetUserRequest.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a GetUserRequest message from the specified reader or buffer.
                     * @function decode
                     * @memberof google.showcase.v1beta1.GetUserRequest
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {google.showcase.v1beta1.GetUserRequest} GetUserRequest
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    GetUserRequest.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.showcase.v1beta1.GetUserRequest();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.name = reader.string();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a GetUserRequest message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof google.showcase.v1beta1.GetUserRequest
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {google.showcase.v1beta1.GetUserRequest} GetUserRequest
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    GetUserRequest.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a GetUserRequest message.
                     * @function verify
                     * @memberof google.showcase.v1beta1.GetUserRequest
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    GetUserRequest.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.name != null && message.hasOwnProperty("name"))
                            if (!$util.isString(message.name))
                                return "name: string expected";
                        return null;
                    };
    
                    /**
                     * Creates a GetUserRequest message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof google.showcase.v1beta1.GetUserRequest
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {google.showcase.v1beta1.GetUserRequest} GetUserRequest
                     */
                    GetUserRequest.fromObject = function fromObject(object) {
                        if (object instanceof $root.google.showcase.v1beta1.GetUserRequest)
                            return object;
                        var message = new $root.google.showcase.v1beta1.GetUserRequest();
                        if (object.name != null)
                            message.name = String(object.name);
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a GetUserRequest message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof google.showcase.v1beta1.GetUserRequest
                     * @static
                     * @param {google.showcase.v1beta1.GetUserRequest} message GetUserRequest
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    GetUserRequest.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults)
                            object.name = "";
                        if (message.name != null && message.hasOwnProperty("name"))
                            object.name = message.name;
                        return object;
                    };
    
                    /**
                     * Converts this GetUserRequest to JSON.
                     * @function toJSON
                     * @memberof google.showcase.v1beta1.GetUserRequest
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    GetUserRequest.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    return GetUserRequest;
                })();
    
                v1beta1.UpdateUserRequest = (function() {
    
                    /**
                     * Properties of an UpdateUserRequest.
                     * @memberof google.showcase.v1beta1
                     * @interface IUpdateUserRequest
                     * @property {google.showcase.v1beta1.IUser|null} [user] UpdateUserRequest user
                     * @property {google.protobuf.IFieldMask|null} [updateMask] UpdateUserRequest updateMask
                     */
    
                    /**
                     * Constructs a new UpdateUserRequest.
                     * @memberof google.showcase.v1beta1
                     * @classdesc Represents an UpdateUserRequest.
                     * @implements IUpdateUserRequest
                     * @constructor
                     * @param {google.showcase.v1beta1.IUpdateUserRequest=} [properties] Properties to set
                     */
                    function UpdateUserRequest(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * UpdateUserRequest user.
                     * @member {google.showcase.v1beta1.IUser|null|undefined} user
                     * @memberof google.showcase.v1beta1.UpdateUserRequest
                     * @instance
                     */
                    UpdateUserRequest.prototype.user = null;
    
                    /**
                     * UpdateUserRequest updateMask.
                     * @member {google.protobuf.IFieldMask|null|undefined} updateMask
                     * @memberof google.showcase.v1beta1.UpdateUserRequest
                     * @instance
                     */
                    UpdateUserRequest.prototype.updateMask = null;
    
                    /**
                     * Creates a new UpdateUserRequest instance using the specified properties.
                     * @function create
                     * @memberof google.showcase.v1beta1.UpdateUserRequest
                     * @static
                     * @param {google.showcase.v1beta1.IUpdateUserRequest=} [properties] Properties to set
                     * @returns {google.showcase.v1beta1.UpdateUserRequest} UpdateUserRequest instance
                     */
                    UpdateUserRequest.create = function create(properties) {
                        return new UpdateUserRequest(properties);
                    };
    
                    /**
                     * Encodes the specified UpdateUserRequest message. Does not implicitly {@link google.showcase.v1beta1.UpdateUserRequest.verify|verify} messages.
                     * @function encode
                     * @memberof google.showcase.v1beta1.UpdateUserRequest
                     * @static
                     * @param {google.showcase.v1beta1.IUpdateUserRequest} message UpdateUserRequest message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    UpdateUserRequest.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.user != null && Object.hasOwnProperty.call(message, "user"))
                            $root.google.showcase.v1beta1.User.encode(message.user, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                        if (message.updateMask != null && Object.hasOwnProperty.call(message, "updateMask"))
                            $root.google.protobuf.FieldMask.encode(message.updateMask, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                        return writer;
                    };
    
                    /**
                     * Encodes the specified UpdateUserRequest message, length delimited. Does not implicitly {@link google.showcase.v1beta1.UpdateUserRequest.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof google.showcase.v1beta1.UpdateUserRequest
                     * @static
                     * @param {google.showcase.v1beta1.IUpdateUserRequest} message UpdateUserRequest message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    UpdateUserRequest.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes an UpdateUserRequest message from the specified reader or buffer.
                     * @function decode
                     * @memberof google.showcase.v1beta1.UpdateUserRequest
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {google.showcase.v1beta1.UpdateUserRequest} UpdateUserRequest
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    UpdateUserRequest.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.showcase.v1beta1.UpdateUserRequest();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.user = $root.google.showcase.v1beta1.User.decode(reader, reader.uint32());
                                break;
                            case 2:
                                message.updateMask = $root.google.protobuf.FieldMask.decode(reader, reader.uint32());
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes an UpdateUserRequest message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof google.showcase.v1beta1.UpdateUserRequest
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {google.showcase.v1beta1.UpdateUserRequest} UpdateUserRequest
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    UpdateUserRequest.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies an UpdateUserRequest message.
                     * @function verify
                     * @memberof google.showcase.v1beta1.UpdateUserRequest
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    UpdateUserRequest.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.user != null && message.hasOwnProperty("user")) {
                            var error = $root.google.showcase.v1beta1.User.verify(message.user);
                            if (error)
                                return "user." + error;
                        }
                        if (message.updateMask != null && message.hasOwnProperty("updateMask")) {
                            var error = $root.google.protobuf.FieldMask.verify(message.updateMask);
                            if (error)
                                return "updateMask." + error;
                        }
                        return null;
                    };
    
                    /**
                     * Creates an UpdateUserRequest message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof google.showcase.v1beta1.UpdateUserRequest
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {google.showcase.v1beta1.UpdateUserRequest} UpdateUserRequest
                     */
                    UpdateUserRequest.fromObject = function fromObject(object) {
                        if (object instanceof $root.google.showcase.v1beta1.UpdateUserRequest)
                            return object;
                        var message = new $root.google.showcase.v1beta1.UpdateUserRequest();
                        if (object.user != null) {
                            if (typeof object.user !== "object")
                                throw TypeError(".google.showcase.v1beta1.UpdateUserRequest.user: object expected");
                            message.user = $root.google.showcase.v1beta1.User.fromObject(object.user);
                        }
                        if (object.updateMask != null) {
                            if (typeof object.updateMask !== "object")
                                throw TypeError(".google.showcase.v1beta1.UpdateUserRequest.updateMask: object expected");
                            message.updateMask = $root.google.protobuf.FieldMask.fromObject(object.updateMask);
                        }
                        return message;
                    };
    
                    /**
                     * Creates a plain object from an UpdateUserRequest message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof google.showcase.v1beta1.UpdateUserRequest
                     * @static
                     * @param {google.showcase.v1beta1.UpdateUserRequest} message UpdateUserRequest
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    UpdateUserRequest.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults) {
                            object.user = null;
                            object.updateMask = null;
                        }
                        if (message.user != null && message.hasOwnProperty("user"))
                            object.user = $root.google.showcase.v1beta1.User.toObject(message.user, options);
                        if (message.updateMask != null && message.hasOwnProperty("updateMask"))
                            object.updateMask = $root.google.protobuf.FieldMask.toObject(message.updateMask, options);
                        return object;
                    };
    
                    /**
                     * Converts this UpdateUserRequest to JSON.
                     * @function toJSON
                     * @memberof google.showcase.v1beta1.UpdateUserRequest
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    UpdateUserRequest.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    return UpdateUserRequest;
                })();
    
                v1beta1.DeleteUserRequest = (function() {
    
                    /**
                     * Properties of a DeleteUserRequest.
                     * @memberof google.showcase.v1beta1
                     * @interface IDeleteUserRequest
                     * @property {string|null} [name] DeleteUserRequest name
                     */
    
                    /**
                     * Constructs a new DeleteUserRequest.
                     * @memberof google.showcase.v1beta1
                     * @classdesc Represents a DeleteUserRequest.
                     * @implements IDeleteUserRequest
                     * @constructor
                     * @param {google.showcase.v1beta1.IDeleteUserRequest=} [properties] Properties to set
                     */
                    function DeleteUserRequest(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * DeleteUserRequest name.
                     * @member {string} name
                     * @memberof google.showcase.v1beta1.DeleteUserRequest
                     * @instance
                     */
                    DeleteUserRequest.prototype.name = "";
    
                    /**
                     * Creates a new DeleteUserRequest instance using the specified properties.
                     * @function create
                     * @memberof google.showcase.v1beta1.DeleteUserRequest
                     * @static
                     * @param {google.showcase.v1beta1.IDeleteUserRequest=} [properties] Properties to set
                     * @returns {google.showcase.v1beta1.DeleteUserRequest} DeleteUserRequest instance
                     */
                    DeleteUserRequest.create = function create(properties) {
                        return new DeleteUserRequest(properties);
                    };
    
                    /**
                     * Encodes the specified DeleteUserRequest message. Does not implicitly {@link google.showcase.v1beta1.DeleteUserRequest.verify|verify} messages.
                     * @function encode
                     * @memberof google.showcase.v1beta1.DeleteUserRequest
                     * @static
                     * @param {google.showcase.v1beta1.IDeleteUserRequest} message DeleteUserRequest message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    DeleteUserRequest.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                        return writer;
                    };
    
                    /**
                     * Encodes the specified DeleteUserRequest message, length delimited. Does not implicitly {@link google.showcase.v1beta1.DeleteUserRequest.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof google.showcase.v1beta1.DeleteUserRequest
                     * @static
                     * @param {google.showcase.v1beta1.IDeleteUserRequest} message DeleteUserRequest message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    DeleteUserRequest.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a DeleteUserRequest message from the specified reader or buffer.
                     * @function decode
                     * @memberof google.showcase.v1beta1.DeleteUserRequest
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {google.showcase.v1beta1.DeleteUserRequest} DeleteUserRequest
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    DeleteUserRequest.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.showcase.v1beta1.DeleteUserRequest();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.name = reader.string();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a DeleteUserRequest message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof google.showcase.v1beta1.DeleteUserRequest
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {google.showcase.v1beta1.DeleteUserRequest} DeleteUserRequest
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    DeleteUserRequest.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a DeleteUserRequest message.
                     * @function verify
                     * @memberof google.showcase.v1beta1.DeleteUserRequest
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    DeleteUserRequest.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.name != null && message.hasOwnProperty("name"))
                            if (!$util.isString(message.name))
                                return "name: string expected";
                        return null;
                    };
    
                    /**
                     * Creates a DeleteUserRequest message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof google.showcase.v1beta1.DeleteUserRequest
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {google.showcase.v1beta1.DeleteUserRequest} DeleteUserRequest
                     */
                    DeleteUserRequest.fromObject = function fromObject(object) {
                        if (object instanceof $root.google.showcase.v1beta1.DeleteUserRequest)
                            return object;
                        var message = new $root.google.showcase.v1beta1.DeleteUserRequest();
                        if (object.name != null)
                            message.name = String(object.name);
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a DeleteUserRequest message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof google.showcase.v1beta1.DeleteUserRequest
                     * @static
                     * @param {google.showcase.v1beta1.DeleteUserRequest} message DeleteUserRequest
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    DeleteUserRequest.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults)
                            object.name = "";
                        if (message.name != null && message.hasOwnProperty("name"))
                            object.name = message.name;
                        return object;
                    };
    
                    /**
                     * Converts this DeleteUserRequest to JSON.
                     * @function toJSON
                     * @memberof google.showcase.v1beta1.DeleteUserRequest
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    DeleteUserRequest.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    return DeleteUserRequest;
                })();
    
                v1beta1.ListUsersRequest = (function() {
    
                    /**
                     * Properties of a ListUsersRequest.
                     * @memberof google.showcase.v1beta1
                     * @interface IListUsersRequest
                     * @property {number|null} [pageSize] ListUsersRequest pageSize
                     * @property {string|null} [pageToken] ListUsersRequest pageToken
                     */
    
                    /**
                     * Constructs a new ListUsersRequest.
                     * @memberof google.showcase.v1beta1
                     * @classdesc Represents a ListUsersRequest.
                     * @implements IListUsersRequest
                     * @constructor
                     * @param {google.showcase.v1beta1.IListUsersRequest=} [properties] Properties to set
                     */
                    function ListUsersRequest(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * ListUsersRequest pageSize.
                     * @member {number} pageSize
                     * @memberof google.showcase.v1beta1.ListUsersRequest
                     * @instance
                     */
                    ListUsersRequest.prototype.pageSize = 0;
    
                    /**
                     * ListUsersRequest pageToken.
                     * @member {string} pageToken
                     * @memberof google.showcase.v1beta1.ListUsersRequest
                     * @instance
                     */
                    ListUsersRequest.prototype.pageToken = "";
    
                    /**
                     * Creates a new ListUsersRequest instance using the specified properties.
                     * @function create
                     * @memberof google.showcase.v1beta1.ListUsersRequest
                     * @static
                     * @param {google.showcase.v1beta1.IListUsersRequest=} [properties] Properties to set
                     * @returns {google.showcase.v1beta1.ListUsersRequest} ListUsersRequest instance
                     */
                    ListUsersRequest.create = function create(properties) {
                        return new ListUsersRequest(properties);
                    };
    
                    /**
                     * Encodes the specified ListUsersRequest message. Does not implicitly {@link google.showcase.v1beta1.ListUsersRequest.verify|verify} messages.
                     * @function encode
                     * @memberof google.showcase.v1beta1.ListUsersRequest
                     * @static
                     * @param {google.showcase.v1beta1.IListUsersRequest} message ListUsersRequest message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    ListUsersRequest.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.pageSize != null && Object.hasOwnProperty.call(message, "pageSize"))
                            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.pageSize);
                        if (message.pageToken != null && Object.hasOwnProperty.call(message, "pageToken"))
                            writer.uint32(/* id 2, wireType 2 =*/18).string(message.pageToken);
                        return writer;
                    };
    
                    /**
                     * Encodes the specified ListUsersRequest message, length delimited. Does not implicitly {@link google.showcase.v1beta1.ListUsersRequest.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof google.showcase.v1beta1.ListUsersRequest
                     * @static
                     * @param {google.showcase.v1beta1.IListUsersRequest} message ListUsersRequest message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    ListUsersRequest.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a ListUsersRequest message from the specified reader or buffer.
                     * @function decode
                     * @memberof google.showcase.v1beta1.ListUsersRequest
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {google.showcase.v1beta1.ListUsersRequest} ListUsersRequest
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    ListUsersRequest.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.showcase.v1beta1.ListUsersRequest();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.pageSize = reader.int32();
                                break;
                            case 2:
                                message.pageToken = reader.string();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a ListUsersRequest message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof google.showcase.v1beta1.ListUsersRequest
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {google.showcase.v1beta1.ListUsersRequest} ListUsersRequest
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    ListUsersRequest.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a ListUsersRequest message.
                     * @function verify
                     * @memberof google.showcase.v1beta1.ListUsersRequest
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    ListUsersRequest.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.pageSize != null && message.hasOwnProperty("pageSize"))
                            if (!$util.isInteger(message.pageSize))
                                return "pageSize: integer expected";
                        if (message.pageToken != null && message.hasOwnProperty("pageToken"))
                            if (!$util.isString(message.pageToken))
                                return "pageToken: string expected";
                        return null;
                    };
    
                    /**
                     * Creates a ListUsersRequest message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof google.showcase.v1beta1.ListUsersRequest
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {google.showcase.v1beta1.ListUsersRequest} ListUsersRequest
                     */
                    ListUsersRequest.fromObject = function fromObject(object) {
                        if (object instanceof $root.google.showcase.v1beta1.ListUsersRequest)
                            return object;
                        var message = new $root.google.showcase.v1beta1.ListUsersRequest();
                        if (object.pageSize != null)
                            message.pageSize = object.pageSize | 0;
                        if (object.pageToken != null)
                            message.pageToken = String(object.pageToken);
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a ListUsersRequest message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof google.showcase.v1beta1.ListUsersRequest
                     * @static
                     * @param {google.showcase.v1beta1.ListUsersRequest} message ListUsersRequest
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    ListUsersRequest.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults) {
                            object.pageSize = 0;
                            object.pageToken = "";
                        }
                        if (message.pageSize != null && message.hasOwnProperty("pageSize"))
                            object.pageSize = message.pageSize;
                        if (message.pageToken != null && message.hasOwnProperty("pageToken"))
                            object.pageToken = message.pageToken;
                        return object;
                    };
    
                    /**
                     * Converts this ListUsersRequest to JSON.
                     * @function toJSON
                     * @memberof google.showcase.v1beta1.ListUsersRequest
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    ListUsersRequest.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    return ListUsersRequest;
                })();
    
                v1beta1.ListUsersResponse = (function() {
    
                    /**
                     * Properties of a ListUsersResponse.
                     * @memberof google.showcase.v1beta1
                     * @interface IListUsersResponse
                     * @property {Array.<google.showcase.v1beta1.IUser>|null} [users] ListUsersResponse users
                     * @property {string|null} [nextPageToken] ListUsersResponse nextPageToken
                     */
    
                    /**
                     * Constructs a new ListUsersResponse.
                     * @memberof google.showcase.v1beta1
                     * @classdesc Represents a ListUsersResponse.
                     * @implements IListUsersResponse
                     * @constructor
                     * @param {google.showcase.v1beta1.IListUsersResponse=} [properties] Properties to set
                     */
                    function ListUsersResponse(properties) {
                        this.users = [];
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * ListUsersResponse users.
                     * @member {Array.<google.showcase.v1beta1.IUser>} users
                     * @memberof google.showcase.v1beta1.ListUsersResponse
                     * @instance
                     */
                    ListUsersResponse.prototype.users = $util.emptyArray;
    
                    /**
                     * ListUsersResponse nextPageToken.
                     * @member {string} nextPageToken
                     * @memberof google.showcase.v1beta1.ListUsersResponse
                     * @instance
                     */
                    ListUsersResponse.prototype.nextPageToken = "";
    
                    /**
                     * Creates a new ListUsersResponse instance using the specified properties.
                     * @function create
                     * @memberof google.showcase.v1beta1.ListUsersResponse
                     * @static
                     * @param {google.showcase.v1beta1.IListUsersResponse=} [properties] Properties to set
                     * @returns {google.showcase.v1beta1.ListUsersResponse} ListUsersResponse instance
                     */
                    ListUsersResponse.create = function create(properties) {
                        return new ListUsersResponse(properties);
                    };
    
                    /**
                     * Encodes the specified ListUsersResponse message. Does not implicitly {@link google.showcase.v1beta1.ListUsersResponse.verify|verify} messages.
                     * @function encode
                     * @memberof google.showcase.v1beta1.ListUsersResponse
                     * @static
                     * @param {google.showcase.v1beta1.IListUsersResponse} message ListUsersResponse message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    ListUsersResponse.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.users != null && message.users.length)
                            for (var i = 0; i < message.users.length; ++i)
                                $root.google.showcase.v1beta1.User.encode(message.users[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                        if (message.nextPageToken != null && Object.hasOwnProperty.call(message, "nextPageToken"))
                            writer.uint32(/* id 2, wireType 2 =*/18).string(message.nextPageToken);
                        return writer;
                    };
    
                    /**
                     * Encodes the specified ListUsersResponse message, length delimited. Does not implicitly {@link google.showcase.v1beta1.ListUsersResponse.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof google.showcase.v1beta1.ListUsersResponse
                     * @static
                     * @param {google.showcase.v1beta1.IListUsersResponse} message ListUsersResponse message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    ListUsersResponse.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a ListUsersResponse message from the specified reader or buffer.
                     * @function decode
                     * @memberof google.showcase.v1beta1.ListUsersResponse
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {google.showcase.v1beta1.ListUsersResponse} ListUsersResponse
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    ListUsersResponse.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.showcase.v1beta1.ListUsersResponse();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                if (!(message.users && message.users.length))
                                    message.users = [];
                                message.users.push($root.google.showcase.v1beta1.User.decode(reader, reader.uint32()));
                                break;
                            case 2:
                                message.nextPageToken = reader.string();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a ListUsersResponse message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof google.showcase.v1beta1.ListUsersResponse
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {google.showcase.v1beta1.ListUsersResponse} ListUsersResponse
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    ListUsersResponse.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a ListUsersResponse message.
                     * @function verify
                     * @memberof google.showcase.v1beta1.ListUsersResponse
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    ListUsersResponse.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.users != null && message.hasOwnProperty("users")) {
                            if (!Array.isArray(message.users))
                                return "users: array expected";
                            for (var i = 0; i < message.users.length; ++i) {
                                var error = $root.google.showcase.v1beta1.User.verify(message.users[i]);
                                if (error)
                                    return "users." + error;
                            }
                        }
                        if (message.nextPageToken != null && message.hasOwnProperty("nextPageToken"))
                            if (!$util.isString(message.nextPageToken))
                                return "nextPageToken: string expected";
                        return null;
                    };
    
                    /**
                     * Creates a ListUsersResponse message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof google.showcase.v1beta1.ListUsersResponse
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {google.showcase.v1beta1.ListUsersResponse} ListUsersResponse
                     */
                    ListUsersResponse.fromObject = function fromObject(object) {
                        if (object instanceof $root.google.showcase.v1beta1.ListUsersResponse)
                            return object;
                        var message = new $root.google.showcase.v1beta1.ListUsersResponse();
                        if (object.users) {
                            if (!Array.isArray(object.users))
                                throw TypeError(".google.showcase.v1beta1.ListUsersResponse.users: array expected");
                            message.users = [];
                            for (var i = 0; i < object.users.length; ++i) {
                                if (typeof object.users[i] !== "object")
                                    throw TypeError(".google.showcase.v1beta1.ListUsersResponse.users: object expected");
                                message.users[i] = $root.google.showcase.v1beta1.User.fromObject(object.users[i]);
                            }
                        }
                        if (object.nextPageToken != null)
                            message.nextPageToken = String(object.nextPageToken);
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a ListUsersResponse message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof google.showcase.v1beta1.ListUsersResponse
                     * @static
                     * @param {google.showcase.v1beta1.ListUsersResponse} message ListUsersResponse
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    ListUsersResponse.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.arrays || options.defaults)
                            object.users = [];
                        if (options.defaults)
                            object.nextPageToken = "";
                        if (message.users && message.users.length) {
                            object.users = [];
                            for (var j = 0; j < message.users.length; ++j)
                                object.users[j] = $root.google.showcase.v1beta1.User.toObject(message.users[j], options);
                        }
                        if (message.nextPageToken != null && message.hasOwnProperty("nextPageToken"))
                            object.nextPageToken = message.nextPageToken;
                        return object;
                    };
    
                    /**
                     * Converts this ListUsersResponse to JSON.
                     * @function toJSON
                     * @memberof google.showcase.v1beta1.ListUsersResponse
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    ListUsersResponse.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    return ListUsersResponse;
                })();
    
                v1beta1.Messaging = (function() {
    
                    /**
                     * Constructs a new Messaging service.
                     * @memberof google.showcase.v1beta1
                     * @classdesc Represents a Messaging
                     * @extends $protobuf.rpc.Service
                     * @constructor
                     * @param {$protobuf.RPCImpl} rpcImpl RPC implementation
                     * @param {boolean} [requestDelimited=false] Whether requests are length-delimited
                     * @param {boolean} [responseDelimited=false] Whether responses are length-delimited
                     */
                    function Messaging(rpcImpl, requestDelimited, responseDelimited) {
                        $protobuf.rpc.Service.call(this, rpcImpl, requestDelimited, responseDelimited);
                    }
    
                    (Messaging.prototype = Object.create($protobuf.rpc.Service.prototype)).constructor = Messaging;
    
                    /**
                     * Creates new Messaging service using the specified rpc implementation.
                     * @function create
                     * @memberof google.showcase.v1beta1.Messaging
                     * @static
                     * @param {$protobuf.RPCImpl} rpcImpl RPC implementation
                     * @param {boolean} [requestDelimited=false] Whether requests are length-delimited
                     * @param {boolean} [responseDelimited=false] Whether responses are length-delimited
                     * @returns {Messaging} RPC service. Useful where requests and/or responses are streamed.
                     */
                    Messaging.create = function create(rpcImpl, requestDelimited, responseDelimited) {
                        return new this(rpcImpl, requestDelimited, responseDelimited);
                    };
    
                    /**
                     * Callback as used by {@link google.showcase.v1beta1.Messaging#createRoom}.
                     * @memberof google.showcase.v1beta1.Messaging
                     * @typedef CreateRoomCallback
                     * @type {function}
                     * @param {Error|null} error Error, if any
                     * @param {google.showcase.v1beta1.Room} [response] Room
                     */
    
                    /**
                     * Calls CreateRoom.
                     * @function createRoom
                     * @memberof google.showcase.v1beta1.Messaging
                     * @instance
                     * @param {google.showcase.v1beta1.ICreateRoomRequest} request CreateRoomRequest message or plain object
                     * @param {google.showcase.v1beta1.Messaging.CreateRoomCallback} callback Node-style callback called with the error, if any, and Room
                     * @returns {undefined}
                     * @variation 1
                     */
                    Object.defineProperty(Messaging.prototype.createRoom = function createRoom(request, callback) {
                        return this.rpcCall(createRoom, $root.google.showcase.v1beta1.CreateRoomRequest, $root.google.showcase.v1beta1.Room, request, callback);
                    }, "name", { value: "CreateRoom" });
    
                    /**
                     * Calls CreateRoom.
                     * @function createRoom
                     * @memberof google.showcase.v1beta1.Messaging
                     * @instance
                     * @param {google.showcase.v1beta1.ICreateRoomRequest} request CreateRoomRequest message or plain object
                     * @returns {Promise<google.showcase.v1beta1.Room>} Promise
                     * @variation 2
                     */
    
                    /**
                     * Callback as used by {@link google.showcase.v1beta1.Messaging#getRoom}.
                     * @memberof google.showcase.v1beta1.Messaging
                     * @typedef GetRoomCallback
                     * @type {function}
                     * @param {Error|null} error Error, if any
                     * @param {google.showcase.v1beta1.Room} [response] Room
                     */
    
                    /**
                     * Calls GetRoom.
                     * @function getRoom
                     * @memberof google.showcase.v1beta1.Messaging
                     * @instance
                     * @param {google.showcase.v1beta1.IGetRoomRequest} request GetRoomRequest message or plain object
                     * @param {google.showcase.v1beta1.Messaging.GetRoomCallback} callback Node-style callback called with the error, if any, and Room
                     * @returns {undefined}
                     * @variation 1
                     */
                    Object.defineProperty(Messaging.prototype.getRoom = function getRoom(request, callback) {
                        return this.rpcCall(getRoom, $root.google.showcase.v1beta1.GetRoomRequest, $root.google.showcase.v1beta1.Room, request, callback);
                    }, "name", { value: "GetRoom" });
    
                    /**
                     * Calls GetRoom.
                     * @function getRoom
                     * @memberof google.showcase.v1beta1.Messaging
                     * @instance
                     * @param {google.showcase.v1beta1.IGetRoomRequest} request GetRoomRequest message or plain object
                     * @returns {Promise<google.showcase.v1beta1.Room>} Promise
                     * @variation 2
                     */
    
                    /**
                     * Callback as used by {@link google.showcase.v1beta1.Messaging#updateRoom}.
                     * @memberof google.showcase.v1beta1.Messaging
                     * @typedef UpdateRoomCallback
                     * @type {function}
                     * @param {Error|null} error Error, if any
                     * @param {google.showcase.v1beta1.Room} [response] Room
                     */
    
                    /**
                     * Calls UpdateRoom.
                     * @function updateRoom
                     * @memberof google.showcase.v1beta1.Messaging
                     * @instance
                     * @param {google.showcase.v1beta1.IUpdateRoomRequest} request UpdateRoomRequest message or plain object
                     * @param {google.showcase.v1beta1.Messaging.UpdateRoomCallback} callback Node-style callback called with the error, if any, and Room
                     * @returns {undefined}
                     * @variation 1
                     */
                    Object.defineProperty(Messaging.prototype.updateRoom = function updateRoom(request, callback) {
                        return this.rpcCall(updateRoom, $root.google.showcase.v1beta1.UpdateRoomRequest, $root.google.showcase.v1beta1.Room, request, callback);
                    }, "name", { value: "UpdateRoom" });
    
                    /**
                     * Calls UpdateRoom.
                     * @function updateRoom
                     * @memberof google.showcase.v1beta1.Messaging
                     * @instance
                     * @param {google.showcase.v1beta1.IUpdateRoomRequest} request UpdateRoomRequest message or plain object
                     * @returns {Promise<google.showcase.v1beta1.Room>} Promise
                     * @variation 2
                     */
    
                    /**
                     * Callback as used by {@link google.showcase.v1beta1.Messaging#deleteRoom}.
                     * @memberof google.showcase.v1beta1.Messaging
                     * @typedef DeleteRoomCallback
                     * @type {function}
                     * @param {Error|null} error Error, if any
                     * @param {google.protobuf.Empty} [response] Empty
                     */
    
                    /**
                     * Calls DeleteRoom.
                     * @function deleteRoom
                     * @memberof google.showcase.v1beta1.Messaging
                     * @instance
                     * @param {google.showcase.v1beta1.IDeleteRoomRequest} request DeleteRoomRequest message or plain object
                     * @param {google.showcase.v1beta1.Messaging.DeleteRoomCallback} callback Node-style callback called with the error, if any, and Empty
                     * @returns {undefined}
                     * @variation 1
                     */
                    Object.defineProperty(Messaging.prototype.deleteRoom = function deleteRoom(request, callback) {
                        return this.rpcCall(deleteRoom, $root.google.showcase.v1beta1.DeleteRoomRequest, $root.google.protobuf.Empty, request, callback);
                    }, "name", { value: "DeleteRoom" });
    
                    /**
                     * Calls DeleteRoom.
                     * @function deleteRoom
                     * @memberof google.showcase.v1beta1.Messaging
                     * @instance
                     * @param {google.showcase.v1beta1.IDeleteRoomRequest} request DeleteRoomRequest message or plain object
                     * @returns {Promise<google.protobuf.Empty>} Promise
                     * @variation 2
                     */
    
                    /**
                     * Callback as used by {@link google.showcase.v1beta1.Messaging#listRooms}.
                     * @memberof google.showcase.v1beta1.Messaging
                     * @typedef ListRoomsCallback
                     * @type {function}
                     * @param {Error|null} error Error, if any
                     * @param {google.showcase.v1beta1.ListRoomsResponse} [response] ListRoomsResponse
                     */
    
                    /**
                     * Calls ListRooms.
                     * @function listRooms
                     * @memberof google.showcase.v1beta1.Messaging
                     * @instance
                     * @param {google.showcase.v1beta1.IListRoomsRequest} request ListRoomsRequest message or plain object
                     * @param {google.showcase.v1beta1.Messaging.ListRoomsCallback} callback Node-style callback called with the error, if any, and ListRoomsResponse
                     * @returns {undefined}
                     * @variation 1
                     */
                    Object.defineProperty(Messaging.prototype.listRooms = function listRooms(request, callback) {
                        return this.rpcCall(listRooms, $root.google.showcase.v1beta1.ListRoomsRequest, $root.google.showcase.v1beta1.ListRoomsResponse, request, callback);
                    }, "name", { value: "ListRooms" });
    
                    /**
                     * Calls ListRooms.
                     * @function listRooms
                     * @memberof google.showcase.v1beta1.Messaging
                     * @instance
                     * @param {google.showcase.v1beta1.IListRoomsRequest} request ListRoomsRequest message or plain object
                     * @returns {Promise<google.showcase.v1beta1.ListRoomsResponse>} Promise
                     * @variation 2
                     */
    
                    /**
                     * Callback as used by {@link google.showcase.v1beta1.Messaging#createBlurb}.
                     * @memberof google.showcase.v1beta1.Messaging
                     * @typedef CreateBlurbCallback
                     * @type {function}
                     * @param {Error|null} error Error, if any
                     * @param {google.showcase.v1beta1.Blurb} [response] Blurb
                     */
    
                    /**
                     * Calls CreateBlurb.
                     * @function createBlurb
                     * @memberof google.showcase.v1beta1.Messaging
                     * @instance
                     * @param {google.showcase.v1beta1.ICreateBlurbRequest} request CreateBlurbRequest message or plain object
                     * @param {google.showcase.v1beta1.Messaging.CreateBlurbCallback} callback Node-style callback called with the error, if any, and Blurb
                     * @returns {undefined}
                     * @variation 1
                     */
                    Object.defineProperty(Messaging.prototype.createBlurb = function createBlurb(request, callback) {
                        return this.rpcCall(createBlurb, $root.google.showcase.v1beta1.CreateBlurbRequest, $root.google.showcase.v1beta1.Blurb, request, callback);
                    }, "name", { value: "CreateBlurb" });
    
                    /**
                     * Calls CreateBlurb.
                     * @function createBlurb
                     * @memberof google.showcase.v1beta1.Messaging
                     * @instance
                     * @param {google.showcase.v1beta1.ICreateBlurbRequest} request CreateBlurbRequest message or plain object
                     * @returns {Promise<google.showcase.v1beta1.Blurb>} Promise
                     * @variation 2
                     */
    
                    /**
                     * Callback as used by {@link google.showcase.v1beta1.Messaging#getBlurb}.
                     * @memberof google.showcase.v1beta1.Messaging
                     * @typedef GetBlurbCallback
                     * @type {function}
                     * @param {Error|null} error Error, if any
                     * @param {google.showcase.v1beta1.Blurb} [response] Blurb
                     */
    
                    /**
                     * Calls GetBlurb.
                     * @function getBlurb
                     * @memberof google.showcase.v1beta1.Messaging
                     * @instance
                     * @param {google.showcase.v1beta1.IGetBlurbRequest} request GetBlurbRequest message or plain object
                     * @param {google.showcase.v1beta1.Messaging.GetBlurbCallback} callback Node-style callback called with the error, if any, and Blurb
                     * @returns {undefined}
                     * @variation 1
                     */
                    Object.defineProperty(Messaging.prototype.getBlurb = function getBlurb(request, callback) {
                        return this.rpcCall(getBlurb, $root.google.showcase.v1beta1.GetBlurbRequest, $root.google.showcase.v1beta1.Blurb, request, callback);
                    }, "name", { value: "GetBlurb" });
    
                    /**
                     * Calls GetBlurb.
                     * @function getBlurb
                     * @memberof google.showcase.v1beta1.Messaging
                     * @instance
                     * @param {google.showcase.v1beta1.IGetBlurbRequest} request GetBlurbRequest message or plain object
                     * @returns {Promise<google.showcase.v1beta1.Blurb>} Promise
                     * @variation 2
                     */
    
                    /**
                     * Callback as used by {@link google.showcase.v1beta1.Messaging#updateBlurb}.
                     * @memberof google.showcase.v1beta1.Messaging
                     * @typedef UpdateBlurbCallback
                     * @type {function}
                     * @param {Error|null} error Error, if any
                     * @param {google.showcase.v1beta1.Blurb} [response] Blurb
                     */
    
                    /**
                     * Calls UpdateBlurb.
                     * @function updateBlurb
                     * @memberof google.showcase.v1beta1.Messaging
                     * @instance
                     * @param {google.showcase.v1beta1.IUpdateBlurbRequest} request UpdateBlurbRequest message or plain object
                     * @param {google.showcase.v1beta1.Messaging.UpdateBlurbCallback} callback Node-style callback called with the error, if any, and Blurb
                     * @returns {undefined}
                     * @variation 1
                     */
                    Object.defineProperty(Messaging.prototype.updateBlurb = function updateBlurb(request, callback) {
                        return this.rpcCall(updateBlurb, $root.google.showcase.v1beta1.UpdateBlurbRequest, $root.google.showcase.v1beta1.Blurb, request, callback);
                    }, "name", { value: "UpdateBlurb" });
    
                    /**
                     * Calls UpdateBlurb.
                     * @function updateBlurb
                     * @memberof google.showcase.v1beta1.Messaging
                     * @instance
                     * @param {google.showcase.v1beta1.IUpdateBlurbRequest} request UpdateBlurbRequest message or plain object
                     * @returns {Promise<google.showcase.v1beta1.Blurb>} Promise
                     * @variation 2
                     */
    
                    /**
                     * Callback as used by {@link google.showcase.v1beta1.Messaging#deleteBlurb}.
                     * @memberof google.showcase.v1beta1.Messaging
                     * @typedef DeleteBlurbCallback
                     * @type {function}
                     * @param {Error|null} error Error, if any
                     * @param {google.protobuf.Empty} [response] Empty
                     */
    
                    /**
                     * Calls DeleteBlurb.
                     * @function deleteBlurb
                     * @memberof google.showcase.v1beta1.Messaging
                     * @instance
                     * @param {google.showcase.v1beta1.IDeleteBlurbRequest} request DeleteBlurbRequest message or plain object
                     * @param {google.showcase.v1beta1.Messaging.DeleteBlurbCallback} callback Node-style callback called with the error, if any, and Empty
                     * @returns {undefined}
                     * @variation 1
                     */
                    Object.defineProperty(Messaging.prototype.deleteBlurb = function deleteBlurb(request, callback) {
                        return this.rpcCall(deleteBlurb, $root.google.showcase.v1beta1.DeleteBlurbRequest, $root.google.protobuf.Empty, request, callback);
                    }, "name", { value: "DeleteBlurb" });
    
                    /**
                     * Calls DeleteBlurb.
                     * @function deleteBlurb
                     * @memberof google.showcase.v1beta1.Messaging
                     * @instance
                     * @param {google.showcase.v1beta1.IDeleteBlurbRequest} request DeleteBlurbRequest message or plain object
                     * @returns {Promise<google.protobuf.Empty>} Promise
                     * @variation 2
                     */
    
                    /**
                     * Callback as used by {@link google.showcase.v1beta1.Messaging#listBlurbs}.
                     * @memberof google.showcase.v1beta1.Messaging
                     * @typedef ListBlurbsCallback
                     * @type {function}
                     * @param {Error|null} error Error, if any
                     * @param {google.showcase.v1beta1.ListBlurbsResponse} [response] ListBlurbsResponse
                     */
    
                    /**
                     * Calls ListBlurbs.
                     * @function listBlurbs
                     * @memberof google.showcase.v1beta1.Messaging
                     * @instance
                     * @param {google.showcase.v1beta1.IListBlurbsRequest} request ListBlurbsRequest message or plain object
                     * @param {google.showcase.v1beta1.Messaging.ListBlurbsCallback} callback Node-style callback called with the error, if any, and ListBlurbsResponse
                     * @returns {undefined}
                     * @variation 1
                     */
                    Object.defineProperty(Messaging.prototype.listBlurbs = function listBlurbs(request, callback) {
                        return this.rpcCall(listBlurbs, $root.google.showcase.v1beta1.ListBlurbsRequest, $root.google.showcase.v1beta1.ListBlurbsResponse, request, callback);
                    }, "name", { value: "ListBlurbs" });
    
                    /**
                     * Calls ListBlurbs.
                     * @function listBlurbs
                     * @memberof google.showcase.v1beta1.Messaging
                     * @instance
                     * @param {google.showcase.v1beta1.IListBlurbsRequest} request ListBlurbsRequest message or plain object
                     * @returns {Promise<google.showcase.v1beta1.ListBlurbsResponse>} Promise
                     * @variation 2
                     */
    
                    /**
                     * Callback as used by {@link google.showcase.v1beta1.Messaging#searchBlurbs}.
                     * @memberof google.showcase.v1beta1.Messaging
                     * @typedef SearchBlurbsCallback
                     * @type {function}
                     * @param {Error|null} error Error, if any
                     * @param {google.longrunning.Operation} [response] Operation
                     */
    
                    /**
                     * Calls SearchBlurbs.
                     * @function searchBlurbs
                     * @memberof google.showcase.v1beta1.Messaging
                     * @instance
                     * @param {google.showcase.v1beta1.ISearchBlurbsRequest} request SearchBlurbsRequest message or plain object
                     * @param {google.showcase.v1beta1.Messaging.SearchBlurbsCallback} callback Node-style callback called with the error, if any, and Operation
                     * @returns {undefined}
                     * @variation 1
                     */
                    Object.defineProperty(Messaging.prototype.searchBlurbs = function searchBlurbs(request, callback) {
                        return this.rpcCall(searchBlurbs, $root.google.showcase.v1beta1.SearchBlurbsRequest, $root.google.longrunning.Operation, request, callback);
                    }, "name", { value: "SearchBlurbs" });
    
                    /**
                     * Calls SearchBlurbs.
                     * @function searchBlurbs
                     * @memberof google.showcase.v1beta1.Messaging
                     * @instance
                     * @param {google.showcase.v1beta1.ISearchBlurbsRequest} request SearchBlurbsRequest message or plain object
                     * @returns {Promise<google.longrunning.Operation>} Promise
                     * @variation 2
                     */
    
                    /**
                     * Callback as used by {@link google.showcase.v1beta1.Messaging#streamBlurbs}.
                     * @memberof google.showcase.v1beta1.Messaging
                     * @typedef StreamBlurbsCallback
                     * @type {function}
                     * @param {Error|null} error Error, if any
                     * @param {google.showcase.v1beta1.StreamBlurbsResponse} [response] StreamBlurbsResponse
                     */
    
                    /**
                     * Calls StreamBlurbs.
                     * @function streamBlurbs
                     * @memberof google.showcase.v1beta1.Messaging
                     * @instance
                     * @param {google.showcase.v1beta1.IStreamBlurbsRequest} request StreamBlurbsRequest message or plain object
                     * @param {google.showcase.v1beta1.Messaging.StreamBlurbsCallback} callback Node-style callback called with the error, if any, and StreamBlurbsResponse
                     * @returns {undefined}
                     * @variation 1
                     */
                    Object.defineProperty(Messaging.prototype.streamBlurbs = function streamBlurbs(request, callback) {
                        return this.rpcCall(streamBlurbs, $root.google.showcase.v1beta1.StreamBlurbsRequest, $root.google.showcase.v1beta1.StreamBlurbsResponse, request, callback);
                    }, "name", { value: "StreamBlurbs" });
    
                    /**
                     * Calls StreamBlurbs.
                     * @function streamBlurbs
                     * @memberof google.showcase.v1beta1.Messaging
                     * @instance
                     * @param {google.showcase.v1beta1.IStreamBlurbsRequest} request StreamBlurbsRequest message or plain object
                     * @returns {Promise<google.showcase.v1beta1.StreamBlurbsResponse>} Promise
                     * @variation 2
                     */
    
                    /**
                     * Callback as used by {@link google.showcase.v1beta1.Messaging#sendBlurbs}.
                     * @memberof google.showcase.v1beta1.Messaging
                     * @typedef SendBlurbsCallback
                     * @type {function}
                     * @param {Error|null} error Error, if any
                     * @param {google.showcase.v1beta1.SendBlurbsResponse} [response] SendBlurbsResponse
                     */
    
                    /**
                     * Calls SendBlurbs.
                     * @function sendBlurbs
                     * @memberof google.showcase.v1beta1.Messaging
                     * @instance
                     * @param {google.showcase.v1beta1.ICreateBlurbRequest} request CreateBlurbRequest message or plain object
                     * @param {google.showcase.v1beta1.Messaging.SendBlurbsCallback} callback Node-style callback called with the error, if any, and SendBlurbsResponse
                     * @returns {undefined}
                     * @variation 1
                     */
                    Object.defineProperty(Messaging.prototype.sendBlurbs = function sendBlurbs(request, callback) {
                        return this.rpcCall(sendBlurbs, $root.google.showcase.v1beta1.CreateBlurbRequest, $root.google.showcase.v1beta1.SendBlurbsResponse, request, callback);
                    }, "name", { value: "SendBlurbs" });
    
                    /**
                     * Calls SendBlurbs.
                     * @function sendBlurbs
                     * @memberof google.showcase.v1beta1.Messaging
                     * @instance
                     * @param {google.showcase.v1beta1.ICreateBlurbRequest} request CreateBlurbRequest message or plain object
                     * @returns {Promise<google.showcase.v1beta1.SendBlurbsResponse>} Promise
                     * @variation 2
                     */
    
                    /**
                     * Callback as used by {@link google.showcase.v1beta1.Messaging#connect}.
                     * @memberof google.showcase.v1beta1.Messaging
                     * @typedef ConnectCallback
                     * @type {function}
                     * @param {Error|null} error Error, if any
                     * @param {google.showcase.v1beta1.StreamBlurbsResponse} [response] StreamBlurbsResponse
                     */
    
                    /**
                     * Calls Connect.
                     * @function connect
                     * @memberof google.showcase.v1beta1.Messaging
                     * @instance
                     * @param {google.showcase.v1beta1.IConnectRequest} request ConnectRequest message or plain object
                     * @param {google.showcase.v1beta1.Messaging.ConnectCallback} callback Node-style callback called with the error, if any, and StreamBlurbsResponse
                     * @returns {undefined}
                     * @variation 1
                     */
                    Object.defineProperty(Messaging.prototype.connect = function connect(request, callback) {
                        return this.rpcCall(connect, $root.google.showcase.v1beta1.ConnectRequest, $root.google.showcase.v1beta1.StreamBlurbsResponse, request, callback);
                    }, "name", { value: "Connect" });
    
                    /**
                     * Calls Connect.
                     * @function connect
                     * @memberof google.showcase.v1beta1.Messaging
                     * @instance
                     * @param {google.showcase.v1beta1.IConnectRequest} request ConnectRequest message or plain object
                     * @returns {Promise<google.showcase.v1beta1.StreamBlurbsResponse>} Promise
                     * @variation 2
                     */
    
                    return Messaging;
                })();
    
                v1beta1.Room = (function() {
    
                    /**
                     * Properties of a Room.
                     * @memberof google.showcase.v1beta1
                     * @interface IRoom
                     * @property {string|null} [name] Room name
                     * @property {string|null} [displayName] Room displayName
                     * @property {string|null} [description] Room description
                     * @property {google.protobuf.ITimestamp|null} [createTime] Room createTime
                     * @property {google.protobuf.ITimestamp|null} [updateTime] Room updateTime
                     */
    
                    /**
                     * Constructs a new Room.
                     * @memberof google.showcase.v1beta1
                     * @classdesc Represents a Room.
                     * @implements IRoom
                     * @constructor
                     * @param {google.showcase.v1beta1.IRoom=} [properties] Properties to set
                     */
                    function Room(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * Room name.
                     * @member {string} name
                     * @memberof google.showcase.v1beta1.Room
                     * @instance
                     */
                    Room.prototype.name = "";
    
                    /**
                     * Room displayName.
                     * @member {string} displayName
                     * @memberof google.showcase.v1beta1.Room
                     * @instance
                     */
                    Room.prototype.displayName = "";
    
                    /**
                     * Room description.
                     * @member {string} description
                     * @memberof google.showcase.v1beta1.Room
                     * @instance
                     */
                    Room.prototype.description = "";
    
                    /**
                     * Room createTime.
                     * @member {google.protobuf.ITimestamp|null|undefined} createTime
                     * @memberof google.showcase.v1beta1.Room
                     * @instance
                     */
                    Room.prototype.createTime = null;
    
                    /**
                     * Room updateTime.
                     * @member {google.protobuf.ITimestamp|null|undefined} updateTime
                     * @memberof google.showcase.v1beta1.Room
                     * @instance
                     */
                    Room.prototype.updateTime = null;
    
                    /**
                     * Creates a new Room instance using the specified properties.
                     * @function create
                     * @memberof google.showcase.v1beta1.Room
                     * @static
                     * @param {google.showcase.v1beta1.IRoom=} [properties] Properties to set
                     * @returns {google.showcase.v1beta1.Room} Room instance
                     */
                    Room.create = function create(properties) {
                        return new Room(properties);
                    };
    
                    /**
                     * Encodes the specified Room message. Does not implicitly {@link google.showcase.v1beta1.Room.verify|verify} messages.
                     * @function encode
                     * @memberof google.showcase.v1beta1.Room
                     * @static
                     * @param {google.showcase.v1beta1.IRoom} message Room message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Room.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                        if (message.displayName != null && Object.hasOwnProperty.call(message, "displayName"))
                            writer.uint32(/* id 2, wireType 2 =*/18).string(message.displayName);
                        if (message.description != null && Object.hasOwnProperty.call(message, "description"))
                            writer.uint32(/* id 3, wireType 2 =*/26).string(message.description);
                        if (message.createTime != null && Object.hasOwnProperty.call(message, "createTime"))
                            $root.google.protobuf.Timestamp.encode(message.createTime, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                        if (message.updateTime != null && Object.hasOwnProperty.call(message, "updateTime"))
                            $root.google.protobuf.Timestamp.encode(message.updateTime, writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();
                        return writer;
                    };
    
                    /**
                     * Encodes the specified Room message, length delimited. Does not implicitly {@link google.showcase.v1beta1.Room.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof google.showcase.v1beta1.Room
                     * @static
                     * @param {google.showcase.v1beta1.IRoom} message Room message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Room.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a Room message from the specified reader or buffer.
                     * @function decode
                     * @memberof google.showcase.v1beta1.Room
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {google.showcase.v1beta1.Room} Room
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Room.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.showcase.v1beta1.Room();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.name = reader.string();
                                break;
                            case 2:
                                message.displayName = reader.string();
                                break;
                            case 3:
                                message.description = reader.string();
                                break;
                            case 4:
                                message.createTime = $root.google.protobuf.Timestamp.decode(reader, reader.uint32());
                                break;
                            case 5:
                                message.updateTime = $root.google.protobuf.Timestamp.decode(reader, reader.uint32());
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a Room message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof google.showcase.v1beta1.Room
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {google.showcase.v1beta1.Room} Room
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Room.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a Room message.
                     * @function verify
                     * @memberof google.showcase.v1beta1.Room
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    Room.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.name != null && message.hasOwnProperty("name"))
                            if (!$util.isString(message.name))
                                return "name: string expected";
                        if (message.displayName != null && message.hasOwnProperty("displayName"))
                            if (!$util.isString(message.displayName))
                                return "displayName: string expected";
                        if (message.description != null && message.hasOwnProperty("description"))
                            if (!$util.isString(message.description))
                                return "description: string expected";
                        if (message.createTime != null && message.hasOwnProperty("createTime")) {
                            var error = $root.google.protobuf.Timestamp.verify(message.createTime);
                            if (error)
                                return "createTime." + error;
                        }
                        if (message.updateTime != null && message.hasOwnProperty("updateTime")) {
                            var error = $root.google.protobuf.Timestamp.verify(message.updateTime);
                            if (error)
                                return "updateTime." + error;
                        }
                        return null;
                    };
    
                    /**
                     * Creates a Room message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof google.showcase.v1beta1.Room
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {google.showcase.v1beta1.Room} Room
                     */
                    Room.fromObject = function fromObject(object) {
                        if (object instanceof $root.google.showcase.v1beta1.Room)
                            return object;
                        var message = new $root.google.showcase.v1beta1.Room();
                        if (object.name != null)
                            message.name = String(object.name);
                        if (object.displayName != null)
                            message.displayName = String(object.displayName);
                        if (object.description != null)
                            message.description = String(object.description);
                        if (object.createTime != null) {
                            if (typeof object.createTime !== "object")
                                throw TypeError(".google.showcase.v1beta1.Room.createTime: object expected");
                            message.createTime = $root.google.protobuf.Timestamp.fromObject(object.createTime);
                        }
                        if (object.updateTime != null) {
                            if (typeof object.updateTime !== "object")
                                throw TypeError(".google.showcase.v1beta1.Room.updateTime: object expected");
                            message.updateTime = $root.google.protobuf.Timestamp.fromObject(object.updateTime);
                        }
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a Room message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof google.showcase.v1beta1.Room
                     * @static
                     * @param {google.showcase.v1beta1.Room} message Room
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    Room.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults) {
                            object.name = "";
                            object.displayName = "";
                            object.description = "";
                            object.createTime = null;
                            object.updateTime = null;
                        }
                        if (message.name != null && message.hasOwnProperty("name"))
                            object.name = message.name;
                        if (message.displayName != null && message.hasOwnProperty("displayName"))
                            object.displayName = message.displayName;
                        if (message.description != null && message.hasOwnProperty("description"))
                            object.description = message.description;
                        if (message.createTime != null && message.hasOwnProperty("createTime"))
                            object.createTime = $root.google.protobuf.Timestamp.toObject(message.createTime, options);
                        if (message.updateTime != null && message.hasOwnProperty("updateTime"))
                            object.updateTime = $root.google.protobuf.Timestamp.toObject(message.updateTime, options);
                        return object;
                    };
    
                    /**
                     * Converts this Room to JSON.
                     * @function toJSON
                     * @memberof google.showcase.v1beta1.Room
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    Room.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    return Room;
                })();
    
                v1beta1.CreateRoomRequest = (function() {
    
                    /**
                     * Properties of a CreateRoomRequest.
                     * @memberof google.showcase.v1beta1
                     * @interface ICreateRoomRequest
                     * @property {google.showcase.v1beta1.IRoom|null} [room] CreateRoomRequest room
                     */
    
                    /**
                     * Constructs a new CreateRoomRequest.
                     * @memberof google.showcase.v1beta1
                     * @classdesc Represents a CreateRoomRequest.
                     * @implements ICreateRoomRequest
                     * @constructor
                     * @param {google.showcase.v1beta1.ICreateRoomRequest=} [properties] Properties to set
                     */
                    function CreateRoomRequest(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * CreateRoomRequest room.
                     * @member {google.showcase.v1beta1.IRoom|null|undefined} room
                     * @memberof google.showcase.v1beta1.CreateRoomRequest
                     * @instance
                     */
                    CreateRoomRequest.prototype.room = null;
    
                    /**
                     * Creates a new CreateRoomRequest instance using the specified properties.
                     * @function create
                     * @memberof google.showcase.v1beta1.CreateRoomRequest
                     * @static
                     * @param {google.showcase.v1beta1.ICreateRoomRequest=} [properties] Properties to set
                     * @returns {google.showcase.v1beta1.CreateRoomRequest} CreateRoomRequest instance
                     */
                    CreateRoomRequest.create = function create(properties) {
                        return new CreateRoomRequest(properties);
                    };
    
                    /**
                     * Encodes the specified CreateRoomRequest message. Does not implicitly {@link google.showcase.v1beta1.CreateRoomRequest.verify|verify} messages.
                     * @function encode
                     * @memberof google.showcase.v1beta1.CreateRoomRequest
                     * @static
                     * @param {google.showcase.v1beta1.ICreateRoomRequest} message CreateRoomRequest message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    CreateRoomRequest.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.room != null && Object.hasOwnProperty.call(message, "room"))
                            $root.google.showcase.v1beta1.Room.encode(message.room, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                        return writer;
                    };
    
                    /**
                     * Encodes the specified CreateRoomRequest message, length delimited. Does not implicitly {@link google.showcase.v1beta1.CreateRoomRequest.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof google.showcase.v1beta1.CreateRoomRequest
                     * @static
                     * @param {google.showcase.v1beta1.ICreateRoomRequest} message CreateRoomRequest message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    CreateRoomRequest.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a CreateRoomRequest message from the specified reader or buffer.
                     * @function decode
                     * @memberof google.showcase.v1beta1.CreateRoomRequest
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {google.showcase.v1beta1.CreateRoomRequest} CreateRoomRequest
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    CreateRoomRequest.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.showcase.v1beta1.CreateRoomRequest();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.room = $root.google.showcase.v1beta1.Room.decode(reader, reader.uint32());
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a CreateRoomRequest message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof google.showcase.v1beta1.CreateRoomRequest
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {google.showcase.v1beta1.CreateRoomRequest} CreateRoomRequest
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    CreateRoomRequest.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a CreateRoomRequest message.
                     * @function verify
                     * @memberof google.showcase.v1beta1.CreateRoomRequest
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    CreateRoomRequest.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.room != null && message.hasOwnProperty("room")) {
                            var error = $root.google.showcase.v1beta1.Room.verify(message.room);
                            if (error)
                                return "room." + error;
                        }
                        return null;
                    };
    
                    /**
                     * Creates a CreateRoomRequest message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof google.showcase.v1beta1.CreateRoomRequest
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {google.showcase.v1beta1.CreateRoomRequest} CreateRoomRequest
                     */
                    CreateRoomRequest.fromObject = function fromObject(object) {
                        if (object instanceof $root.google.showcase.v1beta1.CreateRoomRequest)
                            return object;
                        var message = new $root.google.showcase.v1beta1.CreateRoomRequest();
                        if (object.room != null) {
                            if (typeof object.room !== "object")
                                throw TypeError(".google.showcase.v1beta1.CreateRoomRequest.room: object expected");
                            message.room = $root.google.showcase.v1beta1.Room.fromObject(object.room);
                        }
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a CreateRoomRequest message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof google.showcase.v1beta1.CreateRoomRequest
                     * @static
                     * @param {google.showcase.v1beta1.CreateRoomRequest} message CreateRoomRequest
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    CreateRoomRequest.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults)
                            object.room = null;
                        if (message.room != null && message.hasOwnProperty("room"))
                            object.room = $root.google.showcase.v1beta1.Room.toObject(message.room, options);
                        return object;
                    };
    
                    /**
                     * Converts this CreateRoomRequest to JSON.
                     * @function toJSON
                     * @memberof google.showcase.v1beta1.CreateRoomRequest
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    CreateRoomRequest.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    return CreateRoomRequest;
                })();
    
                v1beta1.GetRoomRequest = (function() {
    
                    /**
                     * Properties of a GetRoomRequest.
                     * @memberof google.showcase.v1beta1
                     * @interface IGetRoomRequest
                     * @property {string|null} [name] GetRoomRequest name
                     */
    
                    /**
                     * Constructs a new GetRoomRequest.
                     * @memberof google.showcase.v1beta1
                     * @classdesc Represents a GetRoomRequest.
                     * @implements IGetRoomRequest
                     * @constructor
                     * @param {google.showcase.v1beta1.IGetRoomRequest=} [properties] Properties to set
                     */
                    function GetRoomRequest(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * GetRoomRequest name.
                     * @member {string} name
                     * @memberof google.showcase.v1beta1.GetRoomRequest
                     * @instance
                     */
                    GetRoomRequest.prototype.name = "";
    
                    /**
                     * Creates a new GetRoomRequest instance using the specified properties.
                     * @function create
                     * @memberof google.showcase.v1beta1.GetRoomRequest
                     * @static
                     * @param {google.showcase.v1beta1.IGetRoomRequest=} [properties] Properties to set
                     * @returns {google.showcase.v1beta1.GetRoomRequest} GetRoomRequest instance
                     */
                    GetRoomRequest.create = function create(properties) {
                        return new GetRoomRequest(properties);
                    };
    
                    /**
                     * Encodes the specified GetRoomRequest message. Does not implicitly {@link google.showcase.v1beta1.GetRoomRequest.verify|verify} messages.
                     * @function encode
                     * @memberof google.showcase.v1beta1.GetRoomRequest
                     * @static
                     * @param {google.showcase.v1beta1.IGetRoomRequest} message GetRoomRequest message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    GetRoomRequest.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                        return writer;
                    };
    
                    /**
                     * Encodes the specified GetRoomRequest message, length delimited. Does not implicitly {@link google.showcase.v1beta1.GetRoomRequest.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof google.showcase.v1beta1.GetRoomRequest
                     * @static
                     * @param {google.showcase.v1beta1.IGetRoomRequest} message GetRoomRequest message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    GetRoomRequest.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a GetRoomRequest message from the specified reader or buffer.
                     * @function decode
                     * @memberof google.showcase.v1beta1.GetRoomRequest
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {google.showcase.v1beta1.GetRoomRequest} GetRoomRequest
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    GetRoomRequest.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.showcase.v1beta1.GetRoomRequest();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.name = reader.string();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a GetRoomRequest message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof google.showcase.v1beta1.GetRoomRequest
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {google.showcase.v1beta1.GetRoomRequest} GetRoomRequest
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    GetRoomRequest.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a GetRoomRequest message.
                     * @function verify
                     * @memberof google.showcase.v1beta1.GetRoomRequest
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    GetRoomRequest.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.name != null && message.hasOwnProperty("name"))
                            if (!$util.isString(message.name))
                                return "name: string expected";
                        return null;
                    };
    
                    /**
                     * Creates a GetRoomRequest message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof google.showcase.v1beta1.GetRoomRequest
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {google.showcase.v1beta1.GetRoomRequest} GetRoomRequest
                     */
                    GetRoomRequest.fromObject = function fromObject(object) {
                        if (object instanceof $root.google.showcase.v1beta1.GetRoomRequest)
                            return object;
                        var message = new $root.google.showcase.v1beta1.GetRoomRequest();
                        if (object.name != null)
                            message.name = String(object.name);
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a GetRoomRequest message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof google.showcase.v1beta1.GetRoomRequest
                     * @static
                     * @param {google.showcase.v1beta1.GetRoomRequest} message GetRoomRequest
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    GetRoomRequest.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults)
                            object.name = "";
                        if (message.name != null && message.hasOwnProperty("name"))
                            object.name = message.name;
                        return object;
                    };
    
                    /**
                     * Converts this GetRoomRequest to JSON.
                     * @function toJSON
                     * @memberof google.showcase.v1beta1.GetRoomRequest
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    GetRoomRequest.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    return GetRoomRequest;
                })();
    
                v1beta1.UpdateRoomRequest = (function() {
    
                    /**
                     * Properties of an UpdateRoomRequest.
                     * @memberof google.showcase.v1beta1
                     * @interface IUpdateRoomRequest
                     * @property {google.showcase.v1beta1.IRoom|null} [room] UpdateRoomRequest room
                     * @property {google.protobuf.IFieldMask|null} [updateMask] UpdateRoomRequest updateMask
                     */
    
                    /**
                     * Constructs a new UpdateRoomRequest.
                     * @memberof google.showcase.v1beta1
                     * @classdesc Represents an UpdateRoomRequest.
                     * @implements IUpdateRoomRequest
                     * @constructor
                     * @param {google.showcase.v1beta1.IUpdateRoomRequest=} [properties] Properties to set
                     */
                    function UpdateRoomRequest(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * UpdateRoomRequest room.
                     * @member {google.showcase.v1beta1.IRoom|null|undefined} room
                     * @memberof google.showcase.v1beta1.UpdateRoomRequest
                     * @instance
                     */
                    UpdateRoomRequest.prototype.room = null;
    
                    /**
                     * UpdateRoomRequest updateMask.
                     * @member {google.protobuf.IFieldMask|null|undefined} updateMask
                     * @memberof google.showcase.v1beta1.UpdateRoomRequest
                     * @instance
                     */
                    UpdateRoomRequest.prototype.updateMask = null;
    
                    /**
                     * Creates a new UpdateRoomRequest instance using the specified properties.
                     * @function create
                     * @memberof google.showcase.v1beta1.UpdateRoomRequest
                     * @static
                     * @param {google.showcase.v1beta1.IUpdateRoomRequest=} [properties] Properties to set
                     * @returns {google.showcase.v1beta1.UpdateRoomRequest} UpdateRoomRequest instance
                     */
                    UpdateRoomRequest.create = function create(properties) {
                        return new UpdateRoomRequest(properties);
                    };
    
                    /**
                     * Encodes the specified UpdateRoomRequest message. Does not implicitly {@link google.showcase.v1beta1.UpdateRoomRequest.verify|verify} messages.
                     * @function encode
                     * @memberof google.showcase.v1beta1.UpdateRoomRequest
                     * @static
                     * @param {google.showcase.v1beta1.IUpdateRoomRequest} message UpdateRoomRequest message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    UpdateRoomRequest.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.room != null && Object.hasOwnProperty.call(message, "room"))
                            $root.google.showcase.v1beta1.Room.encode(message.room, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                        if (message.updateMask != null && Object.hasOwnProperty.call(message, "updateMask"))
                            $root.google.protobuf.FieldMask.encode(message.updateMask, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                        return writer;
                    };
    
                    /**
                     * Encodes the specified UpdateRoomRequest message, length delimited. Does not implicitly {@link google.showcase.v1beta1.UpdateRoomRequest.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof google.showcase.v1beta1.UpdateRoomRequest
                     * @static
                     * @param {google.showcase.v1beta1.IUpdateRoomRequest} message UpdateRoomRequest message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    UpdateRoomRequest.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes an UpdateRoomRequest message from the specified reader or buffer.
                     * @function decode
                     * @memberof google.showcase.v1beta1.UpdateRoomRequest
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {google.showcase.v1beta1.UpdateRoomRequest} UpdateRoomRequest
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    UpdateRoomRequest.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.showcase.v1beta1.UpdateRoomRequest();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.room = $root.google.showcase.v1beta1.Room.decode(reader, reader.uint32());
                                break;
                            case 2:
                                message.updateMask = $root.google.protobuf.FieldMask.decode(reader, reader.uint32());
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes an UpdateRoomRequest message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof google.showcase.v1beta1.UpdateRoomRequest
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {google.showcase.v1beta1.UpdateRoomRequest} UpdateRoomRequest
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    UpdateRoomRequest.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies an UpdateRoomRequest message.
                     * @function verify
                     * @memberof google.showcase.v1beta1.UpdateRoomRequest
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    UpdateRoomRequest.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.room != null && message.hasOwnProperty("room")) {
                            var error = $root.google.showcase.v1beta1.Room.verify(message.room);
                            if (error)
                                return "room." + error;
                        }
                        if (message.updateMask != null && message.hasOwnProperty("updateMask")) {
                            var error = $root.google.protobuf.FieldMask.verify(message.updateMask);
                            if (error)
                                return "updateMask." + error;
                        }
                        return null;
                    };
    
                    /**
                     * Creates an UpdateRoomRequest message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof google.showcase.v1beta1.UpdateRoomRequest
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {google.showcase.v1beta1.UpdateRoomRequest} UpdateRoomRequest
                     */
                    UpdateRoomRequest.fromObject = function fromObject(object) {
                        if (object instanceof $root.google.showcase.v1beta1.UpdateRoomRequest)
                            return object;
                        var message = new $root.google.showcase.v1beta1.UpdateRoomRequest();
                        if (object.room != null) {
                            if (typeof object.room !== "object")
                                throw TypeError(".google.showcase.v1beta1.UpdateRoomRequest.room: object expected");
                            message.room = $root.google.showcase.v1beta1.Room.fromObject(object.room);
                        }
                        if (object.updateMask != null) {
                            if (typeof object.updateMask !== "object")
                                throw TypeError(".google.showcase.v1beta1.UpdateRoomRequest.updateMask: object expected");
                            message.updateMask = $root.google.protobuf.FieldMask.fromObject(object.updateMask);
                        }
                        return message;
                    };
    
                    /**
                     * Creates a plain object from an UpdateRoomRequest message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof google.showcase.v1beta1.UpdateRoomRequest
                     * @static
                     * @param {google.showcase.v1beta1.UpdateRoomRequest} message UpdateRoomRequest
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    UpdateRoomRequest.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults) {
                            object.room = null;
                            object.updateMask = null;
                        }
                        if (message.room != null && message.hasOwnProperty("room"))
                            object.room = $root.google.showcase.v1beta1.Room.toObject(message.room, options);
                        if (message.updateMask != null && message.hasOwnProperty("updateMask"))
                            object.updateMask = $root.google.protobuf.FieldMask.toObject(message.updateMask, options);
                        return object;
                    };
    
                    /**
                     * Converts this UpdateRoomRequest to JSON.
                     * @function toJSON
                     * @memberof google.showcase.v1beta1.UpdateRoomRequest
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    UpdateRoomRequest.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    return UpdateRoomRequest;
                })();
    
                v1beta1.DeleteRoomRequest = (function() {
    
                    /**
                     * Properties of a DeleteRoomRequest.
                     * @memberof google.showcase.v1beta1
                     * @interface IDeleteRoomRequest
                     * @property {string|null} [name] DeleteRoomRequest name
                     */
    
                    /**
                     * Constructs a new DeleteRoomRequest.
                     * @memberof google.showcase.v1beta1
                     * @classdesc Represents a DeleteRoomRequest.
                     * @implements IDeleteRoomRequest
                     * @constructor
                     * @param {google.showcase.v1beta1.IDeleteRoomRequest=} [properties] Properties to set
                     */
                    function DeleteRoomRequest(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * DeleteRoomRequest name.
                     * @member {string} name
                     * @memberof google.showcase.v1beta1.DeleteRoomRequest
                     * @instance
                     */
                    DeleteRoomRequest.prototype.name = "";
    
                    /**
                     * Creates a new DeleteRoomRequest instance using the specified properties.
                     * @function create
                     * @memberof google.showcase.v1beta1.DeleteRoomRequest
                     * @static
                     * @param {google.showcase.v1beta1.IDeleteRoomRequest=} [properties] Properties to set
                     * @returns {google.showcase.v1beta1.DeleteRoomRequest} DeleteRoomRequest instance
                     */
                    DeleteRoomRequest.create = function create(properties) {
                        return new DeleteRoomRequest(properties);
                    };
    
                    /**
                     * Encodes the specified DeleteRoomRequest message. Does not implicitly {@link google.showcase.v1beta1.DeleteRoomRequest.verify|verify} messages.
                     * @function encode
                     * @memberof google.showcase.v1beta1.DeleteRoomRequest
                     * @static
                     * @param {google.showcase.v1beta1.IDeleteRoomRequest} message DeleteRoomRequest message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    DeleteRoomRequest.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                        return writer;
                    };
    
                    /**
                     * Encodes the specified DeleteRoomRequest message, length delimited. Does not implicitly {@link google.showcase.v1beta1.DeleteRoomRequest.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof google.showcase.v1beta1.DeleteRoomRequest
                     * @static
                     * @param {google.showcase.v1beta1.IDeleteRoomRequest} message DeleteRoomRequest message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    DeleteRoomRequest.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a DeleteRoomRequest message from the specified reader or buffer.
                     * @function decode
                     * @memberof google.showcase.v1beta1.DeleteRoomRequest
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {google.showcase.v1beta1.DeleteRoomRequest} DeleteRoomRequest
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    DeleteRoomRequest.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.showcase.v1beta1.DeleteRoomRequest();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.name = reader.string();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a DeleteRoomRequest message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof google.showcase.v1beta1.DeleteRoomRequest
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {google.showcase.v1beta1.DeleteRoomRequest} DeleteRoomRequest
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    DeleteRoomRequest.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a DeleteRoomRequest message.
                     * @function verify
                     * @memberof google.showcase.v1beta1.DeleteRoomRequest
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    DeleteRoomRequest.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.name != null && message.hasOwnProperty("name"))
                            if (!$util.isString(message.name))
                                return "name: string expected";
                        return null;
                    };
    
                    /**
                     * Creates a DeleteRoomRequest message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof google.showcase.v1beta1.DeleteRoomRequest
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {google.showcase.v1beta1.DeleteRoomRequest} DeleteRoomRequest
                     */
                    DeleteRoomRequest.fromObject = function fromObject(object) {
                        if (object instanceof $root.google.showcase.v1beta1.DeleteRoomRequest)
                            return object;
                        var message = new $root.google.showcase.v1beta1.DeleteRoomRequest();
                        if (object.name != null)
                            message.name = String(object.name);
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a DeleteRoomRequest message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof google.showcase.v1beta1.DeleteRoomRequest
                     * @static
                     * @param {google.showcase.v1beta1.DeleteRoomRequest} message DeleteRoomRequest
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    DeleteRoomRequest.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults)
                            object.name = "";
                        if (message.name != null && message.hasOwnProperty("name"))
                            object.name = message.name;
                        return object;
                    };
    
                    /**
                     * Converts this DeleteRoomRequest to JSON.
                     * @function toJSON
                     * @memberof google.showcase.v1beta1.DeleteRoomRequest
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    DeleteRoomRequest.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    return DeleteRoomRequest;
                })();
    
                v1beta1.ListRoomsRequest = (function() {
    
                    /**
                     * Properties of a ListRoomsRequest.
                     * @memberof google.showcase.v1beta1
                     * @interface IListRoomsRequest
                     * @property {number|null} [pageSize] ListRoomsRequest pageSize
                     * @property {string|null} [pageToken] ListRoomsRequest pageToken
                     */
    
                    /**
                     * Constructs a new ListRoomsRequest.
                     * @memberof google.showcase.v1beta1
                     * @classdesc Represents a ListRoomsRequest.
                     * @implements IListRoomsRequest
                     * @constructor
                     * @param {google.showcase.v1beta1.IListRoomsRequest=} [properties] Properties to set
                     */
                    function ListRoomsRequest(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * ListRoomsRequest pageSize.
                     * @member {number} pageSize
                     * @memberof google.showcase.v1beta1.ListRoomsRequest
                     * @instance
                     */
                    ListRoomsRequest.prototype.pageSize = 0;
    
                    /**
                     * ListRoomsRequest pageToken.
                     * @member {string} pageToken
                     * @memberof google.showcase.v1beta1.ListRoomsRequest
                     * @instance
                     */
                    ListRoomsRequest.prototype.pageToken = "";
    
                    /**
                     * Creates a new ListRoomsRequest instance using the specified properties.
                     * @function create
                     * @memberof google.showcase.v1beta1.ListRoomsRequest
                     * @static
                     * @param {google.showcase.v1beta1.IListRoomsRequest=} [properties] Properties to set
                     * @returns {google.showcase.v1beta1.ListRoomsRequest} ListRoomsRequest instance
                     */
                    ListRoomsRequest.create = function create(properties) {
                        return new ListRoomsRequest(properties);
                    };
    
                    /**
                     * Encodes the specified ListRoomsRequest message. Does not implicitly {@link google.showcase.v1beta1.ListRoomsRequest.verify|verify} messages.
                     * @function encode
                     * @memberof google.showcase.v1beta1.ListRoomsRequest
                     * @static
                     * @param {google.showcase.v1beta1.IListRoomsRequest} message ListRoomsRequest message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    ListRoomsRequest.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.pageSize != null && Object.hasOwnProperty.call(message, "pageSize"))
                            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.pageSize);
                        if (message.pageToken != null && Object.hasOwnProperty.call(message, "pageToken"))
                            writer.uint32(/* id 2, wireType 2 =*/18).string(message.pageToken);
                        return writer;
                    };
    
                    /**
                     * Encodes the specified ListRoomsRequest message, length delimited. Does not implicitly {@link google.showcase.v1beta1.ListRoomsRequest.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof google.showcase.v1beta1.ListRoomsRequest
                     * @static
                     * @param {google.showcase.v1beta1.IListRoomsRequest} message ListRoomsRequest message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    ListRoomsRequest.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a ListRoomsRequest message from the specified reader or buffer.
                     * @function decode
                     * @memberof google.showcase.v1beta1.ListRoomsRequest
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {google.showcase.v1beta1.ListRoomsRequest} ListRoomsRequest
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    ListRoomsRequest.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.showcase.v1beta1.ListRoomsRequest();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.pageSize = reader.int32();
                                break;
                            case 2:
                                message.pageToken = reader.string();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a ListRoomsRequest message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof google.showcase.v1beta1.ListRoomsRequest
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {google.showcase.v1beta1.ListRoomsRequest} ListRoomsRequest
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    ListRoomsRequest.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a ListRoomsRequest message.
                     * @function verify
                     * @memberof google.showcase.v1beta1.ListRoomsRequest
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    ListRoomsRequest.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.pageSize != null && message.hasOwnProperty("pageSize"))
                            if (!$util.isInteger(message.pageSize))
                                return "pageSize: integer expected";
                        if (message.pageToken != null && message.hasOwnProperty("pageToken"))
                            if (!$util.isString(message.pageToken))
                                return "pageToken: string expected";
                        return null;
                    };
    
                    /**
                     * Creates a ListRoomsRequest message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof google.showcase.v1beta1.ListRoomsRequest
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {google.showcase.v1beta1.ListRoomsRequest} ListRoomsRequest
                     */
                    ListRoomsRequest.fromObject = function fromObject(object) {
                        if (object instanceof $root.google.showcase.v1beta1.ListRoomsRequest)
                            return object;
                        var message = new $root.google.showcase.v1beta1.ListRoomsRequest();
                        if (object.pageSize != null)
                            message.pageSize = object.pageSize | 0;
                        if (object.pageToken != null)
                            message.pageToken = String(object.pageToken);
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a ListRoomsRequest message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof google.showcase.v1beta1.ListRoomsRequest
                     * @static
                     * @param {google.showcase.v1beta1.ListRoomsRequest} message ListRoomsRequest
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    ListRoomsRequest.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults) {
                            object.pageSize = 0;
                            object.pageToken = "";
                        }
                        if (message.pageSize != null && message.hasOwnProperty("pageSize"))
                            object.pageSize = message.pageSize;
                        if (message.pageToken != null && message.hasOwnProperty("pageToken"))
                            object.pageToken = message.pageToken;
                        return object;
                    };
    
                    /**
                     * Converts this ListRoomsRequest to JSON.
                     * @function toJSON
                     * @memberof google.showcase.v1beta1.ListRoomsRequest
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    ListRoomsRequest.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    return ListRoomsRequest;
                })();
    
                v1beta1.ListRoomsResponse = (function() {
    
                    /**
                     * Properties of a ListRoomsResponse.
                     * @memberof google.showcase.v1beta1
                     * @interface IListRoomsResponse
                     * @property {Array.<google.showcase.v1beta1.IRoom>|null} [rooms] ListRoomsResponse rooms
                     * @property {string|null} [nextPageToken] ListRoomsResponse nextPageToken
                     */
    
                    /**
                     * Constructs a new ListRoomsResponse.
                     * @memberof google.showcase.v1beta1
                     * @classdesc Represents a ListRoomsResponse.
                     * @implements IListRoomsResponse
                     * @constructor
                     * @param {google.showcase.v1beta1.IListRoomsResponse=} [properties] Properties to set
                     */
                    function ListRoomsResponse(properties) {
                        this.rooms = [];
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * ListRoomsResponse rooms.
                     * @member {Array.<google.showcase.v1beta1.IRoom>} rooms
                     * @memberof google.showcase.v1beta1.ListRoomsResponse
                     * @instance
                     */
                    ListRoomsResponse.prototype.rooms = $util.emptyArray;
    
                    /**
                     * ListRoomsResponse nextPageToken.
                     * @member {string} nextPageToken
                     * @memberof google.showcase.v1beta1.ListRoomsResponse
                     * @instance
                     */
                    ListRoomsResponse.prototype.nextPageToken = "";
    
                    /**
                     * Creates a new ListRoomsResponse instance using the specified properties.
                     * @function create
                     * @memberof google.showcase.v1beta1.ListRoomsResponse
                     * @static
                     * @param {google.showcase.v1beta1.IListRoomsResponse=} [properties] Properties to set
                     * @returns {google.showcase.v1beta1.ListRoomsResponse} ListRoomsResponse instance
                     */
                    ListRoomsResponse.create = function create(properties) {
                        return new ListRoomsResponse(properties);
                    };
    
                    /**
                     * Encodes the specified ListRoomsResponse message. Does not implicitly {@link google.showcase.v1beta1.ListRoomsResponse.verify|verify} messages.
                     * @function encode
                     * @memberof google.showcase.v1beta1.ListRoomsResponse
                     * @static
                     * @param {google.showcase.v1beta1.IListRoomsResponse} message ListRoomsResponse message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    ListRoomsResponse.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.rooms != null && message.rooms.length)
                            for (var i = 0; i < message.rooms.length; ++i)
                                $root.google.showcase.v1beta1.Room.encode(message.rooms[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                        if (message.nextPageToken != null && Object.hasOwnProperty.call(message, "nextPageToken"))
                            writer.uint32(/* id 2, wireType 2 =*/18).string(message.nextPageToken);
                        return writer;
                    };
    
                    /**
                     * Encodes the specified ListRoomsResponse message, length delimited. Does not implicitly {@link google.showcase.v1beta1.ListRoomsResponse.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof google.showcase.v1beta1.ListRoomsResponse
                     * @static
                     * @param {google.showcase.v1beta1.IListRoomsResponse} message ListRoomsResponse message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    ListRoomsResponse.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a ListRoomsResponse message from the specified reader or buffer.
                     * @function decode
                     * @memberof google.showcase.v1beta1.ListRoomsResponse
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {google.showcase.v1beta1.ListRoomsResponse} ListRoomsResponse
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    ListRoomsResponse.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.showcase.v1beta1.ListRoomsResponse();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                if (!(message.rooms && message.rooms.length))
                                    message.rooms = [];
                                message.rooms.push($root.google.showcase.v1beta1.Room.decode(reader, reader.uint32()));
                                break;
                            case 2:
                                message.nextPageToken = reader.string();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a ListRoomsResponse message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof google.showcase.v1beta1.ListRoomsResponse
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {google.showcase.v1beta1.ListRoomsResponse} ListRoomsResponse
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    ListRoomsResponse.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a ListRoomsResponse message.
                     * @function verify
                     * @memberof google.showcase.v1beta1.ListRoomsResponse
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    ListRoomsResponse.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.rooms != null && message.hasOwnProperty("rooms")) {
                            if (!Array.isArray(message.rooms))
                                return "rooms: array expected";
                            for (var i = 0; i < message.rooms.length; ++i) {
                                var error = $root.google.showcase.v1beta1.Room.verify(message.rooms[i]);
                                if (error)
                                    return "rooms." + error;
                            }
                        }
                        if (message.nextPageToken != null && message.hasOwnProperty("nextPageToken"))
                            if (!$util.isString(message.nextPageToken))
                                return "nextPageToken: string expected";
                        return null;
                    };
    
                    /**
                     * Creates a ListRoomsResponse message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof google.showcase.v1beta1.ListRoomsResponse
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {google.showcase.v1beta1.ListRoomsResponse} ListRoomsResponse
                     */
                    ListRoomsResponse.fromObject = function fromObject(object) {
                        if (object instanceof $root.google.showcase.v1beta1.ListRoomsResponse)
                            return object;
                        var message = new $root.google.showcase.v1beta1.ListRoomsResponse();
                        if (object.rooms) {
                            if (!Array.isArray(object.rooms))
                                throw TypeError(".google.showcase.v1beta1.ListRoomsResponse.rooms: array expected");
                            message.rooms = [];
                            for (var i = 0; i < object.rooms.length; ++i) {
                                if (typeof object.rooms[i] !== "object")
                                    throw TypeError(".google.showcase.v1beta1.ListRoomsResponse.rooms: object expected");
                                message.rooms[i] = $root.google.showcase.v1beta1.Room.fromObject(object.rooms[i]);
                            }
                        }
                        if (object.nextPageToken != null)
                            message.nextPageToken = String(object.nextPageToken);
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a ListRoomsResponse message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof google.showcase.v1beta1.ListRoomsResponse
                     * @static
                     * @param {google.showcase.v1beta1.ListRoomsResponse} message ListRoomsResponse
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    ListRoomsResponse.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.arrays || options.defaults)
                            object.rooms = [];
                        if (options.defaults)
                            object.nextPageToken = "";
                        if (message.rooms && message.rooms.length) {
                            object.rooms = [];
                            for (var j = 0; j < message.rooms.length; ++j)
                                object.rooms[j] = $root.google.showcase.v1beta1.Room.toObject(message.rooms[j], options);
                        }
                        if (message.nextPageToken != null && message.hasOwnProperty("nextPageToken"))
                            object.nextPageToken = message.nextPageToken;
                        return object;
                    };
    
                    /**
                     * Converts this ListRoomsResponse to JSON.
                     * @function toJSON
                     * @memberof google.showcase.v1beta1.ListRoomsResponse
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    ListRoomsResponse.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    return ListRoomsResponse;
                })();
    
                v1beta1.Blurb = (function() {
    
                    /**
                     * Properties of a Blurb.
                     * @memberof google.showcase.v1beta1
                     * @interface IBlurb
                     * @property {string|null} [name] Blurb name
                     * @property {string|null} [user] Blurb user
                     * @property {string|null} [text] Blurb text
                     * @property {Uint8Array|null} [image] Blurb image
                     * @property {google.protobuf.ITimestamp|null} [createTime] Blurb createTime
                     * @property {google.protobuf.ITimestamp|null} [updateTime] Blurb updateTime
                     */
    
                    /**
                     * Constructs a new Blurb.
                     * @memberof google.showcase.v1beta1
                     * @classdesc Represents a Blurb.
                     * @implements IBlurb
                     * @constructor
                     * @param {google.showcase.v1beta1.IBlurb=} [properties] Properties to set
                     */
                    function Blurb(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * Blurb name.
                     * @member {string} name
                     * @memberof google.showcase.v1beta1.Blurb
                     * @instance
                     */
                    Blurb.prototype.name = "";
    
                    /**
                     * Blurb user.
                     * @member {string} user
                     * @memberof google.showcase.v1beta1.Blurb
                     * @instance
                     */
                    Blurb.prototype.user = "";
    
                    /**
                     * Blurb text.
                     * @member {string|null|undefined} text
                     * @memberof google.showcase.v1beta1.Blurb
                     * @instance
                     */
                    Blurb.prototype.text = null;
    
                    /**
                     * Blurb image.
                     * @member {Uint8Array|null|undefined} image
                     * @memberof google.showcase.v1beta1.Blurb
                     * @instance
                     */
                    Blurb.prototype.image = null;
    
                    /**
                     * Blurb createTime.
                     * @member {google.protobuf.ITimestamp|null|undefined} createTime
                     * @memberof google.showcase.v1beta1.Blurb
                     * @instance
                     */
                    Blurb.prototype.createTime = null;
    
                    /**
                     * Blurb updateTime.
                     * @member {google.protobuf.ITimestamp|null|undefined} updateTime
                     * @memberof google.showcase.v1beta1.Blurb
                     * @instance
                     */
                    Blurb.prototype.updateTime = null;
    
                    // OneOf field names bound to virtual getters and setters
                    var $oneOfFields;
    
                    /**
                     * Blurb content.
                     * @member {"text"|"image"|undefined} content
                     * @memberof google.showcase.v1beta1.Blurb
                     * @instance
                     */
                    Object.defineProperty(Blurb.prototype, "content", {
                        get: $util.oneOfGetter($oneOfFields = ["text", "image"]),
                        set: $util.oneOfSetter($oneOfFields)
                    });
    
                    /**
                     * Creates a new Blurb instance using the specified properties.
                     * @function create
                     * @memberof google.showcase.v1beta1.Blurb
                     * @static
                     * @param {google.showcase.v1beta1.IBlurb=} [properties] Properties to set
                     * @returns {google.showcase.v1beta1.Blurb} Blurb instance
                     */
                    Blurb.create = function create(properties) {
                        return new Blurb(properties);
                    };
    
                    /**
                     * Encodes the specified Blurb message. Does not implicitly {@link google.showcase.v1beta1.Blurb.verify|verify} messages.
                     * @function encode
                     * @memberof google.showcase.v1beta1.Blurb
                     * @static
                     * @param {google.showcase.v1beta1.IBlurb} message Blurb message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Blurb.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                        if (message.user != null && Object.hasOwnProperty.call(message, "user"))
                            writer.uint32(/* id 2, wireType 2 =*/18).string(message.user);
                        if (message.text != null && Object.hasOwnProperty.call(message, "text"))
                            writer.uint32(/* id 3, wireType 2 =*/26).string(message.text);
                        if (message.image != null && Object.hasOwnProperty.call(message, "image"))
                            writer.uint32(/* id 4, wireType 2 =*/34).bytes(message.image);
                        if (message.createTime != null && Object.hasOwnProperty.call(message, "createTime"))
                            $root.google.protobuf.Timestamp.encode(message.createTime, writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();
                        if (message.updateTime != null && Object.hasOwnProperty.call(message, "updateTime"))
                            $root.google.protobuf.Timestamp.encode(message.updateTime, writer.uint32(/* id 6, wireType 2 =*/50).fork()).ldelim();
                        return writer;
                    };
    
                    /**
                     * Encodes the specified Blurb message, length delimited. Does not implicitly {@link google.showcase.v1beta1.Blurb.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof google.showcase.v1beta1.Blurb
                     * @static
                     * @param {google.showcase.v1beta1.IBlurb} message Blurb message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Blurb.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a Blurb message from the specified reader or buffer.
                     * @function decode
                     * @memberof google.showcase.v1beta1.Blurb
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {google.showcase.v1beta1.Blurb} Blurb
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Blurb.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.showcase.v1beta1.Blurb();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.name = reader.string();
                                break;
                            case 2:
                                message.user = reader.string();
                                break;
                            case 3:
                                message.text = reader.string();
                                break;
                            case 4:
                                message.image = reader.bytes();
                                break;
                            case 5:
                                message.createTime = $root.google.protobuf.Timestamp.decode(reader, reader.uint32());
                                break;
                            case 6:
                                message.updateTime = $root.google.protobuf.Timestamp.decode(reader, reader.uint32());
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a Blurb message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof google.showcase.v1beta1.Blurb
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {google.showcase.v1beta1.Blurb} Blurb
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Blurb.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a Blurb message.
                     * @function verify
                     * @memberof google.showcase.v1beta1.Blurb
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    Blurb.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        var properties = {};
                        if (message.name != null && message.hasOwnProperty("name"))
                            if (!$util.isString(message.name))
                                return "name: string expected";
                        if (message.user != null && message.hasOwnProperty("user"))
                            if (!$util.isString(message.user))
                                return "user: string expected";
                        if (message.text != null && message.hasOwnProperty("text")) {
                            properties.content = 1;
                            if (!$util.isString(message.text))
                                return "text: string expected";
                        }
                        if (message.image != null && message.hasOwnProperty("image")) {
                            if (properties.content === 1)
                                return "content: multiple values";
                            properties.content = 1;
                            if (!(message.image && typeof message.image.length === "number" || $util.isString(message.image)))
                                return "image: buffer expected";
                        }
                        if (message.createTime != null && message.hasOwnProperty("createTime")) {
                            var error = $root.google.protobuf.Timestamp.verify(message.createTime);
                            if (error)
                                return "createTime." + error;
                        }
                        if (message.updateTime != null && message.hasOwnProperty("updateTime")) {
                            var error = $root.google.protobuf.Timestamp.verify(message.updateTime);
                            if (error)
                                return "updateTime." + error;
                        }
                        return null;
                    };
    
                    /**
                     * Creates a Blurb message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof google.showcase.v1beta1.Blurb
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {google.showcase.v1beta1.Blurb} Blurb
                     */
                    Blurb.fromObject = function fromObject(object) {
                        if (object instanceof $root.google.showcase.v1beta1.Blurb)
                            return object;
                        var message = new $root.google.showcase.v1beta1.Blurb();
                        if (object.name != null)
                            message.name = String(object.name);
                        if (object.user != null)
                            message.user = String(object.user);
                        if (object.text != null)
                            message.text = String(object.text);
                        if (object.image != null)
                            if (typeof object.image === "string")
                                $util.base64.decode(object.image, message.image = $util.newBuffer($util.base64.length(object.image)), 0);
                            else if (object.image.length)
                                message.image = object.image;
                        if (object.createTime != null) {
                            if (typeof object.createTime !== "object")
                                throw TypeError(".google.showcase.v1beta1.Blurb.createTime: object expected");
                            message.createTime = $root.google.protobuf.Timestamp.fromObject(object.createTime);
                        }
                        if (object.updateTime != null) {
                            if (typeof object.updateTime !== "object")
                                throw TypeError(".google.showcase.v1beta1.Blurb.updateTime: object expected");
                            message.updateTime = $root.google.protobuf.Timestamp.fromObject(object.updateTime);
                        }
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a Blurb message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof google.showcase.v1beta1.Blurb
                     * @static
                     * @param {google.showcase.v1beta1.Blurb} message Blurb
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    Blurb.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults) {
                            object.name = "";
                            object.user = "";
                            object.createTime = null;
                            object.updateTime = null;
                        }
                        if (message.name != null && message.hasOwnProperty("name"))
                            object.name = message.name;
                        if (message.user != null && message.hasOwnProperty("user"))
                            object.user = message.user;
                        if (message.text != null && message.hasOwnProperty("text")) {
                            object.text = message.text;
                            if (options.oneofs)
                                object.content = "text";
                        }
                        if (message.image != null && message.hasOwnProperty("image")) {
                            object.image = options.bytes === String ? $util.base64.encode(message.image, 0, message.image.length) : options.bytes === Array ? Array.prototype.slice.call(message.image) : message.image;
                            if (options.oneofs)
                                object.content = "image";
                        }
                        if (message.createTime != null && message.hasOwnProperty("createTime"))
                            object.createTime = $root.google.protobuf.Timestamp.toObject(message.createTime, options);
                        if (message.updateTime != null && message.hasOwnProperty("updateTime"))
                            object.updateTime = $root.google.protobuf.Timestamp.toObject(message.updateTime, options);
                        return object;
                    };
    
                    /**
                     * Converts this Blurb to JSON.
                     * @function toJSON
                     * @memberof google.showcase.v1beta1.Blurb
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    Blurb.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    return Blurb;
                })();
    
                v1beta1.CreateBlurbRequest = (function() {
    
                    /**
                     * Properties of a CreateBlurbRequest.
                     * @memberof google.showcase.v1beta1
                     * @interface ICreateBlurbRequest
                     * @property {string|null} [parent] CreateBlurbRequest parent
                     * @property {google.showcase.v1beta1.IBlurb|null} [blurb] CreateBlurbRequest blurb
                     */
    
                    /**
                     * Constructs a new CreateBlurbRequest.
                     * @memberof google.showcase.v1beta1
                     * @classdesc Represents a CreateBlurbRequest.
                     * @implements ICreateBlurbRequest
                     * @constructor
                     * @param {google.showcase.v1beta1.ICreateBlurbRequest=} [properties] Properties to set
                     */
                    function CreateBlurbRequest(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * CreateBlurbRequest parent.
                     * @member {string} parent
                     * @memberof google.showcase.v1beta1.CreateBlurbRequest
                     * @instance
                     */
                    CreateBlurbRequest.prototype.parent = "";
    
                    /**
                     * CreateBlurbRequest blurb.
                     * @member {google.showcase.v1beta1.IBlurb|null|undefined} blurb
                     * @memberof google.showcase.v1beta1.CreateBlurbRequest
                     * @instance
                     */
                    CreateBlurbRequest.prototype.blurb = null;
    
                    /**
                     * Creates a new CreateBlurbRequest instance using the specified properties.
                     * @function create
                     * @memberof google.showcase.v1beta1.CreateBlurbRequest
                     * @static
                     * @param {google.showcase.v1beta1.ICreateBlurbRequest=} [properties] Properties to set
                     * @returns {google.showcase.v1beta1.CreateBlurbRequest} CreateBlurbRequest instance
                     */
                    CreateBlurbRequest.create = function create(properties) {
                        return new CreateBlurbRequest(properties);
                    };
    
                    /**
                     * Encodes the specified CreateBlurbRequest message. Does not implicitly {@link google.showcase.v1beta1.CreateBlurbRequest.verify|verify} messages.
                     * @function encode
                     * @memberof google.showcase.v1beta1.CreateBlurbRequest
                     * @static
                     * @param {google.showcase.v1beta1.ICreateBlurbRequest} message CreateBlurbRequest message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    CreateBlurbRequest.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.parent != null && Object.hasOwnProperty.call(message, "parent"))
                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.parent);
                        if (message.blurb != null && Object.hasOwnProperty.call(message, "blurb"))
                            $root.google.showcase.v1beta1.Blurb.encode(message.blurb, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                        return writer;
                    };
    
                    /**
                     * Encodes the specified CreateBlurbRequest message, length delimited. Does not implicitly {@link google.showcase.v1beta1.CreateBlurbRequest.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof google.showcase.v1beta1.CreateBlurbRequest
                     * @static
                     * @param {google.showcase.v1beta1.ICreateBlurbRequest} message CreateBlurbRequest message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    CreateBlurbRequest.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a CreateBlurbRequest message from the specified reader or buffer.
                     * @function decode
                     * @memberof google.showcase.v1beta1.CreateBlurbRequest
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {google.showcase.v1beta1.CreateBlurbRequest} CreateBlurbRequest
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    CreateBlurbRequest.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.showcase.v1beta1.CreateBlurbRequest();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.parent = reader.string();
                                break;
                            case 2:
                                message.blurb = $root.google.showcase.v1beta1.Blurb.decode(reader, reader.uint32());
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a CreateBlurbRequest message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof google.showcase.v1beta1.CreateBlurbRequest
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {google.showcase.v1beta1.CreateBlurbRequest} CreateBlurbRequest
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    CreateBlurbRequest.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a CreateBlurbRequest message.
                     * @function verify
                     * @memberof google.showcase.v1beta1.CreateBlurbRequest
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    CreateBlurbRequest.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.parent != null && message.hasOwnProperty("parent"))
                            if (!$util.isString(message.parent))
                                return "parent: string expected";
                        if (message.blurb != null && message.hasOwnProperty("blurb")) {
                            var error = $root.google.showcase.v1beta1.Blurb.verify(message.blurb);
                            if (error)
                                return "blurb." + error;
                        }
                        return null;
                    };
    
                    /**
                     * Creates a CreateBlurbRequest message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof google.showcase.v1beta1.CreateBlurbRequest
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {google.showcase.v1beta1.CreateBlurbRequest} CreateBlurbRequest
                     */
                    CreateBlurbRequest.fromObject = function fromObject(object) {
                        if (object instanceof $root.google.showcase.v1beta1.CreateBlurbRequest)
                            return object;
                        var message = new $root.google.showcase.v1beta1.CreateBlurbRequest();
                        if (object.parent != null)
                            message.parent = String(object.parent);
                        if (object.blurb != null) {
                            if (typeof object.blurb !== "object")
                                throw TypeError(".google.showcase.v1beta1.CreateBlurbRequest.blurb: object expected");
                            message.blurb = $root.google.showcase.v1beta1.Blurb.fromObject(object.blurb);
                        }
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a CreateBlurbRequest message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof google.showcase.v1beta1.CreateBlurbRequest
                     * @static
                     * @param {google.showcase.v1beta1.CreateBlurbRequest} message CreateBlurbRequest
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    CreateBlurbRequest.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults) {
                            object.parent = "";
                            object.blurb = null;
                        }
                        if (message.parent != null && message.hasOwnProperty("parent"))
                            object.parent = message.parent;
                        if (message.blurb != null && message.hasOwnProperty("blurb"))
                            object.blurb = $root.google.showcase.v1beta1.Blurb.toObject(message.blurb, options);
                        return object;
                    };
    
                    /**
                     * Converts this CreateBlurbRequest to JSON.
                     * @function toJSON
                     * @memberof google.showcase.v1beta1.CreateBlurbRequest
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    CreateBlurbRequest.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    return CreateBlurbRequest;
                })();
    
                v1beta1.GetBlurbRequest = (function() {
    
                    /**
                     * Properties of a GetBlurbRequest.
                     * @memberof google.showcase.v1beta1
                     * @interface IGetBlurbRequest
                     * @property {string|null} [name] GetBlurbRequest name
                     */
    
                    /**
                     * Constructs a new GetBlurbRequest.
                     * @memberof google.showcase.v1beta1
                     * @classdesc Represents a GetBlurbRequest.
                     * @implements IGetBlurbRequest
                     * @constructor
                     * @param {google.showcase.v1beta1.IGetBlurbRequest=} [properties] Properties to set
                     */
                    function GetBlurbRequest(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * GetBlurbRequest name.
                     * @member {string} name
                     * @memberof google.showcase.v1beta1.GetBlurbRequest
                     * @instance
                     */
                    GetBlurbRequest.prototype.name = "";
    
                    /**
                     * Creates a new GetBlurbRequest instance using the specified properties.
                     * @function create
                     * @memberof google.showcase.v1beta1.GetBlurbRequest
                     * @static
                     * @param {google.showcase.v1beta1.IGetBlurbRequest=} [properties] Properties to set
                     * @returns {google.showcase.v1beta1.GetBlurbRequest} GetBlurbRequest instance
                     */
                    GetBlurbRequest.create = function create(properties) {
                        return new GetBlurbRequest(properties);
                    };
    
                    /**
                     * Encodes the specified GetBlurbRequest message. Does not implicitly {@link google.showcase.v1beta1.GetBlurbRequest.verify|verify} messages.
                     * @function encode
                     * @memberof google.showcase.v1beta1.GetBlurbRequest
                     * @static
                     * @param {google.showcase.v1beta1.IGetBlurbRequest} message GetBlurbRequest message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    GetBlurbRequest.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                        return writer;
                    };
    
                    /**
                     * Encodes the specified GetBlurbRequest message, length delimited. Does not implicitly {@link google.showcase.v1beta1.GetBlurbRequest.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof google.showcase.v1beta1.GetBlurbRequest
                     * @static
                     * @param {google.showcase.v1beta1.IGetBlurbRequest} message GetBlurbRequest message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    GetBlurbRequest.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a GetBlurbRequest message from the specified reader or buffer.
                     * @function decode
                     * @memberof google.showcase.v1beta1.GetBlurbRequest
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {google.showcase.v1beta1.GetBlurbRequest} GetBlurbRequest
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    GetBlurbRequest.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.showcase.v1beta1.GetBlurbRequest();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.name = reader.string();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a GetBlurbRequest message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof google.showcase.v1beta1.GetBlurbRequest
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {google.showcase.v1beta1.GetBlurbRequest} GetBlurbRequest
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    GetBlurbRequest.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a GetBlurbRequest message.
                     * @function verify
                     * @memberof google.showcase.v1beta1.GetBlurbRequest
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    GetBlurbRequest.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.name != null && message.hasOwnProperty("name"))
                            if (!$util.isString(message.name))
                                return "name: string expected";
                        return null;
                    };
    
                    /**
                     * Creates a GetBlurbRequest message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof google.showcase.v1beta1.GetBlurbRequest
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {google.showcase.v1beta1.GetBlurbRequest} GetBlurbRequest
                     */
                    GetBlurbRequest.fromObject = function fromObject(object) {
                        if (object instanceof $root.google.showcase.v1beta1.GetBlurbRequest)
                            return object;
                        var message = new $root.google.showcase.v1beta1.GetBlurbRequest();
                        if (object.name != null)
                            message.name = String(object.name);
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a GetBlurbRequest message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof google.showcase.v1beta1.GetBlurbRequest
                     * @static
                     * @param {google.showcase.v1beta1.GetBlurbRequest} message GetBlurbRequest
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    GetBlurbRequest.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults)
                            object.name = "";
                        if (message.name != null && message.hasOwnProperty("name"))
                            object.name = message.name;
                        return object;
                    };
    
                    /**
                     * Converts this GetBlurbRequest to JSON.
                     * @function toJSON
                     * @memberof google.showcase.v1beta1.GetBlurbRequest
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    GetBlurbRequest.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    return GetBlurbRequest;
                })();
    
                v1beta1.UpdateBlurbRequest = (function() {
    
                    /**
                     * Properties of an UpdateBlurbRequest.
                     * @memberof google.showcase.v1beta1
                     * @interface IUpdateBlurbRequest
                     * @property {google.showcase.v1beta1.IBlurb|null} [blurb] UpdateBlurbRequest blurb
                     * @property {google.protobuf.IFieldMask|null} [updateMask] UpdateBlurbRequest updateMask
                     */
    
                    /**
                     * Constructs a new UpdateBlurbRequest.
                     * @memberof google.showcase.v1beta1
                     * @classdesc Represents an UpdateBlurbRequest.
                     * @implements IUpdateBlurbRequest
                     * @constructor
                     * @param {google.showcase.v1beta1.IUpdateBlurbRequest=} [properties] Properties to set
                     */
                    function UpdateBlurbRequest(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * UpdateBlurbRequest blurb.
                     * @member {google.showcase.v1beta1.IBlurb|null|undefined} blurb
                     * @memberof google.showcase.v1beta1.UpdateBlurbRequest
                     * @instance
                     */
                    UpdateBlurbRequest.prototype.blurb = null;
    
                    /**
                     * UpdateBlurbRequest updateMask.
                     * @member {google.protobuf.IFieldMask|null|undefined} updateMask
                     * @memberof google.showcase.v1beta1.UpdateBlurbRequest
                     * @instance
                     */
                    UpdateBlurbRequest.prototype.updateMask = null;
    
                    /**
                     * Creates a new UpdateBlurbRequest instance using the specified properties.
                     * @function create
                     * @memberof google.showcase.v1beta1.UpdateBlurbRequest
                     * @static
                     * @param {google.showcase.v1beta1.IUpdateBlurbRequest=} [properties] Properties to set
                     * @returns {google.showcase.v1beta1.UpdateBlurbRequest} UpdateBlurbRequest instance
                     */
                    UpdateBlurbRequest.create = function create(properties) {
                        return new UpdateBlurbRequest(properties);
                    };
    
                    /**
                     * Encodes the specified UpdateBlurbRequest message. Does not implicitly {@link google.showcase.v1beta1.UpdateBlurbRequest.verify|verify} messages.
                     * @function encode
                     * @memberof google.showcase.v1beta1.UpdateBlurbRequest
                     * @static
                     * @param {google.showcase.v1beta1.IUpdateBlurbRequest} message UpdateBlurbRequest message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    UpdateBlurbRequest.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.blurb != null && Object.hasOwnProperty.call(message, "blurb"))
                            $root.google.showcase.v1beta1.Blurb.encode(message.blurb, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                        if (message.updateMask != null && Object.hasOwnProperty.call(message, "updateMask"))
                            $root.google.protobuf.FieldMask.encode(message.updateMask, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                        return writer;
                    };
    
                    /**
                     * Encodes the specified UpdateBlurbRequest message, length delimited. Does not implicitly {@link google.showcase.v1beta1.UpdateBlurbRequest.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof google.showcase.v1beta1.UpdateBlurbRequest
                     * @static
                     * @param {google.showcase.v1beta1.IUpdateBlurbRequest} message UpdateBlurbRequest message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    UpdateBlurbRequest.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes an UpdateBlurbRequest message from the specified reader or buffer.
                     * @function decode
                     * @memberof google.showcase.v1beta1.UpdateBlurbRequest
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {google.showcase.v1beta1.UpdateBlurbRequest} UpdateBlurbRequest
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    UpdateBlurbRequest.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.showcase.v1beta1.UpdateBlurbRequest();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.blurb = $root.google.showcase.v1beta1.Blurb.decode(reader, reader.uint32());
                                break;
                            case 2:
                                message.updateMask = $root.google.protobuf.FieldMask.decode(reader, reader.uint32());
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes an UpdateBlurbRequest message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof google.showcase.v1beta1.UpdateBlurbRequest
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {google.showcase.v1beta1.UpdateBlurbRequest} UpdateBlurbRequest
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    UpdateBlurbRequest.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies an UpdateBlurbRequest message.
                     * @function verify
                     * @memberof google.showcase.v1beta1.UpdateBlurbRequest
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    UpdateBlurbRequest.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.blurb != null && message.hasOwnProperty("blurb")) {
                            var error = $root.google.showcase.v1beta1.Blurb.verify(message.blurb);
                            if (error)
                                return "blurb." + error;
                        }
                        if (message.updateMask != null && message.hasOwnProperty("updateMask")) {
                            var error = $root.google.protobuf.FieldMask.verify(message.updateMask);
                            if (error)
                                return "updateMask." + error;
                        }
                        return null;
                    };
    
                    /**
                     * Creates an UpdateBlurbRequest message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof google.showcase.v1beta1.UpdateBlurbRequest
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {google.showcase.v1beta1.UpdateBlurbRequest} UpdateBlurbRequest
                     */
                    UpdateBlurbRequest.fromObject = function fromObject(object) {
                        if (object instanceof $root.google.showcase.v1beta1.UpdateBlurbRequest)
                            return object;
                        var message = new $root.google.showcase.v1beta1.UpdateBlurbRequest();
                        if (object.blurb != null) {
                            if (typeof object.blurb !== "object")
                                throw TypeError(".google.showcase.v1beta1.UpdateBlurbRequest.blurb: object expected");
                            message.blurb = $root.google.showcase.v1beta1.Blurb.fromObject(object.blurb);
                        }
                        if (object.updateMask != null) {
                            if (typeof object.updateMask !== "object")
                                throw TypeError(".google.showcase.v1beta1.UpdateBlurbRequest.updateMask: object expected");
                            message.updateMask = $root.google.protobuf.FieldMask.fromObject(object.updateMask);
                        }
                        return message;
                    };
    
                    /**
                     * Creates a plain object from an UpdateBlurbRequest message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof google.showcase.v1beta1.UpdateBlurbRequest
                     * @static
                     * @param {google.showcase.v1beta1.UpdateBlurbRequest} message UpdateBlurbRequest
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    UpdateBlurbRequest.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults) {
                            object.blurb = null;
                            object.updateMask = null;
                        }
                        if (message.blurb != null && message.hasOwnProperty("blurb"))
                            object.blurb = $root.google.showcase.v1beta1.Blurb.toObject(message.blurb, options);
                        if (message.updateMask != null && message.hasOwnProperty("updateMask"))
                            object.updateMask = $root.google.protobuf.FieldMask.toObject(message.updateMask, options);
                        return object;
                    };
    
                    /**
                     * Converts this UpdateBlurbRequest to JSON.
                     * @function toJSON
                     * @memberof google.showcase.v1beta1.UpdateBlurbRequest
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    UpdateBlurbRequest.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    return UpdateBlurbRequest;
                })();
    
                v1beta1.DeleteBlurbRequest = (function() {
    
                    /**
                     * Properties of a DeleteBlurbRequest.
                     * @memberof google.showcase.v1beta1
                     * @interface IDeleteBlurbRequest
                     * @property {string|null} [name] DeleteBlurbRequest name
                     */
    
                    /**
                     * Constructs a new DeleteBlurbRequest.
                     * @memberof google.showcase.v1beta1
                     * @classdesc Represents a DeleteBlurbRequest.
                     * @implements IDeleteBlurbRequest
                     * @constructor
                     * @param {google.showcase.v1beta1.IDeleteBlurbRequest=} [properties] Properties to set
                     */
                    function DeleteBlurbRequest(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * DeleteBlurbRequest name.
                     * @member {string} name
                     * @memberof google.showcase.v1beta1.DeleteBlurbRequest
                     * @instance
                     */
                    DeleteBlurbRequest.prototype.name = "";
    
                    /**
                     * Creates a new DeleteBlurbRequest instance using the specified properties.
                     * @function create
                     * @memberof google.showcase.v1beta1.DeleteBlurbRequest
                     * @static
                     * @param {google.showcase.v1beta1.IDeleteBlurbRequest=} [properties] Properties to set
                     * @returns {google.showcase.v1beta1.DeleteBlurbRequest} DeleteBlurbRequest instance
                     */
                    DeleteBlurbRequest.create = function create(properties) {
                        return new DeleteBlurbRequest(properties);
                    };
    
                    /**
                     * Encodes the specified DeleteBlurbRequest message. Does not implicitly {@link google.showcase.v1beta1.DeleteBlurbRequest.verify|verify} messages.
                     * @function encode
                     * @memberof google.showcase.v1beta1.DeleteBlurbRequest
                     * @static
                     * @param {google.showcase.v1beta1.IDeleteBlurbRequest} message DeleteBlurbRequest message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    DeleteBlurbRequest.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                        return writer;
                    };
    
                    /**
                     * Encodes the specified DeleteBlurbRequest message, length delimited. Does not implicitly {@link google.showcase.v1beta1.DeleteBlurbRequest.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof google.showcase.v1beta1.DeleteBlurbRequest
                     * @static
                     * @param {google.showcase.v1beta1.IDeleteBlurbRequest} message DeleteBlurbRequest message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    DeleteBlurbRequest.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a DeleteBlurbRequest message from the specified reader or buffer.
                     * @function decode
                     * @memberof google.showcase.v1beta1.DeleteBlurbRequest
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {google.showcase.v1beta1.DeleteBlurbRequest} DeleteBlurbRequest
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    DeleteBlurbRequest.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.showcase.v1beta1.DeleteBlurbRequest();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.name = reader.string();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a DeleteBlurbRequest message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof google.showcase.v1beta1.DeleteBlurbRequest
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {google.showcase.v1beta1.DeleteBlurbRequest} DeleteBlurbRequest
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    DeleteBlurbRequest.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a DeleteBlurbRequest message.
                     * @function verify
                     * @memberof google.showcase.v1beta1.DeleteBlurbRequest
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    DeleteBlurbRequest.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.name != null && message.hasOwnProperty("name"))
                            if (!$util.isString(message.name))
                                return "name: string expected";
                        return null;
                    };
    
                    /**
                     * Creates a DeleteBlurbRequest message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof google.showcase.v1beta1.DeleteBlurbRequest
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {google.showcase.v1beta1.DeleteBlurbRequest} DeleteBlurbRequest
                     */
                    DeleteBlurbRequest.fromObject = function fromObject(object) {
                        if (object instanceof $root.google.showcase.v1beta1.DeleteBlurbRequest)
                            return object;
                        var message = new $root.google.showcase.v1beta1.DeleteBlurbRequest();
                        if (object.name != null)
                            message.name = String(object.name);
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a DeleteBlurbRequest message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof google.showcase.v1beta1.DeleteBlurbRequest
                     * @static
                     * @param {google.showcase.v1beta1.DeleteBlurbRequest} message DeleteBlurbRequest
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    DeleteBlurbRequest.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults)
                            object.name = "";
                        if (message.name != null && message.hasOwnProperty("name"))
                            object.name = message.name;
                        return object;
                    };
    
                    /**
                     * Converts this DeleteBlurbRequest to JSON.
                     * @function toJSON
                     * @memberof google.showcase.v1beta1.DeleteBlurbRequest
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    DeleteBlurbRequest.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    return DeleteBlurbRequest;
                })();
    
                v1beta1.ListBlurbsRequest = (function() {
    
                    /**
                     * Properties of a ListBlurbsRequest.
                     * @memberof google.showcase.v1beta1
                     * @interface IListBlurbsRequest
                     * @property {string|null} [parent] ListBlurbsRequest parent
                     * @property {number|null} [pageSize] ListBlurbsRequest pageSize
                     * @property {string|null} [pageToken] ListBlurbsRequest pageToken
                     */
    
                    /**
                     * Constructs a new ListBlurbsRequest.
                     * @memberof google.showcase.v1beta1
                     * @classdesc Represents a ListBlurbsRequest.
                     * @implements IListBlurbsRequest
                     * @constructor
                     * @param {google.showcase.v1beta1.IListBlurbsRequest=} [properties] Properties to set
                     */
                    function ListBlurbsRequest(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * ListBlurbsRequest parent.
                     * @member {string} parent
                     * @memberof google.showcase.v1beta1.ListBlurbsRequest
                     * @instance
                     */
                    ListBlurbsRequest.prototype.parent = "";
    
                    /**
                     * ListBlurbsRequest pageSize.
                     * @member {number} pageSize
                     * @memberof google.showcase.v1beta1.ListBlurbsRequest
                     * @instance
                     */
                    ListBlurbsRequest.prototype.pageSize = 0;
    
                    /**
                     * ListBlurbsRequest pageToken.
                     * @member {string} pageToken
                     * @memberof google.showcase.v1beta1.ListBlurbsRequest
                     * @instance
                     */
                    ListBlurbsRequest.prototype.pageToken = "";
    
                    /**
                     * Creates a new ListBlurbsRequest instance using the specified properties.
                     * @function create
                     * @memberof google.showcase.v1beta1.ListBlurbsRequest
                     * @static
                     * @param {google.showcase.v1beta1.IListBlurbsRequest=} [properties] Properties to set
                     * @returns {google.showcase.v1beta1.ListBlurbsRequest} ListBlurbsRequest instance
                     */
                    ListBlurbsRequest.create = function create(properties) {
                        return new ListBlurbsRequest(properties);
                    };
    
                    /**
                     * Encodes the specified ListBlurbsRequest message. Does not implicitly {@link google.showcase.v1beta1.ListBlurbsRequest.verify|verify} messages.
                     * @function encode
                     * @memberof google.showcase.v1beta1.ListBlurbsRequest
                     * @static
                     * @param {google.showcase.v1beta1.IListBlurbsRequest} message ListBlurbsRequest message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    ListBlurbsRequest.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.parent != null && Object.hasOwnProperty.call(message, "parent"))
                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.parent);
                        if (message.pageSize != null && Object.hasOwnProperty.call(message, "pageSize"))
                            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.pageSize);
                        if (message.pageToken != null && Object.hasOwnProperty.call(message, "pageToken"))
                            writer.uint32(/* id 3, wireType 2 =*/26).string(message.pageToken);
                        return writer;
                    };
    
                    /**
                     * Encodes the specified ListBlurbsRequest message, length delimited. Does not implicitly {@link google.showcase.v1beta1.ListBlurbsRequest.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof google.showcase.v1beta1.ListBlurbsRequest
                     * @static
                     * @param {google.showcase.v1beta1.IListBlurbsRequest} message ListBlurbsRequest message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    ListBlurbsRequest.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a ListBlurbsRequest message from the specified reader or buffer.
                     * @function decode
                     * @memberof google.showcase.v1beta1.ListBlurbsRequest
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {google.showcase.v1beta1.ListBlurbsRequest} ListBlurbsRequest
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    ListBlurbsRequest.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.showcase.v1beta1.ListBlurbsRequest();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.parent = reader.string();
                                break;
                            case 2:
                                message.pageSize = reader.int32();
                                break;
                            case 3:
                                message.pageToken = reader.string();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a ListBlurbsRequest message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof google.showcase.v1beta1.ListBlurbsRequest
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {google.showcase.v1beta1.ListBlurbsRequest} ListBlurbsRequest
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    ListBlurbsRequest.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a ListBlurbsRequest message.
                     * @function verify
                     * @memberof google.showcase.v1beta1.ListBlurbsRequest
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    ListBlurbsRequest.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.parent != null && message.hasOwnProperty("parent"))
                            if (!$util.isString(message.parent))
                                return "parent: string expected";
                        if (message.pageSize != null && message.hasOwnProperty("pageSize"))
                            if (!$util.isInteger(message.pageSize))
                                return "pageSize: integer expected";
                        if (message.pageToken != null && message.hasOwnProperty("pageToken"))
                            if (!$util.isString(message.pageToken))
                                return "pageToken: string expected";
                        return null;
                    };
    
                    /**
                     * Creates a ListBlurbsRequest message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof google.showcase.v1beta1.ListBlurbsRequest
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {google.showcase.v1beta1.ListBlurbsRequest} ListBlurbsRequest
                     */
                    ListBlurbsRequest.fromObject = function fromObject(object) {
                        if (object instanceof $root.google.showcase.v1beta1.ListBlurbsRequest)
                            return object;
                        var message = new $root.google.showcase.v1beta1.ListBlurbsRequest();
                        if (object.parent != null)
                            message.parent = String(object.parent);
                        if (object.pageSize != null)
                            message.pageSize = object.pageSize | 0;
                        if (object.pageToken != null)
                            message.pageToken = String(object.pageToken);
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a ListBlurbsRequest message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof google.showcase.v1beta1.ListBlurbsRequest
                     * @static
                     * @param {google.showcase.v1beta1.ListBlurbsRequest} message ListBlurbsRequest
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    ListBlurbsRequest.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults) {
                            object.parent = "";
                            object.pageSize = 0;
                            object.pageToken = "";
                        }
                        if (message.parent != null && message.hasOwnProperty("parent"))
                            object.parent = message.parent;
                        if (message.pageSize != null && message.hasOwnProperty("pageSize"))
                            object.pageSize = message.pageSize;
                        if (message.pageToken != null && message.hasOwnProperty("pageToken"))
                            object.pageToken = message.pageToken;
                        return object;
                    };
    
                    /**
                     * Converts this ListBlurbsRequest to JSON.
                     * @function toJSON
                     * @memberof google.showcase.v1beta1.ListBlurbsRequest
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    ListBlurbsRequest.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    return ListBlurbsRequest;
                })();
    
                v1beta1.ListBlurbsResponse = (function() {
    
                    /**
                     * Properties of a ListBlurbsResponse.
                     * @memberof google.showcase.v1beta1
                     * @interface IListBlurbsResponse
                     * @property {Array.<google.showcase.v1beta1.IBlurb>|null} [blurbs] ListBlurbsResponse blurbs
                     * @property {string|null} [nextPageToken] ListBlurbsResponse nextPageToken
                     */
    
                    /**
                     * Constructs a new ListBlurbsResponse.
                     * @memberof google.showcase.v1beta1
                     * @classdesc Represents a ListBlurbsResponse.
                     * @implements IListBlurbsResponse
                     * @constructor
                     * @param {google.showcase.v1beta1.IListBlurbsResponse=} [properties] Properties to set
                     */
                    function ListBlurbsResponse(properties) {
                        this.blurbs = [];
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * ListBlurbsResponse blurbs.
                     * @member {Array.<google.showcase.v1beta1.IBlurb>} blurbs
                     * @memberof google.showcase.v1beta1.ListBlurbsResponse
                     * @instance
                     */
                    ListBlurbsResponse.prototype.blurbs = $util.emptyArray;
    
                    /**
                     * ListBlurbsResponse nextPageToken.
                     * @member {string} nextPageToken
                     * @memberof google.showcase.v1beta1.ListBlurbsResponse
                     * @instance
                     */
                    ListBlurbsResponse.prototype.nextPageToken = "";
    
                    /**
                     * Creates a new ListBlurbsResponse instance using the specified properties.
                     * @function create
                     * @memberof google.showcase.v1beta1.ListBlurbsResponse
                     * @static
                     * @param {google.showcase.v1beta1.IListBlurbsResponse=} [properties] Properties to set
                     * @returns {google.showcase.v1beta1.ListBlurbsResponse} ListBlurbsResponse instance
                     */
                    ListBlurbsResponse.create = function create(properties) {
                        return new ListBlurbsResponse(properties);
                    };
    
                    /**
                     * Encodes the specified ListBlurbsResponse message. Does not implicitly {@link google.showcase.v1beta1.ListBlurbsResponse.verify|verify} messages.
                     * @function encode
                     * @memberof google.showcase.v1beta1.ListBlurbsResponse
                     * @static
                     * @param {google.showcase.v1beta1.IListBlurbsResponse} message ListBlurbsResponse message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    ListBlurbsResponse.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.blurbs != null && message.blurbs.length)
                            for (var i = 0; i < message.blurbs.length; ++i)
                                $root.google.showcase.v1beta1.Blurb.encode(message.blurbs[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                        if (message.nextPageToken != null && Object.hasOwnProperty.call(message, "nextPageToken"))
                            writer.uint32(/* id 2, wireType 2 =*/18).string(message.nextPageToken);
                        return writer;
                    };
    
                    /**
                     * Encodes the specified ListBlurbsResponse message, length delimited. Does not implicitly {@link google.showcase.v1beta1.ListBlurbsResponse.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof google.showcase.v1beta1.ListBlurbsResponse
                     * @static
                     * @param {google.showcase.v1beta1.IListBlurbsResponse} message ListBlurbsResponse message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    ListBlurbsResponse.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a ListBlurbsResponse message from the specified reader or buffer.
                     * @function decode
                     * @memberof google.showcase.v1beta1.ListBlurbsResponse
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {google.showcase.v1beta1.ListBlurbsResponse} ListBlurbsResponse
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    ListBlurbsResponse.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.showcase.v1beta1.ListBlurbsResponse();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                if (!(message.blurbs && message.blurbs.length))
                                    message.blurbs = [];
                                message.blurbs.push($root.google.showcase.v1beta1.Blurb.decode(reader, reader.uint32()));
                                break;
                            case 2:
                                message.nextPageToken = reader.string();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a ListBlurbsResponse message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof google.showcase.v1beta1.ListBlurbsResponse
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {google.showcase.v1beta1.ListBlurbsResponse} ListBlurbsResponse
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    ListBlurbsResponse.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a ListBlurbsResponse message.
                     * @function verify
                     * @memberof google.showcase.v1beta1.ListBlurbsResponse
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    ListBlurbsResponse.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.blurbs != null && message.hasOwnProperty("blurbs")) {
                            if (!Array.isArray(message.blurbs))
                                return "blurbs: array expected";
                            for (var i = 0; i < message.blurbs.length; ++i) {
                                var error = $root.google.showcase.v1beta1.Blurb.verify(message.blurbs[i]);
                                if (error)
                                    return "blurbs." + error;
                            }
                        }
                        if (message.nextPageToken != null && message.hasOwnProperty("nextPageToken"))
                            if (!$util.isString(message.nextPageToken))
                                return "nextPageToken: string expected";
                        return null;
                    };
    
                    /**
                     * Creates a ListBlurbsResponse message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof google.showcase.v1beta1.ListBlurbsResponse
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {google.showcase.v1beta1.ListBlurbsResponse} ListBlurbsResponse
                     */
                    ListBlurbsResponse.fromObject = function fromObject(object) {
                        if (object instanceof $root.google.showcase.v1beta1.ListBlurbsResponse)
                            return object;
                        var message = new $root.google.showcase.v1beta1.ListBlurbsResponse();
                        if (object.blurbs) {
                            if (!Array.isArray(object.blurbs))
                                throw TypeError(".google.showcase.v1beta1.ListBlurbsResponse.blurbs: array expected");
                            message.blurbs = [];
                            for (var i = 0; i < object.blurbs.length; ++i) {
                                if (typeof object.blurbs[i] !== "object")
                                    throw TypeError(".google.showcase.v1beta1.ListBlurbsResponse.blurbs: object expected");
                                message.blurbs[i] = $root.google.showcase.v1beta1.Blurb.fromObject(object.blurbs[i]);
                            }
                        }
                        if (object.nextPageToken != null)
                            message.nextPageToken = String(object.nextPageToken);
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a ListBlurbsResponse message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof google.showcase.v1beta1.ListBlurbsResponse
                     * @static
                     * @param {google.showcase.v1beta1.ListBlurbsResponse} message ListBlurbsResponse
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    ListBlurbsResponse.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.arrays || options.defaults)
                            object.blurbs = [];
                        if (options.defaults)
                            object.nextPageToken = "";
                        if (message.blurbs && message.blurbs.length) {
                            object.blurbs = [];
                            for (var j = 0; j < message.blurbs.length; ++j)
                                object.blurbs[j] = $root.google.showcase.v1beta1.Blurb.toObject(message.blurbs[j], options);
                        }
                        if (message.nextPageToken != null && message.hasOwnProperty("nextPageToken"))
                            object.nextPageToken = message.nextPageToken;
                        return object;
                    };
    
                    /**
                     * Converts this ListBlurbsResponse to JSON.
                     * @function toJSON
                     * @memberof google.showcase.v1beta1.ListBlurbsResponse
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    ListBlurbsResponse.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    return ListBlurbsResponse;
                })();
    
                v1beta1.SearchBlurbsRequest = (function() {
    
                    /**
                     * Properties of a SearchBlurbsRequest.
                     * @memberof google.showcase.v1beta1
                     * @interface ISearchBlurbsRequest
                     * @property {string|null} [query] SearchBlurbsRequest query
                     * @property {string|null} [parent] SearchBlurbsRequest parent
                     * @property {number|null} [pageSize] SearchBlurbsRequest pageSize
                     * @property {string|null} [pageToken] SearchBlurbsRequest pageToken
                     */
    
                    /**
                     * Constructs a new SearchBlurbsRequest.
                     * @memberof google.showcase.v1beta1
                     * @classdesc Represents a SearchBlurbsRequest.
                     * @implements ISearchBlurbsRequest
                     * @constructor
                     * @param {google.showcase.v1beta1.ISearchBlurbsRequest=} [properties] Properties to set
                     */
                    function SearchBlurbsRequest(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * SearchBlurbsRequest query.
                     * @member {string} query
                     * @memberof google.showcase.v1beta1.SearchBlurbsRequest
                     * @instance
                     */
                    SearchBlurbsRequest.prototype.query = "";
    
                    /**
                     * SearchBlurbsRequest parent.
                     * @member {string} parent
                     * @memberof google.showcase.v1beta1.SearchBlurbsRequest
                     * @instance
                     */
                    SearchBlurbsRequest.prototype.parent = "";
    
                    /**
                     * SearchBlurbsRequest pageSize.
                     * @member {number} pageSize
                     * @memberof google.showcase.v1beta1.SearchBlurbsRequest
                     * @instance
                     */
                    SearchBlurbsRequest.prototype.pageSize = 0;
    
                    /**
                     * SearchBlurbsRequest pageToken.
                     * @member {string} pageToken
                     * @memberof google.showcase.v1beta1.SearchBlurbsRequest
                     * @instance
                     */
                    SearchBlurbsRequest.prototype.pageToken = "";
    
                    /**
                     * Creates a new SearchBlurbsRequest instance using the specified properties.
                     * @function create
                     * @memberof google.showcase.v1beta1.SearchBlurbsRequest
                     * @static
                     * @param {google.showcase.v1beta1.ISearchBlurbsRequest=} [properties] Properties to set
                     * @returns {google.showcase.v1beta1.SearchBlurbsRequest} SearchBlurbsRequest instance
                     */
                    SearchBlurbsRequest.create = function create(properties) {
                        return new SearchBlurbsRequest(properties);
                    };
    
                    /**
                     * Encodes the specified SearchBlurbsRequest message. Does not implicitly {@link google.showcase.v1beta1.SearchBlurbsRequest.verify|verify} messages.
                     * @function encode
                     * @memberof google.showcase.v1beta1.SearchBlurbsRequest
                     * @static
                     * @param {google.showcase.v1beta1.ISearchBlurbsRequest} message SearchBlurbsRequest message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    SearchBlurbsRequest.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.query != null && Object.hasOwnProperty.call(message, "query"))
                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.query);
                        if (message.parent != null && Object.hasOwnProperty.call(message, "parent"))
                            writer.uint32(/* id 2, wireType 2 =*/18).string(message.parent);
                        if (message.pageSize != null && Object.hasOwnProperty.call(message, "pageSize"))
                            writer.uint32(/* id 3, wireType 0 =*/24).int32(message.pageSize);
                        if (message.pageToken != null && Object.hasOwnProperty.call(message, "pageToken"))
                            writer.uint32(/* id 4, wireType 2 =*/34).string(message.pageToken);
                        return writer;
                    };
    
                    /**
                     * Encodes the specified SearchBlurbsRequest message, length delimited. Does not implicitly {@link google.showcase.v1beta1.SearchBlurbsRequest.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof google.showcase.v1beta1.SearchBlurbsRequest
                     * @static
                     * @param {google.showcase.v1beta1.ISearchBlurbsRequest} message SearchBlurbsRequest message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    SearchBlurbsRequest.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a SearchBlurbsRequest message from the specified reader or buffer.
                     * @function decode
                     * @memberof google.showcase.v1beta1.SearchBlurbsRequest
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {google.showcase.v1beta1.SearchBlurbsRequest} SearchBlurbsRequest
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    SearchBlurbsRequest.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.showcase.v1beta1.SearchBlurbsRequest();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.query = reader.string();
                                break;
                            case 2:
                                message.parent = reader.string();
                                break;
                            case 3:
                                message.pageSize = reader.int32();
                                break;
                            case 4:
                                message.pageToken = reader.string();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a SearchBlurbsRequest message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof google.showcase.v1beta1.SearchBlurbsRequest
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {google.showcase.v1beta1.SearchBlurbsRequest} SearchBlurbsRequest
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    SearchBlurbsRequest.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a SearchBlurbsRequest message.
                     * @function verify
                     * @memberof google.showcase.v1beta1.SearchBlurbsRequest
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    SearchBlurbsRequest.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.query != null && message.hasOwnProperty("query"))
                            if (!$util.isString(message.query))
                                return "query: string expected";
                        if (message.parent != null && message.hasOwnProperty("parent"))
                            if (!$util.isString(message.parent))
                                return "parent: string expected";
                        if (message.pageSize != null && message.hasOwnProperty("pageSize"))
                            if (!$util.isInteger(message.pageSize))
                                return "pageSize: integer expected";
                        if (message.pageToken != null && message.hasOwnProperty("pageToken"))
                            if (!$util.isString(message.pageToken))
                                return "pageToken: string expected";
                        return null;
                    };
    
                    /**
                     * Creates a SearchBlurbsRequest message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof google.showcase.v1beta1.SearchBlurbsRequest
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {google.showcase.v1beta1.SearchBlurbsRequest} SearchBlurbsRequest
                     */
                    SearchBlurbsRequest.fromObject = function fromObject(object) {
                        if (object instanceof $root.google.showcase.v1beta1.SearchBlurbsRequest)
                            return object;
                        var message = new $root.google.showcase.v1beta1.SearchBlurbsRequest();
                        if (object.query != null)
                            message.query = String(object.query);
                        if (object.parent != null)
                            message.parent = String(object.parent);
                        if (object.pageSize != null)
                            message.pageSize = object.pageSize | 0;
                        if (object.pageToken != null)
                            message.pageToken = String(object.pageToken);
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a SearchBlurbsRequest message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof google.showcase.v1beta1.SearchBlurbsRequest
                     * @static
                     * @param {google.showcase.v1beta1.SearchBlurbsRequest} message SearchBlurbsRequest
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    SearchBlurbsRequest.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults) {
                            object.query = "";
                            object.parent = "";
                            object.pageSize = 0;
                            object.pageToken = "";
                        }
                        if (message.query != null && message.hasOwnProperty("query"))
                            object.query = message.query;
                        if (message.parent != null && message.hasOwnProperty("parent"))
                            object.parent = message.parent;
                        if (message.pageSize != null && message.hasOwnProperty("pageSize"))
                            object.pageSize = message.pageSize;
                        if (message.pageToken != null && message.hasOwnProperty("pageToken"))
                            object.pageToken = message.pageToken;
                        return object;
                    };
    
                    /**
                     * Converts this SearchBlurbsRequest to JSON.
                     * @function toJSON
                     * @memberof google.showcase.v1beta1.SearchBlurbsRequest
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    SearchBlurbsRequest.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    return SearchBlurbsRequest;
                })();
    
                v1beta1.SearchBlurbsMetadata = (function() {
    
                    /**
                     * Properties of a SearchBlurbsMetadata.
                     * @memberof google.showcase.v1beta1
                     * @interface ISearchBlurbsMetadata
                     * @property {google.rpc.IRetryInfo|null} [retryInfo] SearchBlurbsMetadata retryInfo
                     */
    
                    /**
                     * Constructs a new SearchBlurbsMetadata.
                     * @memberof google.showcase.v1beta1
                     * @classdesc Represents a SearchBlurbsMetadata.
                     * @implements ISearchBlurbsMetadata
                     * @constructor
                     * @param {google.showcase.v1beta1.ISearchBlurbsMetadata=} [properties] Properties to set
                     */
                    function SearchBlurbsMetadata(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * SearchBlurbsMetadata retryInfo.
                     * @member {google.rpc.IRetryInfo|null|undefined} retryInfo
                     * @memberof google.showcase.v1beta1.SearchBlurbsMetadata
                     * @instance
                     */
                    SearchBlurbsMetadata.prototype.retryInfo = null;
    
                    /**
                     * Creates a new SearchBlurbsMetadata instance using the specified properties.
                     * @function create
                     * @memberof google.showcase.v1beta1.SearchBlurbsMetadata
                     * @static
                     * @param {google.showcase.v1beta1.ISearchBlurbsMetadata=} [properties] Properties to set
                     * @returns {google.showcase.v1beta1.SearchBlurbsMetadata} SearchBlurbsMetadata instance
                     */
                    SearchBlurbsMetadata.create = function create(properties) {
                        return new SearchBlurbsMetadata(properties);
                    };
    
                    /**
                     * Encodes the specified SearchBlurbsMetadata message. Does not implicitly {@link google.showcase.v1beta1.SearchBlurbsMetadata.verify|verify} messages.
                     * @function encode
                     * @memberof google.showcase.v1beta1.SearchBlurbsMetadata
                     * @static
                     * @param {google.showcase.v1beta1.ISearchBlurbsMetadata} message SearchBlurbsMetadata message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    SearchBlurbsMetadata.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.retryInfo != null && Object.hasOwnProperty.call(message, "retryInfo"))
                            $root.google.rpc.RetryInfo.encode(message.retryInfo, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                        return writer;
                    };
    
                    /**
                     * Encodes the specified SearchBlurbsMetadata message, length delimited. Does not implicitly {@link google.showcase.v1beta1.SearchBlurbsMetadata.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof google.showcase.v1beta1.SearchBlurbsMetadata
                     * @static
                     * @param {google.showcase.v1beta1.ISearchBlurbsMetadata} message SearchBlurbsMetadata message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    SearchBlurbsMetadata.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a SearchBlurbsMetadata message from the specified reader or buffer.
                     * @function decode
                     * @memberof google.showcase.v1beta1.SearchBlurbsMetadata
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {google.showcase.v1beta1.SearchBlurbsMetadata} SearchBlurbsMetadata
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    SearchBlurbsMetadata.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.showcase.v1beta1.SearchBlurbsMetadata();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.retryInfo = $root.google.rpc.RetryInfo.decode(reader, reader.uint32());
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a SearchBlurbsMetadata message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof google.showcase.v1beta1.SearchBlurbsMetadata
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {google.showcase.v1beta1.SearchBlurbsMetadata} SearchBlurbsMetadata
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    SearchBlurbsMetadata.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a SearchBlurbsMetadata message.
                     * @function verify
                     * @memberof google.showcase.v1beta1.SearchBlurbsMetadata
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    SearchBlurbsMetadata.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.retryInfo != null && message.hasOwnProperty("retryInfo")) {
                            var error = $root.google.rpc.RetryInfo.verify(message.retryInfo);
                            if (error)
                                return "retryInfo." + error;
                        }
                        return null;
                    };
    
                    /**
                     * Creates a SearchBlurbsMetadata message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof google.showcase.v1beta1.SearchBlurbsMetadata
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {google.showcase.v1beta1.SearchBlurbsMetadata} SearchBlurbsMetadata
                     */
                    SearchBlurbsMetadata.fromObject = function fromObject(object) {
                        if (object instanceof $root.google.showcase.v1beta1.SearchBlurbsMetadata)
                            return object;
                        var message = new $root.google.showcase.v1beta1.SearchBlurbsMetadata();
                        if (object.retryInfo != null) {
                            if (typeof object.retryInfo !== "object")
                                throw TypeError(".google.showcase.v1beta1.SearchBlurbsMetadata.retryInfo: object expected");
                            message.retryInfo = $root.google.rpc.RetryInfo.fromObject(object.retryInfo);
                        }
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a SearchBlurbsMetadata message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof google.showcase.v1beta1.SearchBlurbsMetadata
                     * @static
                     * @param {google.showcase.v1beta1.SearchBlurbsMetadata} message SearchBlurbsMetadata
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    SearchBlurbsMetadata.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults)
                            object.retryInfo = null;
                        if (message.retryInfo != null && message.hasOwnProperty("retryInfo"))
                            object.retryInfo = $root.google.rpc.RetryInfo.toObject(message.retryInfo, options);
                        return object;
                    };
    
                    /**
                     * Converts this SearchBlurbsMetadata to JSON.
                     * @function toJSON
                     * @memberof google.showcase.v1beta1.SearchBlurbsMetadata
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    SearchBlurbsMetadata.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    return SearchBlurbsMetadata;
                })();
    
                v1beta1.SearchBlurbsResponse = (function() {
    
                    /**
                     * Properties of a SearchBlurbsResponse.
                     * @memberof google.showcase.v1beta1
                     * @interface ISearchBlurbsResponse
                     * @property {Array.<google.showcase.v1beta1.IBlurb>|null} [blurbs] SearchBlurbsResponse blurbs
                     * @property {string|null} [nextPageToken] SearchBlurbsResponse nextPageToken
                     */
    
                    /**
                     * Constructs a new SearchBlurbsResponse.
                     * @memberof google.showcase.v1beta1
                     * @classdesc Represents a SearchBlurbsResponse.
                     * @implements ISearchBlurbsResponse
                     * @constructor
                     * @param {google.showcase.v1beta1.ISearchBlurbsResponse=} [properties] Properties to set
                     */
                    function SearchBlurbsResponse(properties) {
                        this.blurbs = [];
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * SearchBlurbsResponse blurbs.
                     * @member {Array.<google.showcase.v1beta1.IBlurb>} blurbs
                     * @memberof google.showcase.v1beta1.SearchBlurbsResponse
                     * @instance
                     */
                    SearchBlurbsResponse.prototype.blurbs = $util.emptyArray;
    
                    /**
                     * SearchBlurbsResponse nextPageToken.
                     * @member {string} nextPageToken
                     * @memberof google.showcase.v1beta1.SearchBlurbsResponse
                     * @instance
                     */
                    SearchBlurbsResponse.prototype.nextPageToken = "";
    
                    /**
                     * Creates a new SearchBlurbsResponse instance using the specified properties.
                     * @function create
                     * @memberof google.showcase.v1beta1.SearchBlurbsResponse
                     * @static
                     * @param {google.showcase.v1beta1.ISearchBlurbsResponse=} [properties] Properties to set
                     * @returns {google.showcase.v1beta1.SearchBlurbsResponse} SearchBlurbsResponse instance
                     */
                    SearchBlurbsResponse.create = function create(properties) {
                        return new SearchBlurbsResponse(properties);
                    };
    
                    /**
                     * Encodes the specified SearchBlurbsResponse message. Does not implicitly {@link google.showcase.v1beta1.SearchBlurbsResponse.verify|verify} messages.
                     * @function encode
                     * @memberof google.showcase.v1beta1.SearchBlurbsResponse
                     * @static
                     * @param {google.showcase.v1beta1.ISearchBlurbsResponse} message SearchBlurbsResponse message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    SearchBlurbsResponse.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.blurbs != null && message.blurbs.length)
                            for (var i = 0; i < message.blurbs.length; ++i)
                                $root.google.showcase.v1beta1.Blurb.encode(message.blurbs[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                        if (message.nextPageToken != null && Object.hasOwnProperty.call(message, "nextPageToken"))
                            writer.uint32(/* id 2, wireType 2 =*/18).string(message.nextPageToken);
                        return writer;
                    };
    
                    /**
                     * Encodes the specified SearchBlurbsResponse message, length delimited. Does not implicitly {@link google.showcase.v1beta1.SearchBlurbsResponse.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof google.showcase.v1beta1.SearchBlurbsResponse
                     * @static
                     * @param {google.showcase.v1beta1.ISearchBlurbsResponse} message SearchBlurbsResponse message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    SearchBlurbsResponse.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a SearchBlurbsResponse message from the specified reader or buffer.
                     * @function decode
                     * @memberof google.showcase.v1beta1.SearchBlurbsResponse
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {google.showcase.v1beta1.SearchBlurbsResponse} SearchBlurbsResponse
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    SearchBlurbsResponse.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.showcase.v1beta1.SearchBlurbsResponse();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                if (!(message.blurbs && message.blurbs.length))
                                    message.blurbs = [];
                                message.blurbs.push($root.google.showcase.v1beta1.Blurb.decode(reader, reader.uint32()));
                                break;
                            case 2:
                                message.nextPageToken = reader.string();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a SearchBlurbsResponse message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof google.showcase.v1beta1.SearchBlurbsResponse
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {google.showcase.v1beta1.SearchBlurbsResponse} SearchBlurbsResponse
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    SearchBlurbsResponse.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a SearchBlurbsResponse message.
                     * @function verify
                     * @memberof google.showcase.v1beta1.SearchBlurbsResponse
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    SearchBlurbsResponse.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.blurbs != null && message.hasOwnProperty("blurbs")) {
                            if (!Array.isArray(message.blurbs))
                                return "blurbs: array expected";
                            for (var i = 0; i < message.blurbs.length; ++i) {
                                var error = $root.google.showcase.v1beta1.Blurb.verify(message.blurbs[i]);
                                if (error)
                                    return "blurbs." + error;
                            }
                        }
                        if (message.nextPageToken != null && message.hasOwnProperty("nextPageToken"))
                            if (!$util.isString(message.nextPageToken))
                                return "nextPageToken: string expected";
                        return null;
                    };
    
                    /**
                     * Creates a SearchBlurbsResponse message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof google.showcase.v1beta1.SearchBlurbsResponse
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {google.showcase.v1beta1.SearchBlurbsResponse} SearchBlurbsResponse
                     */
                    SearchBlurbsResponse.fromObject = function fromObject(object) {
                        if (object instanceof $root.google.showcase.v1beta1.SearchBlurbsResponse)
                            return object;
                        var message = new $root.google.showcase.v1beta1.SearchBlurbsResponse();
                        if (object.blurbs) {
                            if (!Array.isArray(object.blurbs))
                                throw TypeError(".google.showcase.v1beta1.SearchBlurbsResponse.blurbs: array expected");
                            message.blurbs = [];
                            for (var i = 0; i < object.blurbs.length; ++i) {
                                if (typeof object.blurbs[i] !== "object")
                                    throw TypeError(".google.showcase.v1beta1.SearchBlurbsResponse.blurbs: object expected");
                                message.blurbs[i] = $root.google.showcase.v1beta1.Blurb.fromObject(object.blurbs[i]);
                            }
                        }
                        if (object.nextPageToken != null)
                            message.nextPageToken = String(object.nextPageToken);
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a SearchBlurbsResponse message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof google.showcase.v1beta1.SearchBlurbsResponse
                     * @static
                     * @param {google.showcase.v1beta1.SearchBlurbsResponse} message SearchBlurbsResponse
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    SearchBlurbsResponse.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.arrays || options.defaults)
                            object.blurbs = [];
                        if (options.defaults)
                            object.nextPageToken = "";
                        if (message.blurbs && message.blurbs.length) {
                            object.blurbs = [];
                            for (var j = 0; j < message.blurbs.length; ++j)
                                object.blurbs[j] = $root.google.showcase.v1beta1.Blurb.toObject(message.blurbs[j], options);
                        }
                        if (message.nextPageToken != null && message.hasOwnProperty("nextPageToken"))
                            object.nextPageToken = message.nextPageToken;
                        return object;
                    };
    
                    /**
                     * Converts this SearchBlurbsResponse to JSON.
                     * @function toJSON
                     * @memberof google.showcase.v1beta1.SearchBlurbsResponse
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    SearchBlurbsResponse.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    return SearchBlurbsResponse;
                })();
    
                v1beta1.StreamBlurbsRequest = (function() {
    
                    /**
                     * Properties of a StreamBlurbsRequest.
                     * @memberof google.showcase.v1beta1
                     * @interface IStreamBlurbsRequest
                     * @property {string|null} [name] StreamBlurbsRequest name
                     * @property {google.protobuf.ITimestamp|null} [expireTime] StreamBlurbsRequest expireTime
                     */
    
                    /**
                     * Constructs a new StreamBlurbsRequest.
                     * @memberof google.showcase.v1beta1
                     * @classdesc Represents a StreamBlurbsRequest.
                     * @implements IStreamBlurbsRequest
                     * @constructor
                     * @param {google.showcase.v1beta1.IStreamBlurbsRequest=} [properties] Properties to set
                     */
                    function StreamBlurbsRequest(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * StreamBlurbsRequest name.
                     * @member {string} name
                     * @memberof google.showcase.v1beta1.StreamBlurbsRequest
                     * @instance
                     */
                    StreamBlurbsRequest.prototype.name = "";
    
                    /**
                     * StreamBlurbsRequest expireTime.
                     * @member {google.protobuf.ITimestamp|null|undefined} expireTime
                     * @memberof google.showcase.v1beta1.StreamBlurbsRequest
                     * @instance
                     */
                    StreamBlurbsRequest.prototype.expireTime = null;
    
                    /**
                     * Creates a new StreamBlurbsRequest instance using the specified properties.
                     * @function create
                     * @memberof google.showcase.v1beta1.StreamBlurbsRequest
                     * @static
                     * @param {google.showcase.v1beta1.IStreamBlurbsRequest=} [properties] Properties to set
                     * @returns {google.showcase.v1beta1.StreamBlurbsRequest} StreamBlurbsRequest instance
                     */
                    StreamBlurbsRequest.create = function create(properties) {
                        return new StreamBlurbsRequest(properties);
                    };
    
                    /**
                     * Encodes the specified StreamBlurbsRequest message. Does not implicitly {@link google.showcase.v1beta1.StreamBlurbsRequest.verify|verify} messages.
                     * @function encode
                     * @memberof google.showcase.v1beta1.StreamBlurbsRequest
                     * @static
                     * @param {google.showcase.v1beta1.IStreamBlurbsRequest} message StreamBlurbsRequest message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    StreamBlurbsRequest.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                        if (message.expireTime != null && Object.hasOwnProperty.call(message, "expireTime"))
                            $root.google.protobuf.Timestamp.encode(message.expireTime, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                        return writer;
                    };
    
                    /**
                     * Encodes the specified StreamBlurbsRequest message, length delimited. Does not implicitly {@link google.showcase.v1beta1.StreamBlurbsRequest.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof google.showcase.v1beta1.StreamBlurbsRequest
                     * @static
                     * @param {google.showcase.v1beta1.IStreamBlurbsRequest} message StreamBlurbsRequest message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    StreamBlurbsRequest.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a StreamBlurbsRequest message from the specified reader or buffer.
                     * @function decode
                     * @memberof google.showcase.v1beta1.StreamBlurbsRequest
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {google.showcase.v1beta1.StreamBlurbsRequest} StreamBlurbsRequest
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    StreamBlurbsRequest.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.showcase.v1beta1.StreamBlurbsRequest();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.name = reader.string();
                                break;
                            case 2:
                                message.expireTime = $root.google.protobuf.Timestamp.decode(reader, reader.uint32());
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a StreamBlurbsRequest message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof google.showcase.v1beta1.StreamBlurbsRequest
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {google.showcase.v1beta1.StreamBlurbsRequest} StreamBlurbsRequest
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    StreamBlurbsRequest.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a StreamBlurbsRequest message.
                     * @function verify
                     * @memberof google.showcase.v1beta1.StreamBlurbsRequest
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    StreamBlurbsRequest.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.name != null && message.hasOwnProperty("name"))
                            if (!$util.isString(message.name))
                                return "name: string expected";
                        if (message.expireTime != null && message.hasOwnProperty("expireTime")) {
                            var error = $root.google.protobuf.Timestamp.verify(message.expireTime);
                            if (error)
                                return "expireTime." + error;
                        }
                        return null;
                    };
    
                    /**
                     * Creates a StreamBlurbsRequest message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof google.showcase.v1beta1.StreamBlurbsRequest
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {google.showcase.v1beta1.StreamBlurbsRequest} StreamBlurbsRequest
                     */
                    StreamBlurbsRequest.fromObject = function fromObject(object) {
                        if (object instanceof $root.google.showcase.v1beta1.StreamBlurbsRequest)
                            return object;
                        var message = new $root.google.showcase.v1beta1.StreamBlurbsRequest();
                        if (object.name != null)
                            message.name = String(object.name);
                        if (object.expireTime != null) {
                            if (typeof object.expireTime !== "object")
                                throw TypeError(".google.showcase.v1beta1.StreamBlurbsRequest.expireTime: object expected");
                            message.expireTime = $root.google.protobuf.Timestamp.fromObject(object.expireTime);
                        }
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a StreamBlurbsRequest message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof google.showcase.v1beta1.StreamBlurbsRequest
                     * @static
                     * @param {google.showcase.v1beta1.StreamBlurbsRequest} message StreamBlurbsRequest
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    StreamBlurbsRequest.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults) {
                            object.name = "";
                            object.expireTime = null;
                        }
                        if (message.name != null && message.hasOwnProperty("name"))
                            object.name = message.name;
                        if (message.expireTime != null && message.hasOwnProperty("expireTime"))
                            object.expireTime = $root.google.protobuf.Timestamp.toObject(message.expireTime, options);
                        return object;
                    };
    
                    /**
                     * Converts this StreamBlurbsRequest to JSON.
                     * @function toJSON
                     * @memberof google.showcase.v1beta1.StreamBlurbsRequest
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    StreamBlurbsRequest.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    return StreamBlurbsRequest;
                })();
    
                v1beta1.StreamBlurbsResponse = (function() {
    
                    /**
                     * Properties of a StreamBlurbsResponse.
                     * @memberof google.showcase.v1beta1
                     * @interface IStreamBlurbsResponse
                     * @property {google.showcase.v1beta1.IBlurb|null} [blurb] StreamBlurbsResponse blurb
                     * @property {google.showcase.v1beta1.StreamBlurbsResponse.Action|null} [action] StreamBlurbsResponse action
                     */
    
                    /**
                     * Constructs a new StreamBlurbsResponse.
                     * @memberof google.showcase.v1beta1
                     * @classdesc Represents a StreamBlurbsResponse.
                     * @implements IStreamBlurbsResponse
                     * @constructor
                     * @param {google.showcase.v1beta1.IStreamBlurbsResponse=} [properties] Properties to set
                     */
                    function StreamBlurbsResponse(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * StreamBlurbsResponse blurb.
                     * @member {google.showcase.v1beta1.IBlurb|null|undefined} blurb
                     * @memberof google.showcase.v1beta1.StreamBlurbsResponse
                     * @instance
                     */
                    StreamBlurbsResponse.prototype.blurb = null;
    
                    /**
                     * StreamBlurbsResponse action.
                     * @member {google.showcase.v1beta1.StreamBlurbsResponse.Action} action
                     * @memberof google.showcase.v1beta1.StreamBlurbsResponse
                     * @instance
                     */
                    StreamBlurbsResponse.prototype.action = 0;
    
                    /**
                     * Creates a new StreamBlurbsResponse instance using the specified properties.
                     * @function create
                     * @memberof google.showcase.v1beta1.StreamBlurbsResponse
                     * @static
                     * @param {google.showcase.v1beta1.IStreamBlurbsResponse=} [properties] Properties to set
                     * @returns {google.showcase.v1beta1.StreamBlurbsResponse} StreamBlurbsResponse instance
                     */
                    StreamBlurbsResponse.create = function create(properties) {
                        return new StreamBlurbsResponse(properties);
                    };
    
                    /**
                     * Encodes the specified StreamBlurbsResponse message. Does not implicitly {@link google.showcase.v1beta1.StreamBlurbsResponse.verify|verify} messages.
                     * @function encode
                     * @memberof google.showcase.v1beta1.StreamBlurbsResponse
                     * @static
                     * @param {google.showcase.v1beta1.IStreamBlurbsResponse} message StreamBlurbsResponse message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    StreamBlurbsResponse.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.blurb != null && Object.hasOwnProperty.call(message, "blurb"))
                            $root.google.showcase.v1beta1.Blurb.encode(message.blurb, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                        if (message.action != null && Object.hasOwnProperty.call(message, "action"))
                            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.action);
                        return writer;
                    };
    
                    /**
                     * Encodes the specified StreamBlurbsResponse message, length delimited. Does not implicitly {@link google.showcase.v1beta1.StreamBlurbsResponse.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof google.showcase.v1beta1.StreamBlurbsResponse
                     * @static
                     * @param {google.showcase.v1beta1.IStreamBlurbsResponse} message StreamBlurbsResponse message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    StreamBlurbsResponse.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a StreamBlurbsResponse message from the specified reader or buffer.
                     * @function decode
                     * @memberof google.showcase.v1beta1.StreamBlurbsResponse
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {google.showcase.v1beta1.StreamBlurbsResponse} StreamBlurbsResponse
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    StreamBlurbsResponse.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.showcase.v1beta1.StreamBlurbsResponse();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.blurb = $root.google.showcase.v1beta1.Blurb.decode(reader, reader.uint32());
                                break;
                            case 2:
                                message.action = reader.int32();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a StreamBlurbsResponse message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof google.showcase.v1beta1.StreamBlurbsResponse
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {google.showcase.v1beta1.StreamBlurbsResponse} StreamBlurbsResponse
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    StreamBlurbsResponse.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a StreamBlurbsResponse message.
                     * @function verify
                     * @memberof google.showcase.v1beta1.StreamBlurbsResponse
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    StreamBlurbsResponse.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.blurb != null && message.hasOwnProperty("blurb")) {
                            var error = $root.google.showcase.v1beta1.Blurb.verify(message.blurb);
                            if (error)
                                return "blurb." + error;
                        }
                        if (message.action != null && message.hasOwnProperty("action"))
                            switch (message.action) {
                            default:
                                return "action: enum value expected";
                            case 0:
                            case 1:
                            case 2:
                            case 3:
                                break;
                            }
                        return null;
                    };
    
                    /**
                     * Creates a StreamBlurbsResponse message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof google.showcase.v1beta1.StreamBlurbsResponse
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {google.showcase.v1beta1.StreamBlurbsResponse} StreamBlurbsResponse
                     */
                    StreamBlurbsResponse.fromObject = function fromObject(object) {
                        if (object instanceof $root.google.showcase.v1beta1.StreamBlurbsResponse)
                            return object;
                        var message = new $root.google.showcase.v1beta1.StreamBlurbsResponse();
                        if (object.blurb != null) {
                            if (typeof object.blurb !== "object")
                                throw TypeError(".google.showcase.v1beta1.StreamBlurbsResponse.blurb: object expected");
                            message.blurb = $root.google.showcase.v1beta1.Blurb.fromObject(object.blurb);
                        }
                        switch (object.action) {
                        case "ACTION_UNSPECIFIED":
                        case 0:
                            message.action = 0;
                            break;
                        case "CREATE":
                        case 1:
                            message.action = 1;
                            break;
                        case "UPDATE":
                        case 2:
                            message.action = 2;
                            break;
                        case "DELETE":
                        case 3:
                            message.action = 3;
                            break;
                        }
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a StreamBlurbsResponse message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof google.showcase.v1beta1.StreamBlurbsResponse
                     * @static
                     * @param {google.showcase.v1beta1.StreamBlurbsResponse} message StreamBlurbsResponse
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    StreamBlurbsResponse.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults) {
                            object.blurb = null;
                            object.action = options.enums === String ? "ACTION_UNSPECIFIED" : 0;
                        }
                        if (message.blurb != null && message.hasOwnProperty("blurb"))
                            object.blurb = $root.google.showcase.v1beta1.Blurb.toObject(message.blurb, options);
                        if (message.action != null && message.hasOwnProperty("action"))
                            object.action = options.enums === String ? $root.google.showcase.v1beta1.StreamBlurbsResponse.Action[message.action] : message.action;
                        return object;
                    };
    
                    /**
                     * Converts this StreamBlurbsResponse to JSON.
                     * @function toJSON
                     * @memberof google.showcase.v1beta1.StreamBlurbsResponse
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    StreamBlurbsResponse.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    /**
                     * Action enum.
                     * @name google.showcase.v1beta1.StreamBlurbsResponse.Action
                     * @enum {number}
                     * @property {number} ACTION_UNSPECIFIED=0 ACTION_UNSPECIFIED value
                     * @property {number} CREATE=1 CREATE value
                     * @property {number} UPDATE=2 UPDATE value
                     * @property {number} DELETE=3 DELETE value
                     */
                    StreamBlurbsResponse.Action = (function() {
                        var valuesById = {}, values = Object.create(valuesById);
                        values[valuesById[0] = "ACTION_UNSPECIFIED"] = 0;
                        values[valuesById[1] = "CREATE"] = 1;
                        values[valuesById[2] = "UPDATE"] = 2;
                        values[valuesById[3] = "DELETE"] = 3;
                        return values;
                    })();
    
                    return StreamBlurbsResponse;
                })();
    
                v1beta1.SendBlurbsResponse = (function() {
    
                    /**
                     * Properties of a SendBlurbsResponse.
                     * @memberof google.showcase.v1beta1
                     * @interface ISendBlurbsResponse
                     * @property {Array.<string>|null} [names] SendBlurbsResponse names
                     */
    
                    /**
                     * Constructs a new SendBlurbsResponse.
                     * @memberof google.showcase.v1beta1
                     * @classdesc Represents a SendBlurbsResponse.
                     * @implements ISendBlurbsResponse
                     * @constructor
                     * @param {google.showcase.v1beta1.ISendBlurbsResponse=} [properties] Properties to set
                     */
                    function SendBlurbsResponse(properties) {
                        this.names = [];
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * SendBlurbsResponse names.
                     * @member {Array.<string>} names
                     * @memberof google.showcase.v1beta1.SendBlurbsResponse
                     * @instance
                     */
                    SendBlurbsResponse.prototype.names = $util.emptyArray;
    
                    /**
                     * Creates a new SendBlurbsResponse instance using the specified properties.
                     * @function create
                     * @memberof google.showcase.v1beta1.SendBlurbsResponse
                     * @static
                     * @param {google.showcase.v1beta1.ISendBlurbsResponse=} [properties] Properties to set
                     * @returns {google.showcase.v1beta1.SendBlurbsResponse} SendBlurbsResponse instance
                     */
                    SendBlurbsResponse.create = function create(properties) {
                        return new SendBlurbsResponse(properties);
                    };
    
                    /**
                     * Encodes the specified SendBlurbsResponse message. Does not implicitly {@link google.showcase.v1beta1.SendBlurbsResponse.verify|verify} messages.
                     * @function encode
                     * @memberof google.showcase.v1beta1.SendBlurbsResponse
                     * @static
                     * @param {google.showcase.v1beta1.ISendBlurbsResponse} message SendBlurbsResponse message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    SendBlurbsResponse.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.names != null && message.names.length)
                            for (var i = 0; i < message.names.length; ++i)
                                writer.uint32(/* id 1, wireType 2 =*/10).string(message.names[i]);
                        return writer;
                    };
    
                    /**
                     * Encodes the specified SendBlurbsResponse message, length delimited. Does not implicitly {@link google.showcase.v1beta1.SendBlurbsResponse.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof google.showcase.v1beta1.SendBlurbsResponse
                     * @static
                     * @param {google.showcase.v1beta1.ISendBlurbsResponse} message SendBlurbsResponse message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    SendBlurbsResponse.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a SendBlurbsResponse message from the specified reader or buffer.
                     * @function decode
                     * @memberof google.showcase.v1beta1.SendBlurbsResponse
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {google.showcase.v1beta1.SendBlurbsResponse} SendBlurbsResponse
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    SendBlurbsResponse.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.showcase.v1beta1.SendBlurbsResponse();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                if (!(message.names && message.names.length))
                                    message.names = [];
                                message.names.push(reader.string());
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a SendBlurbsResponse message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof google.showcase.v1beta1.SendBlurbsResponse
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {google.showcase.v1beta1.SendBlurbsResponse} SendBlurbsResponse
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    SendBlurbsResponse.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a SendBlurbsResponse message.
                     * @function verify
                     * @memberof google.showcase.v1beta1.SendBlurbsResponse
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    SendBlurbsResponse.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.names != null && message.hasOwnProperty("names")) {
                            if (!Array.isArray(message.names))
                                return "names: array expected";
                            for (var i = 0; i < message.names.length; ++i)
                                if (!$util.isString(message.names[i]))
                                    return "names: string[] expected";
                        }
                        return null;
                    };
    
                    /**
                     * Creates a SendBlurbsResponse message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof google.showcase.v1beta1.SendBlurbsResponse
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {google.showcase.v1beta1.SendBlurbsResponse} SendBlurbsResponse
                     */
                    SendBlurbsResponse.fromObject = function fromObject(object) {
                        if (object instanceof $root.google.showcase.v1beta1.SendBlurbsResponse)
                            return object;
                        var message = new $root.google.showcase.v1beta1.SendBlurbsResponse();
                        if (object.names) {
                            if (!Array.isArray(object.names))
                                throw TypeError(".google.showcase.v1beta1.SendBlurbsResponse.names: array expected");
                            message.names = [];
                            for (var i = 0; i < object.names.length; ++i)
                                message.names[i] = String(object.names[i]);
                        }
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a SendBlurbsResponse message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof google.showcase.v1beta1.SendBlurbsResponse
                     * @static
                     * @param {google.showcase.v1beta1.SendBlurbsResponse} message SendBlurbsResponse
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    SendBlurbsResponse.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.arrays || options.defaults)
                            object.names = [];
                        if (message.names && message.names.length) {
                            object.names = [];
                            for (var j = 0; j < message.names.length; ++j)
                                object.names[j] = message.names[j];
                        }
                        return object;
                    };
    
                    /**
                     * Converts this SendBlurbsResponse to JSON.
                     * @function toJSON
                     * @memberof google.showcase.v1beta1.SendBlurbsResponse
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    SendBlurbsResponse.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    return SendBlurbsResponse;
                })();
    
                v1beta1.ConnectRequest = (function() {
    
                    /**
                     * Properties of a ConnectRequest.
                     * @memberof google.showcase.v1beta1
                     * @interface IConnectRequest
                     * @property {google.showcase.v1beta1.ConnectRequest.IConnectConfig|null} [config] ConnectRequest config
                     * @property {google.showcase.v1beta1.IBlurb|null} [blurb] ConnectRequest blurb
                     */
    
                    /**
                     * Constructs a new ConnectRequest.
                     * @memberof google.showcase.v1beta1
                     * @classdesc Represents a ConnectRequest.
                     * @implements IConnectRequest
                     * @constructor
                     * @param {google.showcase.v1beta1.IConnectRequest=} [properties] Properties to set
                     */
                    function ConnectRequest(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * ConnectRequest config.
                     * @member {google.showcase.v1beta1.ConnectRequest.IConnectConfig|null|undefined} config
                     * @memberof google.showcase.v1beta1.ConnectRequest
                     * @instance
                     */
                    ConnectRequest.prototype.config = null;
    
                    /**
                     * ConnectRequest blurb.
                     * @member {google.showcase.v1beta1.IBlurb|null|undefined} blurb
                     * @memberof google.showcase.v1beta1.ConnectRequest
                     * @instance
                     */
                    ConnectRequest.prototype.blurb = null;
    
                    // OneOf field names bound to virtual getters and setters
                    var $oneOfFields;
    
                    /**
                     * ConnectRequest request.
                     * @member {"config"|"blurb"|undefined} request
                     * @memberof google.showcase.v1beta1.ConnectRequest
                     * @instance
                     */
                    Object.defineProperty(ConnectRequest.prototype, "request", {
                        get: $util.oneOfGetter($oneOfFields = ["config", "blurb"]),
                        set: $util.oneOfSetter($oneOfFields)
                    });
    
                    /**
                     * Creates a new ConnectRequest instance using the specified properties.
                     * @function create
                     * @memberof google.showcase.v1beta1.ConnectRequest
                     * @static
                     * @param {google.showcase.v1beta1.IConnectRequest=} [properties] Properties to set
                     * @returns {google.showcase.v1beta1.ConnectRequest} ConnectRequest instance
                     */
                    ConnectRequest.create = function create(properties) {
                        return new ConnectRequest(properties);
                    };
    
                    /**
                     * Encodes the specified ConnectRequest message. Does not implicitly {@link google.showcase.v1beta1.ConnectRequest.verify|verify} messages.
                     * @function encode
                     * @memberof google.showcase.v1beta1.ConnectRequest
                     * @static
                     * @param {google.showcase.v1beta1.IConnectRequest} message ConnectRequest message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    ConnectRequest.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.config != null && Object.hasOwnProperty.call(message, "config"))
                            $root.google.showcase.v1beta1.ConnectRequest.ConnectConfig.encode(message.config, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                        if (message.blurb != null && Object.hasOwnProperty.call(message, "blurb"))
                            $root.google.showcase.v1beta1.Blurb.encode(message.blurb, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                        return writer;
                    };
    
                    /**
                     * Encodes the specified ConnectRequest message, length delimited. Does not implicitly {@link google.showcase.v1beta1.ConnectRequest.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof google.showcase.v1beta1.ConnectRequest
                     * @static
                     * @param {google.showcase.v1beta1.IConnectRequest} message ConnectRequest message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    ConnectRequest.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a ConnectRequest message from the specified reader or buffer.
                     * @function decode
                     * @memberof google.showcase.v1beta1.ConnectRequest
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {google.showcase.v1beta1.ConnectRequest} ConnectRequest
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    ConnectRequest.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.showcase.v1beta1.ConnectRequest();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.config = $root.google.showcase.v1beta1.ConnectRequest.ConnectConfig.decode(reader, reader.uint32());
                                break;
                            case 2:
                                message.blurb = $root.google.showcase.v1beta1.Blurb.decode(reader, reader.uint32());
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a ConnectRequest message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof google.showcase.v1beta1.ConnectRequest
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {google.showcase.v1beta1.ConnectRequest} ConnectRequest
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    ConnectRequest.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a ConnectRequest message.
                     * @function verify
                     * @memberof google.showcase.v1beta1.ConnectRequest
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    ConnectRequest.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        var properties = {};
                        if (message.config != null && message.hasOwnProperty("config")) {
                            properties.request = 1;
                            {
                                var error = $root.google.showcase.v1beta1.ConnectRequest.ConnectConfig.verify(message.config);
                                if (error)
                                    return "config." + error;
                            }
                        }
                        if (message.blurb != null && message.hasOwnProperty("blurb")) {
                            if (properties.request === 1)
                                return "request: multiple values";
                            properties.request = 1;
                            {
                                var error = $root.google.showcase.v1beta1.Blurb.verify(message.blurb);
                                if (error)
                                    return "blurb." + error;
                            }
                        }
                        return null;
                    };
    
                    /**
                     * Creates a ConnectRequest message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof google.showcase.v1beta1.ConnectRequest
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {google.showcase.v1beta1.ConnectRequest} ConnectRequest
                     */
                    ConnectRequest.fromObject = function fromObject(object) {
                        if (object instanceof $root.google.showcase.v1beta1.ConnectRequest)
                            return object;
                        var message = new $root.google.showcase.v1beta1.ConnectRequest();
                        if (object.config != null) {
                            if (typeof object.config !== "object")
                                throw TypeError(".google.showcase.v1beta1.ConnectRequest.config: object expected");
                            message.config = $root.google.showcase.v1beta1.ConnectRequest.ConnectConfig.fromObject(object.config);
                        }
                        if (object.blurb != null) {
                            if (typeof object.blurb !== "object")
                                throw TypeError(".google.showcase.v1beta1.ConnectRequest.blurb: object expected");
                            message.blurb = $root.google.showcase.v1beta1.Blurb.fromObject(object.blurb);
                        }
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a ConnectRequest message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof google.showcase.v1beta1.ConnectRequest
                     * @static
                     * @param {google.showcase.v1beta1.ConnectRequest} message ConnectRequest
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    ConnectRequest.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (message.config != null && message.hasOwnProperty("config")) {
                            object.config = $root.google.showcase.v1beta1.ConnectRequest.ConnectConfig.toObject(message.config, options);
                            if (options.oneofs)
                                object.request = "config";
                        }
                        if (message.blurb != null && message.hasOwnProperty("blurb")) {
                            object.blurb = $root.google.showcase.v1beta1.Blurb.toObject(message.blurb, options);
                            if (options.oneofs)
                                object.request = "blurb";
                        }
                        return object;
                    };
    
                    /**
                     * Converts this ConnectRequest to JSON.
                     * @function toJSON
                     * @memberof google.showcase.v1beta1.ConnectRequest
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    ConnectRequest.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    ConnectRequest.ConnectConfig = (function() {
    
                        /**
                         * Properties of a ConnectConfig.
                         * @memberof google.showcase.v1beta1.ConnectRequest
                         * @interface IConnectConfig
                         * @property {string|null} [parent] ConnectConfig parent
                         */
    
                        /**
                         * Constructs a new ConnectConfig.
                         * @memberof google.showcase.v1beta1.ConnectRequest
                         * @classdesc Represents a ConnectConfig.
                         * @implements IConnectConfig
                         * @constructor
                         * @param {google.showcase.v1beta1.ConnectRequest.IConnectConfig=} [properties] Properties to set
                         */
                        function ConnectConfig(properties) {
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * ConnectConfig parent.
                         * @member {string} parent
                         * @memberof google.showcase.v1beta1.ConnectRequest.ConnectConfig
                         * @instance
                         */
                        ConnectConfig.prototype.parent = "";
    
                        /**
                         * Creates a new ConnectConfig instance using the specified properties.
                         * @function create
                         * @memberof google.showcase.v1beta1.ConnectRequest.ConnectConfig
                         * @static
                         * @param {google.showcase.v1beta1.ConnectRequest.IConnectConfig=} [properties] Properties to set
                         * @returns {google.showcase.v1beta1.ConnectRequest.ConnectConfig} ConnectConfig instance
                         */
                        ConnectConfig.create = function create(properties) {
                            return new ConnectConfig(properties);
                        };
    
                        /**
                         * Encodes the specified ConnectConfig message. Does not implicitly {@link google.showcase.v1beta1.ConnectRequest.ConnectConfig.verify|verify} messages.
                         * @function encode
                         * @memberof google.showcase.v1beta1.ConnectRequest.ConnectConfig
                         * @static
                         * @param {google.showcase.v1beta1.ConnectRequest.IConnectConfig} message ConnectConfig message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        ConnectConfig.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.parent != null && Object.hasOwnProperty.call(message, "parent"))
                                writer.uint32(/* id 1, wireType 2 =*/10).string(message.parent);
                            return writer;
                        };
    
                        /**
                         * Encodes the specified ConnectConfig message, length delimited. Does not implicitly {@link google.showcase.v1beta1.ConnectRequest.ConnectConfig.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.showcase.v1beta1.ConnectRequest.ConnectConfig
                         * @static
                         * @param {google.showcase.v1beta1.ConnectRequest.IConnectConfig} message ConnectConfig message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        ConnectConfig.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes a ConnectConfig message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.showcase.v1beta1.ConnectRequest.ConnectConfig
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.showcase.v1beta1.ConnectRequest.ConnectConfig} ConnectConfig
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        ConnectConfig.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.showcase.v1beta1.ConnectRequest.ConnectConfig();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1:
                                    message.parent = reader.string();
                                    break;
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes a ConnectConfig message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.showcase.v1beta1.ConnectRequest.ConnectConfig
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.showcase.v1beta1.ConnectRequest.ConnectConfig} ConnectConfig
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        ConnectConfig.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies a ConnectConfig message.
                         * @function verify
                         * @memberof google.showcase.v1beta1.ConnectRequest.ConnectConfig
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        ConnectConfig.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.parent != null && message.hasOwnProperty("parent"))
                                if (!$util.isString(message.parent))
                                    return "parent: string expected";
                            return null;
                        };
    
                        /**
                         * Creates a ConnectConfig message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.showcase.v1beta1.ConnectRequest.ConnectConfig
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.showcase.v1beta1.ConnectRequest.ConnectConfig} ConnectConfig
                         */
                        ConnectConfig.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.showcase.v1beta1.ConnectRequest.ConnectConfig)
                                return object;
                            var message = new $root.google.showcase.v1beta1.ConnectRequest.ConnectConfig();
                            if (object.parent != null)
                                message.parent = String(object.parent);
                            return message;
                        };
    
                        /**
                         * Creates a plain object from a ConnectConfig message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.showcase.v1beta1.ConnectRequest.ConnectConfig
                         * @static
                         * @param {google.showcase.v1beta1.ConnectRequest.ConnectConfig} message ConnectConfig
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        ConnectConfig.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.defaults)
                                object.parent = "";
                            if (message.parent != null && message.hasOwnProperty("parent"))
                                object.parent = message.parent;
                            return object;
                        };
    
                        /**
                         * Converts this ConnectConfig to JSON.
                         * @function toJSON
                         * @memberof google.showcase.v1beta1.ConnectRequest.ConnectConfig
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        ConnectConfig.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        return ConnectConfig;
                    })();
    
                    return ConnectRequest;
                })();
    
                v1beta1.Testing = (function() {
    
                    /**
                     * Constructs a new Testing service.
                     * @memberof google.showcase.v1beta1
                     * @classdesc Represents a Testing
                     * @extends $protobuf.rpc.Service
                     * @constructor
                     * @param {$protobuf.RPCImpl} rpcImpl RPC implementation
                     * @param {boolean} [requestDelimited=false] Whether requests are length-delimited
                     * @param {boolean} [responseDelimited=false] Whether responses are length-delimited
                     */
                    function Testing(rpcImpl, requestDelimited, responseDelimited) {
                        $protobuf.rpc.Service.call(this, rpcImpl, requestDelimited, responseDelimited);
                    }
    
                    (Testing.prototype = Object.create($protobuf.rpc.Service.prototype)).constructor = Testing;
    
                    /**
                     * Creates new Testing service using the specified rpc implementation.
                     * @function create
                     * @memberof google.showcase.v1beta1.Testing
                     * @static
                     * @param {$protobuf.RPCImpl} rpcImpl RPC implementation
                     * @param {boolean} [requestDelimited=false] Whether requests are length-delimited
                     * @param {boolean} [responseDelimited=false] Whether responses are length-delimited
                     * @returns {Testing} RPC service. Useful where requests and/or responses are streamed.
                     */
                    Testing.create = function create(rpcImpl, requestDelimited, responseDelimited) {
                        return new this(rpcImpl, requestDelimited, responseDelimited);
                    };
    
                    /**
                     * Callback as used by {@link google.showcase.v1beta1.Testing#createSession}.
                     * @memberof google.showcase.v1beta1.Testing
                     * @typedef CreateSessionCallback
                     * @type {function}
                     * @param {Error|null} error Error, if any
                     * @param {google.showcase.v1beta1.Session} [response] Session
                     */
    
                    /**
                     * Calls CreateSession.
                     * @function createSession
                     * @memberof google.showcase.v1beta1.Testing
                     * @instance
                     * @param {google.showcase.v1beta1.ICreateSessionRequest} request CreateSessionRequest message or plain object
                     * @param {google.showcase.v1beta1.Testing.CreateSessionCallback} callback Node-style callback called with the error, if any, and Session
                     * @returns {undefined}
                     * @variation 1
                     */
                    Object.defineProperty(Testing.prototype.createSession = function createSession(request, callback) {
                        return this.rpcCall(createSession, $root.google.showcase.v1beta1.CreateSessionRequest, $root.google.showcase.v1beta1.Session, request, callback);
                    }, "name", { value: "CreateSession" });
    
                    /**
                     * Calls CreateSession.
                     * @function createSession
                     * @memberof google.showcase.v1beta1.Testing
                     * @instance
                     * @param {google.showcase.v1beta1.ICreateSessionRequest} request CreateSessionRequest message or plain object
                     * @returns {Promise<google.showcase.v1beta1.Session>} Promise
                     * @variation 2
                     */
    
                    /**
                     * Callback as used by {@link google.showcase.v1beta1.Testing#getSession}.
                     * @memberof google.showcase.v1beta1.Testing
                     * @typedef GetSessionCallback
                     * @type {function}
                     * @param {Error|null} error Error, if any
                     * @param {google.showcase.v1beta1.Session} [response] Session
                     */
    
                    /**
                     * Calls GetSession.
                     * @function getSession
                     * @memberof google.showcase.v1beta1.Testing
                     * @instance
                     * @param {google.showcase.v1beta1.IGetSessionRequest} request GetSessionRequest message or plain object
                     * @param {google.showcase.v1beta1.Testing.GetSessionCallback} callback Node-style callback called with the error, if any, and Session
                     * @returns {undefined}
                     * @variation 1
                     */
                    Object.defineProperty(Testing.prototype.getSession = function getSession(request, callback) {
                        return this.rpcCall(getSession, $root.google.showcase.v1beta1.GetSessionRequest, $root.google.showcase.v1beta1.Session, request, callback);
                    }, "name", { value: "GetSession" });
    
                    /**
                     * Calls GetSession.
                     * @function getSession
                     * @memberof google.showcase.v1beta1.Testing
                     * @instance
                     * @param {google.showcase.v1beta1.IGetSessionRequest} request GetSessionRequest message or plain object
                     * @returns {Promise<google.showcase.v1beta1.Session>} Promise
                     * @variation 2
                     */
    
                    /**
                     * Callback as used by {@link google.showcase.v1beta1.Testing#listSessions}.
                     * @memberof google.showcase.v1beta1.Testing
                     * @typedef ListSessionsCallback
                     * @type {function}
                     * @param {Error|null} error Error, if any
                     * @param {google.showcase.v1beta1.ListSessionsResponse} [response] ListSessionsResponse
                     */
    
                    /**
                     * Calls ListSessions.
                     * @function listSessions
                     * @memberof google.showcase.v1beta1.Testing
                     * @instance
                     * @param {google.showcase.v1beta1.IListSessionsRequest} request ListSessionsRequest message or plain object
                     * @param {google.showcase.v1beta1.Testing.ListSessionsCallback} callback Node-style callback called with the error, if any, and ListSessionsResponse
                     * @returns {undefined}
                     * @variation 1
                     */
                    Object.defineProperty(Testing.prototype.listSessions = function listSessions(request, callback) {
                        return this.rpcCall(listSessions, $root.google.showcase.v1beta1.ListSessionsRequest, $root.google.showcase.v1beta1.ListSessionsResponse, request, callback);
                    }, "name", { value: "ListSessions" });
    
                    /**
                     * Calls ListSessions.
                     * @function listSessions
                     * @memberof google.showcase.v1beta1.Testing
                     * @instance
                     * @param {google.showcase.v1beta1.IListSessionsRequest} request ListSessionsRequest message or plain object
                     * @returns {Promise<google.showcase.v1beta1.ListSessionsResponse>} Promise
                     * @variation 2
                     */
    
                    /**
                     * Callback as used by {@link google.showcase.v1beta1.Testing#deleteSession}.
                     * @memberof google.showcase.v1beta1.Testing
                     * @typedef DeleteSessionCallback
                     * @type {function}
                     * @param {Error|null} error Error, if any
                     * @param {google.protobuf.Empty} [response] Empty
                     */
    
                    /**
                     * Calls DeleteSession.
                     * @function deleteSession
                     * @memberof google.showcase.v1beta1.Testing
                     * @instance
                     * @param {google.showcase.v1beta1.IDeleteSessionRequest} request DeleteSessionRequest message or plain object
                     * @param {google.showcase.v1beta1.Testing.DeleteSessionCallback} callback Node-style callback called with the error, if any, and Empty
                     * @returns {undefined}
                     * @variation 1
                     */
                    Object.defineProperty(Testing.prototype.deleteSession = function deleteSession(request, callback) {
                        return this.rpcCall(deleteSession, $root.google.showcase.v1beta1.DeleteSessionRequest, $root.google.protobuf.Empty, request, callback);
                    }, "name", { value: "DeleteSession" });
    
                    /**
                     * Calls DeleteSession.
                     * @function deleteSession
                     * @memberof google.showcase.v1beta1.Testing
                     * @instance
                     * @param {google.showcase.v1beta1.IDeleteSessionRequest} request DeleteSessionRequest message or plain object
                     * @returns {Promise<google.protobuf.Empty>} Promise
                     * @variation 2
                     */
    
                    /**
                     * Callback as used by {@link google.showcase.v1beta1.Testing#reportSession}.
                     * @memberof google.showcase.v1beta1.Testing
                     * @typedef ReportSessionCallback
                     * @type {function}
                     * @param {Error|null} error Error, if any
                     * @param {google.showcase.v1beta1.ReportSessionResponse} [response] ReportSessionResponse
                     */
    
                    /**
                     * Calls ReportSession.
                     * @function reportSession
                     * @memberof google.showcase.v1beta1.Testing
                     * @instance
                     * @param {google.showcase.v1beta1.IReportSessionRequest} request ReportSessionRequest message or plain object
                     * @param {google.showcase.v1beta1.Testing.ReportSessionCallback} callback Node-style callback called with the error, if any, and ReportSessionResponse
                     * @returns {undefined}
                     * @variation 1
                     */
                    Object.defineProperty(Testing.prototype.reportSession = function reportSession(request, callback) {
                        return this.rpcCall(reportSession, $root.google.showcase.v1beta1.ReportSessionRequest, $root.google.showcase.v1beta1.ReportSessionResponse, request, callback);
                    }, "name", { value: "ReportSession" });
    
                    /**
                     * Calls ReportSession.
                     * @function reportSession
                     * @memberof google.showcase.v1beta1.Testing
                     * @instance
                     * @param {google.showcase.v1beta1.IReportSessionRequest} request ReportSessionRequest message or plain object
                     * @returns {Promise<google.showcase.v1beta1.ReportSessionResponse>} Promise
                     * @variation 2
                     */
    
                    /**
                     * Callback as used by {@link google.showcase.v1beta1.Testing#listTests}.
                     * @memberof google.showcase.v1beta1.Testing
                     * @typedef ListTestsCallback
                     * @type {function}
                     * @param {Error|null} error Error, if any
                     * @param {google.showcase.v1beta1.ListTestsResponse} [response] ListTestsResponse
                     */
    
                    /**
                     * Calls ListTests.
                     * @function listTests
                     * @memberof google.showcase.v1beta1.Testing
                     * @instance
                     * @param {google.showcase.v1beta1.IListTestsRequest} request ListTestsRequest message or plain object
                     * @param {google.showcase.v1beta1.Testing.ListTestsCallback} callback Node-style callback called with the error, if any, and ListTestsResponse
                     * @returns {undefined}
                     * @variation 1
                     */
                    Object.defineProperty(Testing.prototype.listTests = function listTests(request, callback) {
                        return this.rpcCall(listTests, $root.google.showcase.v1beta1.ListTestsRequest, $root.google.showcase.v1beta1.ListTestsResponse, request, callback);
                    }, "name", { value: "ListTests" });
    
                    /**
                     * Calls ListTests.
                     * @function listTests
                     * @memberof google.showcase.v1beta1.Testing
                     * @instance
                     * @param {google.showcase.v1beta1.IListTestsRequest} request ListTestsRequest message or plain object
                     * @returns {Promise<google.showcase.v1beta1.ListTestsResponse>} Promise
                     * @variation 2
                     */
    
                    /**
                     * Callback as used by {@link google.showcase.v1beta1.Testing#deleteTest}.
                     * @memberof google.showcase.v1beta1.Testing
                     * @typedef DeleteTestCallback
                     * @type {function}
                     * @param {Error|null} error Error, if any
                     * @param {google.protobuf.Empty} [response] Empty
                     */
    
                    /**
                     * Calls DeleteTest.
                     * @function deleteTest
                     * @memberof google.showcase.v1beta1.Testing
                     * @instance
                     * @param {google.showcase.v1beta1.IDeleteTestRequest} request DeleteTestRequest message or plain object
                     * @param {google.showcase.v1beta1.Testing.DeleteTestCallback} callback Node-style callback called with the error, if any, and Empty
                     * @returns {undefined}
                     * @variation 1
                     */
                    Object.defineProperty(Testing.prototype.deleteTest = function deleteTest(request, callback) {
                        return this.rpcCall(deleteTest, $root.google.showcase.v1beta1.DeleteTestRequest, $root.google.protobuf.Empty, request, callback);
                    }, "name", { value: "DeleteTest" });
    
                    /**
                     * Calls DeleteTest.
                     * @function deleteTest
                     * @memberof google.showcase.v1beta1.Testing
                     * @instance
                     * @param {google.showcase.v1beta1.IDeleteTestRequest} request DeleteTestRequest message or plain object
                     * @returns {Promise<google.protobuf.Empty>} Promise
                     * @variation 2
                     */
    
                    /**
                     * Callback as used by {@link google.showcase.v1beta1.Testing#verifyTest}.
                     * @memberof google.showcase.v1beta1.Testing
                     * @typedef VerifyTestCallback
                     * @type {function}
                     * @param {Error|null} error Error, if any
                     * @param {google.showcase.v1beta1.VerifyTestResponse} [response] VerifyTestResponse
                     */
    
                    /**
                     * Calls VerifyTest.
                     * @function verifyTest
                     * @memberof google.showcase.v1beta1.Testing
                     * @instance
                     * @param {google.showcase.v1beta1.IVerifyTestRequest} request VerifyTestRequest message or plain object
                     * @param {google.showcase.v1beta1.Testing.VerifyTestCallback} callback Node-style callback called with the error, if any, and VerifyTestResponse
                     * @returns {undefined}
                     * @variation 1
                     */
                    Object.defineProperty(Testing.prototype.verifyTest = function verifyTest(request, callback) {
                        return this.rpcCall(verifyTest, $root.google.showcase.v1beta1.VerifyTestRequest, $root.google.showcase.v1beta1.VerifyTestResponse, request, callback);
                    }, "name", { value: "VerifyTest" });
    
                    /**
                     * Calls VerifyTest.
                     * @function verifyTest
                     * @memberof google.showcase.v1beta1.Testing
                     * @instance
                     * @param {google.showcase.v1beta1.IVerifyTestRequest} request VerifyTestRequest message or plain object
                     * @returns {Promise<google.showcase.v1beta1.VerifyTestResponse>} Promise
                     * @variation 2
                     */
    
                    return Testing;
                })();
    
                v1beta1.Session = (function() {
    
                    /**
                     * Properties of a Session.
                     * @memberof google.showcase.v1beta1
                     * @interface ISession
                     * @property {string|null} [name] Session name
                     * @property {google.showcase.v1beta1.Session.Version|null} [version] Session version
                     */
    
                    /**
                     * Constructs a new Session.
                     * @memberof google.showcase.v1beta1
                     * @classdesc Represents a Session.
                     * @implements ISession
                     * @constructor
                     * @param {google.showcase.v1beta1.ISession=} [properties] Properties to set
                     */
                    function Session(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * Session name.
                     * @member {string} name
                     * @memberof google.showcase.v1beta1.Session
                     * @instance
                     */
                    Session.prototype.name = "";
    
                    /**
                     * Session version.
                     * @member {google.showcase.v1beta1.Session.Version} version
                     * @memberof google.showcase.v1beta1.Session
                     * @instance
                     */
                    Session.prototype.version = 0;
    
                    /**
                     * Creates a new Session instance using the specified properties.
                     * @function create
                     * @memberof google.showcase.v1beta1.Session
                     * @static
                     * @param {google.showcase.v1beta1.ISession=} [properties] Properties to set
                     * @returns {google.showcase.v1beta1.Session} Session instance
                     */
                    Session.create = function create(properties) {
                        return new Session(properties);
                    };
    
                    /**
                     * Encodes the specified Session message. Does not implicitly {@link google.showcase.v1beta1.Session.verify|verify} messages.
                     * @function encode
                     * @memberof google.showcase.v1beta1.Session
                     * @static
                     * @param {google.showcase.v1beta1.ISession} message Session message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Session.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                        if (message.version != null && Object.hasOwnProperty.call(message, "version"))
                            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.version);
                        return writer;
                    };
    
                    /**
                     * Encodes the specified Session message, length delimited. Does not implicitly {@link google.showcase.v1beta1.Session.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof google.showcase.v1beta1.Session
                     * @static
                     * @param {google.showcase.v1beta1.ISession} message Session message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Session.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a Session message from the specified reader or buffer.
                     * @function decode
                     * @memberof google.showcase.v1beta1.Session
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {google.showcase.v1beta1.Session} Session
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Session.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.showcase.v1beta1.Session();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.name = reader.string();
                                break;
                            case 2:
                                message.version = reader.int32();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a Session message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof google.showcase.v1beta1.Session
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {google.showcase.v1beta1.Session} Session
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Session.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a Session message.
                     * @function verify
                     * @memberof google.showcase.v1beta1.Session
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    Session.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.name != null && message.hasOwnProperty("name"))
                            if (!$util.isString(message.name))
                                return "name: string expected";
                        if (message.version != null && message.hasOwnProperty("version"))
                            switch (message.version) {
                            default:
                                return "version: enum value expected";
                            case 0:
                            case 1:
                            case 2:
                                break;
                            }
                        return null;
                    };
    
                    /**
                     * Creates a Session message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof google.showcase.v1beta1.Session
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {google.showcase.v1beta1.Session} Session
                     */
                    Session.fromObject = function fromObject(object) {
                        if (object instanceof $root.google.showcase.v1beta1.Session)
                            return object;
                        var message = new $root.google.showcase.v1beta1.Session();
                        if (object.name != null)
                            message.name = String(object.name);
                        switch (object.version) {
                        case "VERSION_UNSPECIFIED":
                        case 0:
                            message.version = 0;
                            break;
                        case "V1_LATEST":
                        case 1:
                            message.version = 1;
                            break;
                        case "V1_0":
                        case 2:
                            message.version = 2;
                            break;
                        }
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a Session message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof google.showcase.v1beta1.Session
                     * @static
                     * @param {google.showcase.v1beta1.Session} message Session
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    Session.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults) {
                            object.name = "";
                            object.version = options.enums === String ? "VERSION_UNSPECIFIED" : 0;
                        }
                        if (message.name != null && message.hasOwnProperty("name"))
                            object.name = message.name;
                        if (message.version != null && message.hasOwnProperty("version"))
                            object.version = options.enums === String ? $root.google.showcase.v1beta1.Session.Version[message.version] : message.version;
                        return object;
                    };
    
                    /**
                     * Converts this Session to JSON.
                     * @function toJSON
                     * @memberof google.showcase.v1beta1.Session
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    Session.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    /**
                     * Version enum.
                     * @name google.showcase.v1beta1.Session.Version
                     * @enum {number}
                     * @property {number} VERSION_UNSPECIFIED=0 VERSION_UNSPECIFIED value
                     * @property {number} V1_LATEST=1 V1_LATEST value
                     * @property {number} V1_0=2 V1_0 value
                     */
                    Session.Version = (function() {
                        var valuesById = {}, values = Object.create(valuesById);
                        values[valuesById[0] = "VERSION_UNSPECIFIED"] = 0;
                        values[valuesById[1] = "V1_LATEST"] = 1;
                        values[valuesById[2] = "V1_0"] = 2;
                        return values;
                    })();
    
                    return Session;
                })();
    
                v1beta1.CreateSessionRequest = (function() {
    
                    /**
                     * Properties of a CreateSessionRequest.
                     * @memberof google.showcase.v1beta1
                     * @interface ICreateSessionRequest
                     * @property {google.showcase.v1beta1.ISession|null} [session] CreateSessionRequest session
                     */
    
                    /**
                     * Constructs a new CreateSessionRequest.
                     * @memberof google.showcase.v1beta1
                     * @classdesc Represents a CreateSessionRequest.
                     * @implements ICreateSessionRequest
                     * @constructor
                     * @param {google.showcase.v1beta1.ICreateSessionRequest=} [properties] Properties to set
                     */
                    function CreateSessionRequest(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * CreateSessionRequest session.
                     * @member {google.showcase.v1beta1.ISession|null|undefined} session
                     * @memberof google.showcase.v1beta1.CreateSessionRequest
                     * @instance
                     */
                    CreateSessionRequest.prototype.session = null;
    
                    /**
                     * Creates a new CreateSessionRequest instance using the specified properties.
                     * @function create
                     * @memberof google.showcase.v1beta1.CreateSessionRequest
                     * @static
                     * @param {google.showcase.v1beta1.ICreateSessionRequest=} [properties] Properties to set
                     * @returns {google.showcase.v1beta1.CreateSessionRequest} CreateSessionRequest instance
                     */
                    CreateSessionRequest.create = function create(properties) {
                        return new CreateSessionRequest(properties);
                    };
    
                    /**
                     * Encodes the specified CreateSessionRequest message. Does not implicitly {@link google.showcase.v1beta1.CreateSessionRequest.verify|verify} messages.
                     * @function encode
                     * @memberof google.showcase.v1beta1.CreateSessionRequest
                     * @static
                     * @param {google.showcase.v1beta1.ICreateSessionRequest} message CreateSessionRequest message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    CreateSessionRequest.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.session != null && Object.hasOwnProperty.call(message, "session"))
                            $root.google.showcase.v1beta1.Session.encode(message.session, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                        return writer;
                    };
    
                    /**
                     * Encodes the specified CreateSessionRequest message, length delimited. Does not implicitly {@link google.showcase.v1beta1.CreateSessionRequest.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof google.showcase.v1beta1.CreateSessionRequest
                     * @static
                     * @param {google.showcase.v1beta1.ICreateSessionRequest} message CreateSessionRequest message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    CreateSessionRequest.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a CreateSessionRequest message from the specified reader or buffer.
                     * @function decode
                     * @memberof google.showcase.v1beta1.CreateSessionRequest
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {google.showcase.v1beta1.CreateSessionRequest} CreateSessionRequest
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    CreateSessionRequest.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.showcase.v1beta1.CreateSessionRequest();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.session = $root.google.showcase.v1beta1.Session.decode(reader, reader.uint32());
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a CreateSessionRequest message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof google.showcase.v1beta1.CreateSessionRequest
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {google.showcase.v1beta1.CreateSessionRequest} CreateSessionRequest
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    CreateSessionRequest.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a CreateSessionRequest message.
                     * @function verify
                     * @memberof google.showcase.v1beta1.CreateSessionRequest
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    CreateSessionRequest.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.session != null && message.hasOwnProperty("session")) {
                            var error = $root.google.showcase.v1beta1.Session.verify(message.session);
                            if (error)
                                return "session." + error;
                        }
                        return null;
                    };
    
                    /**
                     * Creates a CreateSessionRequest message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof google.showcase.v1beta1.CreateSessionRequest
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {google.showcase.v1beta1.CreateSessionRequest} CreateSessionRequest
                     */
                    CreateSessionRequest.fromObject = function fromObject(object) {
                        if (object instanceof $root.google.showcase.v1beta1.CreateSessionRequest)
                            return object;
                        var message = new $root.google.showcase.v1beta1.CreateSessionRequest();
                        if (object.session != null) {
                            if (typeof object.session !== "object")
                                throw TypeError(".google.showcase.v1beta1.CreateSessionRequest.session: object expected");
                            message.session = $root.google.showcase.v1beta1.Session.fromObject(object.session);
                        }
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a CreateSessionRequest message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof google.showcase.v1beta1.CreateSessionRequest
                     * @static
                     * @param {google.showcase.v1beta1.CreateSessionRequest} message CreateSessionRequest
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    CreateSessionRequest.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults)
                            object.session = null;
                        if (message.session != null && message.hasOwnProperty("session"))
                            object.session = $root.google.showcase.v1beta1.Session.toObject(message.session, options);
                        return object;
                    };
    
                    /**
                     * Converts this CreateSessionRequest to JSON.
                     * @function toJSON
                     * @memberof google.showcase.v1beta1.CreateSessionRequest
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    CreateSessionRequest.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    return CreateSessionRequest;
                })();
    
                v1beta1.GetSessionRequest = (function() {
    
                    /**
                     * Properties of a GetSessionRequest.
                     * @memberof google.showcase.v1beta1
                     * @interface IGetSessionRequest
                     * @property {string|null} [name] GetSessionRequest name
                     */
    
                    /**
                     * Constructs a new GetSessionRequest.
                     * @memberof google.showcase.v1beta1
                     * @classdesc Represents a GetSessionRequest.
                     * @implements IGetSessionRequest
                     * @constructor
                     * @param {google.showcase.v1beta1.IGetSessionRequest=} [properties] Properties to set
                     */
                    function GetSessionRequest(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * GetSessionRequest name.
                     * @member {string} name
                     * @memberof google.showcase.v1beta1.GetSessionRequest
                     * @instance
                     */
                    GetSessionRequest.prototype.name = "";
    
                    /**
                     * Creates a new GetSessionRequest instance using the specified properties.
                     * @function create
                     * @memberof google.showcase.v1beta1.GetSessionRequest
                     * @static
                     * @param {google.showcase.v1beta1.IGetSessionRequest=} [properties] Properties to set
                     * @returns {google.showcase.v1beta1.GetSessionRequest} GetSessionRequest instance
                     */
                    GetSessionRequest.create = function create(properties) {
                        return new GetSessionRequest(properties);
                    };
    
                    /**
                     * Encodes the specified GetSessionRequest message. Does not implicitly {@link google.showcase.v1beta1.GetSessionRequest.verify|verify} messages.
                     * @function encode
                     * @memberof google.showcase.v1beta1.GetSessionRequest
                     * @static
                     * @param {google.showcase.v1beta1.IGetSessionRequest} message GetSessionRequest message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    GetSessionRequest.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                        return writer;
                    };
    
                    /**
                     * Encodes the specified GetSessionRequest message, length delimited. Does not implicitly {@link google.showcase.v1beta1.GetSessionRequest.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof google.showcase.v1beta1.GetSessionRequest
                     * @static
                     * @param {google.showcase.v1beta1.IGetSessionRequest} message GetSessionRequest message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    GetSessionRequest.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a GetSessionRequest message from the specified reader or buffer.
                     * @function decode
                     * @memberof google.showcase.v1beta1.GetSessionRequest
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {google.showcase.v1beta1.GetSessionRequest} GetSessionRequest
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    GetSessionRequest.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.showcase.v1beta1.GetSessionRequest();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.name = reader.string();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a GetSessionRequest message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof google.showcase.v1beta1.GetSessionRequest
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {google.showcase.v1beta1.GetSessionRequest} GetSessionRequest
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    GetSessionRequest.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a GetSessionRequest message.
                     * @function verify
                     * @memberof google.showcase.v1beta1.GetSessionRequest
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    GetSessionRequest.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.name != null && message.hasOwnProperty("name"))
                            if (!$util.isString(message.name))
                                return "name: string expected";
                        return null;
                    };
    
                    /**
                     * Creates a GetSessionRequest message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof google.showcase.v1beta1.GetSessionRequest
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {google.showcase.v1beta1.GetSessionRequest} GetSessionRequest
                     */
                    GetSessionRequest.fromObject = function fromObject(object) {
                        if (object instanceof $root.google.showcase.v1beta1.GetSessionRequest)
                            return object;
                        var message = new $root.google.showcase.v1beta1.GetSessionRequest();
                        if (object.name != null)
                            message.name = String(object.name);
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a GetSessionRequest message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof google.showcase.v1beta1.GetSessionRequest
                     * @static
                     * @param {google.showcase.v1beta1.GetSessionRequest} message GetSessionRequest
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    GetSessionRequest.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults)
                            object.name = "";
                        if (message.name != null && message.hasOwnProperty("name"))
                            object.name = message.name;
                        return object;
                    };
    
                    /**
                     * Converts this GetSessionRequest to JSON.
                     * @function toJSON
                     * @memberof google.showcase.v1beta1.GetSessionRequest
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    GetSessionRequest.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    return GetSessionRequest;
                })();
    
                v1beta1.ListSessionsRequest = (function() {
    
                    /**
                     * Properties of a ListSessionsRequest.
                     * @memberof google.showcase.v1beta1
                     * @interface IListSessionsRequest
                     * @property {number|null} [pageSize] ListSessionsRequest pageSize
                     * @property {string|null} [pageToken] ListSessionsRequest pageToken
                     */
    
                    /**
                     * Constructs a new ListSessionsRequest.
                     * @memberof google.showcase.v1beta1
                     * @classdesc Represents a ListSessionsRequest.
                     * @implements IListSessionsRequest
                     * @constructor
                     * @param {google.showcase.v1beta1.IListSessionsRequest=} [properties] Properties to set
                     */
                    function ListSessionsRequest(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * ListSessionsRequest pageSize.
                     * @member {number} pageSize
                     * @memberof google.showcase.v1beta1.ListSessionsRequest
                     * @instance
                     */
                    ListSessionsRequest.prototype.pageSize = 0;
    
                    /**
                     * ListSessionsRequest pageToken.
                     * @member {string} pageToken
                     * @memberof google.showcase.v1beta1.ListSessionsRequest
                     * @instance
                     */
                    ListSessionsRequest.prototype.pageToken = "";
    
                    /**
                     * Creates a new ListSessionsRequest instance using the specified properties.
                     * @function create
                     * @memberof google.showcase.v1beta1.ListSessionsRequest
                     * @static
                     * @param {google.showcase.v1beta1.IListSessionsRequest=} [properties] Properties to set
                     * @returns {google.showcase.v1beta1.ListSessionsRequest} ListSessionsRequest instance
                     */
                    ListSessionsRequest.create = function create(properties) {
                        return new ListSessionsRequest(properties);
                    };
    
                    /**
                     * Encodes the specified ListSessionsRequest message. Does not implicitly {@link google.showcase.v1beta1.ListSessionsRequest.verify|verify} messages.
                     * @function encode
                     * @memberof google.showcase.v1beta1.ListSessionsRequest
                     * @static
                     * @param {google.showcase.v1beta1.IListSessionsRequest} message ListSessionsRequest message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    ListSessionsRequest.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.pageSize != null && Object.hasOwnProperty.call(message, "pageSize"))
                            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.pageSize);
                        if (message.pageToken != null && Object.hasOwnProperty.call(message, "pageToken"))
                            writer.uint32(/* id 2, wireType 2 =*/18).string(message.pageToken);
                        return writer;
                    };
    
                    /**
                     * Encodes the specified ListSessionsRequest message, length delimited. Does not implicitly {@link google.showcase.v1beta1.ListSessionsRequest.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof google.showcase.v1beta1.ListSessionsRequest
                     * @static
                     * @param {google.showcase.v1beta1.IListSessionsRequest} message ListSessionsRequest message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    ListSessionsRequest.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a ListSessionsRequest message from the specified reader or buffer.
                     * @function decode
                     * @memberof google.showcase.v1beta1.ListSessionsRequest
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {google.showcase.v1beta1.ListSessionsRequest} ListSessionsRequest
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    ListSessionsRequest.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.showcase.v1beta1.ListSessionsRequest();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.pageSize = reader.int32();
                                break;
                            case 2:
                                message.pageToken = reader.string();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a ListSessionsRequest message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof google.showcase.v1beta1.ListSessionsRequest
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {google.showcase.v1beta1.ListSessionsRequest} ListSessionsRequest
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    ListSessionsRequest.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a ListSessionsRequest message.
                     * @function verify
                     * @memberof google.showcase.v1beta1.ListSessionsRequest
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    ListSessionsRequest.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.pageSize != null && message.hasOwnProperty("pageSize"))
                            if (!$util.isInteger(message.pageSize))
                                return "pageSize: integer expected";
                        if (message.pageToken != null && message.hasOwnProperty("pageToken"))
                            if (!$util.isString(message.pageToken))
                                return "pageToken: string expected";
                        return null;
                    };
    
                    /**
                     * Creates a ListSessionsRequest message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof google.showcase.v1beta1.ListSessionsRequest
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {google.showcase.v1beta1.ListSessionsRequest} ListSessionsRequest
                     */
                    ListSessionsRequest.fromObject = function fromObject(object) {
                        if (object instanceof $root.google.showcase.v1beta1.ListSessionsRequest)
                            return object;
                        var message = new $root.google.showcase.v1beta1.ListSessionsRequest();
                        if (object.pageSize != null)
                            message.pageSize = object.pageSize | 0;
                        if (object.pageToken != null)
                            message.pageToken = String(object.pageToken);
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a ListSessionsRequest message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof google.showcase.v1beta1.ListSessionsRequest
                     * @static
                     * @param {google.showcase.v1beta1.ListSessionsRequest} message ListSessionsRequest
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    ListSessionsRequest.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults) {
                            object.pageSize = 0;
                            object.pageToken = "";
                        }
                        if (message.pageSize != null && message.hasOwnProperty("pageSize"))
                            object.pageSize = message.pageSize;
                        if (message.pageToken != null && message.hasOwnProperty("pageToken"))
                            object.pageToken = message.pageToken;
                        return object;
                    };
    
                    /**
                     * Converts this ListSessionsRequest to JSON.
                     * @function toJSON
                     * @memberof google.showcase.v1beta1.ListSessionsRequest
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    ListSessionsRequest.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    return ListSessionsRequest;
                })();
    
                v1beta1.ListSessionsResponse = (function() {
    
                    /**
                     * Properties of a ListSessionsResponse.
                     * @memberof google.showcase.v1beta1
                     * @interface IListSessionsResponse
                     * @property {Array.<google.showcase.v1beta1.ISession>|null} [sessions] ListSessionsResponse sessions
                     * @property {string|null} [nextPageToken] ListSessionsResponse nextPageToken
                     */
    
                    /**
                     * Constructs a new ListSessionsResponse.
                     * @memberof google.showcase.v1beta1
                     * @classdesc Represents a ListSessionsResponse.
                     * @implements IListSessionsResponse
                     * @constructor
                     * @param {google.showcase.v1beta1.IListSessionsResponse=} [properties] Properties to set
                     */
                    function ListSessionsResponse(properties) {
                        this.sessions = [];
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * ListSessionsResponse sessions.
                     * @member {Array.<google.showcase.v1beta1.ISession>} sessions
                     * @memberof google.showcase.v1beta1.ListSessionsResponse
                     * @instance
                     */
                    ListSessionsResponse.prototype.sessions = $util.emptyArray;
    
                    /**
                     * ListSessionsResponse nextPageToken.
                     * @member {string} nextPageToken
                     * @memberof google.showcase.v1beta1.ListSessionsResponse
                     * @instance
                     */
                    ListSessionsResponse.prototype.nextPageToken = "";
    
                    /**
                     * Creates a new ListSessionsResponse instance using the specified properties.
                     * @function create
                     * @memberof google.showcase.v1beta1.ListSessionsResponse
                     * @static
                     * @param {google.showcase.v1beta1.IListSessionsResponse=} [properties] Properties to set
                     * @returns {google.showcase.v1beta1.ListSessionsResponse} ListSessionsResponse instance
                     */
                    ListSessionsResponse.create = function create(properties) {
                        return new ListSessionsResponse(properties);
                    };
    
                    /**
                     * Encodes the specified ListSessionsResponse message. Does not implicitly {@link google.showcase.v1beta1.ListSessionsResponse.verify|verify} messages.
                     * @function encode
                     * @memberof google.showcase.v1beta1.ListSessionsResponse
                     * @static
                     * @param {google.showcase.v1beta1.IListSessionsResponse} message ListSessionsResponse message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    ListSessionsResponse.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.sessions != null && message.sessions.length)
                            for (var i = 0; i < message.sessions.length; ++i)
                                $root.google.showcase.v1beta1.Session.encode(message.sessions[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                        if (message.nextPageToken != null && Object.hasOwnProperty.call(message, "nextPageToken"))
                            writer.uint32(/* id 2, wireType 2 =*/18).string(message.nextPageToken);
                        return writer;
                    };
    
                    /**
                     * Encodes the specified ListSessionsResponse message, length delimited. Does not implicitly {@link google.showcase.v1beta1.ListSessionsResponse.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof google.showcase.v1beta1.ListSessionsResponse
                     * @static
                     * @param {google.showcase.v1beta1.IListSessionsResponse} message ListSessionsResponse message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    ListSessionsResponse.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a ListSessionsResponse message from the specified reader or buffer.
                     * @function decode
                     * @memberof google.showcase.v1beta1.ListSessionsResponse
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {google.showcase.v1beta1.ListSessionsResponse} ListSessionsResponse
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    ListSessionsResponse.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.showcase.v1beta1.ListSessionsResponse();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                if (!(message.sessions && message.sessions.length))
                                    message.sessions = [];
                                message.sessions.push($root.google.showcase.v1beta1.Session.decode(reader, reader.uint32()));
                                break;
                            case 2:
                                message.nextPageToken = reader.string();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a ListSessionsResponse message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof google.showcase.v1beta1.ListSessionsResponse
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {google.showcase.v1beta1.ListSessionsResponse} ListSessionsResponse
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    ListSessionsResponse.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a ListSessionsResponse message.
                     * @function verify
                     * @memberof google.showcase.v1beta1.ListSessionsResponse
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    ListSessionsResponse.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.sessions != null && message.hasOwnProperty("sessions")) {
                            if (!Array.isArray(message.sessions))
                                return "sessions: array expected";
                            for (var i = 0; i < message.sessions.length; ++i) {
                                var error = $root.google.showcase.v1beta1.Session.verify(message.sessions[i]);
                                if (error)
                                    return "sessions." + error;
                            }
                        }
                        if (message.nextPageToken != null && message.hasOwnProperty("nextPageToken"))
                            if (!$util.isString(message.nextPageToken))
                                return "nextPageToken: string expected";
                        return null;
                    };
    
                    /**
                     * Creates a ListSessionsResponse message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof google.showcase.v1beta1.ListSessionsResponse
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {google.showcase.v1beta1.ListSessionsResponse} ListSessionsResponse
                     */
                    ListSessionsResponse.fromObject = function fromObject(object) {
                        if (object instanceof $root.google.showcase.v1beta1.ListSessionsResponse)
                            return object;
                        var message = new $root.google.showcase.v1beta1.ListSessionsResponse();
                        if (object.sessions) {
                            if (!Array.isArray(object.sessions))
                                throw TypeError(".google.showcase.v1beta1.ListSessionsResponse.sessions: array expected");
                            message.sessions = [];
                            for (var i = 0; i < object.sessions.length; ++i) {
                                if (typeof object.sessions[i] !== "object")
                                    throw TypeError(".google.showcase.v1beta1.ListSessionsResponse.sessions: object expected");
                                message.sessions[i] = $root.google.showcase.v1beta1.Session.fromObject(object.sessions[i]);
                            }
                        }
                        if (object.nextPageToken != null)
                            message.nextPageToken = String(object.nextPageToken);
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a ListSessionsResponse message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof google.showcase.v1beta1.ListSessionsResponse
                     * @static
                     * @param {google.showcase.v1beta1.ListSessionsResponse} message ListSessionsResponse
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    ListSessionsResponse.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.arrays || options.defaults)
                            object.sessions = [];
                        if (options.defaults)
                            object.nextPageToken = "";
                        if (message.sessions && message.sessions.length) {
                            object.sessions = [];
                            for (var j = 0; j < message.sessions.length; ++j)
                                object.sessions[j] = $root.google.showcase.v1beta1.Session.toObject(message.sessions[j], options);
                        }
                        if (message.nextPageToken != null && message.hasOwnProperty("nextPageToken"))
                            object.nextPageToken = message.nextPageToken;
                        return object;
                    };
    
                    /**
                     * Converts this ListSessionsResponse to JSON.
                     * @function toJSON
                     * @memberof google.showcase.v1beta1.ListSessionsResponse
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    ListSessionsResponse.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    return ListSessionsResponse;
                })();
    
                v1beta1.DeleteSessionRequest = (function() {
    
                    /**
                     * Properties of a DeleteSessionRequest.
                     * @memberof google.showcase.v1beta1
                     * @interface IDeleteSessionRequest
                     * @property {string|null} [name] DeleteSessionRequest name
                     */
    
                    /**
                     * Constructs a new DeleteSessionRequest.
                     * @memberof google.showcase.v1beta1
                     * @classdesc Represents a DeleteSessionRequest.
                     * @implements IDeleteSessionRequest
                     * @constructor
                     * @param {google.showcase.v1beta1.IDeleteSessionRequest=} [properties] Properties to set
                     */
                    function DeleteSessionRequest(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * DeleteSessionRequest name.
                     * @member {string} name
                     * @memberof google.showcase.v1beta1.DeleteSessionRequest
                     * @instance
                     */
                    DeleteSessionRequest.prototype.name = "";
    
                    /**
                     * Creates a new DeleteSessionRequest instance using the specified properties.
                     * @function create
                     * @memberof google.showcase.v1beta1.DeleteSessionRequest
                     * @static
                     * @param {google.showcase.v1beta1.IDeleteSessionRequest=} [properties] Properties to set
                     * @returns {google.showcase.v1beta1.DeleteSessionRequest} DeleteSessionRequest instance
                     */
                    DeleteSessionRequest.create = function create(properties) {
                        return new DeleteSessionRequest(properties);
                    };
    
                    /**
                     * Encodes the specified DeleteSessionRequest message. Does not implicitly {@link google.showcase.v1beta1.DeleteSessionRequest.verify|verify} messages.
                     * @function encode
                     * @memberof google.showcase.v1beta1.DeleteSessionRequest
                     * @static
                     * @param {google.showcase.v1beta1.IDeleteSessionRequest} message DeleteSessionRequest message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    DeleteSessionRequest.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                        return writer;
                    };
    
                    /**
                     * Encodes the specified DeleteSessionRequest message, length delimited. Does not implicitly {@link google.showcase.v1beta1.DeleteSessionRequest.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof google.showcase.v1beta1.DeleteSessionRequest
                     * @static
                     * @param {google.showcase.v1beta1.IDeleteSessionRequest} message DeleteSessionRequest message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    DeleteSessionRequest.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a DeleteSessionRequest message from the specified reader or buffer.
                     * @function decode
                     * @memberof google.showcase.v1beta1.DeleteSessionRequest
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {google.showcase.v1beta1.DeleteSessionRequest} DeleteSessionRequest
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    DeleteSessionRequest.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.showcase.v1beta1.DeleteSessionRequest();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.name = reader.string();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a DeleteSessionRequest message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof google.showcase.v1beta1.DeleteSessionRequest
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {google.showcase.v1beta1.DeleteSessionRequest} DeleteSessionRequest
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    DeleteSessionRequest.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a DeleteSessionRequest message.
                     * @function verify
                     * @memberof google.showcase.v1beta1.DeleteSessionRequest
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    DeleteSessionRequest.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.name != null && message.hasOwnProperty("name"))
                            if (!$util.isString(message.name))
                                return "name: string expected";
                        return null;
                    };
    
                    /**
                     * Creates a DeleteSessionRequest message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof google.showcase.v1beta1.DeleteSessionRequest
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {google.showcase.v1beta1.DeleteSessionRequest} DeleteSessionRequest
                     */
                    DeleteSessionRequest.fromObject = function fromObject(object) {
                        if (object instanceof $root.google.showcase.v1beta1.DeleteSessionRequest)
                            return object;
                        var message = new $root.google.showcase.v1beta1.DeleteSessionRequest();
                        if (object.name != null)
                            message.name = String(object.name);
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a DeleteSessionRequest message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof google.showcase.v1beta1.DeleteSessionRequest
                     * @static
                     * @param {google.showcase.v1beta1.DeleteSessionRequest} message DeleteSessionRequest
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    DeleteSessionRequest.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults)
                            object.name = "";
                        if (message.name != null && message.hasOwnProperty("name"))
                            object.name = message.name;
                        return object;
                    };
    
                    /**
                     * Converts this DeleteSessionRequest to JSON.
                     * @function toJSON
                     * @memberof google.showcase.v1beta1.DeleteSessionRequest
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    DeleteSessionRequest.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    return DeleteSessionRequest;
                })();
    
                v1beta1.ReportSessionRequest = (function() {
    
                    /**
                     * Properties of a ReportSessionRequest.
                     * @memberof google.showcase.v1beta1
                     * @interface IReportSessionRequest
                     * @property {string|null} [name] ReportSessionRequest name
                     */
    
                    /**
                     * Constructs a new ReportSessionRequest.
                     * @memberof google.showcase.v1beta1
                     * @classdesc Represents a ReportSessionRequest.
                     * @implements IReportSessionRequest
                     * @constructor
                     * @param {google.showcase.v1beta1.IReportSessionRequest=} [properties] Properties to set
                     */
                    function ReportSessionRequest(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * ReportSessionRequest name.
                     * @member {string} name
                     * @memberof google.showcase.v1beta1.ReportSessionRequest
                     * @instance
                     */
                    ReportSessionRequest.prototype.name = "";
    
                    /**
                     * Creates a new ReportSessionRequest instance using the specified properties.
                     * @function create
                     * @memberof google.showcase.v1beta1.ReportSessionRequest
                     * @static
                     * @param {google.showcase.v1beta1.IReportSessionRequest=} [properties] Properties to set
                     * @returns {google.showcase.v1beta1.ReportSessionRequest} ReportSessionRequest instance
                     */
                    ReportSessionRequest.create = function create(properties) {
                        return new ReportSessionRequest(properties);
                    };
    
                    /**
                     * Encodes the specified ReportSessionRequest message. Does not implicitly {@link google.showcase.v1beta1.ReportSessionRequest.verify|verify} messages.
                     * @function encode
                     * @memberof google.showcase.v1beta1.ReportSessionRequest
                     * @static
                     * @param {google.showcase.v1beta1.IReportSessionRequest} message ReportSessionRequest message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    ReportSessionRequest.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                        return writer;
                    };
    
                    /**
                     * Encodes the specified ReportSessionRequest message, length delimited. Does not implicitly {@link google.showcase.v1beta1.ReportSessionRequest.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof google.showcase.v1beta1.ReportSessionRequest
                     * @static
                     * @param {google.showcase.v1beta1.IReportSessionRequest} message ReportSessionRequest message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    ReportSessionRequest.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a ReportSessionRequest message from the specified reader or buffer.
                     * @function decode
                     * @memberof google.showcase.v1beta1.ReportSessionRequest
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {google.showcase.v1beta1.ReportSessionRequest} ReportSessionRequest
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    ReportSessionRequest.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.showcase.v1beta1.ReportSessionRequest();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.name = reader.string();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a ReportSessionRequest message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof google.showcase.v1beta1.ReportSessionRequest
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {google.showcase.v1beta1.ReportSessionRequest} ReportSessionRequest
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    ReportSessionRequest.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a ReportSessionRequest message.
                     * @function verify
                     * @memberof google.showcase.v1beta1.ReportSessionRequest
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    ReportSessionRequest.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.name != null && message.hasOwnProperty("name"))
                            if (!$util.isString(message.name))
                                return "name: string expected";
                        return null;
                    };
    
                    /**
                     * Creates a ReportSessionRequest message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof google.showcase.v1beta1.ReportSessionRequest
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {google.showcase.v1beta1.ReportSessionRequest} ReportSessionRequest
                     */
                    ReportSessionRequest.fromObject = function fromObject(object) {
                        if (object instanceof $root.google.showcase.v1beta1.ReportSessionRequest)
                            return object;
                        var message = new $root.google.showcase.v1beta1.ReportSessionRequest();
                        if (object.name != null)
                            message.name = String(object.name);
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a ReportSessionRequest message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof google.showcase.v1beta1.ReportSessionRequest
                     * @static
                     * @param {google.showcase.v1beta1.ReportSessionRequest} message ReportSessionRequest
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    ReportSessionRequest.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults)
                            object.name = "";
                        if (message.name != null && message.hasOwnProperty("name"))
                            object.name = message.name;
                        return object;
                    };
    
                    /**
                     * Converts this ReportSessionRequest to JSON.
                     * @function toJSON
                     * @memberof google.showcase.v1beta1.ReportSessionRequest
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    ReportSessionRequest.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    return ReportSessionRequest;
                })();
    
                v1beta1.ReportSessionResponse = (function() {
    
                    /**
                     * Properties of a ReportSessionResponse.
                     * @memberof google.showcase.v1beta1
                     * @interface IReportSessionResponse
                     * @property {google.showcase.v1beta1.ReportSessionResponse.Result|null} [result] ReportSessionResponse result
                     * @property {Array.<google.showcase.v1beta1.ITestRun>|null} [testRuns] ReportSessionResponse testRuns
                     */
    
                    /**
                     * Constructs a new ReportSessionResponse.
                     * @memberof google.showcase.v1beta1
                     * @classdesc Represents a ReportSessionResponse.
                     * @implements IReportSessionResponse
                     * @constructor
                     * @param {google.showcase.v1beta1.IReportSessionResponse=} [properties] Properties to set
                     */
                    function ReportSessionResponse(properties) {
                        this.testRuns = [];
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * ReportSessionResponse result.
                     * @member {google.showcase.v1beta1.ReportSessionResponse.Result} result
                     * @memberof google.showcase.v1beta1.ReportSessionResponse
                     * @instance
                     */
                    ReportSessionResponse.prototype.result = 0;
    
                    /**
                     * ReportSessionResponse testRuns.
                     * @member {Array.<google.showcase.v1beta1.ITestRun>} testRuns
                     * @memberof google.showcase.v1beta1.ReportSessionResponse
                     * @instance
                     */
                    ReportSessionResponse.prototype.testRuns = $util.emptyArray;
    
                    /**
                     * Creates a new ReportSessionResponse instance using the specified properties.
                     * @function create
                     * @memberof google.showcase.v1beta1.ReportSessionResponse
                     * @static
                     * @param {google.showcase.v1beta1.IReportSessionResponse=} [properties] Properties to set
                     * @returns {google.showcase.v1beta1.ReportSessionResponse} ReportSessionResponse instance
                     */
                    ReportSessionResponse.create = function create(properties) {
                        return new ReportSessionResponse(properties);
                    };
    
                    /**
                     * Encodes the specified ReportSessionResponse message. Does not implicitly {@link google.showcase.v1beta1.ReportSessionResponse.verify|verify} messages.
                     * @function encode
                     * @memberof google.showcase.v1beta1.ReportSessionResponse
                     * @static
                     * @param {google.showcase.v1beta1.IReportSessionResponse} message ReportSessionResponse message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    ReportSessionResponse.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.result != null && Object.hasOwnProperty.call(message, "result"))
                            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.result);
                        if (message.testRuns != null && message.testRuns.length)
                            for (var i = 0; i < message.testRuns.length; ++i)
                                $root.google.showcase.v1beta1.TestRun.encode(message.testRuns[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                        return writer;
                    };
    
                    /**
                     * Encodes the specified ReportSessionResponse message, length delimited. Does not implicitly {@link google.showcase.v1beta1.ReportSessionResponse.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof google.showcase.v1beta1.ReportSessionResponse
                     * @static
                     * @param {google.showcase.v1beta1.IReportSessionResponse} message ReportSessionResponse message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    ReportSessionResponse.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a ReportSessionResponse message from the specified reader or buffer.
                     * @function decode
                     * @memberof google.showcase.v1beta1.ReportSessionResponse
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {google.showcase.v1beta1.ReportSessionResponse} ReportSessionResponse
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    ReportSessionResponse.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.showcase.v1beta1.ReportSessionResponse();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.result = reader.int32();
                                break;
                            case 2:
                                if (!(message.testRuns && message.testRuns.length))
                                    message.testRuns = [];
                                message.testRuns.push($root.google.showcase.v1beta1.TestRun.decode(reader, reader.uint32()));
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a ReportSessionResponse message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof google.showcase.v1beta1.ReportSessionResponse
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {google.showcase.v1beta1.ReportSessionResponse} ReportSessionResponse
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    ReportSessionResponse.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a ReportSessionResponse message.
                     * @function verify
                     * @memberof google.showcase.v1beta1.ReportSessionResponse
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    ReportSessionResponse.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.result != null && message.hasOwnProperty("result"))
                            switch (message.result) {
                            default:
                                return "result: enum value expected";
                            case 0:
                            case 1:
                            case 2:
                            case 3:
                                break;
                            }
                        if (message.testRuns != null && message.hasOwnProperty("testRuns")) {
                            if (!Array.isArray(message.testRuns))
                                return "testRuns: array expected";
                            for (var i = 0; i < message.testRuns.length; ++i) {
                                var error = $root.google.showcase.v1beta1.TestRun.verify(message.testRuns[i]);
                                if (error)
                                    return "testRuns." + error;
                            }
                        }
                        return null;
                    };
    
                    /**
                     * Creates a ReportSessionResponse message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof google.showcase.v1beta1.ReportSessionResponse
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {google.showcase.v1beta1.ReportSessionResponse} ReportSessionResponse
                     */
                    ReportSessionResponse.fromObject = function fromObject(object) {
                        if (object instanceof $root.google.showcase.v1beta1.ReportSessionResponse)
                            return object;
                        var message = new $root.google.showcase.v1beta1.ReportSessionResponse();
                        switch (object.result) {
                        case "RESULT_UNSPECIFIED":
                        case 0:
                            message.result = 0;
                            break;
                        case "PASSED":
                        case 1:
                            message.result = 1;
                            break;
                        case "FAILED":
                        case 2:
                            message.result = 2;
                            break;
                        case "INCOMPLETE":
                        case 3:
                            message.result = 3;
                            break;
                        }
                        if (object.testRuns) {
                            if (!Array.isArray(object.testRuns))
                                throw TypeError(".google.showcase.v1beta1.ReportSessionResponse.testRuns: array expected");
                            message.testRuns = [];
                            for (var i = 0; i < object.testRuns.length; ++i) {
                                if (typeof object.testRuns[i] !== "object")
                                    throw TypeError(".google.showcase.v1beta1.ReportSessionResponse.testRuns: object expected");
                                message.testRuns[i] = $root.google.showcase.v1beta1.TestRun.fromObject(object.testRuns[i]);
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a ReportSessionResponse message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof google.showcase.v1beta1.ReportSessionResponse
                     * @static
                     * @param {google.showcase.v1beta1.ReportSessionResponse} message ReportSessionResponse
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    ReportSessionResponse.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.arrays || options.defaults)
                            object.testRuns = [];
                        if (options.defaults)
                            object.result = options.enums === String ? "RESULT_UNSPECIFIED" : 0;
                        if (message.result != null && message.hasOwnProperty("result"))
                            object.result = options.enums === String ? $root.google.showcase.v1beta1.ReportSessionResponse.Result[message.result] : message.result;
                        if (message.testRuns && message.testRuns.length) {
                            object.testRuns = [];
                            for (var j = 0; j < message.testRuns.length; ++j)
                                object.testRuns[j] = $root.google.showcase.v1beta1.TestRun.toObject(message.testRuns[j], options);
                        }
                        return object;
                    };
    
                    /**
                     * Converts this ReportSessionResponse to JSON.
                     * @function toJSON
                     * @memberof google.showcase.v1beta1.ReportSessionResponse
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    ReportSessionResponse.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    /**
                     * Result enum.
                     * @name google.showcase.v1beta1.ReportSessionResponse.Result
                     * @enum {number}
                     * @property {number} RESULT_UNSPECIFIED=0 RESULT_UNSPECIFIED value
                     * @property {number} PASSED=1 PASSED value
                     * @property {number} FAILED=2 FAILED value
                     * @property {number} INCOMPLETE=3 INCOMPLETE value
                     */
                    ReportSessionResponse.Result = (function() {
                        var valuesById = {}, values = Object.create(valuesById);
                        values[valuesById[0] = "RESULT_UNSPECIFIED"] = 0;
                        values[valuesById[1] = "PASSED"] = 1;
                        values[valuesById[2] = "FAILED"] = 2;
                        values[valuesById[3] = "INCOMPLETE"] = 3;
                        return values;
                    })();
    
                    return ReportSessionResponse;
                })();
    
                v1beta1.Test = (function() {
    
                    /**
                     * Properties of a Test.
                     * @memberof google.showcase.v1beta1
                     * @interface ITest
                     * @property {string|null} [name] Test name
                     * @property {google.showcase.v1beta1.Test.ExpectationLevel|null} [expectationLevel] Test expectationLevel
                     * @property {string|null} [description] Test description
                     * @property {Array.<google.showcase.v1beta1.Test.IBlueprint>|null} [blueprints] Test blueprints
                     */
    
                    /**
                     * Constructs a new Test.
                     * @memberof google.showcase.v1beta1
                     * @classdesc Represents a Test.
                     * @implements ITest
                     * @constructor
                     * @param {google.showcase.v1beta1.ITest=} [properties] Properties to set
                     */
                    function Test(properties) {
                        this.blueprints = [];
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * Test name.
                     * @member {string} name
                     * @memberof google.showcase.v1beta1.Test
                     * @instance
                     */
                    Test.prototype.name = "";
    
                    /**
                     * Test expectationLevel.
                     * @member {google.showcase.v1beta1.Test.ExpectationLevel} expectationLevel
                     * @memberof google.showcase.v1beta1.Test
                     * @instance
                     */
                    Test.prototype.expectationLevel = 0;
    
                    /**
                     * Test description.
                     * @member {string} description
                     * @memberof google.showcase.v1beta1.Test
                     * @instance
                     */
                    Test.prototype.description = "";
    
                    /**
                     * Test blueprints.
                     * @member {Array.<google.showcase.v1beta1.Test.IBlueprint>} blueprints
                     * @memberof google.showcase.v1beta1.Test
                     * @instance
                     */
                    Test.prototype.blueprints = $util.emptyArray;
    
                    /**
                     * Creates a new Test instance using the specified properties.
                     * @function create
                     * @memberof google.showcase.v1beta1.Test
                     * @static
                     * @param {google.showcase.v1beta1.ITest=} [properties] Properties to set
                     * @returns {google.showcase.v1beta1.Test} Test instance
                     */
                    Test.create = function create(properties) {
                        return new Test(properties);
                    };
    
                    /**
                     * Encodes the specified Test message. Does not implicitly {@link google.showcase.v1beta1.Test.verify|verify} messages.
                     * @function encode
                     * @memberof google.showcase.v1beta1.Test
                     * @static
                     * @param {google.showcase.v1beta1.ITest} message Test message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Test.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                        if (message.expectationLevel != null && Object.hasOwnProperty.call(message, "expectationLevel"))
                            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.expectationLevel);
                        if (message.description != null && Object.hasOwnProperty.call(message, "description"))
                            writer.uint32(/* id 3, wireType 2 =*/26).string(message.description);
                        if (message.blueprints != null && message.blueprints.length)
                            for (var i = 0; i < message.blueprints.length; ++i)
                                $root.google.showcase.v1beta1.Test.Blueprint.encode(message.blueprints[i], writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                        return writer;
                    };
    
                    /**
                     * Encodes the specified Test message, length delimited. Does not implicitly {@link google.showcase.v1beta1.Test.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof google.showcase.v1beta1.Test
                     * @static
                     * @param {google.showcase.v1beta1.ITest} message Test message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Test.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a Test message from the specified reader or buffer.
                     * @function decode
                     * @memberof google.showcase.v1beta1.Test
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {google.showcase.v1beta1.Test} Test
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Test.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.showcase.v1beta1.Test();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.name = reader.string();
                                break;
                            case 2:
                                message.expectationLevel = reader.int32();
                                break;
                            case 3:
                                message.description = reader.string();
                                break;
                            case 4:
                                if (!(message.blueprints && message.blueprints.length))
                                    message.blueprints = [];
                                message.blueprints.push($root.google.showcase.v1beta1.Test.Blueprint.decode(reader, reader.uint32()));
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a Test message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof google.showcase.v1beta1.Test
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {google.showcase.v1beta1.Test} Test
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Test.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a Test message.
                     * @function verify
                     * @memberof google.showcase.v1beta1.Test
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    Test.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.name != null && message.hasOwnProperty("name"))
                            if (!$util.isString(message.name))
                                return "name: string expected";
                        if (message.expectationLevel != null && message.hasOwnProperty("expectationLevel"))
                            switch (message.expectationLevel) {
                            default:
                                return "expectationLevel: enum value expected";
                            case 0:
                            case 1:
                            case 2:
                            case 3:
                                break;
                            }
                        if (message.description != null && message.hasOwnProperty("description"))
                            if (!$util.isString(message.description))
                                return "description: string expected";
                        if (message.blueprints != null && message.hasOwnProperty("blueprints")) {
                            if (!Array.isArray(message.blueprints))
                                return "blueprints: array expected";
                            for (var i = 0; i < message.blueprints.length; ++i) {
                                var error = $root.google.showcase.v1beta1.Test.Blueprint.verify(message.blueprints[i]);
                                if (error)
                                    return "blueprints." + error;
                            }
                        }
                        return null;
                    };
    
                    /**
                     * Creates a Test message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof google.showcase.v1beta1.Test
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {google.showcase.v1beta1.Test} Test
                     */
                    Test.fromObject = function fromObject(object) {
                        if (object instanceof $root.google.showcase.v1beta1.Test)
                            return object;
                        var message = new $root.google.showcase.v1beta1.Test();
                        if (object.name != null)
                            message.name = String(object.name);
                        switch (object.expectationLevel) {
                        case "EXPECTATION_LEVEL_UNSPECIFIED":
                        case 0:
                            message.expectationLevel = 0;
                            break;
                        case "REQUIRED":
                        case 1:
                            message.expectationLevel = 1;
                            break;
                        case "RECOMMENDED":
                        case 2:
                            message.expectationLevel = 2;
                            break;
                        case "OPTIONAL":
                        case 3:
                            message.expectationLevel = 3;
                            break;
                        }
                        if (object.description != null)
                            message.description = String(object.description);
                        if (object.blueprints) {
                            if (!Array.isArray(object.blueprints))
                                throw TypeError(".google.showcase.v1beta1.Test.blueprints: array expected");
                            message.blueprints = [];
                            for (var i = 0; i < object.blueprints.length; ++i) {
                                if (typeof object.blueprints[i] !== "object")
                                    throw TypeError(".google.showcase.v1beta1.Test.blueprints: object expected");
                                message.blueprints[i] = $root.google.showcase.v1beta1.Test.Blueprint.fromObject(object.blueprints[i]);
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a Test message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof google.showcase.v1beta1.Test
                     * @static
                     * @param {google.showcase.v1beta1.Test} message Test
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    Test.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.arrays || options.defaults)
                            object.blueprints = [];
                        if (options.defaults) {
                            object.name = "";
                            object.expectationLevel = options.enums === String ? "EXPECTATION_LEVEL_UNSPECIFIED" : 0;
                            object.description = "";
                        }
                        if (message.name != null && message.hasOwnProperty("name"))
                            object.name = message.name;
                        if (message.expectationLevel != null && message.hasOwnProperty("expectationLevel"))
                            object.expectationLevel = options.enums === String ? $root.google.showcase.v1beta1.Test.ExpectationLevel[message.expectationLevel] : message.expectationLevel;
                        if (message.description != null && message.hasOwnProperty("description"))
                            object.description = message.description;
                        if (message.blueprints && message.blueprints.length) {
                            object.blueprints = [];
                            for (var j = 0; j < message.blueprints.length; ++j)
                                object.blueprints[j] = $root.google.showcase.v1beta1.Test.Blueprint.toObject(message.blueprints[j], options);
                        }
                        return object;
                    };
    
                    /**
                     * Converts this Test to JSON.
                     * @function toJSON
                     * @memberof google.showcase.v1beta1.Test
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    Test.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    /**
                     * ExpectationLevel enum.
                     * @name google.showcase.v1beta1.Test.ExpectationLevel
                     * @enum {number}
                     * @property {number} EXPECTATION_LEVEL_UNSPECIFIED=0 EXPECTATION_LEVEL_UNSPECIFIED value
                     * @property {number} REQUIRED=1 REQUIRED value
                     * @property {number} RECOMMENDED=2 RECOMMENDED value
                     * @property {number} OPTIONAL=3 OPTIONAL value
                     */
                    Test.ExpectationLevel = (function() {
                        var valuesById = {}, values = Object.create(valuesById);
                        values[valuesById[0] = "EXPECTATION_LEVEL_UNSPECIFIED"] = 0;
                        values[valuesById[1] = "REQUIRED"] = 1;
                        values[valuesById[2] = "RECOMMENDED"] = 2;
                        values[valuesById[3] = "OPTIONAL"] = 3;
                        return values;
                    })();
    
                    Test.Blueprint = (function() {
    
                        /**
                         * Properties of a Blueprint.
                         * @memberof google.showcase.v1beta1.Test
                         * @interface IBlueprint
                         * @property {string|null} [name] Blueprint name
                         * @property {string|null} [description] Blueprint description
                         * @property {google.showcase.v1beta1.Test.Blueprint.IInvocation|null} [request] Blueprint request
                         * @property {Array.<google.showcase.v1beta1.Test.Blueprint.IInvocation>|null} [additionalRequests] Blueprint additionalRequests
                         */
    
                        /**
                         * Constructs a new Blueprint.
                         * @memberof google.showcase.v1beta1.Test
                         * @classdesc Represents a Blueprint.
                         * @implements IBlueprint
                         * @constructor
                         * @param {google.showcase.v1beta1.Test.IBlueprint=} [properties] Properties to set
                         */
                        function Blueprint(properties) {
                            this.additionalRequests = [];
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * Blueprint name.
                         * @member {string} name
                         * @memberof google.showcase.v1beta1.Test.Blueprint
                         * @instance
                         */
                        Blueprint.prototype.name = "";
    
                        /**
                         * Blueprint description.
                         * @member {string} description
                         * @memberof google.showcase.v1beta1.Test.Blueprint
                         * @instance
                         */
                        Blueprint.prototype.description = "";
    
                        /**
                         * Blueprint request.
                         * @member {google.showcase.v1beta1.Test.Blueprint.IInvocation|null|undefined} request
                         * @memberof google.showcase.v1beta1.Test.Blueprint
                         * @instance
                         */
                        Blueprint.prototype.request = null;
    
                        /**
                         * Blueprint additionalRequests.
                         * @member {Array.<google.showcase.v1beta1.Test.Blueprint.IInvocation>} additionalRequests
                         * @memberof google.showcase.v1beta1.Test.Blueprint
                         * @instance
                         */
                        Blueprint.prototype.additionalRequests = $util.emptyArray;
    
                        /**
                         * Creates a new Blueprint instance using the specified properties.
                         * @function create
                         * @memberof google.showcase.v1beta1.Test.Blueprint
                         * @static
                         * @param {google.showcase.v1beta1.Test.IBlueprint=} [properties] Properties to set
                         * @returns {google.showcase.v1beta1.Test.Blueprint} Blueprint instance
                         */
                        Blueprint.create = function create(properties) {
                            return new Blueprint(properties);
                        };
    
                        /**
                         * Encodes the specified Blueprint message. Does not implicitly {@link google.showcase.v1beta1.Test.Blueprint.verify|verify} messages.
                         * @function encode
                         * @memberof google.showcase.v1beta1.Test.Blueprint
                         * @static
                         * @param {google.showcase.v1beta1.Test.IBlueprint} message Blueprint message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        Blueprint.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                                writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                            if (message.description != null && Object.hasOwnProperty.call(message, "description"))
                                writer.uint32(/* id 2, wireType 2 =*/18).string(message.description);
                            if (message.request != null && Object.hasOwnProperty.call(message, "request"))
                                $root.google.showcase.v1beta1.Test.Blueprint.Invocation.encode(message.request, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                            if (message.additionalRequests != null && message.additionalRequests.length)
                                for (var i = 0; i < message.additionalRequests.length; ++i)
                                    $root.google.showcase.v1beta1.Test.Blueprint.Invocation.encode(message.additionalRequests[i], writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                            return writer;
                        };
    
                        /**
                         * Encodes the specified Blueprint message, length delimited. Does not implicitly {@link google.showcase.v1beta1.Test.Blueprint.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.showcase.v1beta1.Test.Blueprint
                         * @static
                         * @param {google.showcase.v1beta1.Test.IBlueprint} message Blueprint message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        Blueprint.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes a Blueprint message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.showcase.v1beta1.Test.Blueprint
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.showcase.v1beta1.Test.Blueprint} Blueprint
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        Blueprint.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.showcase.v1beta1.Test.Blueprint();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1:
                                    message.name = reader.string();
                                    break;
                                case 2:
                                    message.description = reader.string();
                                    break;
                                case 3:
                                    message.request = $root.google.showcase.v1beta1.Test.Blueprint.Invocation.decode(reader, reader.uint32());
                                    break;
                                case 4:
                                    if (!(message.additionalRequests && message.additionalRequests.length))
                                        message.additionalRequests = [];
                                    message.additionalRequests.push($root.google.showcase.v1beta1.Test.Blueprint.Invocation.decode(reader, reader.uint32()));
                                    break;
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes a Blueprint message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.showcase.v1beta1.Test.Blueprint
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.showcase.v1beta1.Test.Blueprint} Blueprint
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        Blueprint.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies a Blueprint message.
                         * @function verify
                         * @memberof google.showcase.v1beta1.Test.Blueprint
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        Blueprint.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.name != null && message.hasOwnProperty("name"))
                                if (!$util.isString(message.name))
                                    return "name: string expected";
                            if (message.description != null && message.hasOwnProperty("description"))
                                if (!$util.isString(message.description))
                                    return "description: string expected";
                            if (message.request != null && message.hasOwnProperty("request")) {
                                var error = $root.google.showcase.v1beta1.Test.Blueprint.Invocation.verify(message.request);
                                if (error)
                                    return "request." + error;
                            }
                            if (message.additionalRequests != null && message.hasOwnProperty("additionalRequests")) {
                                if (!Array.isArray(message.additionalRequests))
                                    return "additionalRequests: array expected";
                                for (var i = 0; i < message.additionalRequests.length; ++i) {
                                    var error = $root.google.showcase.v1beta1.Test.Blueprint.Invocation.verify(message.additionalRequests[i]);
                                    if (error)
                                        return "additionalRequests." + error;
                                }
                            }
                            return null;
                        };
    
                        /**
                         * Creates a Blueprint message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.showcase.v1beta1.Test.Blueprint
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.showcase.v1beta1.Test.Blueprint} Blueprint
                         */
                        Blueprint.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.showcase.v1beta1.Test.Blueprint)
                                return object;
                            var message = new $root.google.showcase.v1beta1.Test.Blueprint();
                            if (object.name != null)
                                message.name = String(object.name);
                            if (object.description != null)
                                message.description = String(object.description);
                            if (object.request != null) {
                                if (typeof object.request !== "object")
                                    throw TypeError(".google.showcase.v1beta1.Test.Blueprint.request: object expected");
                                message.request = $root.google.showcase.v1beta1.Test.Blueprint.Invocation.fromObject(object.request);
                            }
                            if (object.additionalRequests) {
                                if (!Array.isArray(object.additionalRequests))
                                    throw TypeError(".google.showcase.v1beta1.Test.Blueprint.additionalRequests: array expected");
                                message.additionalRequests = [];
                                for (var i = 0; i < object.additionalRequests.length; ++i) {
                                    if (typeof object.additionalRequests[i] !== "object")
                                        throw TypeError(".google.showcase.v1beta1.Test.Blueprint.additionalRequests: object expected");
                                    message.additionalRequests[i] = $root.google.showcase.v1beta1.Test.Blueprint.Invocation.fromObject(object.additionalRequests[i]);
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Creates a plain object from a Blueprint message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.showcase.v1beta1.Test.Blueprint
                         * @static
                         * @param {google.showcase.v1beta1.Test.Blueprint} message Blueprint
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        Blueprint.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.arrays || options.defaults)
                                object.additionalRequests = [];
                            if (options.defaults) {
                                object.name = "";
                                object.description = "";
                                object.request = null;
                            }
                            if (message.name != null && message.hasOwnProperty("name"))
                                object.name = message.name;
                            if (message.description != null && message.hasOwnProperty("description"))
                                object.description = message.description;
                            if (message.request != null && message.hasOwnProperty("request"))
                                object.request = $root.google.showcase.v1beta1.Test.Blueprint.Invocation.toObject(message.request, options);
                            if (message.additionalRequests && message.additionalRequests.length) {
                                object.additionalRequests = [];
                                for (var j = 0; j < message.additionalRequests.length; ++j)
                                    object.additionalRequests[j] = $root.google.showcase.v1beta1.Test.Blueprint.Invocation.toObject(message.additionalRequests[j], options);
                            }
                            return object;
                        };
    
                        /**
                         * Converts this Blueprint to JSON.
                         * @function toJSON
                         * @memberof google.showcase.v1beta1.Test.Blueprint
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        Blueprint.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        Blueprint.Invocation = (function() {
    
                            /**
                             * Properties of an Invocation.
                             * @memberof google.showcase.v1beta1.Test.Blueprint
                             * @interface IInvocation
                             * @property {string|null} [method] Invocation method
                             * @property {Uint8Array|null} [serializedRequest] Invocation serializedRequest
                             */
    
                            /**
                             * Constructs a new Invocation.
                             * @memberof google.showcase.v1beta1.Test.Blueprint
                             * @classdesc Represents an Invocation.
                             * @implements IInvocation
                             * @constructor
                             * @param {google.showcase.v1beta1.Test.Blueprint.IInvocation=} [properties] Properties to set
                             */
                            function Invocation(properties) {
                                if (properties)
                                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                        if (properties[keys[i]] != null)
                                            this[keys[i]] = properties[keys[i]];
                            }
    
                            /**
                             * Invocation method.
                             * @member {string} method
                             * @memberof google.showcase.v1beta1.Test.Blueprint.Invocation
                             * @instance
                             */
                            Invocation.prototype.method = "";
    
                            /**
                             * Invocation serializedRequest.
                             * @member {Uint8Array} serializedRequest
                             * @memberof google.showcase.v1beta1.Test.Blueprint.Invocation
                             * @instance
                             */
                            Invocation.prototype.serializedRequest = $util.newBuffer([]);
    
                            /**
                             * Creates a new Invocation instance using the specified properties.
                             * @function create
                             * @memberof google.showcase.v1beta1.Test.Blueprint.Invocation
                             * @static
                             * @param {google.showcase.v1beta1.Test.Blueprint.IInvocation=} [properties] Properties to set
                             * @returns {google.showcase.v1beta1.Test.Blueprint.Invocation} Invocation instance
                             */
                            Invocation.create = function create(properties) {
                                return new Invocation(properties);
                            };
    
                            /**
                             * Encodes the specified Invocation message. Does not implicitly {@link google.showcase.v1beta1.Test.Blueprint.Invocation.verify|verify} messages.
                             * @function encode
                             * @memberof google.showcase.v1beta1.Test.Blueprint.Invocation
                             * @static
                             * @param {google.showcase.v1beta1.Test.Blueprint.IInvocation} message Invocation message or plain object to encode
                             * @param {$protobuf.Writer} [writer] Writer to encode to
                             * @returns {$protobuf.Writer} Writer
                             */
                            Invocation.encode = function encode(message, writer) {
                                if (!writer)
                                    writer = $Writer.create();
                                if (message.method != null && Object.hasOwnProperty.call(message, "method"))
                                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.method);
                                if (message.serializedRequest != null && Object.hasOwnProperty.call(message, "serializedRequest"))
                                    writer.uint32(/* id 2, wireType 2 =*/18).bytes(message.serializedRequest);
                                return writer;
                            };
    
                            /**
                             * Encodes the specified Invocation message, length delimited. Does not implicitly {@link google.showcase.v1beta1.Test.Blueprint.Invocation.verify|verify} messages.
                             * @function encodeDelimited
                             * @memberof google.showcase.v1beta1.Test.Blueprint.Invocation
                             * @static
                             * @param {google.showcase.v1beta1.Test.Blueprint.IInvocation} message Invocation message or plain object to encode
                             * @param {$protobuf.Writer} [writer] Writer to encode to
                             * @returns {$protobuf.Writer} Writer
                             */
                            Invocation.encodeDelimited = function encodeDelimited(message, writer) {
                                return this.encode(message, writer).ldelim();
                            };
    
                            /**
                             * Decodes an Invocation message from the specified reader or buffer.
                             * @function decode
                             * @memberof google.showcase.v1beta1.Test.Blueprint.Invocation
                             * @static
                             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                             * @param {number} [length] Message length if known beforehand
                             * @returns {google.showcase.v1beta1.Test.Blueprint.Invocation} Invocation
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            Invocation.decode = function decode(reader, length) {
                                if (!(reader instanceof $Reader))
                                    reader = $Reader.create(reader);
                                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.showcase.v1beta1.Test.Blueprint.Invocation();
                                while (reader.pos < end) {
                                    var tag = reader.uint32();
                                    switch (tag >>> 3) {
                                    case 1:
                                        message.method = reader.string();
                                        break;
                                    case 2:
                                        message.serializedRequest = reader.bytes();
                                        break;
                                    default:
                                        reader.skipType(tag & 7);
                                        break;
                                    }
                                }
                                return message;
                            };
    
                            /**
                             * Decodes an Invocation message from the specified reader or buffer, length delimited.
                             * @function decodeDelimited
                             * @memberof google.showcase.v1beta1.Test.Blueprint.Invocation
                             * @static
                             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                             * @returns {google.showcase.v1beta1.Test.Blueprint.Invocation} Invocation
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            Invocation.decodeDelimited = function decodeDelimited(reader) {
                                if (!(reader instanceof $Reader))
                                    reader = new $Reader(reader);
                                return this.decode(reader, reader.uint32());
                            };
    
                            /**
                             * Verifies an Invocation message.
                             * @function verify
                             * @memberof google.showcase.v1beta1.Test.Blueprint.Invocation
                             * @static
                             * @param {Object.<string,*>} message Plain object to verify
                             * @returns {string|null} `null` if valid, otherwise the reason why it is not
                             */
                            Invocation.verify = function verify(message) {
                                if (typeof message !== "object" || message === null)
                                    return "object expected";
                                if (message.method != null && message.hasOwnProperty("method"))
                                    if (!$util.isString(message.method))
                                        return "method: string expected";
                                if (message.serializedRequest != null && message.hasOwnProperty("serializedRequest"))
                                    if (!(message.serializedRequest && typeof message.serializedRequest.length === "number" || $util.isString(message.serializedRequest)))
                                        return "serializedRequest: buffer expected";
                                return null;
                            };
    
                            /**
                             * Creates an Invocation message from a plain object. Also converts values to their respective internal types.
                             * @function fromObject
                             * @memberof google.showcase.v1beta1.Test.Blueprint.Invocation
                             * @static
                             * @param {Object.<string,*>} object Plain object
                             * @returns {google.showcase.v1beta1.Test.Blueprint.Invocation} Invocation
                             */
                            Invocation.fromObject = function fromObject(object) {
                                if (object instanceof $root.google.showcase.v1beta1.Test.Blueprint.Invocation)
                                    return object;
                                var message = new $root.google.showcase.v1beta1.Test.Blueprint.Invocation();
                                if (object.method != null)
                                    message.method = String(object.method);
                                if (object.serializedRequest != null)
                                    if (typeof object.serializedRequest === "string")
                                        $util.base64.decode(object.serializedRequest, message.serializedRequest = $util.newBuffer($util.base64.length(object.serializedRequest)), 0);
                                    else if (object.serializedRequest.length)
                                        message.serializedRequest = object.serializedRequest;
                                return message;
                            };
    
                            /**
                             * Creates a plain object from an Invocation message. Also converts values to other types if specified.
                             * @function toObject
                             * @memberof google.showcase.v1beta1.Test.Blueprint.Invocation
                             * @static
                             * @param {google.showcase.v1beta1.Test.Blueprint.Invocation} message Invocation
                             * @param {$protobuf.IConversionOptions} [options] Conversion options
                             * @returns {Object.<string,*>} Plain object
                             */
                            Invocation.toObject = function toObject(message, options) {
                                if (!options)
                                    options = {};
                                var object = {};
                                if (options.defaults) {
                                    object.method = "";
                                    if (options.bytes === String)
                                        object.serializedRequest = "";
                                    else {
                                        object.serializedRequest = [];
                                        if (options.bytes !== Array)
                                            object.serializedRequest = $util.newBuffer(object.serializedRequest);
                                    }
                                }
                                if (message.method != null && message.hasOwnProperty("method"))
                                    object.method = message.method;
                                if (message.serializedRequest != null && message.hasOwnProperty("serializedRequest"))
                                    object.serializedRequest = options.bytes === String ? $util.base64.encode(message.serializedRequest, 0, message.serializedRequest.length) : options.bytes === Array ? Array.prototype.slice.call(message.serializedRequest) : message.serializedRequest;
                                return object;
                            };
    
                            /**
                             * Converts this Invocation to JSON.
                             * @function toJSON
                             * @memberof google.showcase.v1beta1.Test.Blueprint.Invocation
                             * @instance
                             * @returns {Object.<string,*>} JSON object
                             */
                            Invocation.prototype.toJSON = function toJSON() {
                                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                            };
    
                            return Invocation;
                        })();
    
                        return Blueprint;
                    })();
    
                    return Test;
                })();
    
                v1beta1.Issue = (function() {
    
                    /**
                     * Properties of an Issue.
                     * @memberof google.showcase.v1beta1
                     * @interface IIssue
                     * @property {google.showcase.v1beta1.Issue.Type|null} [type] Issue type
                     * @property {google.showcase.v1beta1.Issue.Severity|null} [severity] Issue severity
                     * @property {string|null} [description] Issue description
                     */
    
                    /**
                     * Constructs a new Issue.
                     * @memberof google.showcase.v1beta1
                     * @classdesc Represents an Issue.
                     * @implements IIssue
                     * @constructor
                     * @param {google.showcase.v1beta1.IIssue=} [properties] Properties to set
                     */
                    function Issue(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * Issue type.
                     * @member {google.showcase.v1beta1.Issue.Type} type
                     * @memberof google.showcase.v1beta1.Issue
                     * @instance
                     */
                    Issue.prototype.type = 0;
    
                    /**
                     * Issue severity.
                     * @member {google.showcase.v1beta1.Issue.Severity} severity
                     * @memberof google.showcase.v1beta1.Issue
                     * @instance
                     */
                    Issue.prototype.severity = 0;
    
                    /**
                     * Issue description.
                     * @member {string} description
                     * @memberof google.showcase.v1beta1.Issue
                     * @instance
                     */
                    Issue.prototype.description = "";
    
                    /**
                     * Creates a new Issue instance using the specified properties.
                     * @function create
                     * @memberof google.showcase.v1beta1.Issue
                     * @static
                     * @param {google.showcase.v1beta1.IIssue=} [properties] Properties to set
                     * @returns {google.showcase.v1beta1.Issue} Issue instance
                     */
                    Issue.create = function create(properties) {
                        return new Issue(properties);
                    };
    
                    /**
                     * Encodes the specified Issue message. Does not implicitly {@link google.showcase.v1beta1.Issue.verify|verify} messages.
                     * @function encode
                     * @memberof google.showcase.v1beta1.Issue
                     * @static
                     * @param {google.showcase.v1beta1.IIssue} message Issue message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Issue.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.type != null && Object.hasOwnProperty.call(message, "type"))
                            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.type);
                        if (message.severity != null && Object.hasOwnProperty.call(message, "severity"))
                            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.severity);
                        if (message.description != null && Object.hasOwnProperty.call(message, "description"))
                            writer.uint32(/* id 3, wireType 2 =*/26).string(message.description);
                        return writer;
                    };
    
                    /**
                     * Encodes the specified Issue message, length delimited. Does not implicitly {@link google.showcase.v1beta1.Issue.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof google.showcase.v1beta1.Issue
                     * @static
                     * @param {google.showcase.v1beta1.IIssue} message Issue message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Issue.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes an Issue message from the specified reader or buffer.
                     * @function decode
                     * @memberof google.showcase.v1beta1.Issue
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {google.showcase.v1beta1.Issue} Issue
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Issue.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.showcase.v1beta1.Issue();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.type = reader.int32();
                                break;
                            case 2:
                                message.severity = reader.int32();
                                break;
                            case 3:
                                message.description = reader.string();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes an Issue message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof google.showcase.v1beta1.Issue
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {google.showcase.v1beta1.Issue} Issue
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Issue.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies an Issue message.
                     * @function verify
                     * @memberof google.showcase.v1beta1.Issue
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    Issue.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.type != null && message.hasOwnProperty("type"))
                            switch (message.type) {
                            default:
                                return "type: enum value expected";
                            case 0:
                            case 1:
                            case 2:
                            case 3:
                                break;
                            }
                        if (message.severity != null && message.hasOwnProperty("severity"))
                            switch (message.severity) {
                            default:
                                return "severity: enum value expected";
                            case 0:
                            case 1:
                            case 2:
                                break;
                            }
                        if (message.description != null && message.hasOwnProperty("description"))
                            if (!$util.isString(message.description))
                                return "description: string expected";
                        return null;
                    };
    
                    /**
                     * Creates an Issue message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof google.showcase.v1beta1.Issue
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {google.showcase.v1beta1.Issue} Issue
                     */
                    Issue.fromObject = function fromObject(object) {
                        if (object instanceof $root.google.showcase.v1beta1.Issue)
                            return object;
                        var message = new $root.google.showcase.v1beta1.Issue();
                        switch (object.type) {
                        case "TYPE_UNSPECIFIED":
                        case 0:
                            message.type = 0;
                            break;
                        case "SKIPPED":
                        case 1:
                            message.type = 1;
                            break;
                        case "PENDING":
                        case 2:
                            message.type = 2;
                            break;
                        case "INCORRECT_CONFIRMATION":
                        case 3:
                            message.type = 3;
                            break;
                        }
                        switch (object.severity) {
                        case "SEVERITY_UNSPECIFIED":
                        case 0:
                            message.severity = 0;
                            break;
                        case "ERROR":
                        case 1:
                            message.severity = 1;
                            break;
                        case "WARNING":
                        case 2:
                            message.severity = 2;
                            break;
                        }
                        if (object.description != null)
                            message.description = String(object.description);
                        return message;
                    };
    
                    /**
                     * Creates a plain object from an Issue message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof google.showcase.v1beta1.Issue
                     * @static
                     * @param {google.showcase.v1beta1.Issue} message Issue
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    Issue.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults) {
                            object.type = options.enums === String ? "TYPE_UNSPECIFIED" : 0;
                            object.severity = options.enums === String ? "SEVERITY_UNSPECIFIED" : 0;
                            object.description = "";
                        }
                        if (message.type != null && message.hasOwnProperty("type"))
                            object.type = options.enums === String ? $root.google.showcase.v1beta1.Issue.Type[message.type] : message.type;
                        if (message.severity != null && message.hasOwnProperty("severity"))
                            object.severity = options.enums === String ? $root.google.showcase.v1beta1.Issue.Severity[message.severity] : message.severity;
                        if (message.description != null && message.hasOwnProperty("description"))
                            object.description = message.description;
                        return object;
                    };
    
                    /**
                     * Converts this Issue to JSON.
                     * @function toJSON
                     * @memberof google.showcase.v1beta1.Issue
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    Issue.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    /**
                     * Type enum.
                     * @name google.showcase.v1beta1.Issue.Type
                     * @enum {number}
                     * @property {number} TYPE_UNSPECIFIED=0 TYPE_UNSPECIFIED value
                     * @property {number} SKIPPED=1 SKIPPED value
                     * @property {number} PENDING=2 PENDING value
                     * @property {number} INCORRECT_CONFIRMATION=3 INCORRECT_CONFIRMATION value
                     */
                    Issue.Type = (function() {
                        var valuesById = {}, values = Object.create(valuesById);
                        values[valuesById[0] = "TYPE_UNSPECIFIED"] = 0;
                        values[valuesById[1] = "SKIPPED"] = 1;
                        values[valuesById[2] = "PENDING"] = 2;
                        values[valuesById[3] = "INCORRECT_CONFIRMATION"] = 3;
                        return values;
                    })();
    
                    /**
                     * Severity enum.
                     * @name google.showcase.v1beta1.Issue.Severity
                     * @enum {number}
                     * @property {number} SEVERITY_UNSPECIFIED=0 SEVERITY_UNSPECIFIED value
                     * @property {number} ERROR=1 ERROR value
                     * @property {number} WARNING=2 WARNING value
                     */
                    Issue.Severity = (function() {
                        var valuesById = {}, values = Object.create(valuesById);
                        values[valuesById[0] = "SEVERITY_UNSPECIFIED"] = 0;
                        values[valuesById[1] = "ERROR"] = 1;
                        values[valuesById[2] = "WARNING"] = 2;
                        return values;
                    })();
    
                    return Issue;
                })();
    
                v1beta1.ListTestsRequest = (function() {
    
                    /**
                     * Properties of a ListTestsRequest.
                     * @memberof google.showcase.v1beta1
                     * @interface IListTestsRequest
                     * @property {string|null} [parent] ListTestsRequest parent
                     * @property {number|null} [pageSize] ListTestsRequest pageSize
                     * @property {string|null} [pageToken] ListTestsRequest pageToken
                     */
    
                    /**
                     * Constructs a new ListTestsRequest.
                     * @memberof google.showcase.v1beta1
                     * @classdesc Represents a ListTestsRequest.
                     * @implements IListTestsRequest
                     * @constructor
                     * @param {google.showcase.v1beta1.IListTestsRequest=} [properties] Properties to set
                     */
                    function ListTestsRequest(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * ListTestsRequest parent.
                     * @member {string} parent
                     * @memberof google.showcase.v1beta1.ListTestsRequest
                     * @instance
                     */
                    ListTestsRequest.prototype.parent = "";
    
                    /**
                     * ListTestsRequest pageSize.
                     * @member {number} pageSize
                     * @memberof google.showcase.v1beta1.ListTestsRequest
                     * @instance
                     */
                    ListTestsRequest.prototype.pageSize = 0;
    
                    /**
                     * ListTestsRequest pageToken.
                     * @member {string} pageToken
                     * @memberof google.showcase.v1beta1.ListTestsRequest
                     * @instance
                     */
                    ListTestsRequest.prototype.pageToken = "";
    
                    /**
                     * Creates a new ListTestsRequest instance using the specified properties.
                     * @function create
                     * @memberof google.showcase.v1beta1.ListTestsRequest
                     * @static
                     * @param {google.showcase.v1beta1.IListTestsRequest=} [properties] Properties to set
                     * @returns {google.showcase.v1beta1.ListTestsRequest} ListTestsRequest instance
                     */
                    ListTestsRequest.create = function create(properties) {
                        return new ListTestsRequest(properties);
                    };
    
                    /**
                     * Encodes the specified ListTestsRequest message. Does not implicitly {@link google.showcase.v1beta1.ListTestsRequest.verify|verify} messages.
                     * @function encode
                     * @memberof google.showcase.v1beta1.ListTestsRequest
                     * @static
                     * @param {google.showcase.v1beta1.IListTestsRequest} message ListTestsRequest message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    ListTestsRequest.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.parent != null && Object.hasOwnProperty.call(message, "parent"))
                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.parent);
                        if (message.pageSize != null && Object.hasOwnProperty.call(message, "pageSize"))
                            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.pageSize);
                        if (message.pageToken != null && Object.hasOwnProperty.call(message, "pageToken"))
                            writer.uint32(/* id 3, wireType 2 =*/26).string(message.pageToken);
                        return writer;
                    };
    
                    /**
                     * Encodes the specified ListTestsRequest message, length delimited. Does not implicitly {@link google.showcase.v1beta1.ListTestsRequest.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof google.showcase.v1beta1.ListTestsRequest
                     * @static
                     * @param {google.showcase.v1beta1.IListTestsRequest} message ListTestsRequest message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    ListTestsRequest.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a ListTestsRequest message from the specified reader or buffer.
                     * @function decode
                     * @memberof google.showcase.v1beta1.ListTestsRequest
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {google.showcase.v1beta1.ListTestsRequest} ListTestsRequest
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    ListTestsRequest.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.showcase.v1beta1.ListTestsRequest();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.parent = reader.string();
                                break;
                            case 2:
                                message.pageSize = reader.int32();
                                break;
                            case 3:
                                message.pageToken = reader.string();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a ListTestsRequest message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof google.showcase.v1beta1.ListTestsRequest
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {google.showcase.v1beta1.ListTestsRequest} ListTestsRequest
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    ListTestsRequest.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a ListTestsRequest message.
                     * @function verify
                     * @memberof google.showcase.v1beta1.ListTestsRequest
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    ListTestsRequest.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.parent != null && message.hasOwnProperty("parent"))
                            if (!$util.isString(message.parent))
                                return "parent: string expected";
                        if (message.pageSize != null && message.hasOwnProperty("pageSize"))
                            if (!$util.isInteger(message.pageSize))
                                return "pageSize: integer expected";
                        if (message.pageToken != null && message.hasOwnProperty("pageToken"))
                            if (!$util.isString(message.pageToken))
                                return "pageToken: string expected";
                        return null;
                    };
    
                    /**
                     * Creates a ListTestsRequest message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof google.showcase.v1beta1.ListTestsRequest
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {google.showcase.v1beta1.ListTestsRequest} ListTestsRequest
                     */
                    ListTestsRequest.fromObject = function fromObject(object) {
                        if (object instanceof $root.google.showcase.v1beta1.ListTestsRequest)
                            return object;
                        var message = new $root.google.showcase.v1beta1.ListTestsRequest();
                        if (object.parent != null)
                            message.parent = String(object.parent);
                        if (object.pageSize != null)
                            message.pageSize = object.pageSize | 0;
                        if (object.pageToken != null)
                            message.pageToken = String(object.pageToken);
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a ListTestsRequest message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof google.showcase.v1beta1.ListTestsRequest
                     * @static
                     * @param {google.showcase.v1beta1.ListTestsRequest} message ListTestsRequest
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    ListTestsRequest.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults) {
                            object.parent = "";
                            object.pageSize = 0;
                            object.pageToken = "";
                        }
                        if (message.parent != null && message.hasOwnProperty("parent"))
                            object.parent = message.parent;
                        if (message.pageSize != null && message.hasOwnProperty("pageSize"))
                            object.pageSize = message.pageSize;
                        if (message.pageToken != null && message.hasOwnProperty("pageToken"))
                            object.pageToken = message.pageToken;
                        return object;
                    };
    
                    /**
                     * Converts this ListTestsRequest to JSON.
                     * @function toJSON
                     * @memberof google.showcase.v1beta1.ListTestsRequest
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    ListTestsRequest.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    return ListTestsRequest;
                })();
    
                v1beta1.ListTestsResponse = (function() {
    
                    /**
                     * Properties of a ListTestsResponse.
                     * @memberof google.showcase.v1beta1
                     * @interface IListTestsResponse
                     * @property {Array.<google.showcase.v1beta1.ITest>|null} [tests] ListTestsResponse tests
                     * @property {string|null} [nextPageToken] ListTestsResponse nextPageToken
                     */
    
                    /**
                     * Constructs a new ListTestsResponse.
                     * @memberof google.showcase.v1beta1
                     * @classdesc Represents a ListTestsResponse.
                     * @implements IListTestsResponse
                     * @constructor
                     * @param {google.showcase.v1beta1.IListTestsResponse=} [properties] Properties to set
                     */
                    function ListTestsResponse(properties) {
                        this.tests = [];
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * ListTestsResponse tests.
                     * @member {Array.<google.showcase.v1beta1.ITest>} tests
                     * @memberof google.showcase.v1beta1.ListTestsResponse
                     * @instance
                     */
                    ListTestsResponse.prototype.tests = $util.emptyArray;
    
                    /**
                     * ListTestsResponse nextPageToken.
                     * @member {string} nextPageToken
                     * @memberof google.showcase.v1beta1.ListTestsResponse
                     * @instance
                     */
                    ListTestsResponse.prototype.nextPageToken = "";
    
                    /**
                     * Creates a new ListTestsResponse instance using the specified properties.
                     * @function create
                     * @memberof google.showcase.v1beta1.ListTestsResponse
                     * @static
                     * @param {google.showcase.v1beta1.IListTestsResponse=} [properties] Properties to set
                     * @returns {google.showcase.v1beta1.ListTestsResponse} ListTestsResponse instance
                     */
                    ListTestsResponse.create = function create(properties) {
                        return new ListTestsResponse(properties);
                    };
    
                    /**
                     * Encodes the specified ListTestsResponse message. Does not implicitly {@link google.showcase.v1beta1.ListTestsResponse.verify|verify} messages.
                     * @function encode
                     * @memberof google.showcase.v1beta1.ListTestsResponse
                     * @static
                     * @param {google.showcase.v1beta1.IListTestsResponse} message ListTestsResponse message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    ListTestsResponse.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.tests != null && message.tests.length)
                            for (var i = 0; i < message.tests.length; ++i)
                                $root.google.showcase.v1beta1.Test.encode(message.tests[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                        if (message.nextPageToken != null && Object.hasOwnProperty.call(message, "nextPageToken"))
                            writer.uint32(/* id 2, wireType 2 =*/18).string(message.nextPageToken);
                        return writer;
                    };
    
                    /**
                     * Encodes the specified ListTestsResponse message, length delimited. Does not implicitly {@link google.showcase.v1beta1.ListTestsResponse.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof google.showcase.v1beta1.ListTestsResponse
                     * @static
                     * @param {google.showcase.v1beta1.IListTestsResponse} message ListTestsResponse message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    ListTestsResponse.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a ListTestsResponse message from the specified reader or buffer.
                     * @function decode
                     * @memberof google.showcase.v1beta1.ListTestsResponse
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {google.showcase.v1beta1.ListTestsResponse} ListTestsResponse
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    ListTestsResponse.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.showcase.v1beta1.ListTestsResponse();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                if (!(message.tests && message.tests.length))
                                    message.tests = [];
                                message.tests.push($root.google.showcase.v1beta1.Test.decode(reader, reader.uint32()));
                                break;
                            case 2:
                                message.nextPageToken = reader.string();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a ListTestsResponse message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof google.showcase.v1beta1.ListTestsResponse
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {google.showcase.v1beta1.ListTestsResponse} ListTestsResponse
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    ListTestsResponse.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a ListTestsResponse message.
                     * @function verify
                     * @memberof google.showcase.v1beta1.ListTestsResponse
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    ListTestsResponse.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.tests != null && message.hasOwnProperty("tests")) {
                            if (!Array.isArray(message.tests))
                                return "tests: array expected";
                            for (var i = 0; i < message.tests.length; ++i) {
                                var error = $root.google.showcase.v1beta1.Test.verify(message.tests[i]);
                                if (error)
                                    return "tests." + error;
                            }
                        }
                        if (message.nextPageToken != null && message.hasOwnProperty("nextPageToken"))
                            if (!$util.isString(message.nextPageToken))
                                return "nextPageToken: string expected";
                        return null;
                    };
    
                    /**
                     * Creates a ListTestsResponse message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof google.showcase.v1beta1.ListTestsResponse
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {google.showcase.v1beta1.ListTestsResponse} ListTestsResponse
                     */
                    ListTestsResponse.fromObject = function fromObject(object) {
                        if (object instanceof $root.google.showcase.v1beta1.ListTestsResponse)
                            return object;
                        var message = new $root.google.showcase.v1beta1.ListTestsResponse();
                        if (object.tests) {
                            if (!Array.isArray(object.tests))
                                throw TypeError(".google.showcase.v1beta1.ListTestsResponse.tests: array expected");
                            message.tests = [];
                            for (var i = 0; i < object.tests.length; ++i) {
                                if (typeof object.tests[i] !== "object")
                                    throw TypeError(".google.showcase.v1beta1.ListTestsResponse.tests: object expected");
                                message.tests[i] = $root.google.showcase.v1beta1.Test.fromObject(object.tests[i]);
                            }
                        }
                        if (object.nextPageToken != null)
                            message.nextPageToken = String(object.nextPageToken);
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a ListTestsResponse message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof google.showcase.v1beta1.ListTestsResponse
                     * @static
                     * @param {google.showcase.v1beta1.ListTestsResponse} message ListTestsResponse
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    ListTestsResponse.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.arrays || options.defaults)
                            object.tests = [];
                        if (options.defaults)
                            object.nextPageToken = "";
                        if (message.tests && message.tests.length) {
                            object.tests = [];
                            for (var j = 0; j < message.tests.length; ++j)
                                object.tests[j] = $root.google.showcase.v1beta1.Test.toObject(message.tests[j], options);
                        }
                        if (message.nextPageToken != null && message.hasOwnProperty("nextPageToken"))
                            object.nextPageToken = message.nextPageToken;
                        return object;
                    };
    
                    /**
                     * Converts this ListTestsResponse to JSON.
                     * @function toJSON
                     * @memberof google.showcase.v1beta1.ListTestsResponse
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    ListTestsResponse.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    return ListTestsResponse;
                })();
    
                v1beta1.TestRun = (function() {
    
                    /**
                     * Properties of a TestRun.
                     * @memberof google.showcase.v1beta1
                     * @interface ITestRun
                     * @property {string|null} [test] TestRun test
                     * @property {google.showcase.v1beta1.IIssue|null} [issue] TestRun issue
                     */
    
                    /**
                     * Constructs a new TestRun.
                     * @memberof google.showcase.v1beta1
                     * @classdesc Represents a TestRun.
                     * @implements ITestRun
                     * @constructor
                     * @param {google.showcase.v1beta1.ITestRun=} [properties] Properties to set
                     */
                    function TestRun(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * TestRun test.
                     * @member {string} test
                     * @memberof google.showcase.v1beta1.TestRun
                     * @instance
                     */
                    TestRun.prototype.test = "";
    
                    /**
                     * TestRun issue.
                     * @member {google.showcase.v1beta1.IIssue|null|undefined} issue
                     * @memberof google.showcase.v1beta1.TestRun
                     * @instance
                     */
                    TestRun.prototype.issue = null;
    
                    /**
                     * Creates a new TestRun instance using the specified properties.
                     * @function create
                     * @memberof google.showcase.v1beta1.TestRun
                     * @static
                     * @param {google.showcase.v1beta1.ITestRun=} [properties] Properties to set
                     * @returns {google.showcase.v1beta1.TestRun} TestRun instance
                     */
                    TestRun.create = function create(properties) {
                        return new TestRun(properties);
                    };
    
                    /**
                     * Encodes the specified TestRun message. Does not implicitly {@link google.showcase.v1beta1.TestRun.verify|verify} messages.
                     * @function encode
                     * @memberof google.showcase.v1beta1.TestRun
                     * @static
                     * @param {google.showcase.v1beta1.ITestRun} message TestRun message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    TestRun.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.test != null && Object.hasOwnProperty.call(message, "test"))
                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.test);
                        if (message.issue != null && Object.hasOwnProperty.call(message, "issue"))
                            $root.google.showcase.v1beta1.Issue.encode(message.issue, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                        return writer;
                    };
    
                    /**
                     * Encodes the specified TestRun message, length delimited. Does not implicitly {@link google.showcase.v1beta1.TestRun.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof google.showcase.v1beta1.TestRun
                     * @static
                     * @param {google.showcase.v1beta1.ITestRun} message TestRun message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    TestRun.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a TestRun message from the specified reader or buffer.
                     * @function decode
                     * @memberof google.showcase.v1beta1.TestRun
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {google.showcase.v1beta1.TestRun} TestRun
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    TestRun.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.showcase.v1beta1.TestRun();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.test = reader.string();
                                break;
                            case 2:
                                message.issue = $root.google.showcase.v1beta1.Issue.decode(reader, reader.uint32());
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a TestRun message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof google.showcase.v1beta1.TestRun
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {google.showcase.v1beta1.TestRun} TestRun
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    TestRun.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a TestRun message.
                     * @function verify
                     * @memberof google.showcase.v1beta1.TestRun
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    TestRun.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.test != null && message.hasOwnProperty("test"))
                            if (!$util.isString(message.test))
                                return "test: string expected";
                        if (message.issue != null && message.hasOwnProperty("issue")) {
                            var error = $root.google.showcase.v1beta1.Issue.verify(message.issue);
                            if (error)
                                return "issue." + error;
                        }
                        return null;
                    };
    
                    /**
                     * Creates a TestRun message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof google.showcase.v1beta1.TestRun
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {google.showcase.v1beta1.TestRun} TestRun
                     */
                    TestRun.fromObject = function fromObject(object) {
                        if (object instanceof $root.google.showcase.v1beta1.TestRun)
                            return object;
                        var message = new $root.google.showcase.v1beta1.TestRun();
                        if (object.test != null)
                            message.test = String(object.test);
                        if (object.issue != null) {
                            if (typeof object.issue !== "object")
                                throw TypeError(".google.showcase.v1beta1.TestRun.issue: object expected");
                            message.issue = $root.google.showcase.v1beta1.Issue.fromObject(object.issue);
                        }
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a TestRun message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof google.showcase.v1beta1.TestRun
                     * @static
                     * @param {google.showcase.v1beta1.TestRun} message TestRun
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    TestRun.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults) {
                            object.test = "";
                            object.issue = null;
                        }
                        if (message.test != null && message.hasOwnProperty("test"))
                            object.test = message.test;
                        if (message.issue != null && message.hasOwnProperty("issue"))
                            object.issue = $root.google.showcase.v1beta1.Issue.toObject(message.issue, options);
                        return object;
                    };
    
                    /**
                     * Converts this TestRun to JSON.
                     * @function toJSON
                     * @memberof google.showcase.v1beta1.TestRun
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    TestRun.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    return TestRun;
                })();
    
                v1beta1.DeleteTestRequest = (function() {
    
                    /**
                     * Properties of a DeleteTestRequest.
                     * @memberof google.showcase.v1beta1
                     * @interface IDeleteTestRequest
                     * @property {string|null} [name] DeleteTestRequest name
                     */
    
                    /**
                     * Constructs a new DeleteTestRequest.
                     * @memberof google.showcase.v1beta1
                     * @classdesc Represents a DeleteTestRequest.
                     * @implements IDeleteTestRequest
                     * @constructor
                     * @param {google.showcase.v1beta1.IDeleteTestRequest=} [properties] Properties to set
                     */
                    function DeleteTestRequest(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * DeleteTestRequest name.
                     * @member {string} name
                     * @memberof google.showcase.v1beta1.DeleteTestRequest
                     * @instance
                     */
                    DeleteTestRequest.prototype.name = "";
    
                    /**
                     * Creates a new DeleteTestRequest instance using the specified properties.
                     * @function create
                     * @memberof google.showcase.v1beta1.DeleteTestRequest
                     * @static
                     * @param {google.showcase.v1beta1.IDeleteTestRequest=} [properties] Properties to set
                     * @returns {google.showcase.v1beta1.DeleteTestRequest} DeleteTestRequest instance
                     */
                    DeleteTestRequest.create = function create(properties) {
                        return new DeleteTestRequest(properties);
                    };
    
                    /**
                     * Encodes the specified DeleteTestRequest message. Does not implicitly {@link google.showcase.v1beta1.DeleteTestRequest.verify|verify} messages.
                     * @function encode
                     * @memberof google.showcase.v1beta1.DeleteTestRequest
                     * @static
                     * @param {google.showcase.v1beta1.IDeleteTestRequest} message DeleteTestRequest message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    DeleteTestRequest.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                        return writer;
                    };
    
                    /**
                     * Encodes the specified DeleteTestRequest message, length delimited. Does not implicitly {@link google.showcase.v1beta1.DeleteTestRequest.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof google.showcase.v1beta1.DeleteTestRequest
                     * @static
                     * @param {google.showcase.v1beta1.IDeleteTestRequest} message DeleteTestRequest message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    DeleteTestRequest.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a DeleteTestRequest message from the specified reader or buffer.
                     * @function decode
                     * @memberof google.showcase.v1beta1.DeleteTestRequest
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {google.showcase.v1beta1.DeleteTestRequest} DeleteTestRequest
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    DeleteTestRequest.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.showcase.v1beta1.DeleteTestRequest();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.name = reader.string();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a DeleteTestRequest message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof google.showcase.v1beta1.DeleteTestRequest
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {google.showcase.v1beta1.DeleteTestRequest} DeleteTestRequest
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    DeleteTestRequest.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a DeleteTestRequest message.
                     * @function verify
                     * @memberof google.showcase.v1beta1.DeleteTestRequest
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    DeleteTestRequest.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.name != null && message.hasOwnProperty("name"))
                            if (!$util.isString(message.name))
                                return "name: string expected";
                        return null;
                    };
    
                    /**
                     * Creates a DeleteTestRequest message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof google.showcase.v1beta1.DeleteTestRequest
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {google.showcase.v1beta1.DeleteTestRequest} DeleteTestRequest
                     */
                    DeleteTestRequest.fromObject = function fromObject(object) {
                        if (object instanceof $root.google.showcase.v1beta1.DeleteTestRequest)
                            return object;
                        var message = new $root.google.showcase.v1beta1.DeleteTestRequest();
                        if (object.name != null)
                            message.name = String(object.name);
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a DeleteTestRequest message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof google.showcase.v1beta1.DeleteTestRequest
                     * @static
                     * @param {google.showcase.v1beta1.DeleteTestRequest} message DeleteTestRequest
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    DeleteTestRequest.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults)
                            object.name = "";
                        if (message.name != null && message.hasOwnProperty("name"))
                            object.name = message.name;
                        return object;
                    };
    
                    /**
                     * Converts this DeleteTestRequest to JSON.
                     * @function toJSON
                     * @memberof google.showcase.v1beta1.DeleteTestRequest
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    DeleteTestRequest.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    return DeleteTestRequest;
                })();
    
                v1beta1.VerifyTestRequest = (function() {
    
                    /**
                     * Properties of a VerifyTestRequest.
                     * @memberof google.showcase.v1beta1
                     * @interface IVerifyTestRequest
                     * @property {string|null} [name] VerifyTestRequest name
                     * @property {Uint8Array|null} [answer] VerifyTestRequest answer
                     * @property {Array.<Uint8Array>|null} [answers] VerifyTestRequest answers
                     */
    
                    /**
                     * Constructs a new VerifyTestRequest.
                     * @memberof google.showcase.v1beta1
                     * @classdesc Represents a VerifyTestRequest.
                     * @implements IVerifyTestRequest
                     * @constructor
                     * @param {google.showcase.v1beta1.IVerifyTestRequest=} [properties] Properties to set
                     */
                    function VerifyTestRequest(properties) {
                        this.answers = [];
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * VerifyTestRequest name.
                     * @member {string} name
                     * @memberof google.showcase.v1beta1.VerifyTestRequest
                     * @instance
                     */
                    VerifyTestRequest.prototype.name = "";
    
                    /**
                     * VerifyTestRequest answer.
                     * @member {Uint8Array} answer
                     * @memberof google.showcase.v1beta1.VerifyTestRequest
                     * @instance
                     */
                    VerifyTestRequest.prototype.answer = $util.newBuffer([]);
    
                    /**
                     * VerifyTestRequest answers.
                     * @member {Array.<Uint8Array>} answers
                     * @memberof google.showcase.v1beta1.VerifyTestRequest
                     * @instance
                     */
                    VerifyTestRequest.prototype.answers = $util.emptyArray;
    
                    /**
                     * Creates a new VerifyTestRequest instance using the specified properties.
                     * @function create
                     * @memberof google.showcase.v1beta1.VerifyTestRequest
                     * @static
                     * @param {google.showcase.v1beta1.IVerifyTestRequest=} [properties] Properties to set
                     * @returns {google.showcase.v1beta1.VerifyTestRequest} VerifyTestRequest instance
                     */
                    VerifyTestRequest.create = function create(properties) {
                        return new VerifyTestRequest(properties);
                    };
    
                    /**
                     * Encodes the specified VerifyTestRequest message. Does not implicitly {@link google.showcase.v1beta1.VerifyTestRequest.verify|verify} messages.
                     * @function encode
                     * @memberof google.showcase.v1beta1.VerifyTestRequest
                     * @static
                     * @param {google.showcase.v1beta1.IVerifyTestRequest} message VerifyTestRequest message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    VerifyTestRequest.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                        if (message.answer != null && Object.hasOwnProperty.call(message, "answer"))
                            writer.uint32(/* id 2, wireType 2 =*/18).bytes(message.answer);
                        if (message.answers != null && message.answers.length)
                            for (var i = 0; i < message.answers.length; ++i)
                                writer.uint32(/* id 3, wireType 2 =*/26).bytes(message.answers[i]);
                        return writer;
                    };
    
                    /**
                     * Encodes the specified VerifyTestRequest message, length delimited. Does not implicitly {@link google.showcase.v1beta1.VerifyTestRequest.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof google.showcase.v1beta1.VerifyTestRequest
                     * @static
                     * @param {google.showcase.v1beta1.IVerifyTestRequest} message VerifyTestRequest message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    VerifyTestRequest.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a VerifyTestRequest message from the specified reader or buffer.
                     * @function decode
                     * @memberof google.showcase.v1beta1.VerifyTestRequest
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {google.showcase.v1beta1.VerifyTestRequest} VerifyTestRequest
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    VerifyTestRequest.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.showcase.v1beta1.VerifyTestRequest();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.name = reader.string();
                                break;
                            case 2:
                                message.answer = reader.bytes();
                                break;
                            case 3:
                                if (!(message.answers && message.answers.length))
                                    message.answers = [];
                                message.answers.push(reader.bytes());
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a VerifyTestRequest message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof google.showcase.v1beta1.VerifyTestRequest
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {google.showcase.v1beta1.VerifyTestRequest} VerifyTestRequest
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    VerifyTestRequest.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a VerifyTestRequest message.
                     * @function verify
                     * @memberof google.showcase.v1beta1.VerifyTestRequest
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    VerifyTestRequest.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.name != null && message.hasOwnProperty("name"))
                            if (!$util.isString(message.name))
                                return "name: string expected";
                        if (message.answer != null && message.hasOwnProperty("answer"))
                            if (!(message.answer && typeof message.answer.length === "number" || $util.isString(message.answer)))
                                return "answer: buffer expected";
                        if (message.answers != null && message.hasOwnProperty("answers")) {
                            if (!Array.isArray(message.answers))
                                return "answers: array expected";
                            for (var i = 0; i < message.answers.length; ++i)
                                if (!(message.answers[i] && typeof message.answers[i].length === "number" || $util.isString(message.answers[i])))
                                    return "answers: buffer[] expected";
                        }
                        return null;
                    };
    
                    /**
                     * Creates a VerifyTestRequest message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof google.showcase.v1beta1.VerifyTestRequest
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {google.showcase.v1beta1.VerifyTestRequest} VerifyTestRequest
                     */
                    VerifyTestRequest.fromObject = function fromObject(object) {
                        if (object instanceof $root.google.showcase.v1beta1.VerifyTestRequest)
                            return object;
                        var message = new $root.google.showcase.v1beta1.VerifyTestRequest();
                        if (object.name != null)
                            message.name = String(object.name);
                        if (object.answer != null)
                            if (typeof object.answer === "string")
                                $util.base64.decode(object.answer, message.answer = $util.newBuffer($util.base64.length(object.answer)), 0);
                            else if (object.answer.length)
                                message.answer = object.answer;
                        if (object.answers) {
                            if (!Array.isArray(object.answers))
                                throw TypeError(".google.showcase.v1beta1.VerifyTestRequest.answers: array expected");
                            message.answers = [];
                            for (var i = 0; i < object.answers.length; ++i)
                                if (typeof object.answers[i] === "string")
                                    $util.base64.decode(object.answers[i], message.answers[i] = $util.newBuffer($util.base64.length(object.answers[i])), 0);
                                else if (object.answers[i].length)
                                    message.answers[i] = object.answers[i];
                        }
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a VerifyTestRequest message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof google.showcase.v1beta1.VerifyTestRequest
                     * @static
                     * @param {google.showcase.v1beta1.VerifyTestRequest} message VerifyTestRequest
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    VerifyTestRequest.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.arrays || options.defaults)
                            object.answers = [];
                        if (options.defaults) {
                            object.name = "";
                            if (options.bytes === String)
                                object.answer = "";
                            else {
                                object.answer = [];
                                if (options.bytes !== Array)
                                    object.answer = $util.newBuffer(object.answer);
                            }
                        }
                        if (message.name != null && message.hasOwnProperty("name"))
                            object.name = message.name;
                        if (message.answer != null && message.hasOwnProperty("answer"))
                            object.answer = options.bytes === String ? $util.base64.encode(message.answer, 0, message.answer.length) : options.bytes === Array ? Array.prototype.slice.call(message.answer) : message.answer;
                        if (message.answers && message.answers.length) {
                            object.answers = [];
                            for (var j = 0; j < message.answers.length; ++j)
                                object.answers[j] = options.bytes === String ? $util.base64.encode(message.answers[j], 0, message.answers[j].length) : options.bytes === Array ? Array.prototype.slice.call(message.answers[j]) : message.answers[j];
                        }
                        return object;
                    };
    
                    /**
                     * Converts this VerifyTestRequest to JSON.
                     * @function toJSON
                     * @memberof google.showcase.v1beta1.VerifyTestRequest
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    VerifyTestRequest.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    return VerifyTestRequest;
                })();
    
                v1beta1.VerifyTestResponse = (function() {
    
                    /**
                     * Properties of a VerifyTestResponse.
                     * @memberof google.showcase.v1beta1
                     * @interface IVerifyTestResponse
                     * @property {google.showcase.v1beta1.IIssue|null} [issue] VerifyTestResponse issue
                     */
    
                    /**
                     * Constructs a new VerifyTestResponse.
                     * @memberof google.showcase.v1beta1
                     * @classdesc Represents a VerifyTestResponse.
                     * @implements IVerifyTestResponse
                     * @constructor
                     * @param {google.showcase.v1beta1.IVerifyTestResponse=} [properties] Properties to set
                     */
                    function VerifyTestResponse(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * VerifyTestResponse issue.
                     * @member {google.showcase.v1beta1.IIssue|null|undefined} issue
                     * @memberof google.showcase.v1beta1.VerifyTestResponse
                     * @instance
                     */
                    VerifyTestResponse.prototype.issue = null;
    
                    /**
                     * Creates a new VerifyTestResponse instance using the specified properties.
                     * @function create
                     * @memberof google.showcase.v1beta1.VerifyTestResponse
                     * @static
                     * @param {google.showcase.v1beta1.IVerifyTestResponse=} [properties] Properties to set
                     * @returns {google.showcase.v1beta1.VerifyTestResponse} VerifyTestResponse instance
                     */
                    VerifyTestResponse.create = function create(properties) {
                        return new VerifyTestResponse(properties);
                    };
    
                    /**
                     * Encodes the specified VerifyTestResponse message. Does not implicitly {@link google.showcase.v1beta1.VerifyTestResponse.verify|verify} messages.
                     * @function encode
                     * @memberof google.showcase.v1beta1.VerifyTestResponse
                     * @static
                     * @param {google.showcase.v1beta1.IVerifyTestResponse} message VerifyTestResponse message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    VerifyTestResponse.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.issue != null && Object.hasOwnProperty.call(message, "issue"))
                            $root.google.showcase.v1beta1.Issue.encode(message.issue, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                        return writer;
                    };
    
                    /**
                     * Encodes the specified VerifyTestResponse message, length delimited. Does not implicitly {@link google.showcase.v1beta1.VerifyTestResponse.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof google.showcase.v1beta1.VerifyTestResponse
                     * @static
                     * @param {google.showcase.v1beta1.IVerifyTestResponse} message VerifyTestResponse message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    VerifyTestResponse.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a VerifyTestResponse message from the specified reader or buffer.
                     * @function decode
                     * @memberof google.showcase.v1beta1.VerifyTestResponse
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {google.showcase.v1beta1.VerifyTestResponse} VerifyTestResponse
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    VerifyTestResponse.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.showcase.v1beta1.VerifyTestResponse();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.issue = $root.google.showcase.v1beta1.Issue.decode(reader, reader.uint32());
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a VerifyTestResponse message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof google.showcase.v1beta1.VerifyTestResponse
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {google.showcase.v1beta1.VerifyTestResponse} VerifyTestResponse
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    VerifyTestResponse.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a VerifyTestResponse message.
                     * @function verify
                     * @memberof google.showcase.v1beta1.VerifyTestResponse
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    VerifyTestResponse.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.issue != null && message.hasOwnProperty("issue")) {
                            var error = $root.google.showcase.v1beta1.Issue.verify(message.issue);
                            if (error)
                                return "issue." + error;
                        }
                        return null;
                    };
    
                    /**
                     * Creates a VerifyTestResponse message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof google.showcase.v1beta1.VerifyTestResponse
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {google.showcase.v1beta1.VerifyTestResponse} VerifyTestResponse
                     */
                    VerifyTestResponse.fromObject = function fromObject(object) {
                        if (object instanceof $root.google.showcase.v1beta1.VerifyTestResponse)
                            return object;
                        var message = new $root.google.showcase.v1beta1.VerifyTestResponse();
                        if (object.issue != null) {
                            if (typeof object.issue !== "object")
                                throw TypeError(".google.showcase.v1beta1.VerifyTestResponse.issue: object expected");
                            message.issue = $root.google.showcase.v1beta1.Issue.fromObject(object.issue);
                        }
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a VerifyTestResponse message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof google.showcase.v1beta1.VerifyTestResponse
                     * @static
                     * @param {google.showcase.v1beta1.VerifyTestResponse} message VerifyTestResponse
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    VerifyTestResponse.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults)
                            object.issue = null;
                        if (message.issue != null && message.hasOwnProperty("issue"))
                            object.issue = $root.google.showcase.v1beta1.Issue.toObject(message.issue, options);
                        return object;
                    };
    
                    /**
                     * Converts this VerifyTestResponse to JSON.
                     * @function toJSON
                     * @memberof google.showcase.v1beta1.VerifyTestResponse
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    VerifyTestResponse.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    return VerifyTestResponse;
                })();
    
                return v1beta1;
            })();
    
            return showcase;
        })();
    
        google.api = (function() {
    
            /**
             * Namespace api.
             * @memberof google
             * @namespace
             */
            var api = {};
    
            api.Http = (function() {
    
                /**
                 * Properties of a Http.
                 * @memberof google.api
                 * @interface IHttp
                 * @property {Array.<google.api.IHttpRule>|null} [rules] Http rules
                 * @property {boolean|null} [fullyDecodeReservedExpansion] Http fullyDecodeReservedExpansion
                 */
    
                /**
                 * Constructs a new Http.
                 * @memberof google.api
                 * @classdesc Represents a Http.
                 * @implements IHttp
                 * @constructor
                 * @param {google.api.IHttp=} [properties] Properties to set
                 */
                function Http(properties) {
                    this.rules = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * Http rules.
                 * @member {Array.<google.api.IHttpRule>} rules
                 * @memberof google.api.Http
                 * @instance
                 */
                Http.prototype.rules = $util.emptyArray;
    
                /**
                 * Http fullyDecodeReservedExpansion.
                 * @member {boolean} fullyDecodeReservedExpansion
                 * @memberof google.api.Http
                 * @instance
                 */
                Http.prototype.fullyDecodeReservedExpansion = false;
    
                /**
                 * Creates a new Http instance using the specified properties.
                 * @function create
                 * @memberof google.api.Http
                 * @static
                 * @param {google.api.IHttp=} [properties] Properties to set
                 * @returns {google.api.Http} Http instance
                 */
                Http.create = function create(properties) {
                    return new Http(properties);
                };
    
                /**
                 * Encodes the specified Http message. Does not implicitly {@link google.api.Http.verify|verify} messages.
                 * @function encode
                 * @memberof google.api.Http
                 * @static
                 * @param {google.api.IHttp} message Http message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Http.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.rules != null && message.rules.length)
                        for (var i = 0; i < message.rules.length; ++i)
                            $root.google.api.HttpRule.encode(message.rules[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                    if (message.fullyDecodeReservedExpansion != null && Object.hasOwnProperty.call(message, "fullyDecodeReservedExpansion"))
                        writer.uint32(/* id 2, wireType 0 =*/16).bool(message.fullyDecodeReservedExpansion);
                    return writer;
                };
    
                /**
                 * Encodes the specified Http message, length delimited. Does not implicitly {@link google.api.Http.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.api.Http
                 * @static
                 * @param {google.api.IHttp} message Http message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Http.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a Http message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.api.Http
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.api.Http} Http
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Http.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.api.Http();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            if (!(message.rules && message.rules.length))
                                message.rules = [];
                            message.rules.push($root.google.api.HttpRule.decode(reader, reader.uint32()));
                            break;
                        case 2:
                            message.fullyDecodeReservedExpansion = reader.bool();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a Http message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.api.Http
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.api.Http} Http
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Http.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a Http message.
                 * @function verify
                 * @memberof google.api.Http
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                Http.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.rules != null && message.hasOwnProperty("rules")) {
                        if (!Array.isArray(message.rules))
                            return "rules: array expected";
                        for (var i = 0; i < message.rules.length; ++i) {
                            var error = $root.google.api.HttpRule.verify(message.rules[i]);
                            if (error)
                                return "rules." + error;
                        }
                    }
                    if (message.fullyDecodeReservedExpansion != null && message.hasOwnProperty("fullyDecodeReservedExpansion"))
                        if (typeof message.fullyDecodeReservedExpansion !== "boolean")
                            return "fullyDecodeReservedExpansion: boolean expected";
                    return null;
                };
    
                /**
                 * Creates a Http message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.api.Http
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.api.Http} Http
                 */
                Http.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.api.Http)
                        return object;
                    var message = new $root.google.api.Http();
                    if (object.rules) {
                        if (!Array.isArray(object.rules))
                            throw TypeError(".google.api.Http.rules: array expected");
                        message.rules = [];
                        for (var i = 0; i < object.rules.length; ++i) {
                            if (typeof object.rules[i] !== "object")
                                throw TypeError(".google.api.Http.rules: object expected");
                            message.rules[i] = $root.google.api.HttpRule.fromObject(object.rules[i]);
                        }
                    }
                    if (object.fullyDecodeReservedExpansion != null)
                        message.fullyDecodeReservedExpansion = Boolean(object.fullyDecodeReservedExpansion);
                    return message;
                };
    
                /**
                 * Creates a plain object from a Http message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.api.Http
                 * @static
                 * @param {google.api.Http} message Http
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                Http.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.rules = [];
                    if (options.defaults)
                        object.fullyDecodeReservedExpansion = false;
                    if (message.rules && message.rules.length) {
                        object.rules = [];
                        for (var j = 0; j < message.rules.length; ++j)
                            object.rules[j] = $root.google.api.HttpRule.toObject(message.rules[j], options);
                    }
                    if (message.fullyDecodeReservedExpansion != null && message.hasOwnProperty("fullyDecodeReservedExpansion"))
                        object.fullyDecodeReservedExpansion = message.fullyDecodeReservedExpansion;
                    return object;
                };
    
                /**
                 * Converts this Http to JSON.
                 * @function toJSON
                 * @memberof google.api.Http
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                Http.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return Http;
            })();
    
            api.HttpRule = (function() {
    
                /**
                 * Properties of a HttpRule.
                 * @memberof google.api
                 * @interface IHttpRule
                 * @property {string|null} [selector] HttpRule selector
                 * @property {string|null} [get] HttpRule get
                 * @property {string|null} [put] HttpRule put
                 * @property {string|null} [post] HttpRule post
                 * @property {string|null} ["delete"] HttpRule delete
                 * @property {string|null} [patch] HttpRule patch
                 * @property {google.api.ICustomHttpPattern|null} [custom] HttpRule custom
                 * @property {string|null} [body] HttpRule body
                 * @property {string|null} [responseBody] HttpRule responseBody
                 * @property {Array.<google.api.IHttpRule>|null} [additionalBindings] HttpRule additionalBindings
                 */
    
                /**
                 * Constructs a new HttpRule.
                 * @memberof google.api
                 * @classdesc Represents a HttpRule.
                 * @implements IHttpRule
                 * @constructor
                 * @param {google.api.IHttpRule=} [properties] Properties to set
                 */
                function HttpRule(properties) {
                    this.additionalBindings = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * HttpRule selector.
                 * @member {string} selector
                 * @memberof google.api.HttpRule
                 * @instance
                 */
                HttpRule.prototype.selector = "";
    
                /**
                 * HttpRule get.
                 * @member {string|null|undefined} get
                 * @memberof google.api.HttpRule
                 * @instance
                 */
                HttpRule.prototype.get = null;
    
                /**
                 * HttpRule put.
                 * @member {string|null|undefined} put
                 * @memberof google.api.HttpRule
                 * @instance
                 */
                HttpRule.prototype.put = null;
    
                /**
                 * HttpRule post.
                 * @member {string|null|undefined} post
                 * @memberof google.api.HttpRule
                 * @instance
                 */
                HttpRule.prototype.post = null;
    
                /**
                 * HttpRule delete.
                 * @member {string|null|undefined} delete
                 * @memberof google.api.HttpRule
                 * @instance
                 */
                HttpRule.prototype["delete"] = null;
    
                /**
                 * HttpRule patch.
                 * @member {string|null|undefined} patch
                 * @memberof google.api.HttpRule
                 * @instance
                 */
                HttpRule.prototype.patch = null;
    
                /**
                 * HttpRule custom.
                 * @member {google.api.ICustomHttpPattern|null|undefined} custom
                 * @memberof google.api.HttpRule
                 * @instance
                 */
                HttpRule.prototype.custom = null;
    
                /**
                 * HttpRule body.
                 * @member {string} body
                 * @memberof google.api.HttpRule
                 * @instance
                 */
                HttpRule.prototype.body = "";
    
                /**
                 * HttpRule responseBody.
                 * @member {string} responseBody
                 * @memberof google.api.HttpRule
                 * @instance
                 */
                HttpRule.prototype.responseBody = "";
    
                /**
                 * HttpRule additionalBindings.
                 * @member {Array.<google.api.IHttpRule>} additionalBindings
                 * @memberof google.api.HttpRule
                 * @instance
                 */
                HttpRule.prototype.additionalBindings = $util.emptyArray;
    
                // OneOf field names bound to virtual getters and setters
                var $oneOfFields;
    
                /**
                 * HttpRule pattern.
                 * @member {"get"|"put"|"post"|"delete"|"patch"|"custom"|undefined} pattern
                 * @memberof google.api.HttpRule
                 * @instance
                 */
                Object.defineProperty(HttpRule.prototype, "pattern", {
                    get: $util.oneOfGetter($oneOfFields = ["get", "put", "post", "delete", "patch", "custom"]),
                    set: $util.oneOfSetter($oneOfFields)
                });
    
                /**
                 * Creates a new HttpRule instance using the specified properties.
                 * @function create
                 * @memberof google.api.HttpRule
                 * @static
                 * @param {google.api.IHttpRule=} [properties] Properties to set
                 * @returns {google.api.HttpRule} HttpRule instance
                 */
                HttpRule.create = function create(properties) {
                    return new HttpRule(properties);
                };
    
                /**
                 * Encodes the specified HttpRule message. Does not implicitly {@link google.api.HttpRule.verify|verify} messages.
                 * @function encode
                 * @memberof google.api.HttpRule
                 * @static
                 * @param {google.api.IHttpRule} message HttpRule message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                HttpRule.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.selector != null && Object.hasOwnProperty.call(message, "selector"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.selector);
                    if (message.get != null && Object.hasOwnProperty.call(message, "get"))
                        writer.uint32(/* id 2, wireType 2 =*/18).string(message.get);
                    if (message.put != null && Object.hasOwnProperty.call(message, "put"))
                        writer.uint32(/* id 3, wireType 2 =*/26).string(message.put);
                    if (message.post != null && Object.hasOwnProperty.call(message, "post"))
                        writer.uint32(/* id 4, wireType 2 =*/34).string(message.post);
                    if (message["delete"] != null && Object.hasOwnProperty.call(message, "delete"))
                        writer.uint32(/* id 5, wireType 2 =*/42).string(message["delete"]);
                    if (message.patch != null && Object.hasOwnProperty.call(message, "patch"))
                        writer.uint32(/* id 6, wireType 2 =*/50).string(message.patch);
                    if (message.body != null && Object.hasOwnProperty.call(message, "body"))
                        writer.uint32(/* id 7, wireType 2 =*/58).string(message.body);
                    if (message.custom != null && Object.hasOwnProperty.call(message, "custom"))
                        $root.google.api.CustomHttpPattern.encode(message.custom, writer.uint32(/* id 8, wireType 2 =*/66).fork()).ldelim();
                    if (message.additionalBindings != null && message.additionalBindings.length)
                        for (var i = 0; i < message.additionalBindings.length; ++i)
                            $root.google.api.HttpRule.encode(message.additionalBindings[i], writer.uint32(/* id 11, wireType 2 =*/90).fork()).ldelim();
                    if (message.responseBody != null && Object.hasOwnProperty.call(message, "responseBody"))
                        writer.uint32(/* id 12, wireType 2 =*/98).string(message.responseBody);
                    return writer;
                };
    
                /**
                 * Encodes the specified HttpRule message, length delimited. Does not implicitly {@link google.api.HttpRule.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.api.HttpRule
                 * @static
                 * @param {google.api.IHttpRule} message HttpRule message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                HttpRule.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a HttpRule message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.api.HttpRule
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.api.HttpRule} HttpRule
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                HttpRule.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.api.HttpRule();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.selector = reader.string();
                            break;
                        case 2:
                            message.get = reader.string();
                            break;
                        case 3:
                            message.put = reader.string();
                            break;
                        case 4:
                            message.post = reader.string();
                            break;
                        case 5:
                            message["delete"] = reader.string();
                            break;
                        case 6:
                            message.patch = reader.string();
                            break;
                        case 8:
                            message.custom = $root.google.api.CustomHttpPattern.decode(reader, reader.uint32());
                            break;
                        case 7:
                            message.body = reader.string();
                            break;
                        case 12:
                            message.responseBody = reader.string();
                            break;
                        case 11:
                            if (!(message.additionalBindings && message.additionalBindings.length))
                                message.additionalBindings = [];
                            message.additionalBindings.push($root.google.api.HttpRule.decode(reader, reader.uint32()));
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a HttpRule message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.api.HttpRule
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.api.HttpRule} HttpRule
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                HttpRule.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a HttpRule message.
                 * @function verify
                 * @memberof google.api.HttpRule
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                HttpRule.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    var properties = {};
                    if (message.selector != null && message.hasOwnProperty("selector"))
                        if (!$util.isString(message.selector))
                            return "selector: string expected";
                    if (message.get != null && message.hasOwnProperty("get")) {
                        properties.pattern = 1;
                        if (!$util.isString(message.get))
                            return "get: string expected";
                    }
                    if (message.put != null && message.hasOwnProperty("put")) {
                        if (properties.pattern === 1)
                            return "pattern: multiple values";
                        properties.pattern = 1;
                        if (!$util.isString(message.put))
                            return "put: string expected";
                    }
                    if (message.post != null && message.hasOwnProperty("post")) {
                        if (properties.pattern === 1)
                            return "pattern: multiple values";
                        properties.pattern = 1;
                        if (!$util.isString(message.post))
                            return "post: string expected";
                    }
                    if (message["delete"] != null && message.hasOwnProperty("delete")) {
                        if (properties.pattern === 1)
                            return "pattern: multiple values";
                        properties.pattern = 1;
                        if (!$util.isString(message["delete"]))
                            return "delete: string expected";
                    }
                    if (message.patch != null && message.hasOwnProperty("patch")) {
                        if (properties.pattern === 1)
                            return "pattern: multiple values";
                        properties.pattern = 1;
                        if (!$util.isString(message.patch))
                            return "patch: string expected";
                    }
                    if (message.custom != null && message.hasOwnProperty("custom")) {
                        if (properties.pattern === 1)
                            return "pattern: multiple values";
                        properties.pattern = 1;
                        {
                            var error = $root.google.api.CustomHttpPattern.verify(message.custom);
                            if (error)
                                return "custom." + error;
                        }
                    }
                    if (message.body != null && message.hasOwnProperty("body"))
                        if (!$util.isString(message.body))
                            return "body: string expected";
                    if (message.responseBody != null && message.hasOwnProperty("responseBody"))
                        if (!$util.isString(message.responseBody))
                            return "responseBody: string expected";
                    if (message.additionalBindings != null && message.hasOwnProperty("additionalBindings")) {
                        if (!Array.isArray(message.additionalBindings))
                            return "additionalBindings: array expected";
                        for (var i = 0; i < message.additionalBindings.length; ++i) {
                            var error = $root.google.api.HttpRule.verify(message.additionalBindings[i]);
                            if (error)
                                return "additionalBindings." + error;
                        }
                    }
                    return null;
                };
    
                /**
                 * Creates a HttpRule message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.api.HttpRule
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.api.HttpRule} HttpRule
                 */
                HttpRule.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.api.HttpRule)
                        return object;
                    var message = new $root.google.api.HttpRule();
                    if (object.selector != null)
                        message.selector = String(object.selector);
                    if (object.get != null)
                        message.get = String(object.get);
                    if (object.put != null)
                        message.put = String(object.put);
                    if (object.post != null)
                        message.post = String(object.post);
                    if (object["delete"] != null)
                        message["delete"] = String(object["delete"]);
                    if (object.patch != null)
                        message.patch = String(object.patch);
                    if (object.custom != null) {
                        if (typeof object.custom !== "object")
                            throw TypeError(".google.api.HttpRule.custom: object expected");
                        message.custom = $root.google.api.CustomHttpPattern.fromObject(object.custom);
                    }
                    if (object.body != null)
                        message.body = String(object.body);
                    if (object.responseBody != null)
                        message.responseBody = String(object.responseBody);
                    if (object.additionalBindings) {
                        if (!Array.isArray(object.additionalBindings))
                            throw TypeError(".google.api.HttpRule.additionalBindings: array expected");
                        message.additionalBindings = [];
                        for (var i = 0; i < object.additionalBindings.length; ++i) {
                            if (typeof object.additionalBindings[i] !== "object")
                                throw TypeError(".google.api.HttpRule.additionalBindings: object expected");
                            message.additionalBindings[i] = $root.google.api.HttpRule.fromObject(object.additionalBindings[i]);
                        }
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from a HttpRule message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.api.HttpRule
                 * @static
                 * @param {google.api.HttpRule} message HttpRule
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                HttpRule.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.additionalBindings = [];
                    if (options.defaults) {
                        object.selector = "";
                        object.body = "";
                        object.responseBody = "";
                    }
                    if (message.selector != null && message.hasOwnProperty("selector"))
                        object.selector = message.selector;
                    if (message.get != null && message.hasOwnProperty("get")) {
                        object.get = message.get;
                        if (options.oneofs)
                            object.pattern = "get";
                    }
                    if (message.put != null && message.hasOwnProperty("put")) {
                        object.put = message.put;
                        if (options.oneofs)
                            object.pattern = "put";
                    }
                    if (message.post != null && message.hasOwnProperty("post")) {
                        object.post = message.post;
                        if (options.oneofs)
                            object.pattern = "post";
                    }
                    if (message["delete"] != null && message.hasOwnProperty("delete")) {
                        object["delete"] = message["delete"];
                        if (options.oneofs)
                            object.pattern = "delete";
                    }
                    if (message.patch != null && message.hasOwnProperty("patch")) {
                        object.patch = message.patch;
                        if (options.oneofs)
                            object.pattern = "patch";
                    }
                    if (message.body != null && message.hasOwnProperty("body"))
                        object.body = message.body;
                    if (message.custom != null && message.hasOwnProperty("custom")) {
                        object.custom = $root.google.api.CustomHttpPattern.toObject(message.custom, options);
                        if (options.oneofs)
                            object.pattern = "custom";
                    }
                    if (message.additionalBindings && message.additionalBindings.length) {
                        object.additionalBindings = [];
                        for (var j = 0; j < message.additionalBindings.length; ++j)
                            object.additionalBindings[j] = $root.google.api.HttpRule.toObject(message.additionalBindings[j], options);
                    }
                    if (message.responseBody != null && message.hasOwnProperty("responseBody"))
                        object.responseBody = message.responseBody;
                    return object;
                };
    
                /**
                 * Converts this HttpRule to JSON.
                 * @function toJSON
                 * @memberof google.api.HttpRule
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                HttpRule.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return HttpRule;
            })();
    
            api.CustomHttpPattern = (function() {
    
                /**
                 * Properties of a CustomHttpPattern.
                 * @memberof google.api
                 * @interface ICustomHttpPattern
                 * @property {string|null} [kind] CustomHttpPattern kind
                 * @property {string|null} [path] CustomHttpPattern path
                 */
    
                /**
                 * Constructs a new CustomHttpPattern.
                 * @memberof google.api
                 * @classdesc Represents a CustomHttpPattern.
                 * @implements ICustomHttpPattern
                 * @constructor
                 * @param {google.api.ICustomHttpPattern=} [properties] Properties to set
                 */
                function CustomHttpPattern(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * CustomHttpPattern kind.
                 * @member {string} kind
                 * @memberof google.api.CustomHttpPattern
                 * @instance
                 */
                CustomHttpPattern.prototype.kind = "";
    
                /**
                 * CustomHttpPattern path.
                 * @member {string} path
                 * @memberof google.api.CustomHttpPattern
                 * @instance
                 */
                CustomHttpPattern.prototype.path = "";
    
                /**
                 * Creates a new CustomHttpPattern instance using the specified properties.
                 * @function create
                 * @memberof google.api.CustomHttpPattern
                 * @static
                 * @param {google.api.ICustomHttpPattern=} [properties] Properties to set
                 * @returns {google.api.CustomHttpPattern} CustomHttpPattern instance
                 */
                CustomHttpPattern.create = function create(properties) {
                    return new CustomHttpPattern(properties);
                };
    
                /**
                 * Encodes the specified CustomHttpPattern message. Does not implicitly {@link google.api.CustomHttpPattern.verify|verify} messages.
                 * @function encode
                 * @memberof google.api.CustomHttpPattern
                 * @static
                 * @param {google.api.ICustomHttpPattern} message CustomHttpPattern message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                CustomHttpPattern.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.kind != null && Object.hasOwnProperty.call(message, "kind"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.kind);
                    if (message.path != null && Object.hasOwnProperty.call(message, "path"))
                        writer.uint32(/* id 2, wireType 2 =*/18).string(message.path);
                    return writer;
                };
    
                /**
                 * Encodes the specified CustomHttpPattern message, length delimited. Does not implicitly {@link google.api.CustomHttpPattern.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.api.CustomHttpPattern
                 * @static
                 * @param {google.api.ICustomHttpPattern} message CustomHttpPattern message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                CustomHttpPattern.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a CustomHttpPattern message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.api.CustomHttpPattern
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.api.CustomHttpPattern} CustomHttpPattern
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                CustomHttpPattern.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.api.CustomHttpPattern();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.kind = reader.string();
                            break;
                        case 2:
                            message.path = reader.string();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a CustomHttpPattern message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.api.CustomHttpPattern
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.api.CustomHttpPattern} CustomHttpPattern
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                CustomHttpPattern.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a CustomHttpPattern message.
                 * @function verify
                 * @memberof google.api.CustomHttpPattern
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                CustomHttpPattern.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.kind != null && message.hasOwnProperty("kind"))
                        if (!$util.isString(message.kind))
                            return "kind: string expected";
                    if (message.path != null && message.hasOwnProperty("path"))
                        if (!$util.isString(message.path))
                            return "path: string expected";
                    return null;
                };
    
                /**
                 * Creates a CustomHttpPattern message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.api.CustomHttpPattern
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.api.CustomHttpPattern} CustomHttpPattern
                 */
                CustomHttpPattern.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.api.CustomHttpPattern)
                        return object;
                    var message = new $root.google.api.CustomHttpPattern();
                    if (object.kind != null)
                        message.kind = String(object.kind);
                    if (object.path != null)
                        message.path = String(object.path);
                    return message;
                };
    
                /**
                 * Creates a plain object from a CustomHttpPattern message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.api.CustomHttpPattern
                 * @static
                 * @param {google.api.CustomHttpPattern} message CustomHttpPattern
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                CustomHttpPattern.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults) {
                        object.kind = "";
                        object.path = "";
                    }
                    if (message.kind != null && message.hasOwnProperty("kind"))
                        object.kind = message.kind;
                    if (message.path != null && message.hasOwnProperty("path"))
                        object.path = message.path;
                    return object;
                };
    
                /**
                 * Converts this CustomHttpPattern to JSON.
                 * @function toJSON
                 * @memberof google.api.CustomHttpPattern
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                CustomHttpPattern.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return CustomHttpPattern;
            })();
    
            /**
             * FieldBehavior enum.
             * @name google.api.FieldBehavior
             * @enum {number}
             * @property {number} FIELD_BEHAVIOR_UNSPECIFIED=0 FIELD_BEHAVIOR_UNSPECIFIED value
             * @property {number} OPTIONAL=1 OPTIONAL value
             * @property {number} REQUIRED=2 REQUIRED value
             * @property {number} OUTPUT_ONLY=3 OUTPUT_ONLY value
             * @property {number} INPUT_ONLY=4 INPUT_ONLY value
             * @property {number} IMMUTABLE=5 IMMUTABLE value
             * @property {number} UNORDERED_LIST=6 UNORDERED_LIST value
             * @property {number} NON_EMPTY_DEFAULT=7 NON_EMPTY_DEFAULT value
             */
            api.FieldBehavior = (function() {
                var valuesById = {}, values = Object.create(valuesById);
                values[valuesById[0] = "FIELD_BEHAVIOR_UNSPECIFIED"] = 0;
                values[valuesById[1] = "OPTIONAL"] = 1;
                values[valuesById[2] = "REQUIRED"] = 2;
                values[valuesById[3] = "OUTPUT_ONLY"] = 3;
                values[valuesById[4] = "INPUT_ONLY"] = 4;
                values[valuesById[5] = "IMMUTABLE"] = 5;
                values[valuesById[6] = "UNORDERED_LIST"] = 6;
                values[valuesById[7] = "NON_EMPTY_DEFAULT"] = 7;
                return values;
            })();
    
            api.ResourceDescriptor = (function() {
    
                /**
                 * Properties of a ResourceDescriptor.
                 * @memberof google.api
                 * @interface IResourceDescriptor
                 * @property {string|null} [type] ResourceDescriptor type
                 * @property {Array.<string>|null} [pattern] ResourceDescriptor pattern
                 * @property {string|null} [nameField] ResourceDescriptor nameField
                 * @property {google.api.ResourceDescriptor.History|null} [history] ResourceDescriptor history
                 * @property {string|null} [plural] ResourceDescriptor plural
                 * @property {string|null} [singular] ResourceDescriptor singular
                 * @property {Array.<google.api.ResourceDescriptor.Style>|null} [style] ResourceDescriptor style
                 */
    
                /**
                 * Constructs a new ResourceDescriptor.
                 * @memberof google.api
                 * @classdesc Represents a ResourceDescriptor.
                 * @implements IResourceDescriptor
                 * @constructor
                 * @param {google.api.IResourceDescriptor=} [properties] Properties to set
                 */
                function ResourceDescriptor(properties) {
                    this.pattern = [];
                    this.style = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * ResourceDescriptor type.
                 * @member {string} type
                 * @memberof google.api.ResourceDescriptor
                 * @instance
                 */
                ResourceDescriptor.prototype.type = "";
    
                /**
                 * ResourceDescriptor pattern.
                 * @member {Array.<string>} pattern
                 * @memberof google.api.ResourceDescriptor
                 * @instance
                 */
                ResourceDescriptor.prototype.pattern = $util.emptyArray;
    
                /**
                 * ResourceDescriptor nameField.
                 * @member {string} nameField
                 * @memberof google.api.ResourceDescriptor
                 * @instance
                 */
                ResourceDescriptor.prototype.nameField = "";
    
                /**
                 * ResourceDescriptor history.
                 * @member {google.api.ResourceDescriptor.History} history
                 * @memberof google.api.ResourceDescriptor
                 * @instance
                 */
                ResourceDescriptor.prototype.history = 0;
    
                /**
                 * ResourceDescriptor plural.
                 * @member {string} plural
                 * @memberof google.api.ResourceDescriptor
                 * @instance
                 */
                ResourceDescriptor.prototype.plural = "";
    
                /**
                 * ResourceDescriptor singular.
                 * @member {string} singular
                 * @memberof google.api.ResourceDescriptor
                 * @instance
                 */
                ResourceDescriptor.prototype.singular = "";
    
                /**
                 * ResourceDescriptor style.
                 * @member {Array.<google.api.ResourceDescriptor.Style>} style
                 * @memberof google.api.ResourceDescriptor
                 * @instance
                 */
                ResourceDescriptor.prototype.style = $util.emptyArray;
    
                /**
                 * Creates a new ResourceDescriptor instance using the specified properties.
                 * @function create
                 * @memberof google.api.ResourceDescriptor
                 * @static
                 * @param {google.api.IResourceDescriptor=} [properties] Properties to set
                 * @returns {google.api.ResourceDescriptor} ResourceDescriptor instance
                 */
                ResourceDescriptor.create = function create(properties) {
                    return new ResourceDescriptor(properties);
                };
    
                /**
                 * Encodes the specified ResourceDescriptor message. Does not implicitly {@link google.api.ResourceDescriptor.verify|verify} messages.
                 * @function encode
                 * @memberof google.api.ResourceDescriptor
                 * @static
                 * @param {google.api.IResourceDescriptor} message ResourceDescriptor message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                ResourceDescriptor.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.type != null && Object.hasOwnProperty.call(message, "type"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.type);
                    if (message.pattern != null && message.pattern.length)
                        for (var i = 0; i < message.pattern.length; ++i)
                            writer.uint32(/* id 2, wireType 2 =*/18).string(message.pattern[i]);
                    if (message.nameField != null && Object.hasOwnProperty.call(message, "nameField"))
                        writer.uint32(/* id 3, wireType 2 =*/26).string(message.nameField);
                    if (message.history != null && Object.hasOwnProperty.call(message, "history"))
                        writer.uint32(/* id 4, wireType 0 =*/32).int32(message.history);
                    if (message.plural != null && Object.hasOwnProperty.call(message, "plural"))
                        writer.uint32(/* id 5, wireType 2 =*/42).string(message.plural);
                    if (message.singular != null && Object.hasOwnProperty.call(message, "singular"))
                        writer.uint32(/* id 6, wireType 2 =*/50).string(message.singular);
                    if (message.style != null && message.style.length) {
                        writer.uint32(/* id 10, wireType 2 =*/82).fork();
                        for (var i = 0; i < message.style.length; ++i)
                            writer.int32(message.style[i]);
                        writer.ldelim();
                    }
                    return writer;
                };
    
                /**
                 * Encodes the specified ResourceDescriptor message, length delimited. Does not implicitly {@link google.api.ResourceDescriptor.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.api.ResourceDescriptor
                 * @static
                 * @param {google.api.IResourceDescriptor} message ResourceDescriptor message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                ResourceDescriptor.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a ResourceDescriptor message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.api.ResourceDescriptor
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.api.ResourceDescriptor} ResourceDescriptor
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                ResourceDescriptor.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.api.ResourceDescriptor();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.type = reader.string();
                            break;
                        case 2:
                            if (!(message.pattern && message.pattern.length))
                                message.pattern = [];
                            message.pattern.push(reader.string());
                            break;
                        case 3:
                            message.nameField = reader.string();
                            break;
                        case 4:
                            message.history = reader.int32();
                            break;
                        case 5:
                            message.plural = reader.string();
                            break;
                        case 6:
                            message.singular = reader.string();
                            break;
                        case 10:
                            if (!(message.style && message.style.length))
                                message.style = [];
                            if ((tag & 7) === 2) {
                                var end2 = reader.uint32() + reader.pos;
                                while (reader.pos < end2)
                                    message.style.push(reader.int32());
                            } else
                                message.style.push(reader.int32());
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a ResourceDescriptor message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.api.ResourceDescriptor
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.api.ResourceDescriptor} ResourceDescriptor
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                ResourceDescriptor.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a ResourceDescriptor message.
                 * @function verify
                 * @memberof google.api.ResourceDescriptor
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                ResourceDescriptor.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.type != null && message.hasOwnProperty("type"))
                        if (!$util.isString(message.type))
                            return "type: string expected";
                    if (message.pattern != null && message.hasOwnProperty("pattern")) {
                        if (!Array.isArray(message.pattern))
                            return "pattern: array expected";
                        for (var i = 0; i < message.pattern.length; ++i)
                            if (!$util.isString(message.pattern[i]))
                                return "pattern: string[] expected";
                    }
                    if (message.nameField != null && message.hasOwnProperty("nameField"))
                        if (!$util.isString(message.nameField))
                            return "nameField: string expected";
                    if (message.history != null && message.hasOwnProperty("history"))
                        switch (message.history) {
                        default:
                            return "history: enum value expected";
                        case 0:
                        case 1:
                        case 2:
                            break;
                        }
                    if (message.plural != null && message.hasOwnProperty("plural"))
                        if (!$util.isString(message.plural))
                            return "plural: string expected";
                    if (message.singular != null && message.hasOwnProperty("singular"))
                        if (!$util.isString(message.singular))
                            return "singular: string expected";
                    if (message.style != null && message.hasOwnProperty("style")) {
                        if (!Array.isArray(message.style))
                            return "style: array expected";
                        for (var i = 0; i < message.style.length; ++i)
                            switch (message.style[i]) {
                            default:
                                return "style: enum value[] expected";
                            case 0:
                            case 1:
                                break;
                            }
                    }
                    return null;
                };
    
                /**
                 * Creates a ResourceDescriptor message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.api.ResourceDescriptor
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.api.ResourceDescriptor} ResourceDescriptor
                 */
                ResourceDescriptor.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.api.ResourceDescriptor)
                        return object;
                    var message = new $root.google.api.ResourceDescriptor();
                    if (object.type != null)
                        message.type = String(object.type);
                    if (object.pattern) {
                        if (!Array.isArray(object.pattern))
                            throw TypeError(".google.api.ResourceDescriptor.pattern: array expected");
                        message.pattern = [];
                        for (var i = 0; i < object.pattern.length; ++i)
                            message.pattern[i] = String(object.pattern[i]);
                    }
                    if (object.nameField != null)
                        message.nameField = String(object.nameField);
                    switch (object.history) {
                    case "HISTORY_UNSPECIFIED":
                    case 0:
                        message.history = 0;
                        break;
                    case "ORIGINALLY_SINGLE_PATTERN":
                    case 1:
                        message.history = 1;
                        break;
                    case "FUTURE_MULTI_PATTERN":
                    case 2:
                        message.history = 2;
                        break;
                    }
                    if (object.plural != null)
                        message.plural = String(object.plural);
                    if (object.singular != null)
                        message.singular = String(object.singular);
                    if (object.style) {
                        if (!Array.isArray(object.style))
                            throw TypeError(".google.api.ResourceDescriptor.style: array expected");
                        message.style = [];
                        for (var i = 0; i < object.style.length; ++i)
                            switch (object.style[i]) {
                            default:
                            case "STYLE_UNSPECIFIED":
                            case 0:
                                message.style[i] = 0;
                                break;
                            case "DECLARATIVE_FRIENDLY":
                            case 1:
                                message.style[i] = 1;
                                break;
                            }
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from a ResourceDescriptor message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.api.ResourceDescriptor
                 * @static
                 * @param {google.api.ResourceDescriptor} message ResourceDescriptor
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                ResourceDescriptor.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults) {
                        object.pattern = [];
                        object.style = [];
                    }
                    if (options.defaults) {
                        object.type = "";
                        object.nameField = "";
                        object.history = options.enums === String ? "HISTORY_UNSPECIFIED" : 0;
                        object.plural = "";
                        object.singular = "";
                    }
                    if (message.type != null && message.hasOwnProperty("type"))
                        object.type = message.type;
                    if (message.pattern && message.pattern.length) {
                        object.pattern = [];
                        for (var j = 0; j < message.pattern.length; ++j)
                            object.pattern[j] = message.pattern[j];
                    }
                    if (message.nameField != null && message.hasOwnProperty("nameField"))
                        object.nameField = message.nameField;
                    if (message.history != null && message.hasOwnProperty("history"))
                        object.history = options.enums === String ? $root.google.api.ResourceDescriptor.History[message.history] : message.history;
                    if (message.plural != null && message.hasOwnProperty("plural"))
                        object.plural = message.plural;
                    if (message.singular != null && message.hasOwnProperty("singular"))
                        object.singular = message.singular;
                    if (message.style && message.style.length) {
                        object.style = [];
                        for (var j = 0; j < message.style.length; ++j)
                            object.style[j] = options.enums === String ? $root.google.api.ResourceDescriptor.Style[message.style[j]] : message.style[j];
                    }
                    return object;
                };
    
                /**
                 * Converts this ResourceDescriptor to JSON.
                 * @function toJSON
                 * @memberof google.api.ResourceDescriptor
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                ResourceDescriptor.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * History enum.
                 * @name google.api.ResourceDescriptor.History
                 * @enum {number}
                 * @property {number} HISTORY_UNSPECIFIED=0 HISTORY_UNSPECIFIED value
                 * @property {number} ORIGINALLY_SINGLE_PATTERN=1 ORIGINALLY_SINGLE_PATTERN value
                 * @property {number} FUTURE_MULTI_PATTERN=2 FUTURE_MULTI_PATTERN value
                 */
                ResourceDescriptor.History = (function() {
                    var valuesById = {}, values = Object.create(valuesById);
                    values[valuesById[0] = "HISTORY_UNSPECIFIED"] = 0;
                    values[valuesById[1] = "ORIGINALLY_SINGLE_PATTERN"] = 1;
                    values[valuesById[2] = "FUTURE_MULTI_PATTERN"] = 2;
                    return values;
                })();
    
                /**
                 * Style enum.
                 * @name google.api.ResourceDescriptor.Style
                 * @enum {number}
                 * @property {number} STYLE_UNSPECIFIED=0 STYLE_UNSPECIFIED value
                 * @property {number} DECLARATIVE_FRIENDLY=1 DECLARATIVE_FRIENDLY value
                 */
                ResourceDescriptor.Style = (function() {
                    var valuesById = {}, values = Object.create(valuesById);
                    values[valuesById[0] = "STYLE_UNSPECIFIED"] = 0;
                    values[valuesById[1] = "DECLARATIVE_FRIENDLY"] = 1;
                    return values;
                })();
    
                return ResourceDescriptor;
            })();
    
            api.ResourceReference = (function() {
    
                /**
                 * Properties of a ResourceReference.
                 * @memberof google.api
                 * @interface IResourceReference
                 * @property {string|null} [type] ResourceReference type
                 * @property {string|null} [childType] ResourceReference childType
                 */
    
                /**
                 * Constructs a new ResourceReference.
                 * @memberof google.api
                 * @classdesc Represents a ResourceReference.
                 * @implements IResourceReference
                 * @constructor
                 * @param {google.api.IResourceReference=} [properties] Properties to set
                 */
                function ResourceReference(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * ResourceReference type.
                 * @member {string} type
                 * @memberof google.api.ResourceReference
                 * @instance
                 */
                ResourceReference.prototype.type = "";
    
                /**
                 * ResourceReference childType.
                 * @member {string} childType
                 * @memberof google.api.ResourceReference
                 * @instance
                 */
                ResourceReference.prototype.childType = "";
    
                /**
                 * Creates a new ResourceReference instance using the specified properties.
                 * @function create
                 * @memberof google.api.ResourceReference
                 * @static
                 * @param {google.api.IResourceReference=} [properties] Properties to set
                 * @returns {google.api.ResourceReference} ResourceReference instance
                 */
                ResourceReference.create = function create(properties) {
                    return new ResourceReference(properties);
                };
    
                /**
                 * Encodes the specified ResourceReference message. Does not implicitly {@link google.api.ResourceReference.verify|verify} messages.
                 * @function encode
                 * @memberof google.api.ResourceReference
                 * @static
                 * @param {google.api.IResourceReference} message ResourceReference message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                ResourceReference.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.type != null && Object.hasOwnProperty.call(message, "type"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.type);
                    if (message.childType != null && Object.hasOwnProperty.call(message, "childType"))
                        writer.uint32(/* id 2, wireType 2 =*/18).string(message.childType);
                    return writer;
                };
    
                /**
                 * Encodes the specified ResourceReference message, length delimited. Does not implicitly {@link google.api.ResourceReference.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.api.ResourceReference
                 * @static
                 * @param {google.api.IResourceReference} message ResourceReference message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                ResourceReference.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a ResourceReference message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.api.ResourceReference
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.api.ResourceReference} ResourceReference
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                ResourceReference.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.api.ResourceReference();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.type = reader.string();
                            break;
                        case 2:
                            message.childType = reader.string();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a ResourceReference message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.api.ResourceReference
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.api.ResourceReference} ResourceReference
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                ResourceReference.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a ResourceReference message.
                 * @function verify
                 * @memberof google.api.ResourceReference
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                ResourceReference.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.type != null && message.hasOwnProperty("type"))
                        if (!$util.isString(message.type))
                            return "type: string expected";
                    if (message.childType != null && message.hasOwnProperty("childType"))
                        if (!$util.isString(message.childType))
                            return "childType: string expected";
                    return null;
                };
    
                /**
                 * Creates a ResourceReference message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.api.ResourceReference
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.api.ResourceReference} ResourceReference
                 */
                ResourceReference.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.api.ResourceReference)
                        return object;
                    var message = new $root.google.api.ResourceReference();
                    if (object.type != null)
                        message.type = String(object.type);
                    if (object.childType != null)
                        message.childType = String(object.childType);
                    return message;
                };
    
                /**
                 * Creates a plain object from a ResourceReference message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.api.ResourceReference
                 * @static
                 * @param {google.api.ResourceReference} message ResourceReference
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                ResourceReference.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults) {
                        object.type = "";
                        object.childType = "";
                    }
                    if (message.type != null && message.hasOwnProperty("type"))
                        object.type = message.type;
                    if (message.childType != null && message.hasOwnProperty("childType"))
                        object.childType = message.childType;
                    return object;
                };
    
                /**
                 * Converts this ResourceReference to JSON.
                 * @function toJSON
                 * @memberof google.api.ResourceReference
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                ResourceReference.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return ResourceReference;
            })();
    
            return api;
        })();
    
        google.protobuf = (function() {
    
            /**
             * Namespace protobuf.
             * @memberof google
             * @namespace
             */
            var protobuf = {};
    
            protobuf.FileDescriptorSet = (function() {
    
                /**
                 * Properties of a FileDescriptorSet.
                 * @memberof google.protobuf
                 * @interface IFileDescriptorSet
                 * @property {Array.<google.protobuf.IFileDescriptorProto>|null} [file] FileDescriptorSet file
                 */
    
                /**
                 * Constructs a new FileDescriptorSet.
                 * @memberof google.protobuf
                 * @classdesc Represents a FileDescriptorSet.
                 * @implements IFileDescriptorSet
                 * @constructor
                 * @param {google.protobuf.IFileDescriptorSet=} [properties] Properties to set
                 */
                function FileDescriptorSet(properties) {
                    this.file = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * FileDescriptorSet file.
                 * @member {Array.<google.protobuf.IFileDescriptorProto>} file
                 * @memberof google.protobuf.FileDescriptorSet
                 * @instance
                 */
                FileDescriptorSet.prototype.file = $util.emptyArray;
    
                /**
                 * Creates a new FileDescriptorSet instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.FileDescriptorSet
                 * @static
                 * @param {google.protobuf.IFileDescriptorSet=} [properties] Properties to set
                 * @returns {google.protobuf.FileDescriptorSet} FileDescriptorSet instance
                 */
                FileDescriptorSet.create = function create(properties) {
                    return new FileDescriptorSet(properties);
                };
    
                /**
                 * Encodes the specified FileDescriptorSet message. Does not implicitly {@link google.protobuf.FileDescriptorSet.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.FileDescriptorSet
                 * @static
                 * @param {google.protobuf.IFileDescriptorSet} message FileDescriptorSet message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                FileDescriptorSet.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.file != null && message.file.length)
                        for (var i = 0; i < message.file.length; ++i)
                            $root.google.protobuf.FileDescriptorProto.encode(message.file[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified FileDescriptorSet message, length delimited. Does not implicitly {@link google.protobuf.FileDescriptorSet.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.FileDescriptorSet
                 * @static
                 * @param {google.protobuf.IFileDescriptorSet} message FileDescriptorSet message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                FileDescriptorSet.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a FileDescriptorSet message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.FileDescriptorSet
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.FileDescriptorSet} FileDescriptorSet
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                FileDescriptorSet.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.FileDescriptorSet();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            if (!(message.file && message.file.length))
                                message.file = [];
                            message.file.push($root.google.protobuf.FileDescriptorProto.decode(reader, reader.uint32()));
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a FileDescriptorSet message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.FileDescriptorSet
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.FileDescriptorSet} FileDescriptorSet
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                FileDescriptorSet.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a FileDescriptorSet message.
                 * @function verify
                 * @memberof google.protobuf.FileDescriptorSet
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                FileDescriptorSet.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.file != null && message.hasOwnProperty("file")) {
                        if (!Array.isArray(message.file))
                            return "file: array expected";
                        for (var i = 0; i < message.file.length; ++i) {
                            var error = $root.google.protobuf.FileDescriptorProto.verify(message.file[i]);
                            if (error)
                                return "file." + error;
                        }
                    }
                    return null;
                };
    
                /**
                 * Creates a FileDescriptorSet message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.FileDescriptorSet
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.FileDescriptorSet} FileDescriptorSet
                 */
                FileDescriptorSet.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.FileDescriptorSet)
                        return object;
                    var message = new $root.google.protobuf.FileDescriptorSet();
                    if (object.file) {
                        if (!Array.isArray(object.file))
                            throw TypeError(".google.protobuf.FileDescriptorSet.file: array expected");
                        message.file = [];
                        for (var i = 0; i < object.file.length; ++i) {
                            if (typeof object.file[i] !== "object")
                                throw TypeError(".google.protobuf.FileDescriptorSet.file: object expected");
                            message.file[i] = $root.google.protobuf.FileDescriptorProto.fromObject(object.file[i]);
                        }
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from a FileDescriptorSet message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.FileDescriptorSet
                 * @static
                 * @param {google.protobuf.FileDescriptorSet} message FileDescriptorSet
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                FileDescriptorSet.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.file = [];
                    if (message.file && message.file.length) {
                        object.file = [];
                        for (var j = 0; j < message.file.length; ++j)
                            object.file[j] = $root.google.protobuf.FileDescriptorProto.toObject(message.file[j], options);
                    }
                    return object;
                };
    
                /**
                 * Converts this FileDescriptorSet to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.FileDescriptorSet
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                FileDescriptorSet.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return FileDescriptorSet;
            })();
    
            protobuf.FileDescriptorProto = (function() {
    
                /**
                 * Properties of a FileDescriptorProto.
                 * @memberof google.protobuf
                 * @interface IFileDescriptorProto
                 * @property {string|null} [name] FileDescriptorProto name
                 * @property {string|null} ["package"] FileDescriptorProto package
                 * @property {Array.<string>|null} [dependency] FileDescriptorProto dependency
                 * @property {Array.<number>|null} [publicDependency] FileDescriptorProto publicDependency
                 * @property {Array.<number>|null} [weakDependency] FileDescriptorProto weakDependency
                 * @property {Array.<google.protobuf.IDescriptorProto>|null} [messageType] FileDescriptorProto messageType
                 * @property {Array.<google.protobuf.IEnumDescriptorProto>|null} [enumType] FileDescriptorProto enumType
                 * @property {Array.<google.protobuf.IServiceDescriptorProto>|null} [service] FileDescriptorProto service
                 * @property {Array.<google.protobuf.IFieldDescriptorProto>|null} [extension] FileDescriptorProto extension
                 * @property {google.protobuf.IFileOptions|null} [options] FileDescriptorProto options
                 * @property {google.protobuf.ISourceCodeInfo|null} [sourceCodeInfo] FileDescriptorProto sourceCodeInfo
                 * @property {string|null} [syntax] FileDescriptorProto syntax
                 */
    
                /**
                 * Constructs a new FileDescriptorProto.
                 * @memberof google.protobuf
                 * @classdesc Represents a FileDescriptorProto.
                 * @implements IFileDescriptorProto
                 * @constructor
                 * @param {google.protobuf.IFileDescriptorProto=} [properties] Properties to set
                 */
                function FileDescriptorProto(properties) {
                    this.dependency = [];
                    this.publicDependency = [];
                    this.weakDependency = [];
                    this.messageType = [];
                    this.enumType = [];
                    this.service = [];
                    this.extension = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * FileDescriptorProto name.
                 * @member {string} name
                 * @memberof google.protobuf.FileDescriptorProto
                 * @instance
                 */
                FileDescriptorProto.prototype.name = "";
    
                /**
                 * FileDescriptorProto package.
                 * @member {string} package
                 * @memberof google.protobuf.FileDescriptorProto
                 * @instance
                 */
                FileDescriptorProto.prototype["package"] = "";
    
                /**
                 * FileDescriptorProto dependency.
                 * @member {Array.<string>} dependency
                 * @memberof google.protobuf.FileDescriptorProto
                 * @instance
                 */
                FileDescriptorProto.prototype.dependency = $util.emptyArray;
    
                /**
                 * FileDescriptorProto publicDependency.
                 * @member {Array.<number>} publicDependency
                 * @memberof google.protobuf.FileDescriptorProto
                 * @instance
                 */
                FileDescriptorProto.prototype.publicDependency = $util.emptyArray;
    
                /**
                 * FileDescriptorProto weakDependency.
                 * @member {Array.<number>} weakDependency
                 * @memberof google.protobuf.FileDescriptorProto
                 * @instance
                 */
                FileDescriptorProto.prototype.weakDependency = $util.emptyArray;
    
                /**
                 * FileDescriptorProto messageType.
                 * @member {Array.<google.protobuf.IDescriptorProto>} messageType
                 * @memberof google.protobuf.FileDescriptorProto
                 * @instance
                 */
                FileDescriptorProto.prototype.messageType = $util.emptyArray;
    
                /**
                 * FileDescriptorProto enumType.
                 * @member {Array.<google.protobuf.IEnumDescriptorProto>} enumType
                 * @memberof google.protobuf.FileDescriptorProto
                 * @instance
                 */
                FileDescriptorProto.prototype.enumType = $util.emptyArray;
    
                /**
                 * FileDescriptorProto service.
                 * @member {Array.<google.protobuf.IServiceDescriptorProto>} service
                 * @memberof google.protobuf.FileDescriptorProto
                 * @instance
                 */
                FileDescriptorProto.prototype.service = $util.emptyArray;
    
                /**
                 * FileDescriptorProto extension.
                 * @member {Array.<google.protobuf.IFieldDescriptorProto>} extension
                 * @memberof google.protobuf.FileDescriptorProto
                 * @instance
                 */
                FileDescriptorProto.prototype.extension = $util.emptyArray;
    
                /**
                 * FileDescriptorProto options.
                 * @member {google.protobuf.IFileOptions|null|undefined} options
                 * @memberof google.protobuf.FileDescriptorProto
                 * @instance
                 */
                FileDescriptorProto.prototype.options = null;
    
                /**
                 * FileDescriptorProto sourceCodeInfo.
                 * @member {google.protobuf.ISourceCodeInfo|null|undefined} sourceCodeInfo
                 * @memberof google.protobuf.FileDescriptorProto
                 * @instance
                 */
                FileDescriptorProto.prototype.sourceCodeInfo = null;
    
                /**
                 * FileDescriptorProto syntax.
                 * @member {string} syntax
                 * @memberof google.protobuf.FileDescriptorProto
                 * @instance
                 */
                FileDescriptorProto.prototype.syntax = "";
    
                /**
                 * Creates a new FileDescriptorProto instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.FileDescriptorProto
                 * @static
                 * @param {google.protobuf.IFileDescriptorProto=} [properties] Properties to set
                 * @returns {google.protobuf.FileDescriptorProto} FileDescriptorProto instance
                 */
                FileDescriptorProto.create = function create(properties) {
                    return new FileDescriptorProto(properties);
                };
    
                /**
                 * Encodes the specified FileDescriptorProto message. Does not implicitly {@link google.protobuf.FileDescriptorProto.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.FileDescriptorProto
                 * @static
                 * @param {google.protobuf.IFileDescriptorProto} message FileDescriptorProto message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                FileDescriptorProto.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                    if (message["package"] != null && Object.hasOwnProperty.call(message, "package"))
                        writer.uint32(/* id 2, wireType 2 =*/18).string(message["package"]);
                    if (message.dependency != null && message.dependency.length)
                        for (var i = 0; i < message.dependency.length; ++i)
                            writer.uint32(/* id 3, wireType 2 =*/26).string(message.dependency[i]);
                    if (message.messageType != null && message.messageType.length)
                        for (var i = 0; i < message.messageType.length; ++i)
                            $root.google.protobuf.DescriptorProto.encode(message.messageType[i], writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                    if (message.enumType != null && message.enumType.length)
                        for (var i = 0; i < message.enumType.length; ++i)
                            $root.google.protobuf.EnumDescriptorProto.encode(message.enumType[i], writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();
                    if (message.service != null && message.service.length)
                        for (var i = 0; i < message.service.length; ++i)
                            $root.google.protobuf.ServiceDescriptorProto.encode(message.service[i], writer.uint32(/* id 6, wireType 2 =*/50).fork()).ldelim();
                    if (message.extension != null && message.extension.length)
                        for (var i = 0; i < message.extension.length; ++i)
                            $root.google.protobuf.FieldDescriptorProto.encode(message.extension[i], writer.uint32(/* id 7, wireType 2 =*/58).fork()).ldelim();
                    if (message.options != null && Object.hasOwnProperty.call(message, "options"))
                        $root.google.protobuf.FileOptions.encode(message.options, writer.uint32(/* id 8, wireType 2 =*/66).fork()).ldelim();
                    if (message.sourceCodeInfo != null && Object.hasOwnProperty.call(message, "sourceCodeInfo"))
                        $root.google.protobuf.SourceCodeInfo.encode(message.sourceCodeInfo, writer.uint32(/* id 9, wireType 2 =*/74).fork()).ldelim();
                    if (message.publicDependency != null && message.publicDependency.length)
                        for (var i = 0; i < message.publicDependency.length; ++i)
                            writer.uint32(/* id 10, wireType 0 =*/80).int32(message.publicDependency[i]);
                    if (message.weakDependency != null && message.weakDependency.length)
                        for (var i = 0; i < message.weakDependency.length; ++i)
                            writer.uint32(/* id 11, wireType 0 =*/88).int32(message.weakDependency[i]);
                    if (message.syntax != null && Object.hasOwnProperty.call(message, "syntax"))
                        writer.uint32(/* id 12, wireType 2 =*/98).string(message.syntax);
                    return writer;
                };
    
                /**
                 * Encodes the specified FileDescriptorProto message, length delimited. Does not implicitly {@link google.protobuf.FileDescriptorProto.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.FileDescriptorProto
                 * @static
                 * @param {google.protobuf.IFileDescriptorProto} message FileDescriptorProto message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                FileDescriptorProto.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a FileDescriptorProto message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.FileDescriptorProto
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.FileDescriptorProto} FileDescriptorProto
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                FileDescriptorProto.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.FileDescriptorProto();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.name = reader.string();
                            break;
                        case 2:
                            message["package"] = reader.string();
                            break;
                        case 3:
                            if (!(message.dependency && message.dependency.length))
                                message.dependency = [];
                            message.dependency.push(reader.string());
                            break;
                        case 10:
                            if (!(message.publicDependency && message.publicDependency.length))
                                message.publicDependency = [];
                            if ((tag & 7) === 2) {
                                var end2 = reader.uint32() + reader.pos;
                                while (reader.pos < end2)
                                    message.publicDependency.push(reader.int32());
                            } else
                                message.publicDependency.push(reader.int32());
                            break;
                        case 11:
                            if (!(message.weakDependency && message.weakDependency.length))
                                message.weakDependency = [];
                            if ((tag & 7) === 2) {
                                var end2 = reader.uint32() + reader.pos;
                                while (reader.pos < end2)
                                    message.weakDependency.push(reader.int32());
                            } else
                                message.weakDependency.push(reader.int32());
                            break;
                        case 4:
                            if (!(message.messageType && message.messageType.length))
                                message.messageType = [];
                            message.messageType.push($root.google.protobuf.DescriptorProto.decode(reader, reader.uint32()));
                            break;
                        case 5:
                            if (!(message.enumType && message.enumType.length))
                                message.enumType = [];
                            message.enumType.push($root.google.protobuf.EnumDescriptorProto.decode(reader, reader.uint32()));
                            break;
                        case 6:
                            if (!(message.service && message.service.length))
                                message.service = [];
                            message.service.push($root.google.protobuf.ServiceDescriptorProto.decode(reader, reader.uint32()));
                            break;
                        case 7:
                            if (!(message.extension && message.extension.length))
                                message.extension = [];
                            message.extension.push($root.google.protobuf.FieldDescriptorProto.decode(reader, reader.uint32()));
                            break;
                        case 8:
                            message.options = $root.google.protobuf.FileOptions.decode(reader, reader.uint32());
                            break;
                        case 9:
                            message.sourceCodeInfo = $root.google.protobuf.SourceCodeInfo.decode(reader, reader.uint32());
                            break;
                        case 12:
                            message.syntax = reader.string();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a FileDescriptorProto message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.FileDescriptorProto
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.FileDescriptorProto} FileDescriptorProto
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                FileDescriptorProto.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a FileDescriptorProto message.
                 * @function verify
                 * @memberof google.protobuf.FileDescriptorProto
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                FileDescriptorProto.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.name != null && message.hasOwnProperty("name"))
                        if (!$util.isString(message.name))
                            return "name: string expected";
                    if (message["package"] != null && message.hasOwnProperty("package"))
                        if (!$util.isString(message["package"]))
                            return "package: string expected";
                    if (message.dependency != null && message.hasOwnProperty("dependency")) {
                        if (!Array.isArray(message.dependency))
                            return "dependency: array expected";
                        for (var i = 0; i < message.dependency.length; ++i)
                            if (!$util.isString(message.dependency[i]))
                                return "dependency: string[] expected";
                    }
                    if (message.publicDependency != null && message.hasOwnProperty("publicDependency")) {
                        if (!Array.isArray(message.publicDependency))
                            return "publicDependency: array expected";
                        for (var i = 0; i < message.publicDependency.length; ++i)
                            if (!$util.isInteger(message.publicDependency[i]))
                                return "publicDependency: integer[] expected";
                    }
                    if (message.weakDependency != null && message.hasOwnProperty("weakDependency")) {
                        if (!Array.isArray(message.weakDependency))
                            return "weakDependency: array expected";
                        for (var i = 0; i < message.weakDependency.length; ++i)
                            if (!$util.isInteger(message.weakDependency[i]))
                                return "weakDependency: integer[] expected";
                    }
                    if (message.messageType != null && message.hasOwnProperty("messageType")) {
                        if (!Array.isArray(message.messageType))
                            return "messageType: array expected";
                        for (var i = 0; i < message.messageType.length; ++i) {
                            var error = $root.google.protobuf.DescriptorProto.verify(message.messageType[i]);
                            if (error)
                                return "messageType." + error;
                        }
                    }
                    if (message.enumType != null && message.hasOwnProperty("enumType")) {
                        if (!Array.isArray(message.enumType))
                            return "enumType: array expected";
                        for (var i = 0; i < message.enumType.length; ++i) {
                            var error = $root.google.protobuf.EnumDescriptorProto.verify(message.enumType[i]);
                            if (error)
                                return "enumType." + error;
                        }
                    }
                    if (message.service != null && message.hasOwnProperty("service")) {
                        if (!Array.isArray(message.service))
                            return "service: array expected";
                        for (var i = 0; i < message.service.length; ++i) {
                            var error = $root.google.protobuf.ServiceDescriptorProto.verify(message.service[i]);
                            if (error)
                                return "service." + error;
                        }
                    }
                    if (message.extension != null && message.hasOwnProperty("extension")) {
                        if (!Array.isArray(message.extension))
                            return "extension: array expected";
                        for (var i = 0; i < message.extension.length; ++i) {
                            var error = $root.google.protobuf.FieldDescriptorProto.verify(message.extension[i]);
                            if (error)
                                return "extension." + error;
                        }
                    }
                    if (message.options != null && message.hasOwnProperty("options")) {
                        var error = $root.google.protobuf.FileOptions.verify(message.options);
                        if (error)
                            return "options." + error;
                    }
                    if (message.sourceCodeInfo != null && message.hasOwnProperty("sourceCodeInfo")) {
                        var error = $root.google.protobuf.SourceCodeInfo.verify(message.sourceCodeInfo);
                        if (error)
                            return "sourceCodeInfo." + error;
                    }
                    if (message.syntax != null && message.hasOwnProperty("syntax"))
                        if (!$util.isString(message.syntax))
                            return "syntax: string expected";
                    return null;
                };
    
                /**
                 * Creates a FileDescriptorProto message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.FileDescriptorProto
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.FileDescriptorProto} FileDescriptorProto
                 */
                FileDescriptorProto.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.FileDescriptorProto)
                        return object;
                    var message = new $root.google.protobuf.FileDescriptorProto();
                    if (object.name != null)
                        message.name = String(object.name);
                    if (object["package"] != null)
                        message["package"] = String(object["package"]);
                    if (object.dependency) {
                        if (!Array.isArray(object.dependency))
                            throw TypeError(".google.protobuf.FileDescriptorProto.dependency: array expected");
                        message.dependency = [];
                        for (var i = 0; i < object.dependency.length; ++i)
                            message.dependency[i] = String(object.dependency[i]);
                    }
                    if (object.publicDependency) {
                        if (!Array.isArray(object.publicDependency))
                            throw TypeError(".google.protobuf.FileDescriptorProto.publicDependency: array expected");
                        message.publicDependency = [];
                        for (var i = 0; i < object.publicDependency.length; ++i)
                            message.publicDependency[i] = object.publicDependency[i] | 0;
                    }
                    if (object.weakDependency) {
                        if (!Array.isArray(object.weakDependency))
                            throw TypeError(".google.protobuf.FileDescriptorProto.weakDependency: array expected");
                        message.weakDependency = [];
                        for (var i = 0; i < object.weakDependency.length; ++i)
                            message.weakDependency[i] = object.weakDependency[i] | 0;
                    }
                    if (object.messageType) {
                        if (!Array.isArray(object.messageType))
                            throw TypeError(".google.protobuf.FileDescriptorProto.messageType: array expected");
                        message.messageType = [];
                        for (var i = 0; i < object.messageType.length; ++i) {
                            if (typeof object.messageType[i] !== "object")
                                throw TypeError(".google.protobuf.FileDescriptorProto.messageType: object expected");
                            message.messageType[i] = $root.google.protobuf.DescriptorProto.fromObject(object.messageType[i]);
                        }
                    }
                    if (object.enumType) {
                        if (!Array.isArray(object.enumType))
                            throw TypeError(".google.protobuf.FileDescriptorProto.enumType: array expected");
                        message.enumType = [];
                        for (var i = 0; i < object.enumType.length; ++i) {
                            if (typeof object.enumType[i] !== "object")
                                throw TypeError(".google.protobuf.FileDescriptorProto.enumType: object expected");
                            message.enumType[i] = $root.google.protobuf.EnumDescriptorProto.fromObject(object.enumType[i]);
                        }
                    }
                    if (object.service) {
                        if (!Array.isArray(object.service))
                            throw TypeError(".google.protobuf.FileDescriptorProto.service: array expected");
                        message.service = [];
                        for (var i = 0; i < object.service.length; ++i) {
                            if (typeof object.service[i] !== "object")
                                throw TypeError(".google.protobuf.FileDescriptorProto.service: object expected");
                            message.service[i] = $root.google.protobuf.ServiceDescriptorProto.fromObject(object.service[i]);
                        }
                    }
                    if (object.extension) {
                        if (!Array.isArray(object.extension))
                            throw TypeError(".google.protobuf.FileDescriptorProto.extension: array expected");
                        message.extension = [];
                        for (var i = 0; i < object.extension.length; ++i) {
                            if (typeof object.extension[i] !== "object")
                                throw TypeError(".google.protobuf.FileDescriptorProto.extension: object expected");
                            message.extension[i] = $root.google.protobuf.FieldDescriptorProto.fromObject(object.extension[i]);
                        }
                    }
                    if (object.options != null) {
                        if (typeof object.options !== "object")
                            throw TypeError(".google.protobuf.FileDescriptorProto.options: object expected");
                        message.options = $root.google.protobuf.FileOptions.fromObject(object.options);
                    }
                    if (object.sourceCodeInfo != null) {
                        if (typeof object.sourceCodeInfo !== "object")
                            throw TypeError(".google.protobuf.FileDescriptorProto.sourceCodeInfo: object expected");
                        message.sourceCodeInfo = $root.google.protobuf.SourceCodeInfo.fromObject(object.sourceCodeInfo);
                    }
                    if (object.syntax != null)
                        message.syntax = String(object.syntax);
                    return message;
                };
    
                /**
                 * Creates a plain object from a FileDescriptorProto message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.FileDescriptorProto
                 * @static
                 * @param {google.protobuf.FileDescriptorProto} message FileDescriptorProto
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                FileDescriptorProto.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults) {
                        object.dependency = [];
                        object.messageType = [];
                        object.enumType = [];
                        object.service = [];
                        object.extension = [];
                        object.publicDependency = [];
                        object.weakDependency = [];
                    }
                    if (options.defaults) {
                        object.name = "";
                        object["package"] = "";
                        object.options = null;
                        object.sourceCodeInfo = null;
                        object.syntax = "";
                    }
                    if (message.name != null && message.hasOwnProperty("name"))
                        object.name = message.name;
                    if (message["package"] != null && message.hasOwnProperty("package"))
                        object["package"] = message["package"];
                    if (message.dependency && message.dependency.length) {
                        object.dependency = [];
                        for (var j = 0; j < message.dependency.length; ++j)
                            object.dependency[j] = message.dependency[j];
                    }
                    if (message.messageType && message.messageType.length) {
                        object.messageType = [];
                        for (var j = 0; j < message.messageType.length; ++j)
                            object.messageType[j] = $root.google.protobuf.DescriptorProto.toObject(message.messageType[j], options);
                    }
                    if (message.enumType && message.enumType.length) {
                        object.enumType = [];
                        for (var j = 0; j < message.enumType.length; ++j)
                            object.enumType[j] = $root.google.protobuf.EnumDescriptorProto.toObject(message.enumType[j], options);
                    }
                    if (message.service && message.service.length) {
                        object.service = [];
                        for (var j = 0; j < message.service.length; ++j)
                            object.service[j] = $root.google.protobuf.ServiceDescriptorProto.toObject(message.service[j], options);
                    }
                    if (message.extension && message.extension.length) {
                        object.extension = [];
                        for (var j = 0; j < message.extension.length; ++j)
                            object.extension[j] = $root.google.protobuf.FieldDescriptorProto.toObject(message.extension[j], options);
                    }
                    if (message.options != null && message.hasOwnProperty("options"))
                        object.options = $root.google.protobuf.FileOptions.toObject(message.options, options);
                    if (message.sourceCodeInfo != null && message.hasOwnProperty("sourceCodeInfo"))
                        object.sourceCodeInfo = $root.google.protobuf.SourceCodeInfo.toObject(message.sourceCodeInfo, options);
                    if (message.publicDependency && message.publicDependency.length) {
                        object.publicDependency = [];
                        for (var j = 0; j < message.publicDependency.length; ++j)
                            object.publicDependency[j] = message.publicDependency[j];
                    }
                    if (message.weakDependency && message.weakDependency.length) {
                        object.weakDependency = [];
                        for (var j = 0; j < message.weakDependency.length; ++j)
                            object.weakDependency[j] = message.weakDependency[j];
                    }
                    if (message.syntax != null && message.hasOwnProperty("syntax"))
                        object.syntax = message.syntax;
                    return object;
                };
    
                /**
                 * Converts this FileDescriptorProto to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.FileDescriptorProto
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                FileDescriptorProto.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return FileDescriptorProto;
            })();
    
            protobuf.DescriptorProto = (function() {
    
                /**
                 * Properties of a DescriptorProto.
                 * @memberof google.protobuf
                 * @interface IDescriptorProto
                 * @property {string|null} [name] DescriptorProto name
                 * @property {Array.<google.protobuf.IFieldDescriptorProto>|null} [field] DescriptorProto field
                 * @property {Array.<google.protobuf.IFieldDescriptorProto>|null} [extension] DescriptorProto extension
                 * @property {Array.<google.protobuf.IDescriptorProto>|null} [nestedType] DescriptorProto nestedType
                 * @property {Array.<google.protobuf.IEnumDescriptorProto>|null} [enumType] DescriptorProto enumType
                 * @property {Array.<google.protobuf.DescriptorProto.IExtensionRange>|null} [extensionRange] DescriptorProto extensionRange
                 * @property {Array.<google.protobuf.IOneofDescriptorProto>|null} [oneofDecl] DescriptorProto oneofDecl
                 * @property {google.protobuf.IMessageOptions|null} [options] DescriptorProto options
                 * @property {Array.<google.protobuf.DescriptorProto.IReservedRange>|null} [reservedRange] DescriptorProto reservedRange
                 * @property {Array.<string>|null} [reservedName] DescriptorProto reservedName
                 */
    
                /**
                 * Constructs a new DescriptorProto.
                 * @memberof google.protobuf
                 * @classdesc Represents a DescriptorProto.
                 * @implements IDescriptorProto
                 * @constructor
                 * @param {google.protobuf.IDescriptorProto=} [properties] Properties to set
                 */
                function DescriptorProto(properties) {
                    this.field = [];
                    this.extension = [];
                    this.nestedType = [];
                    this.enumType = [];
                    this.extensionRange = [];
                    this.oneofDecl = [];
                    this.reservedRange = [];
                    this.reservedName = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * DescriptorProto name.
                 * @member {string} name
                 * @memberof google.protobuf.DescriptorProto
                 * @instance
                 */
                DescriptorProto.prototype.name = "";
    
                /**
                 * DescriptorProto field.
                 * @member {Array.<google.protobuf.IFieldDescriptorProto>} field
                 * @memberof google.protobuf.DescriptorProto
                 * @instance
                 */
                DescriptorProto.prototype.field = $util.emptyArray;
    
                /**
                 * DescriptorProto extension.
                 * @member {Array.<google.protobuf.IFieldDescriptorProto>} extension
                 * @memberof google.protobuf.DescriptorProto
                 * @instance
                 */
                DescriptorProto.prototype.extension = $util.emptyArray;
    
                /**
                 * DescriptorProto nestedType.
                 * @member {Array.<google.protobuf.IDescriptorProto>} nestedType
                 * @memberof google.protobuf.DescriptorProto
                 * @instance
                 */
                DescriptorProto.prototype.nestedType = $util.emptyArray;
    
                /**
                 * DescriptorProto enumType.
                 * @member {Array.<google.protobuf.IEnumDescriptorProto>} enumType
                 * @memberof google.protobuf.DescriptorProto
                 * @instance
                 */
                DescriptorProto.prototype.enumType = $util.emptyArray;
    
                /**
                 * DescriptorProto extensionRange.
                 * @member {Array.<google.protobuf.DescriptorProto.IExtensionRange>} extensionRange
                 * @memberof google.protobuf.DescriptorProto
                 * @instance
                 */
                DescriptorProto.prototype.extensionRange = $util.emptyArray;
    
                /**
                 * DescriptorProto oneofDecl.
                 * @member {Array.<google.protobuf.IOneofDescriptorProto>} oneofDecl
                 * @memberof google.protobuf.DescriptorProto
                 * @instance
                 */
                DescriptorProto.prototype.oneofDecl = $util.emptyArray;
    
                /**
                 * DescriptorProto options.
                 * @member {google.protobuf.IMessageOptions|null|undefined} options
                 * @memberof google.protobuf.DescriptorProto
                 * @instance
                 */
                DescriptorProto.prototype.options = null;
    
                /**
                 * DescriptorProto reservedRange.
                 * @member {Array.<google.protobuf.DescriptorProto.IReservedRange>} reservedRange
                 * @memberof google.protobuf.DescriptorProto
                 * @instance
                 */
                DescriptorProto.prototype.reservedRange = $util.emptyArray;
    
                /**
                 * DescriptorProto reservedName.
                 * @member {Array.<string>} reservedName
                 * @memberof google.protobuf.DescriptorProto
                 * @instance
                 */
                DescriptorProto.prototype.reservedName = $util.emptyArray;
    
                /**
                 * Creates a new DescriptorProto instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.DescriptorProto
                 * @static
                 * @param {google.protobuf.IDescriptorProto=} [properties] Properties to set
                 * @returns {google.protobuf.DescriptorProto} DescriptorProto instance
                 */
                DescriptorProto.create = function create(properties) {
                    return new DescriptorProto(properties);
                };
    
                /**
                 * Encodes the specified DescriptorProto message. Does not implicitly {@link google.protobuf.DescriptorProto.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.DescriptorProto
                 * @static
                 * @param {google.protobuf.IDescriptorProto} message DescriptorProto message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                DescriptorProto.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                    if (message.field != null && message.field.length)
                        for (var i = 0; i < message.field.length; ++i)
                            $root.google.protobuf.FieldDescriptorProto.encode(message.field[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                    if (message.nestedType != null && message.nestedType.length)
                        for (var i = 0; i < message.nestedType.length; ++i)
                            $root.google.protobuf.DescriptorProto.encode(message.nestedType[i], writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                    if (message.enumType != null && message.enumType.length)
                        for (var i = 0; i < message.enumType.length; ++i)
                            $root.google.protobuf.EnumDescriptorProto.encode(message.enumType[i], writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                    if (message.extensionRange != null && message.extensionRange.length)
                        for (var i = 0; i < message.extensionRange.length; ++i)
                            $root.google.protobuf.DescriptorProto.ExtensionRange.encode(message.extensionRange[i], writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();
                    if (message.extension != null && message.extension.length)
                        for (var i = 0; i < message.extension.length; ++i)
                            $root.google.protobuf.FieldDescriptorProto.encode(message.extension[i], writer.uint32(/* id 6, wireType 2 =*/50).fork()).ldelim();
                    if (message.options != null && Object.hasOwnProperty.call(message, "options"))
                        $root.google.protobuf.MessageOptions.encode(message.options, writer.uint32(/* id 7, wireType 2 =*/58).fork()).ldelim();
                    if (message.oneofDecl != null && message.oneofDecl.length)
                        for (var i = 0; i < message.oneofDecl.length; ++i)
                            $root.google.protobuf.OneofDescriptorProto.encode(message.oneofDecl[i], writer.uint32(/* id 8, wireType 2 =*/66).fork()).ldelim();
                    if (message.reservedRange != null && message.reservedRange.length)
                        for (var i = 0; i < message.reservedRange.length; ++i)
                            $root.google.protobuf.DescriptorProto.ReservedRange.encode(message.reservedRange[i], writer.uint32(/* id 9, wireType 2 =*/74).fork()).ldelim();
                    if (message.reservedName != null && message.reservedName.length)
                        for (var i = 0; i < message.reservedName.length; ++i)
                            writer.uint32(/* id 10, wireType 2 =*/82).string(message.reservedName[i]);
                    return writer;
                };
    
                /**
                 * Encodes the specified DescriptorProto message, length delimited. Does not implicitly {@link google.protobuf.DescriptorProto.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.DescriptorProto
                 * @static
                 * @param {google.protobuf.IDescriptorProto} message DescriptorProto message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                DescriptorProto.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a DescriptorProto message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.DescriptorProto
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.DescriptorProto} DescriptorProto
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                DescriptorProto.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.DescriptorProto();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.name = reader.string();
                            break;
                        case 2:
                            if (!(message.field && message.field.length))
                                message.field = [];
                            message.field.push($root.google.protobuf.FieldDescriptorProto.decode(reader, reader.uint32()));
                            break;
                        case 6:
                            if (!(message.extension && message.extension.length))
                                message.extension = [];
                            message.extension.push($root.google.protobuf.FieldDescriptorProto.decode(reader, reader.uint32()));
                            break;
                        case 3:
                            if (!(message.nestedType && message.nestedType.length))
                                message.nestedType = [];
                            message.nestedType.push($root.google.protobuf.DescriptorProto.decode(reader, reader.uint32()));
                            break;
                        case 4:
                            if (!(message.enumType && message.enumType.length))
                                message.enumType = [];
                            message.enumType.push($root.google.protobuf.EnumDescriptorProto.decode(reader, reader.uint32()));
                            break;
                        case 5:
                            if (!(message.extensionRange && message.extensionRange.length))
                                message.extensionRange = [];
                            message.extensionRange.push($root.google.protobuf.DescriptorProto.ExtensionRange.decode(reader, reader.uint32()));
                            break;
                        case 8:
                            if (!(message.oneofDecl && message.oneofDecl.length))
                                message.oneofDecl = [];
                            message.oneofDecl.push($root.google.protobuf.OneofDescriptorProto.decode(reader, reader.uint32()));
                            break;
                        case 7:
                            message.options = $root.google.protobuf.MessageOptions.decode(reader, reader.uint32());
                            break;
                        case 9:
                            if (!(message.reservedRange && message.reservedRange.length))
                                message.reservedRange = [];
                            message.reservedRange.push($root.google.protobuf.DescriptorProto.ReservedRange.decode(reader, reader.uint32()));
                            break;
                        case 10:
                            if (!(message.reservedName && message.reservedName.length))
                                message.reservedName = [];
                            message.reservedName.push(reader.string());
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a DescriptorProto message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.DescriptorProto
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.DescriptorProto} DescriptorProto
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                DescriptorProto.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a DescriptorProto message.
                 * @function verify
                 * @memberof google.protobuf.DescriptorProto
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                DescriptorProto.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.name != null && message.hasOwnProperty("name"))
                        if (!$util.isString(message.name))
                            return "name: string expected";
                    if (message.field != null && message.hasOwnProperty("field")) {
                        if (!Array.isArray(message.field))
                            return "field: array expected";
                        for (var i = 0; i < message.field.length; ++i) {
                            var error = $root.google.protobuf.FieldDescriptorProto.verify(message.field[i]);
                            if (error)
                                return "field." + error;
                        }
                    }
                    if (message.extension != null && message.hasOwnProperty("extension")) {
                        if (!Array.isArray(message.extension))
                            return "extension: array expected";
                        for (var i = 0; i < message.extension.length; ++i) {
                            var error = $root.google.protobuf.FieldDescriptorProto.verify(message.extension[i]);
                            if (error)
                                return "extension." + error;
                        }
                    }
                    if (message.nestedType != null && message.hasOwnProperty("nestedType")) {
                        if (!Array.isArray(message.nestedType))
                            return "nestedType: array expected";
                        for (var i = 0; i < message.nestedType.length; ++i) {
                            var error = $root.google.protobuf.DescriptorProto.verify(message.nestedType[i]);
                            if (error)
                                return "nestedType." + error;
                        }
                    }
                    if (message.enumType != null && message.hasOwnProperty("enumType")) {
                        if (!Array.isArray(message.enumType))
                            return "enumType: array expected";
                        for (var i = 0; i < message.enumType.length; ++i) {
                            var error = $root.google.protobuf.EnumDescriptorProto.verify(message.enumType[i]);
                            if (error)
                                return "enumType." + error;
                        }
                    }
                    if (message.extensionRange != null && message.hasOwnProperty("extensionRange")) {
                        if (!Array.isArray(message.extensionRange))
                            return "extensionRange: array expected";
                        for (var i = 0; i < message.extensionRange.length; ++i) {
                            var error = $root.google.protobuf.DescriptorProto.ExtensionRange.verify(message.extensionRange[i]);
                            if (error)
                                return "extensionRange." + error;
                        }
                    }
                    if (message.oneofDecl != null && message.hasOwnProperty("oneofDecl")) {
                        if (!Array.isArray(message.oneofDecl))
                            return "oneofDecl: array expected";
                        for (var i = 0; i < message.oneofDecl.length; ++i) {
                            var error = $root.google.protobuf.OneofDescriptorProto.verify(message.oneofDecl[i]);
                            if (error)
                                return "oneofDecl." + error;
                        }
                    }
                    if (message.options != null && message.hasOwnProperty("options")) {
                        var error = $root.google.protobuf.MessageOptions.verify(message.options);
                        if (error)
                            return "options." + error;
                    }
                    if (message.reservedRange != null && message.hasOwnProperty("reservedRange")) {
                        if (!Array.isArray(message.reservedRange))
                            return "reservedRange: array expected";
                        for (var i = 0; i < message.reservedRange.length; ++i) {
                            var error = $root.google.protobuf.DescriptorProto.ReservedRange.verify(message.reservedRange[i]);
                            if (error)
                                return "reservedRange." + error;
                        }
                    }
                    if (message.reservedName != null && message.hasOwnProperty("reservedName")) {
                        if (!Array.isArray(message.reservedName))
                            return "reservedName: array expected";
                        for (var i = 0; i < message.reservedName.length; ++i)
                            if (!$util.isString(message.reservedName[i]))
                                return "reservedName: string[] expected";
                    }
                    return null;
                };
    
                /**
                 * Creates a DescriptorProto message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.DescriptorProto
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.DescriptorProto} DescriptorProto
                 */
                DescriptorProto.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.DescriptorProto)
                        return object;
                    var message = new $root.google.protobuf.DescriptorProto();
                    if (object.name != null)
                        message.name = String(object.name);
                    if (object.field) {
                        if (!Array.isArray(object.field))
                            throw TypeError(".google.protobuf.DescriptorProto.field: array expected");
                        message.field = [];
                        for (var i = 0; i < object.field.length; ++i) {
                            if (typeof object.field[i] !== "object")
                                throw TypeError(".google.protobuf.DescriptorProto.field: object expected");
                            message.field[i] = $root.google.protobuf.FieldDescriptorProto.fromObject(object.field[i]);
                        }
                    }
                    if (object.extension) {
                        if (!Array.isArray(object.extension))
                            throw TypeError(".google.protobuf.DescriptorProto.extension: array expected");
                        message.extension = [];
                        for (var i = 0; i < object.extension.length; ++i) {
                            if (typeof object.extension[i] !== "object")
                                throw TypeError(".google.protobuf.DescriptorProto.extension: object expected");
                            message.extension[i] = $root.google.protobuf.FieldDescriptorProto.fromObject(object.extension[i]);
                        }
                    }
                    if (object.nestedType) {
                        if (!Array.isArray(object.nestedType))
                            throw TypeError(".google.protobuf.DescriptorProto.nestedType: array expected");
                        message.nestedType = [];
                        for (var i = 0; i < object.nestedType.length; ++i) {
                            if (typeof object.nestedType[i] !== "object")
                                throw TypeError(".google.protobuf.DescriptorProto.nestedType: object expected");
                            message.nestedType[i] = $root.google.protobuf.DescriptorProto.fromObject(object.nestedType[i]);
                        }
                    }
                    if (object.enumType) {
                        if (!Array.isArray(object.enumType))
                            throw TypeError(".google.protobuf.DescriptorProto.enumType: array expected");
                        message.enumType = [];
                        for (var i = 0; i < object.enumType.length; ++i) {
                            if (typeof object.enumType[i] !== "object")
                                throw TypeError(".google.protobuf.DescriptorProto.enumType: object expected");
                            message.enumType[i] = $root.google.protobuf.EnumDescriptorProto.fromObject(object.enumType[i]);
                        }
                    }
                    if (object.extensionRange) {
                        if (!Array.isArray(object.extensionRange))
                            throw TypeError(".google.protobuf.DescriptorProto.extensionRange: array expected");
                        message.extensionRange = [];
                        for (var i = 0; i < object.extensionRange.length; ++i) {
                            if (typeof object.extensionRange[i] !== "object")
                                throw TypeError(".google.protobuf.DescriptorProto.extensionRange: object expected");
                            message.extensionRange[i] = $root.google.protobuf.DescriptorProto.ExtensionRange.fromObject(object.extensionRange[i]);
                        }
                    }
                    if (object.oneofDecl) {
                        if (!Array.isArray(object.oneofDecl))
                            throw TypeError(".google.protobuf.DescriptorProto.oneofDecl: array expected");
                        message.oneofDecl = [];
                        for (var i = 0; i < object.oneofDecl.length; ++i) {
                            if (typeof object.oneofDecl[i] !== "object")
                                throw TypeError(".google.protobuf.DescriptorProto.oneofDecl: object expected");
                            message.oneofDecl[i] = $root.google.protobuf.OneofDescriptorProto.fromObject(object.oneofDecl[i]);
                        }
                    }
                    if (object.options != null) {
                        if (typeof object.options !== "object")
                            throw TypeError(".google.protobuf.DescriptorProto.options: object expected");
                        message.options = $root.google.protobuf.MessageOptions.fromObject(object.options);
                    }
                    if (object.reservedRange) {
                        if (!Array.isArray(object.reservedRange))
                            throw TypeError(".google.protobuf.DescriptorProto.reservedRange: array expected");
                        message.reservedRange = [];
                        for (var i = 0; i < object.reservedRange.length; ++i) {
                            if (typeof object.reservedRange[i] !== "object")
                                throw TypeError(".google.protobuf.DescriptorProto.reservedRange: object expected");
                            message.reservedRange[i] = $root.google.protobuf.DescriptorProto.ReservedRange.fromObject(object.reservedRange[i]);
                        }
                    }
                    if (object.reservedName) {
                        if (!Array.isArray(object.reservedName))
                            throw TypeError(".google.protobuf.DescriptorProto.reservedName: array expected");
                        message.reservedName = [];
                        for (var i = 0; i < object.reservedName.length; ++i)
                            message.reservedName[i] = String(object.reservedName[i]);
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from a DescriptorProto message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.DescriptorProto
                 * @static
                 * @param {google.protobuf.DescriptorProto} message DescriptorProto
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                DescriptorProto.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults) {
                        object.field = [];
                        object.nestedType = [];
                        object.enumType = [];
                        object.extensionRange = [];
                        object.extension = [];
                        object.oneofDecl = [];
                        object.reservedRange = [];
                        object.reservedName = [];
                    }
                    if (options.defaults) {
                        object.name = "";
                        object.options = null;
                    }
                    if (message.name != null && message.hasOwnProperty("name"))
                        object.name = message.name;
                    if (message.field && message.field.length) {
                        object.field = [];
                        for (var j = 0; j < message.field.length; ++j)
                            object.field[j] = $root.google.protobuf.FieldDescriptorProto.toObject(message.field[j], options);
                    }
                    if (message.nestedType && message.nestedType.length) {
                        object.nestedType = [];
                        for (var j = 0; j < message.nestedType.length; ++j)
                            object.nestedType[j] = $root.google.protobuf.DescriptorProto.toObject(message.nestedType[j], options);
                    }
                    if (message.enumType && message.enumType.length) {
                        object.enumType = [];
                        for (var j = 0; j < message.enumType.length; ++j)
                            object.enumType[j] = $root.google.protobuf.EnumDescriptorProto.toObject(message.enumType[j], options);
                    }
                    if (message.extensionRange && message.extensionRange.length) {
                        object.extensionRange = [];
                        for (var j = 0; j < message.extensionRange.length; ++j)
                            object.extensionRange[j] = $root.google.protobuf.DescriptorProto.ExtensionRange.toObject(message.extensionRange[j], options);
                    }
                    if (message.extension && message.extension.length) {
                        object.extension = [];
                        for (var j = 0; j < message.extension.length; ++j)
                            object.extension[j] = $root.google.protobuf.FieldDescriptorProto.toObject(message.extension[j], options);
                    }
                    if (message.options != null && message.hasOwnProperty("options"))
                        object.options = $root.google.protobuf.MessageOptions.toObject(message.options, options);
                    if (message.oneofDecl && message.oneofDecl.length) {
                        object.oneofDecl = [];
                        for (var j = 0; j < message.oneofDecl.length; ++j)
                            object.oneofDecl[j] = $root.google.protobuf.OneofDescriptorProto.toObject(message.oneofDecl[j], options);
                    }
                    if (message.reservedRange && message.reservedRange.length) {
                        object.reservedRange = [];
                        for (var j = 0; j < message.reservedRange.length; ++j)
                            object.reservedRange[j] = $root.google.protobuf.DescriptorProto.ReservedRange.toObject(message.reservedRange[j], options);
                    }
                    if (message.reservedName && message.reservedName.length) {
                        object.reservedName = [];
                        for (var j = 0; j < message.reservedName.length; ++j)
                            object.reservedName[j] = message.reservedName[j];
                    }
                    return object;
                };
    
                /**
                 * Converts this DescriptorProto to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.DescriptorProto
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                DescriptorProto.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                DescriptorProto.ExtensionRange = (function() {
    
                    /**
                     * Properties of an ExtensionRange.
                     * @memberof google.protobuf.DescriptorProto
                     * @interface IExtensionRange
                     * @property {number|null} [start] ExtensionRange start
                     * @property {number|null} [end] ExtensionRange end
                     * @property {google.protobuf.IExtensionRangeOptions|null} [options] ExtensionRange options
                     */
    
                    /**
                     * Constructs a new ExtensionRange.
                     * @memberof google.protobuf.DescriptorProto
                     * @classdesc Represents an ExtensionRange.
                     * @implements IExtensionRange
                     * @constructor
                     * @param {google.protobuf.DescriptorProto.IExtensionRange=} [properties] Properties to set
                     */
                    function ExtensionRange(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * ExtensionRange start.
                     * @member {number} start
                     * @memberof google.protobuf.DescriptorProto.ExtensionRange
                     * @instance
                     */
                    ExtensionRange.prototype.start = 0;
    
                    /**
                     * ExtensionRange end.
                     * @member {number} end
                     * @memberof google.protobuf.DescriptorProto.ExtensionRange
                     * @instance
                     */
                    ExtensionRange.prototype.end = 0;
    
                    /**
                     * ExtensionRange options.
                     * @member {google.protobuf.IExtensionRangeOptions|null|undefined} options
                     * @memberof google.protobuf.DescriptorProto.ExtensionRange
                     * @instance
                     */
                    ExtensionRange.prototype.options = null;
    
                    /**
                     * Creates a new ExtensionRange instance using the specified properties.
                     * @function create
                     * @memberof google.protobuf.DescriptorProto.ExtensionRange
                     * @static
                     * @param {google.protobuf.DescriptorProto.IExtensionRange=} [properties] Properties to set
                     * @returns {google.protobuf.DescriptorProto.ExtensionRange} ExtensionRange instance
                     */
                    ExtensionRange.create = function create(properties) {
                        return new ExtensionRange(properties);
                    };
    
                    /**
                     * Encodes the specified ExtensionRange message. Does not implicitly {@link google.protobuf.DescriptorProto.ExtensionRange.verify|verify} messages.
                     * @function encode
                     * @memberof google.protobuf.DescriptorProto.ExtensionRange
                     * @static
                     * @param {google.protobuf.DescriptorProto.IExtensionRange} message ExtensionRange message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    ExtensionRange.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.start != null && Object.hasOwnProperty.call(message, "start"))
                            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.start);
                        if (message.end != null && Object.hasOwnProperty.call(message, "end"))
                            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.end);
                        if (message.options != null && Object.hasOwnProperty.call(message, "options"))
                            $root.google.protobuf.ExtensionRangeOptions.encode(message.options, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                        return writer;
                    };
    
                    /**
                     * Encodes the specified ExtensionRange message, length delimited. Does not implicitly {@link google.protobuf.DescriptorProto.ExtensionRange.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof google.protobuf.DescriptorProto.ExtensionRange
                     * @static
                     * @param {google.protobuf.DescriptorProto.IExtensionRange} message ExtensionRange message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    ExtensionRange.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes an ExtensionRange message from the specified reader or buffer.
                     * @function decode
                     * @memberof google.protobuf.DescriptorProto.ExtensionRange
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {google.protobuf.DescriptorProto.ExtensionRange} ExtensionRange
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    ExtensionRange.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.DescriptorProto.ExtensionRange();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.start = reader.int32();
                                break;
                            case 2:
                                message.end = reader.int32();
                                break;
                            case 3:
                                message.options = $root.google.protobuf.ExtensionRangeOptions.decode(reader, reader.uint32());
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes an ExtensionRange message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof google.protobuf.DescriptorProto.ExtensionRange
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {google.protobuf.DescriptorProto.ExtensionRange} ExtensionRange
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    ExtensionRange.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies an ExtensionRange message.
                     * @function verify
                     * @memberof google.protobuf.DescriptorProto.ExtensionRange
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    ExtensionRange.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.start != null && message.hasOwnProperty("start"))
                            if (!$util.isInteger(message.start))
                                return "start: integer expected";
                        if (message.end != null && message.hasOwnProperty("end"))
                            if (!$util.isInteger(message.end))
                                return "end: integer expected";
                        if (message.options != null && message.hasOwnProperty("options")) {
                            var error = $root.google.protobuf.ExtensionRangeOptions.verify(message.options);
                            if (error)
                                return "options." + error;
                        }
                        return null;
                    };
    
                    /**
                     * Creates an ExtensionRange message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof google.protobuf.DescriptorProto.ExtensionRange
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {google.protobuf.DescriptorProto.ExtensionRange} ExtensionRange
                     */
                    ExtensionRange.fromObject = function fromObject(object) {
                        if (object instanceof $root.google.protobuf.DescriptorProto.ExtensionRange)
                            return object;
                        var message = new $root.google.protobuf.DescriptorProto.ExtensionRange();
                        if (object.start != null)
                            message.start = object.start | 0;
                        if (object.end != null)
                            message.end = object.end | 0;
                        if (object.options != null) {
                            if (typeof object.options !== "object")
                                throw TypeError(".google.protobuf.DescriptorProto.ExtensionRange.options: object expected");
                            message.options = $root.google.protobuf.ExtensionRangeOptions.fromObject(object.options);
                        }
                        return message;
                    };
    
                    /**
                     * Creates a plain object from an ExtensionRange message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof google.protobuf.DescriptorProto.ExtensionRange
                     * @static
                     * @param {google.protobuf.DescriptorProto.ExtensionRange} message ExtensionRange
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    ExtensionRange.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults) {
                            object.start = 0;
                            object.end = 0;
                            object.options = null;
                        }
                        if (message.start != null && message.hasOwnProperty("start"))
                            object.start = message.start;
                        if (message.end != null && message.hasOwnProperty("end"))
                            object.end = message.end;
                        if (message.options != null && message.hasOwnProperty("options"))
                            object.options = $root.google.protobuf.ExtensionRangeOptions.toObject(message.options, options);
                        return object;
                    };
    
                    /**
                     * Converts this ExtensionRange to JSON.
                     * @function toJSON
                     * @memberof google.protobuf.DescriptorProto.ExtensionRange
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    ExtensionRange.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    return ExtensionRange;
                })();
    
                DescriptorProto.ReservedRange = (function() {
    
                    /**
                     * Properties of a ReservedRange.
                     * @memberof google.protobuf.DescriptorProto
                     * @interface IReservedRange
                     * @property {number|null} [start] ReservedRange start
                     * @property {number|null} [end] ReservedRange end
                     */
    
                    /**
                     * Constructs a new ReservedRange.
                     * @memberof google.protobuf.DescriptorProto
                     * @classdesc Represents a ReservedRange.
                     * @implements IReservedRange
                     * @constructor
                     * @param {google.protobuf.DescriptorProto.IReservedRange=} [properties] Properties to set
                     */
                    function ReservedRange(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * ReservedRange start.
                     * @member {number} start
                     * @memberof google.protobuf.DescriptorProto.ReservedRange
                     * @instance
                     */
                    ReservedRange.prototype.start = 0;
    
                    /**
                     * ReservedRange end.
                     * @member {number} end
                     * @memberof google.protobuf.DescriptorProto.ReservedRange
                     * @instance
                     */
                    ReservedRange.prototype.end = 0;
    
                    /**
                     * Creates a new ReservedRange instance using the specified properties.
                     * @function create
                     * @memberof google.protobuf.DescriptorProto.ReservedRange
                     * @static
                     * @param {google.protobuf.DescriptorProto.IReservedRange=} [properties] Properties to set
                     * @returns {google.protobuf.DescriptorProto.ReservedRange} ReservedRange instance
                     */
                    ReservedRange.create = function create(properties) {
                        return new ReservedRange(properties);
                    };
    
                    /**
                     * Encodes the specified ReservedRange message. Does not implicitly {@link google.protobuf.DescriptorProto.ReservedRange.verify|verify} messages.
                     * @function encode
                     * @memberof google.protobuf.DescriptorProto.ReservedRange
                     * @static
                     * @param {google.protobuf.DescriptorProto.IReservedRange} message ReservedRange message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    ReservedRange.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.start != null && Object.hasOwnProperty.call(message, "start"))
                            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.start);
                        if (message.end != null && Object.hasOwnProperty.call(message, "end"))
                            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.end);
                        return writer;
                    };
    
                    /**
                     * Encodes the specified ReservedRange message, length delimited. Does not implicitly {@link google.protobuf.DescriptorProto.ReservedRange.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof google.protobuf.DescriptorProto.ReservedRange
                     * @static
                     * @param {google.protobuf.DescriptorProto.IReservedRange} message ReservedRange message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    ReservedRange.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a ReservedRange message from the specified reader or buffer.
                     * @function decode
                     * @memberof google.protobuf.DescriptorProto.ReservedRange
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {google.protobuf.DescriptorProto.ReservedRange} ReservedRange
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    ReservedRange.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.DescriptorProto.ReservedRange();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.start = reader.int32();
                                break;
                            case 2:
                                message.end = reader.int32();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a ReservedRange message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof google.protobuf.DescriptorProto.ReservedRange
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {google.protobuf.DescriptorProto.ReservedRange} ReservedRange
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    ReservedRange.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a ReservedRange message.
                     * @function verify
                     * @memberof google.protobuf.DescriptorProto.ReservedRange
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    ReservedRange.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.start != null && message.hasOwnProperty("start"))
                            if (!$util.isInteger(message.start))
                                return "start: integer expected";
                        if (message.end != null && message.hasOwnProperty("end"))
                            if (!$util.isInteger(message.end))
                                return "end: integer expected";
                        return null;
                    };
    
                    /**
                     * Creates a ReservedRange message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof google.protobuf.DescriptorProto.ReservedRange
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {google.protobuf.DescriptorProto.ReservedRange} ReservedRange
                     */
                    ReservedRange.fromObject = function fromObject(object) {
                        if (object instanceof $root.google.protobuf.DescriptorProto.ReservedRange)
                            return object;
                        var message = new $root.google.protobuf.DescriptorProto.ReservedRange();
                        if (object.start != null)
                            message.start = object.start | 0;
                        if (object.end != null)
                            message.end = object.end | 0;
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a ReservedRange message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof google.protobuf.DescriptorProto.ReservedRange
                     * @static
                     * @param {google.protobuf.DescriptorProto.ReservedRange} message ReservedRange
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    ReservedRange.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults) {
                            object.start = 0;
                            object.end = 0;
                        }
                        if (message.start != null && message.hasOwnProperty("start"))
                            object.start = message.start;
                        if (message.end != null && message.hasOwnProperty("end"))
                            object.end = message.end;
                        return object;
                    };
    
                    /**
                     * Converts this ReservedRange to JSON.
                     * @function toJSON
                     * @memberof google.protobuf.DescriptorProto.ReservedRange
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    ReservedRange.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    return ReservedRange;
                })();
    
                return DescriptorProto;
            })();
    
            protobuf.ExtensionRangeOptions = (function() {
    
                /**
                 * Properties of an ExtensionRangeOptions.
                 * @memberof google.protobuf
                 * @interface IExtensionRangeOptions
                 * @property {Array.<google.protobuf.IUninterpretedOption>|null} [uninterpretedOption] ExtensionRangeOptions uninterpretedOption
                 */
    
                /**
                 * Constructs a new ExtensionRangeOptions.
                 * @memberof google.protobuf
                 * @classdesc Represents an ExtensionRangeOptions.
                 * @implements IExtensionRangeOptions
                 * @constructor
                 * @param {google.protobuf.IExtensionRangeOptions=} [properties] Properties to set
                 */
                function ExtensionRangeOptions(properties) {
                    this.uninterpretedOption = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * ExtensionRangeOptions uninterpretedOption.
                 * @member {Array.<google.protobuf.IUninterpretedOption>} uninterpretedOption
                 * @memberof google.protobuf.ExtensionRangeOptions
                 * @instance
                 */
                ExtensionRangeOptions.prototype.uninterpretedOption = $util.emptyArray;
    
                /**
                 * Creates a new ExtensionRangeOptions instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.ExtensionRangeOptions
                 * @static
                 * @param {google.protobuf.IExtensionRangeOptions=} [properties] Properties to set
                 * @returns {google.protobuf.ExtensionRangeOptions} ExtensionRangeOptions instance
                 */
                ExtensionRangeOptions.create = function create(properties) {
                    return new ExtensionRangeOptions(properties);
                };
    
                /**
                 * Encodes the specified ExtensionRangeOptions message. Does not implicitly {@link google.protobuf.ExtensionRangeOptions.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.ExtensionRangeOptions
                 * @static
                 * @param {google.protobuf.IExtensionRangeOptions} message ExtensionRangeOptions message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                ExtensionRangeOptions.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.uninterpretedOption != null && message.uninterpretedOption.length)
                        for (var i = 0; i < message.uninterpretedOption.length; ++i)
                            $root.google.protobuf.UninterpretedOption.encode(message.uninterpretedOption[i], writer.uint32(/* id 999, wireType 2 =*/7994).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified ExtensionRangeOptions message, length delimited. Does not implicitly {@link google.protobuf.ExtensionRangeOptions.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.ExtensionRangeOptions
                 * @static
                 * @param {google.protobuf.IExtensionRangeOptions} message ExtensionRangeOptions message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                ExtensionRangeOptions.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes an ExtensionRangeOptions message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.ExtensionRangeOptions
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.ExtensionRangeOptions} ExtensionRangeOptions
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                ExtensionRangeOptions.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.ExtensionRangeOptions();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 999:
                            if (!(message.uninterpretedOption && message.uninterpretedOption.length))
                                message.uninterpretedOption = [];
                            message.uninterpretedOption.push($root.google.protobuf.UninterpretedOption.decode(reader, reader.uint32()));
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes an ExtensionRangeOptions message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.ExtensionRangeOptions
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.ExtensionRangeOptions} ExtensionRangeOptions
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                ExtensionRangeOptions.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies an ExtensionRangeOptions message.
                 * @function verify
                 * @memberof google.protobuf.ExtensionRangeOptions
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                ExtensionRangeOptions.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.uninterpretedOption != null && message.hasOwnProperty("uninterpretedOption")) {
                        if (!Array.isArray(message.uninterpretedOption))
                            return "uninterpretedOption: array expected";
                        for (var i = 0; i < message.uninterpretedOption.length; ++i) {
                            var error = $root.google.protobuf.UninterpretedOption.verify(message.uninterpretedOption[i]);
                            if (error)
                                return "uninterpretedOption." + error;
                        }
                    }
                    return null;
                };
    
                /**
                 * Creates an ExtensionRangeOptions message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.ExtensionRangeOptions
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.ExtensionRangeOptions} ExtensionRangeOptions
                 */
                ExtensionRangeOptions.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.ExtensionRangeOptions)
                        return object;
                    var message = new $root.google.protobuf.ExtensionRangeOptions();
                    if (object.uninterpretedOption) {
                        if (!Array.isArray(object.uninterpretedOption))
                            throw TypeError(".google.protobuf.ExtensionRangeOptions.uninterpretedOption: array expected");
                        message.uninterpretedOption = [];
                        for (var i = 0; i < object.uninterpretedOption.length; ++i) {
                            if (typeof object.uninterpretedOption[i] !== "object")
                                throw TypeError(".google.protobuf.ExtensionRangeOptions.uninterpretedOption: object expected");
                            message.uninterpretedOption[i] = $root.google.protobuf.UninterpretedOption.fromObject(object.uninterpretedOption[i]);
                        }
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from an ExtensionRangeOptions message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.ExtensionRangeOptions
                 * @static
                 * @param {google.protobuf.ExtensionRangeOptions} message ExtensionRangeOptions
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                ExtensionRangeOptions.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.uninterpretedOption = [];
                    if (message.uninterpretedOption && message.uninterpretedOption.length) {
                        object.uninterpretedOption = [];
                        for (var j = 0; j < message.uninterpretedOption.length; ++j)
                            object.uninterpretedOption[j] = $root.google.protobuf.UninterpretedOption.toObject(message.uninterpretedOption[j], options);
                    }
                    return object;
                };
    
                /**
                 * Converts this ExtensionRangeOptions to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.ExtensionRangeOptions
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                ExtensionRangeOptions.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return ExtensionRangeOptions;
            })();
    
            protobuf.FieldDescriptorProto = (function() {
    
                /**
                 * Properties of a FieldDescriptorProto.
                 * @memberof google.protobuf
                 * @interface IFieldDescriptorProto
                 * @property {string|null} [name] FieldDescriptorProto name
                 * @property {number|null} [number] FieldDescriptorProto number
                 * @property {google.protobuf.FieldDescriptorProto.Label|null} [label] FieldDescriptorProto label
                 * @property {google.protobuf.FieldDescriptorProto.Type|null} [type] FieldDescriptorProto type
                 * @property {string|null} [typeName] FieldDescriptorProto typeName
                 * @property {string|null} [extendee] FieldDescriptorProto extendee
                 * @property {string|null} [defaultValue] FieldDescriptorProto defaultValue
                 * @property {number|null} [oneofIndex] FieldDescriptorProto oneofIndex
                 * @property {string|null} [jsonName] FieldDescriptorProto jsonName
                 * @property {google.protobuf.IFieldOptions|null} [options] FieldDescriptorProto options
                 * @property {boolean|null} [proto3Optional] FieldDescriptorProto proto3Optional
                 */
    
                /**
                 * Constructs a new FieldDescriptorProto.
                 * @memberof google.protobuf
                 * @classdesc Represents a FieldDescriptorProto.
                 * @implements IFieldDescriptorProto
                 * @constructor
                 * @param {google.protobuf.IFieldDescriptorProto=} [properties] Properties to set
                 */
                function FieldDescriptorProto(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * FieldDescriptorProto name.
                 * @member {string} name
                 * @memberof google.protobuf.FieldDescriptorProto
                 * @instance
                 */
                FieldDescriptorProto.prototype.name = "";
    
                /**
                 * FieldDescriptorProto number.
                 * @member {number} number
                 * @memberof google.protobuf.FieldDescriptorProto
                 * @instance
                 */
                FieldDescriptorProto.prototype.number = 0;
    
                /**
                 * FieldDescriptorProto label.
                 * @member {google.protobuf.FieldDescriptorProto.Label} label
                 * @memberof google.protobuf.FieldDescriptorProto
                 * @instance
                 */
                FieldDescriptorProto.prototype.label = 1;
    
                /**
                 * FieldDescriptorProto type.
                 * @member {google.protobuf.FieldDescriptorProto.Type} type
                 * @memberof google.protobuf.FieldDescriptorProto
                 * @instance
                 */
                FieldDescriptorProto.prototype.type = 1;
    
                /**
                 * FieldDescriptorProto typeName.
                 * @member {string} typeName
                 * @memberof google.protobuf.FieldDescriptorProto
                 * @instance
                 */
                FieldDescriptorProto.prototype.typeName = "";
    
                /**
                 * FieldDescriptorProto extendee.
                 * @member {string} extendee
                 * @memberof google.protobuf.FieldDescriptorProto
                 * @instance
                 */
                FieldDescriptorProto.prototype.extendee = "";
    
                /**
                 * FieldDescriptorProto defaultValue.
                 * @member {string} defaultValue
                 * @memberof google.protobuf.FieldDescriptorProto
                 * @instance
                 */
                FieldDescriptorProto.prototype.defaultValue = "";
    
                /**
                 * FieldDescriptorProto oneofIndex.
                 * @member {number} oneofIndex
                 * @memberof google.protobuf.FieldDescriptorProto
                 * @instance
                 */
                FieldDescriptorProto.prototype.oneofIndex = 0;
    
                /**
                 * FieldDescriptorProto jsonName.
                 * @member {string} jsonName
                 * @memberof google.protobuf.FieldDescriptorProto
                 * @instance
                 */
                FieldDescriptorProto.prototype.jsonName = "";
    
                /**
                 * FieldDescriptorProto options.
                 * @member {google.protobuf.IFieldOptions|null|undefined} options
                 * @memberof google.protobuf.FieldDescriptorProto
                 * @instance
                 */
                FieldDescriptorProto.prototype.options = null;
    
                /**
                 * FieldDescriptorProto proto3Optional.
                 * @member {boolean} proto3Optional
                 * @memberof google.protobuf.FieldDescriptorProto
                 * @instance
                 */
                FieldDescriptorProto.prototype.proto3Optional = false;
    
                /**
                 * Creates a new FieldDescriptorProto instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.FieldDescriptorProto
                 * @static
                 * @param {google.protobuf.IFieldDescriptorProto=} [properties] Properties to set
                 * @returns {google.protobuf.FieldDescriptorProto} FieldDescriptorProto instance
                 */
                FieldDescriptorProto.create = function create(properties) {
                    return new FieldDescriptorProto(properties);
                };
    
                /**
                 * Encodes the specified FieldDescriptorProto message. Does not implicitly {@link google.protobuf.FieldDescriptorProto.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.FieldDescriptorProto
                 * @static
                 * @param {google.protobuf.IFieldDescriptorProto} message FieldDescriptorProto message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                FieldDescriptorProto.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                    if (message.extendee != null && Object.hasOwnProperty.call(message, "extendee"))
                        writer.uint32(/* id 2, wireType 2 =*/18).string(message.extendee);
                    if (message.number != null && Object.hasOwnProperty.call(message, "number"))
                        writer.uint32(/* id 3, wireType 0 =*/24).int32(message.number);
                    if (message.label != null && Object.hasOwnProperty.call(message, "label"))
                        writer.uint32(/* id 4, wireType 0 =*/32).int32(message.label);
                    if (message.type != null && Object.hasOwnProperty.call(message, "type"))
                        writer.uint32(/* id 5, wireType 0 =*/40).int32(message.type);
                    if (message.typeName != null && Object.hasOwnProperty.call(message, "typeName"))
                        writer.uint32(/* id 6, wireType 2 =*/50).string(message.typeName);
                    if (message.defaultValue != null && Object.hasOwnProperty.call(message, "defaultValue"))
                        writer.uint32(/* id 7, wireType 2 =*/58).string(message.defaultValue);
                    if (message.options != null && Object.hasOwnProperty.call(message, "options"))
                        $root.google.protobuf.FieldOptions.encode(message.options, writer.uint32(/* id 8, wireType 2 =*/66).fork()).ldelim();
                    if (message.oneofIndex != null && Object.hasOwnProperty.call(message, "oneofIndex"))
                        writer.uint32(/* id 9, wireType 0 =*/72).int32(message.oneofIndex);
                    if (message.jsonName != null && Object.hasOwnProperty.call(message, "jsonName"))
                        writer.uint32(/* id 10, wireType 2 =*/82).string(message.jsonName);
                    if (message.proto3Optional != null && Object.hasOwnProperty.call(message, "proto3Optional"))
                        writer.uint32(/* id 17, wireType 0 =*/136).bool(message.proto3Optional);
                    return writer;
                };
    
                /**
                 * Encodes the specified FieldDescriptorProto message, length delimited. Does not implicitly {@link google.protobuf.FieldDescriptorProto.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.FieldDescriptorProto
                 * @static
                 * @param {google.protobuf.IFieldDescriptorProto} message FieldDescriptorProto message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                FieldDescriptorProto.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a FieldDescriptorProto message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.FieldDescriptorProto
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.FieldDescriptorProto} FieldDescriptorProto
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                FieldDescriptorProto.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.FieldDescriptorProto();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.name = reader.string();
                            break;
                        case 3:
                            message.number = reader.int32();
                            break;
                        case 4:
                            message.label = reader.int32();
                            break;
                        case 5:
                            message.type = reader.int32();
                            break;
                        case 6:
                            message.typeName = reader.string();
                            break;
                        case 2:
                            message.extendee = reader.string();
                            break;
                        case 7:
                            message.defaultValue = reader.string();
                            break;
                        case 9:
                            message.oneofIndex = reader.int32();
                            break;
                        case 10:
                            message.jsonName = reader.string();
                            break;
                        case 8:
                            message.options = $root.google.protobuf.FieldOptions.decode(reader, reader.uint32());
                            break;
                        case 17:
                            message.proto3Optional = reader.bool();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a FieldDescriptorProto message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.FieldDescriptorProto
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.FieldDescriptorProto} FieldDescriptorProto
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                FieldDescriptorProto.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a FieldDescriptorProto message.
                 * @function verify
                 * @memberof google.protobuf.FieldDescriptorProto
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                FieldDescriptorProto.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.name != null && message.hasOwnProperty("name"))
                        if (!$util.isString(message.name))
                            return "name: string expected";
                    if (message.number != null && message.hasOwnProperty("number"))
                        if (!$util.isInteger(message.number))
                            return "number: integer expected";
                    if (message.label != null && message.hasOwnProperty("label"))
                        switch (message.label) {
                        default:
                            return "label: enum value expected";
                        case 1:
                        case 2:
                        case 3:
                            break;
                        }
                    if (message.type != null && message.hasOwnProperty("type"))
                        switch (message.type) {
                        default:
                            return "type: enum value expected";
                        case 1:
                        case 2:
                        case 3:
                        case 4:
                        case 5:
                        case 6:
                        case 7:
                        case 8:
                        case 9:
                        case 10:
                        case 11:
                        case 12:
                        case 13:
                        case 14:
                        case 15:
                        case 16:
                        case 17:
                        case 18:
                            break;
                        }
                    if (message.typeName != null && message.hasOwnProperty("typeName"))
                        if (!$util.isString(message.typeName))
                            return "typeName: string expected";
                    if (message.extendee != null && message.hasOwnProperty("extendee"))
                        if (!$util.isString(message.extendee))
                            return "extendee: string expected";
                    if (message.defaultValue != null && message.hasOwnProperty("defaultValue"))
                        if (!$util.isString(message.defaultValue))
                            return "defaultValue: string expected";
                    if (message.oneofIndex != null && message.hasOwnProperty("oneofIndex"))
                        if (!$util.isInteger(message.oneofIndex))
                            return "oneofIndex: integer expected";
                    if (message.jsonName != null && message.hasOwnProperty("jsonName"))
                        if (!$util.isString(message.jsonName))
                            return "jsonName: string expected";
                    if (message.options != null && message.hasOwnProperty("options")) {
                        var error = $root.google.protobuf.FieldOptions.verify(message.options);
                        if (error)
                            return "options." + error;
                    }
                    if (message.proto3Optional != null && message.hasOwnProperty("proto3Optional"))
                        if (typeof message.proto3Optional !== "boolean")
                            return "proto3Optional: boolean expected";
                    return null;
                };
    
                /**
                 * Creates a FieldDescriptorProto message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.FieldDescriptorProto
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.FieldDescriptorProto} FieldDescriptorProto
                 */
                FieldDescriptorProto.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.FieldDescriptorProto)
                        return object;
                    var message = new $root.google.protobuf.FieldDescriptorProto();
                    if (object.name != null)
                        message.name = String(object.name);
                    if (object.number != null)
                        message.number = object.number | 0;
                    switch (object.label) {
                    case "LABEL_OPTIONAL":
                    case 1:
                        message.label = 1;
                        break;
                    case "LABEL_REQUIRED":
                    case 2:
                        message.label = 2;
                        break;
                    case "LABEL_REPEATED":
                    case 3:
                        message.label = 3;
                        break;
                    }
                    switch (object.type) {
                    case "TYPE_DOUBLE":
                    case 1:
                        message.type = 1;
                        break;
                    case "TYPE_FLOAT":
                    case 2:
                        message.type = 2;
                        break;
                    case "TYPE_INT64":
                    case 3:
                        message.type = 3;
                        break;
                    case "TYPE_UINT64":
                    case 4:
                        message.type = 4;
                        break;
                    case "TYPE_INT32":
                    case 5:
                        message.type = 5;
                        break;
                    case "TYPE_FIXED64":
                    case 6:
                        message.type = 6;
                        break;
                    case "TYPE_FIXED32":
                    case 7:
                        message.type = 7;
                        break;
                    case "TYPE_BOOL":
                    case 8:
                        message.type = 8;
                        break;
                    case "TYPE_STRING":
                    case 9:
                        message.type = 9;
                        break;
                    case "TYPE_GROUP":
                    case 10:
                        message.type = 10;
                        break;
                    case "TYPE_MESSAGE":
                    case 11:
                        message.type = 11;
                        break;
                    case "TYPE_BYTES":
                    case 12:
                        message.type = 12;
                        break;
                    case "TYPE_UINT32":
                    case 13:
                        message.type = 13;
                        break;
                    case "TYPE_ENUM":
                    case 14:
                        message.type = 14;
                        break;
                    case "TYPE_SFIXED32":
                    case 15:
                        message.type = 15;
                        break;
                    case "TYPE_SFIXED64":
                    case 16:
                        message.type = 16;
                        break;
                    case "TYPE_SINT32":
                    case 17:
                        message.type = 17;
                        break;
                    case "TYPE_SINT64":
                    case 18:
                        message.type = 18;
                        break;
                    }
                    if (object.typeName != null)
                        message.typeName = String(object.typeName);
                    if (object.extendee != null)
                        message.extendee = String(object.extendee);
                    if (object.defaultValue != null)
                        message.defaultValue = String(object.defaultValue);
                    if (object.oneofIndex != null)
                        message.oneofIndex = object.oneofIndex | 0;
                    if (object.jsonName != null)
                        message.jsonName = String(object.jsonName);
                    if (object.options != null) {
                        if (typeof object.options !== "object")
                            throw TypeError(".google.protobuf.FieldDescriptorProto.options: object expected");
                        message.options = $root.google.protobuf.FieldOptions.fromObject(object.options);
                    }
                    if (object.proto3Optional != null)
                        message.proto3Optional = Boolean(object.proto3Optional);
                    return message;
                };
    
                /**
                 * Creates a plain object from a FieldDescriptorProto message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.FieldDescriptorProto
                 * @static
                 * @param {google.protobuf.FieldDescriptorProto} message FieldDescriptorProto
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                FieldDescriptorProto.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults) {
                        object.name = "";
                        object.extendee = "";
                        object.number = 0;
                        object.label = options.enums === String ? "LABEL_OPTIONAL" : 1;
                        object.type = options.enums === String ? "TYPE_DOUBLE" : 1;
                        object.typeName = "";
                        object.defaultValue = "";
                        object.options = null;
                        object.oneofIndex = 0;
                        object.jsonName = "";
                        object.proto3Optional = false;
                    }
                    if (message.name != null && message.hasOwnProperty("name"))
                        object.name = message.name;
                    if (message.extendee != null && message.hasOwnProperty("extendee"))
                        object.extendee = message.extendee;
                    if (message.number != null && message.hasOwnProperty("number"))
                        object.number = message.number;
                    if (message.label != null && message.hasOwnProperty("label"))
                        object.label = options.enums === String ? $root.google.protobuf.FieldDescriptorProto.Label[message.label] : message.label;
                    if (message.type != null && message.hasOwnProperty("type"))
                        object.type = options.enums === String ? $root.google.protobuf.FieldDescriptorProto.Type[message.type] : message.type;
                    if (message.typeName != null && message.hasOwnProperty("typeName"))
                        object.typeName = message.typeName;
                    if (message.defaultValue != null && message.hasOwnProperty("defaultValue"))
                        object.defaultValue = message.defaultValue;
                    if (message.options != null && message.hasOwnProperty("options"))
                        object.options = $root.google.protobuf.FieldOptions.toObject(message.options, options);
                    if (message.oneofIndex != null && message.hasOwnProperty("oneofIndex"))
                        object.oneofIndex = message.oneofIndex;
                    if (message.jsonName != null && message.hasOwnProperty("jsonName"))
                        object.jsonName = message.jsonName;
                    if (message.proto3Optional != null && message.hasOwnProperty("proto3Optional"))
                        object.proto3Optional = message.proto3Optional;
                    return object;
                };
    
                /**
                 * Converts this FieldDescriptorProto to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.FieldDescriptorProto
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                FieldDescriptorProto.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * Type enum.
                 * @name google.protobuf.FieldDescriptorProto.Type
                 * @enum {number}
                 * @property {number} TYPE_DOUBLE=1 TYPE_DOUBLE value
                 * @property {number} TYPE_FLOAT=2 TYPE_FLOAT value
                 * @property {number} TYPE_INT64=3 TYPE_INT64 value
                 * @property {number} TYPE_UINT64=4 TYPE_UINT64 value
                 * @property {number} TYPE_INT32=5 TYPE_INT32 value
                 * @property {number} TYPE_FIXED64=6 TYPE_FIXED64 value
                 * @property {number} TYPE_FIXED32=7 TYPE_FIXED32 value
                 * @property {number} TYPE_BOOL=8 TYPE_BOOL value
                 * @property {number} TYPE_STRING=9 TYPE_STRING value
                 * @property {number} TYPE_GROUP=10 TYPE_GROUP value
                 * @property {number} TYPE_MESSAGE=11 TYPE_MESSAGE value
                 * @property {number} TYPE_BYTES=12 TYPE_BYTES value
                 * @property {number} TYPE_UINT32=13 TYPE_UINT32 value
                 * @property {number} TYPE_ENUM=14 TYPE_ENUM value
                 * @property {number} TYPE_SFIXED32=15 TYPE_SFIXED32 value
                 * @property {number} TYPE_SFIXED64=16 TYPE_SFIXED64 value
                 * @property {number} TYPE_SINT32=17 TYPE_SINT32 value
                 * @property {number} TYPE_SINT64=18 TYPE_SINT64 value
                 */
                FieldDescriptorProto.Type = (function() {
                    var valuesById = {}, values = Object.create(valuesById);
                    values[valuesById[1] = "TYPE_DOUBLE"] = 1;
                    values[valuesById[2] = "TYPE_FLOAT"] = 2;
                    values[valuesById[3] = "TYPE_INT64"] = 3;
                    values[valuesById[4] = "TYPE_UINT64"] = 4;
                    values[valuesById[5] = "TYPE_INT32"] = 5;
                    values[valuesById[6] = "TYPE_FIXED64"] = 6;
                    values[valuesById[7] = "TYPE_FIXED32"] = 7;
                    values[valuesById[8] = "TYPE_BOOL"] = 8;
                    values[valuesById[9] = "TYPE_STRING"] = 9;
                    values[valuesById[10] = "TYPE_GROUP"] = 10;
                    values[valuesById[11] = "TYPE_MESSAGE"] = 11;
                    values[valuesById[12] = "TYPE_BYTES"] = 12;
                    values[valuesById[13] = "TYPE_UINT32"] = 13;
                    values[valuesById[14] = "TYPE_ENUM"] = 14;
                    values[valuesById[15] = "TYPE_SFIXED32"] = 15;
                    values[valuesById[16] = "TYPE_SFIXED64"] = 16;
                    values[valuesById[17] = "TYPE_SINT32"] = 17;
                    values[valuesById[18] = "TYPE_SINT64"] = 18;
                    return values;
                })();
    
                /**
                 * Label enum.
                 * @name google.protobuf.FieldDescriptorProto.Label
                 * @enum {number}
                 * @property {number} LABEL_OPTIONAL=1 LABEL_OPTIONAL value
                 * @property {number} LABEL_REQUIRED=2 LABEL_REQUIRED value
                 * @property {number} LABEL_REPEATED=3 LABEL_REPEATED value
                 */
                FieldDescriptorProto.Label = (function() {
                    var valuesById = {}, values = Object.create(valuesById);
                    values[valuesById[1] = "LABEL_OPTIONAL"] = 1;
                    values[valuesById[2] = "LABEL_REQUIRED"] = 2;
                    values[valuesById[3] = "LABEL_REPEATED"] = 3;
                    return values;
                })();
    
                return FieldDescriptorProto;
            })();
    
            protobuf.OneofDescriptorProto = (function() {
    
                /**
                 * Properties of an OneofDescriptorProto.
                 * @memberof google.protobuf
                 * @interface IOneofDescriptorProto
                 * @property {string|null} [name] OneofDescriptorProto name
                 * @property {google.protobuf.IOneofOptions|null} [options] OneofDescriptorProto options
                 */
    
                /**
                 * Constructs a new OneofDescriptorProto.
                 * @memberof google.protobuf
                 * @classdesc Represents an OneofDescriptorProto.
                 * @implements IOneofDescriptorProto
                 * @constructor
                 * @param {google.protobuf.IOneofDescriptorProto=} [properties] Properties to set
                 */
                function OneofDescriptorProto(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * OneofDescriptorProto name.
                 * @member {string} name
                 * @memberof google.protobuf.OneofDescriptorProto
                 * @instance
                 */
                OneofDescriptorProto.prototype.name = "";
    
                /**
                 * OneofDescriptorProto options.
                 * @member {google.protobuf.IOneofOptions|null|undefined} options
                 * @memberof google.protobuf.OneofDescriptorProto
                 * @instance
                 */
                OneofDescriptorProto.prototype.options = null;
    
                /**
                 * Creates a new OneofDescriptorProto instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.OneofDescriptorProto
                 * @static
                 * @param {google.protobuf.IOneofDescriptorProto=} [properties] Properties to set
                 * @returns {google.protobuf.OneofDescriptorProto} OneofDescriptorProto instance
                 */
                OneofDescriptorProto.create = function create(properties) {
                    return new OneofDescriptorProto(properties);
                };
    
                /**
                 * Encodes the specified OneofDescriptorProto message. Does not implicitly {@link google.protobuf.OneofDescriptorProto.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.OneofDescriptorProto
                 * @static
                 * @param {google.protobuf.IOneofDescriptorProto} message OneofDescriptorProto message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                OneofDescriptorProto.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                    if (message.options != null && Object.hasOwnProperty.call(message, "options"))
                        $root.google.protobuf.OneofOptions.encode(message.options, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified OneofDescriptorProto message, length delimited. Does not implicitly {@link google.protobuf.OneofDescriptorProto.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.OneofDescriptorProto
                 * @static
                 * @param {google.protobuf.IOneofDescriptorProto} message OneofDescriptorProto message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                OneofDescriptorProto.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes an OneofDescriptorProto message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.OneofDescriptorProto
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.OneofDescriptorProto} OneofDescriptorProto
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                OneofDescriptorProto.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.OneofDescriptorProto();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.name = reader.string();
                            break;
                        case 2:
                            message.options = $root.google.protobuf.OneofOptions.decode(reader, reader.uint32());
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes an OneofDescriptorProto message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.OneofDescriptorProto
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.OneofDescriptorProto} OneofDescriptorProto
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                OneofDescriptorProto.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies an OneofDescriptorProto message.
                 * @function verify
                 * @memberof google.protobuf.OneofDescriptorProto
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                OneofDescriptorProto.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.name != null && message.hasOwnProperty("name"))
                        if (!$util.isString(message.name))
                            return "name: string expected";
                    if (message.options != null && message.hasOwnProperty("options")) {
                        var error = $root.google.protobuf.OneofOptions.verify(message.options);
                        if (error)
                            return "options." + error;
                    }
                    return null;
                };
    
                /**
                 * Creates an OneofDescriptorProto message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.OneofDescriptorProto
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.OneofDescriptorProto} OneofDescriptorProto
                 */
                OneofDescriptorProto.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.OneofDescriptorProto)
                        return object;
                    var message = new $root.google.protobuf.OneofDescriptorProto();
                    if (object.name != null)
                        message.name = String(object.name);
                    if (object.options != null) {
                        if (typeof object.options !== "object")
                            throw TypeError(".google.protobuf.OneofDescriptorProto.options: object expected");
                        message.options = $root.google.protobuf.OneofOptions.fromObject(object.options);
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from an OneofDescriptorProto message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.OneofDescriptorProto
                 * @static
                 * @param {google.protobuf.OneofDescriptorProto} message OneofDescriptorProto
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                OneofDescriptorProto.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults) {
                        object.name = "";
                        object.options = null;
                    }
                    if (message.name != null && message.hasOwnProperty("name"))
                        object.name = message.name;
                    if (message.options != null && message.hasOwnProperty("options"))
                        object.options = $root.google.protobuf.OneofOptions.toObject(message.options, options);
                    return object;
                };
    
                /**
                 * Converts this OneofDescriptorProto to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.OneofDescriptorProto
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                OneofDescriptorProto.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return OneofDescriptorProto;
            })();
    
            protobuf.EnumDescriptorProto = (function() {
    
                /**
                 * Properties of an EnumDescriptorProto.
                 * @memberof google.protobuf
                 * @interface IEnumDescriptorProto
                 * @property {string|null} [name] EnumDescriptorProto name
                 * @property {Array.<google.protobuf.IEnumValueDescriptorProto>|null} [value] EnumDescriptorProto value
                 * @property {google.protobuf.IEnumOptions|null} [options] EnumDescriptorProto options
                 * @property {Array.<google.protobuf.EnumDescriptorProto.IEnumReservedRange>|null} [reservedRange] EnumDescriptorProto reservedRange
                 * @property {Array.<string>|null} [reservedName] EnumDescriptorProto reservedName
                 */
    
                /**
                 * Constructs a new EnumDescriptorProto.
                 * @memberof google.protobuf
                 * @classdesc Represents an EnumDescriptorProto.
                 * @implements IEnumDescriptorProto
                 * @constructor
                 * @param {google.protobuf.IEnumDescriptorProto=} [properties] Properties to set
                 */
                function EnumDescriptorProto(properties) {
                    this.value = [];
                    this.reservedRange = [];
                    this.reservedName = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * EnumDescriptorProto name.
                 * @member {string} name
                 * @memberof google.protobuf.EnumDescriptorProto
                 * @instance
                 */
                EnumDescriptorProto.prototype.name = "";
    
                /**
                 * EnumDescriptorProto value.
                 * @member {Array.<google.protobuf.IEnumValueDescriptorProto>} value
                 * @memberof google.protobuf.EnumDescriptorProto
                 * @instance
                 */
                EnumDescriptorProto.prototype.value = $util.emptyArray;
    
                /**
                 * EnumDescriptorProto options.
                 * @member {google.protobuf.IEnumOptions|null|undefined} options
                 * @memberof google.protobuf.EnumDescriptorProto
                 * @instance
                 */
                EnumDescriptorProto.prototype.options = null;
    
                /**
                 * EnumDescriptorProto reservedRange.
                 * @member {Array.<google.protobuf.EnumDescriptorProto.IEnumReservedRange>} reservedRange
                 * @memberof google.protobuf.EnumDescriptorProto
                 * @instance
                 */
                EnumDescriptorProto.prototype.reservedRange = $util.emptyArray;
    
                /**
                 * EnumDescriptorProto reservedName.
                 * @member {Array.<string>} reservedName
                 * @memberof google.protobuf.EnumDescriptorProto
                 * @instance
                 */
                EnumDescriptorProto.prototype.reservedName = $util.emptyArray;
    
                /**
                 * Creates a new EnumDescriptorProto instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.EnumDescriptorProto
                 * @static
                 * @param {google.protobuf.IEnumDescriptorProto=} [properties] Properties to set
                 * @returns {google.protobuf.EnumDescriptorProto} EnumDescriptorProto instance
                 */
                EnumDescriptorProto.create = function create(properties) {
                    return new EnumDescriptorProto(properties);
                };
    
                /**
                 * Encodes the specified EnumDescriptorProto message. Does not implicitly {@link google.protobuf.EnumDescriptorProto.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.EnumDescriptorProto
                 * @static
                 * @param {google.protobuf.IEnumDescriptorProto} message EnumDescriptorProto message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                EnumDescriptorProto.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                    if (message.value != null && message.value.length)
                        for (var i = 0; i < message.value.length; ++i)
                            $root.google.protobuf.EnumValueDescriptorProto.encode(message.value[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                    if (message.options != null && Object.hasOwnProperty.call(message, "options"))
                        $root.google.protobuf.EnumOptions.encode(message.options, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                    if (message.reservedRange != null && message.reservedRange.length)
                        for (var i = 0; i < message.reservedRange.length; ++i)
                            $root.google.protobuf.EnumDescriptorProto.EnumReservedRange.encode(message.reservedRange[i], writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                    if (message.reservedName != null && message.reservedName.length)
                        for (var i = 0; i < message.reservedName.length; ++i)
                            writer.uint32(/* id 5, wireType 2 =*/42).string(message.reservedName[i]);
                    return writer;
                };
    
                /**
                 * Encodes the specified EnumDescriptorProto message, length delimited. Does not implicitly {@link google.protobuf.EnumDescriptorProto.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.EnumDescriptorProto
                 * @static
                 * @param {google.protobuf.IEnumDescriptorProto} message EnumDescriptorProto message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                EnumDescriptorProto.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes an EnumDescriptorProto message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.EnumDescriptorProto
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.EnumDescriptorProto} EnumDescriptorProto
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                EnumDescriptorProto.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.EnumDescriptorProto();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.name = reader.string();
                            break;
                        case 2:
                            if (!(message.value && message.value.length))
                                message.value = [];
                            message.value.push($root.google.protobuf.EnumValueDescriptorProto.decode(reader, reader.uint32()));
                            break;
                        case 3:
                            message.options = $root.google.protobuf.EnumOptions.decode(reader, reader.uint32());
                            break;
                        case 4:
                            if (!(message.reservedRange && message.reservedRange.length))
                                message.reservedRange = [];
                            message.reservedRange.push($root.google.protobuf.EnumDescriptorProto.EnumReservedRange.decode(reader, reader.uint32()));
                            break;
                        case 5:
                            if (!(message.reservedName && message.reservedName.length))
                                message.reservedName = [];
                            message.reservedName.push(reader.string());
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes an EnumDescriptorProto message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.EnumDescriptorProto
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.EnumDescriptorProto} EnumDescriptorProto
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                EnumDescriptorProto.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies an EnumDescriptorProto message.
                 * @function verify
                 * @memberof google.protobuf.EnumDescriptorProto
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                EnumDescriptorProto.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.name != null && message.hasOwnProperty("name"))
                        if (!$util.isString(message.name))
                            return "name: string expected";
                    if (message.value != null && message.hasOwnProperty("value")) {
                        if (!Array.isArray(message.value))
                            return "value: array expected";
                        for (var i = 0; i < message.value.length; ++i) {
                            var error = $root.google.protobuf.EnumValueDescriptorProto.verify(message.value[i]);
                            if (error)
                                return "value." + error;
                        }
                    }
                    if (message.options != null && message.hasOwnProperty("options")) {
                        var error = $root.google.protobuf.EnumOptions.verify(message.options);
                        if (error)
                            return "options." + error;
                    }
                    if (message.reservedRange != null && message.hasOwnProperty("reservedRange")) {
                        if (!Array.isArray(message.reservedRange))
                            return "reservedRange: array expected";
                        for (var i = 0; i < message.reservedRange.length; ++i) {
                            var error = $root.google.protobuf.EnumDescriptorProto.EnumReservedRange.verify(message.reservedRange[i]);
                            if (error)
                                return "reservedRange." + error;
                        }
                    }
                    if (message.reservedName != null && message.hasOwnProperty("reservedName")) {
                        if (!Array.isArray(message.reservedName))
                            return "reservedName: array expected";
                        for (var i = 0; i < message.reservedName.length; ++i)
                            if (!$util.isString(message.reservedName[i]))
                                return "reservedName: string[] expected";
                    }
                    return null;
                };
    
                /**
                 * Creates an EnumDescriptorProto message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.EnumDescriptorProto
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.EnumDescriptorProto} EnumDescriptorProto
                 */
                EnumDescriptorProto.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.EnumDescriptorProto)
                        return object;
                    var message = new $root.google.protobuf.EnumDescriptorProto();
                    if (object.name != null)
                        message.name = String(object.name);
                    if (object.value) {
                        if (!Array.isArray(object.value))
                            throw TypeError(".google.protobuf.EnumDescriptorProto.value: array expected");
                        message.value = [];
                        for (var i = 0; i < object.value.length; ++i) {
                            if (typeof object.value[i] !== "object")
                                throw TypeError(".google.protobuf.EnumDescriptorProto.value: object expected");
                            message.value[i] = $root.google.protobuf.EnumValueDescriptorProto.fromObject(object.value[i]);
                        }
                    }
                    if (object.options != null) {
                        if (typeof object.options !== "object")
                            throw TypeError(".google.protobuf.EnumDescriptorProto.options: object expected");
                        message.options = $root.google.protobuf.EnumOptions.fromObject(object.options);
                    }
                    if (object.reservedRange) {
                        if (!Array.isArray(object.reservedRange))
                            throw TypeError(".google.protobuf.EnumDescriptorProto.reservedRange: array expected");
                        message.reservedRange = [];
                        for (var i = 0; i < object.reservedRange.length; ++i) {
                            if (typeof object.reservedRange[i] !== "object")
                                throw TypeError(".google.protobuf.EnumDescriptorProto.reservedRange: object expected");
                            message.reservedRange[i] = $root.google.protobuf.EnumDescriptorProto.EnumReservedRange.fromObject(object.reservedRange[i]);
                        }
                    }
                    if (object.reservedName) {
                        if (!Array.isArray(object.reservedName))
                            throw TypeError(".google.protobuf.EnumDescriptorProto.reservedName: array expected");
                        message.reservedName = [];
                        for (var i = 0; i < object.reservedName.length; ++i)
                            message.reservedName[i] = String(object.reservedName[i]);
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from an EnumDescriptorProto message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.EnumDescriptorProto
                 * @static
                 * @param {google.protobuf.EnumDescriptorProto} message EnumDescriptorProto
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                EnumDescriptorProto.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults) {
                        object.value = [];
                        object.reservedRange = [];
                        object.reservedName = [];
                    }
                    if (options.defaults) {
                        object.name = "";
                        object.options = null;
                    }
                    if (message.name != null && message.hasOwnProperty("name"))
                        object.name = message.name;
                    if (message.value && message.value.length) {
                        object.value = [];
                        for (var j = 0; j < message.value.length; ++j)
                            object.value[j] = $root.google.protobuf.EnumValueDescriptorProto.toObject(message.value[j], options);
                    }
                    if (message.options != null && message.hasOwnProperty("options"))
                        object.options = $root.google.protobuf.EnumOptions.toObject(message.options, options);
                    if (message.reservedRange && message.reservedRange.length) {
                        object.reservedRange = [];
                        for (var j = 0; j < message.reservedRange.length; ++j)
                            object.reservedRange[j] = $root.google.protobuf.EnumDescriptorProto.EnumReservedRange.toObject(message.reservedRange[j], options);
                    }
                    if (message.reservedName && message.reservedName.length) {
                        object.reservedName = [];
                        for (var j = 0; j < message.reservedName.length; ++j)
                            object.reservedName[j] = message.reservedName[j];
                    }
                    return object;
                };
    
                /**
                 * Converts this EnumDescriptorProto to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.EnumDescriptorProto
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                EnumDescriptorProto.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                EnumDescriptorProto.EnumReservedRange = (function() {
    
                    /**
                     * Properties of an EnumReservedRange.
                     * @memberof google.protobuf.EnumDescriptorProto
                     * @interface IEnumReservedRange
                     * @property {number|null} [start] EnumReservedRange start
                     * @property {number|null} [end] EnumReservedRange end
                     */
    
                    /**
                     * Constructs a new EnumReservedRange.
                     * @memberof google.protobuf.EnumDescriptorProto
                     * @classdesc Represents an EnumReservedRange.
                     * @implements IEnumReservedRange
                     * @constructor
                     * @param {google.protobuf.EnumDescriptorProto.IEnumReservedRange=} [properties] Properties to set
                     */
                    function EnumReservedRange(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * EnumReservedRange start.
                     * @member {number} start
                     * @memberof google.protobuf.EnumDescriptorProto.EnumReservedRange
                     * @instance
                     */
                    EnumReservedRange.prototype.start = 0;
    
                    /**
                     * EnumReservedRange end.
                     * @member {number} end
                     * @memberof google.protobuf.EnumDescriptorProto.EnumReservedRange
                     * @instance
                     */
                    EnumReservedRange.prototype.end = 0;
    
                    /**
                     * Creates a new EnumReservedRange instance using the specified properties.
                     * @function create
                     * @memberof google.protobuf.EnumDescriptorProto.EnumReservedRange
                     * @static
                     * @param {google.protobuf.EnumDescriptorProto.IEnumReservedRange=} [properties] Properties to set
                     * @returns {google.protobuf.EnumDescriptorProto.EnumReservedRange} EnumReservedRange instance
                     */
                    EnumReservedRange.create = function create(properties) {
                        return new EnumReservedRange(properties);
                    };
    
                    /**
                     * Encodes the specified EnumReservedRange message. Does not implicitly {@link google.protobuf.EnumDescriptorProto.EnumReservedRange.verify|verify} messages.
                     * @function encode
                     * @memberof google.protobuf.EnumDescriptorProto.EnumReservedRange
                     * @static
                     * @param {google.protobuf.EnumDescriptorProto.IEnumReservedRange} message EnumReservedRange message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    EnumReservedRange.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.start != null && Object.hasOwnProperty.call(message, "start"))
                            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.start);
                        if (message.end != null && Object.hasOwnProperty.call(message, "end"))
                            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.end);
                        return writer;
                    };
    
                    /**
                     * Encodes the specified EnumReservedRange message, length delimited. Does not implicitly {@link google.protobuf.EnumDescriptorProto.EnumReservedRange.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof google.protobuf.EnumDescriptorProto.EnumReservedRange
                     * @static
                     * @param {google.protobuf.EnumDescriptorProto.IEnumReservedRange} message EnumReservedRange message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    EnumReservedRange.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes an EnumReservedRange message from the specified reader or buffer.
                     * @function decode
                     * @memberof google.protobuf.EnumDescriptorProto.EnumReservedRange
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {google.protobuf.EnumDescriptorProto.EnumReservedRange} EnumReservedRange
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    EnumReservedRange.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.EnumDescriptorProto.EnumReservedRange();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.start = reader.int32();
                                break;
                            case 2:
                                message.end = reader.int32();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes an EnumReservedRange message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof google.protobuf.EnumDescriptorProto.EnumReservedRange
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {google.protobuf.EnumDescriptorProto.EnumReservedRange} EnumReservedRange
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    EnumReservedRange.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies an EnumReservedRange message.
                     * @function verify
                     * @memberof google.protobuf.EnumDescriptorProto.EnumReservedRange
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    EnumReservedRange.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.start != null && message.hasOwnProperty("start"))
                            if (!$util.isInteger(message.start))
                                return "start: integer expected";
                        if (message.end != null && message.hasOwnProperty("end"))
                            if (!$util.isInteger(message.end))
                                return "end: integer expected";
                        return null;
                    };
    
                    /**
                     * Creates an EnumReservedRange message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof google.protobuf.EnumDescriptorProto.EnumReservedRange
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {google.protobuf.EnumDescriptorProto.EnumReservedRange} EnumReservedRange
                     */
                    EnumReservedRange.fromObject = function fromObject(object) {
                        if (object instanceof $root.google.protobuf.EnumDescriptorProto.EnumReservedRange)
                            return object;
                        var message = new $root.google.protobuf.EnumDescriptorProto.EnumReservedRange();
                        if (object.start != null)
                            message.start = object.start | 0;
                        if (object.end != null)
                            message.end = object.end | 0;
                        return message;
                    };
    
                    /**
                     * Creates a plain object from an EnumReservedRange message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof google.protobuf.EnumDescriptorProto.EnumReservedRange
                     * @static
                     * @param {google.protobuf.EnumDescriptorProto.EnumReservedRange} message EnumReservedRange
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    EnumReservedRange.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults) {
                            object.start = 0;
                            object.end = 0;
                        }
                        if (message.start != null && message.hasOwnProperty("start"))
                            object.start = message.start;
                        if (message.end != null && message.hasOwnProperty("end"))
                            object.end = message.end;
                        return object;
                    };
    
                    /**
                     * Converts this EnumReservedRange to JSON.
                     * @function toJSON
                     * @memberof google.protobuf.EnumDescriptorProto.EnumReservedRange
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    EnumReservedRange.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    return EnumReservedRange;
                })();
    
                return EnumDescriptorProto;
            })();
    
            protobuf.EnumValueDescriptorProto = (function() {
    
                /**
                 * Properties of an EnumValueDescriptorProto.
                 * @memberof google.protobuf
                 * @interface IEnumValueDescriptorProto
                 * @property {string|null} [name] EnumValueDescriptorProto name
                 * @property {number|null} [number] EnumValueDescriptorProto number
                 * @property {google.protobuf.IEnumValueOptions|null} [options] EnumValueDescriptorProto options
                 */
    
                /**
                 * Constructs a new EnumValueDescriptorProto.
                 * @memberof google.protobuf
                 * @classdesc Represents an EnumValueDescriptorProto.
                 * @implements IEnumValueDescriptorProto
                 * @constructor
                 * @param {google.protobuf.IEnumValueDescriptorProto=} [properties] Properties to set
                 */
                function EnumValueDescriptorProto(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * EnumValueDescriptorProto name.
                 * @member {string} name
                 * @memberof google.protobuf.EnumValueDescriptorProto
                 * @instance
                 */
                EnumValueDescriptorProto.prototype.name = "";
    
                /**
                 * EnumValueDescriptorProto number.
                 * @member {number} number
                 * @memberof google.protobuf.EnumValueDescriptorProto
                 * @instance
                 */
                EnumValueDescriptorProto.prototype.number = 0;
    
                /**
                 * EnumValueDescriptorProto options.
                 * @member {google.protobuf.IEnumValueOptions|null|undefined} options
                 * @memberof google.protobuf.EnumValueDescriptorProto
                 * @instance
                 */
                EnumValueDescriptorProto.prototype.options = null;
    
                /**
                 * Creates a new EnumValueDescriptorProto instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.EnumValueDescriptorProto
                 * @static
                 * @param {google.protobuf.IEnumValueDescriptorProto=} [properties] Properties to set
                 * @returns {google.protobuf.EnumValueDescriptorProto} EnumValueDescriptorProto instance
                 */
                EnumValueDescriptorProto.create = function create(properties) {
                    return new EnumValueDescriptorProto(properties);
                };
    
                /**
                 * Encodes the specified EnumValueDescriptorProto message. Does not implicitly {@link google.protobuf.EnumValueDescriptorProto.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.EnumValueDescriptorProto
                 * @static
                 * @param {google.protobuf.IEnumValueDescriptorProto} message EnumValueDescriptorProto message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                EnumValueDescriptorProto.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                    if (message.number != null && Object.hasOwnProperty.call(message, "number"))
                        writer.uint32(/* id 2, wireType 0 =*/16).int32(message.number);
                    if (message.options != null && Object.hasOwnProperty.call(message, "options"))
                        $root.google.protobuf.EnumValueOptions.encode(message.options, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified EnumValueDescriptorProto message, length delimited. Does not implicitly {@link google.protobuf.EnumValueDescriptorProto.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.EnumValueDescriptorProto
                 * @static
                 * @param {google.protobuf.IEnumValueDescriptorProto} message EnumValueDescriptorProto message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                EnumValueDescriptorProto.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes an EnumValueDescriptorProto message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.EnumValueDescriptorProto
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.EnumValueDescriptorProto} EnumValueDescriptorProto
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                EnumValueDescriptorProto.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.EnumValueDescriptorProto();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.name = reader.string();
                            break;
                        case 2:
                            message.number = reader.int32();
                            break;
                        case 3:
                            message.options = $root.google.protobuf.EnumValueOptions.decode(reader, reader.uint32());
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes an EnumValueDescriptorProto message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.EnumValueDescriptorProto
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.EnumValueDescriptorProto} EnumValueDescriptorProto
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                EnumValueDescriptorProto.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies an EnumValueDescriptorProto message.
                 * @function verify
                 * @memberof google.protobuf.EnumValueDescriptorProto
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                EnumValueDescriptorProto.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.name != null && message.hasOwnProperty("name"))
                        if (!$util.isString(message.name))
                            return "name: string expected";
                    if (message.number != null && message.hasOwnProperty("number"))
                        if (!$util.isInteger(message.number))
                            return "number: integer expected";
                    if (message.options != null && message.hasOwnProperty("options")) {
                        var error = $root.google.protobuf.EnumValueOptions.verify(message.options);
                        if (error)
                            return "options." + error;
                    }
                    return null;
                };
    
                /**
                 * Creates an EnumValueDescriptorProto message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.EnumValueDescriptorProto
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.EnumValueDescriptorProto} EnumValueDescriptorProto
                 */
                EnumValueDescriptorProto.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.EnumValueDescriptorProto)
                        return object;
                    var message = new $root.google.protobuf.EnumValueDescriptorProto();
                    if (object.name != null)
                        message.name = String(object.name);
                    if (object.number != null)
                        message.number = object.number | 0;
                    if (object.options != null) {
                        if (typeof object.options !== "object")
                            throw TypeError(".google.protobuf.EnumValueDescriptorProto.options: object expected");
                        message.options = $root.google.protobuf.EnumValueOptions.fromObject(object.options);
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from an EnumValueDescriptorProto message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.EnumValueDescriptorProto
                 * @static
                 * @param {google.protobuf.EnumValueDescriptorProto} message EnumValueDescriptorProto
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                EnumValueDescriptorProto.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults) {
                        object.name = "";
                        object.number = 0;
                        object.options = null;
                    }
                    if (message.name != null && message.hasOwnProperty("name"))
                        object.name = message.name;
                    if (message.number != null && message.hasOwnProperty("number"))
                        object.number = message.number;
                    if (message.options != null && message.hasOwnProperty("options"))
                        object.options = $root.google.protobuf.EnumValueOptions.toObject(message.options, options);
                    return object;
                };
    
                /**
                 * Converts this EnumValueDescriptorProto to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.EnumValueDescriptorProto
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                EnumValueDescriptorProto.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return EnumValueDescriptorProto;
            })();
    
            protobuf.ServiceDescriptorProto = (function() {
    
                /**
                 * Properties of a ServiceDescriptorProto.
                 * @memberof google.protobuf
                 * @interface IServiceDescriptorProto
                 * @property {string|null} [name] ServiceDescriptorProto name
                 * @property {Array.<google.protobuf.IMethodDescriptorProto>|null} [method] ServiceDescriptorProto method
                 * @property {google.protobuf.IServiceOptions|null} [options] ServiceDescriptorProto options
                 */
    
                /**
                 * Constructs a new ServiceDescriptorProto.
                 * @memberof google.protobuf
                 * @classdesc Represents a ServiceDescriptorProto.
                 * @implements IServiceDescriptorProto
                 * @constructor
                 * @param {google.protobuf.IServiceDescriptorProto=} [properties] Properties to set
                 */
                function ServiceDescriptorProto(properties) {
                    this.method = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * ServiceDescriptorProto name.
                 * @member {string} name
                 * @memberof google.protobuf.ServiceDescriptorProto
                 * @instance
                 */
                ServiceDescriptorProto.prototype.name = "";
    
                /**
                 * ServiceDescriptorProto method.
                 * @member {Array.<google.protobuf.IMethodDescriptorProto>} method
                 * @memberof google.protobuf.ServiceDescriptorProto
                 * @instance
                 */
                ServiceDescriptorProto.prototype.method = $util.emptyArray;
    
                /**
                 * ServiceDescriptorProto options.
                 * @member {google.protobuf.IServiceOptions|null|undefined} options
                 * @memberof google.protobuf.ServiceDescriptorProto
                 * @instance
                 */
                ServiceDescriptorProto.prototype.options = null;
    
                /**
                 * Creates a new ServiceDescriptorProto instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.ServiceDescriptorProto
                 * @static
                 * @param {google.protobuf.IServiceDescriptorProto=} [properties] Properties to set
                 * @returns {google.protobuf.ServiceDescriptorProto} ServiceDescriptorProto instance
                 */
                ServiceDescriptorProto.create = function create(properties) {
                    return new ServiceDescriptorProto(properties);
                };
    
                /**
                 * Encodes the specified ServiceDescriptorProto message. Does not implicitly {@link google.protobuf.ServiceDescriptorProto.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.ServiceDescriptorProto
                 * @static
                 * @param {google.protobuf.IServiceDescriptorProto} message ServiceDescriptorProto message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                ServiceDescriptorProto.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                    if (message.method != null && message.method.length)
                        for (var i = 0; i < message.method.length; ++i)
                            $root.google.protobuf.MethodDescriptorProto.encode(message.method[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                    if (message.options != null && Object.hasOwnProperty.call(message, "options"))
                        $root.google.protobuf.ServiceOptions.encode(message.options, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified ServiceDescriptorProto message, length delimited. Does not implicitly {@link google.protobuf.ServiceDescriptorProto.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.ServiceDescriptorProto
                 * @static
                 * @param {google.protobuf.IServiceDescriptorProto} message ServiceDescriptorProto message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                ServiceDescriptorProto.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a ServiceDescriptorProto message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.ServiceDescriptorProto
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.ServiceDescriptorProto} ServiceDescriptorProto
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                ServiceDescriptorProto.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.ServiceDescriptorProto();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.name = reader.string();
                            break;
                        case 2:
                            if (!(message.method && message.method.length))
                                message.method = [];
                            message.method.push($root.google.protobuf.MethodDescriptorProto.decode(reader, reader.uint32()));
                            break;
                        case 3:
                            message.options = $root.google.protobuf.ServiceOptions.decode(reader, reader.uint32());
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a ServiceDescriptorProto message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.ServiceDescriptorProto
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.ServiceDescriptorProto} ServiceDescriptorProto
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                ServiceDescriptorProto.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a ServiceDescriptorProto message.
                 * @function verify
                 * @memberof google.protobuf.ServiceDescriptorProto
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                ServiceDescriptorProto.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.name != null && message.hasOwnProperty("name"))
                        if (!$util.isString(message.name))
                            return "name: string expected";
                    if (message.method != null && message.hasOwnProperty("method")) {
                        if (!Array.isArray(message.method))
                            return "method: array expected";
                        for (var i = 0; i < message.method.length; ++i) {
                            var error = $root.google.protobuf.MethodDescriptorProto.verify(message.method[i]);
                            if (error)
                                return "method." + error;
                        }
                    }
                    if (message.options != null && message.hasOwnProperty("options")) {
                        var error = $root.google.protobuf.ServiceOptions.verify(message.options);
                        if (error)
                            return "options." + error;
                    }
                    return null;
                };
    
                /**
                 * Creates a ServiceDescriptorProto message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.ServiceDescriptorProto
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.ServiceDescriptorProto} ServiceDescriptorProto
                 */
                ServiceDescriptorProto.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.ServiceDescriptorProto)
                        return object;
                    var message = new $root.google.protobuf.ServiceDescriptorProto();
                    if (object.name != null)
                        message.name = String(object.name);
                    if (object.method) {
                        if (!Array.isArray(object.method))
                            throw TypeError(".google.protobuf.ServiceDescriptorProto.method: array expected");
                        message.method = [];
                        for (var i = 0; i < object.method.length; ++i) {
                            if (typeof object.method[i] !== "object")
                                throw TypeError(".google.protobuf.ServiceDescriptorProto.method: object expected");
                            message.method[i] = $root.google.protobuf.MethodDescriptorProto.fromObject(object.method[i]);
                        }
                    }
                    if (object.options != null) {
                        if (typeof object.options !== "object")
                            throw TypeError(".google.protobuf.ServiceDescriptorProto.options: object expected");
                        message.options = $root.google.protobuf.ServiceOptions.fromObject(object.options);
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from a ServiceDescriptorProto message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.ServiceDescriptorProto
                 * @static
                 * @param {google.protobuf.ServiceDescriptorProto} message ServiceDescriptorProto
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                ServiceDescriptorProto.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.method = [];
                    if (options.defaults) {
                        object.name = "";
                        object.options = null;
                    }
                    if (message.name != null && message.hasOwnProperty("name"))
                        object.name = message.name;
                    if (message.method && message.method.length) {
                        object.method = [];
                        for (var j = 0; j < message.method.length; ++j)
                            object.method[j] = $root.google.protobuf.MethodDescriptorProto.toObject(message.method[j], options);
                    }
                    if (message.options != null && message.hasOwnProperty("options"))
                        object.options = $root.google.protobuf.ServiceOptions.toObject(message.options, options);
                    return object;
                };
    
                /**
                 * Converts this ServiceDescriptorProto to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.ServiceDescriptorProto
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                ServiceDescriptorProto.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return ServiceDescriptorProto;
            })();
    
            protobuf.MethodDescriptorProto = (function() {
    
                /**
                 * Properties of a MethodDescriptorProto.
                 * @memberof google.protobuf
                 * @interface IMethodDescriptorProto
                 * @property {string|null} [name] MethodDescriptorProto name
                 * @property {string|null} [inputType] MethodDescriptorProto inputType
                 * @property {string|null} [outputType] MethodDescriptorProto outputType
                 * @property {google.protobuf.IMethodOptions|null} [options] MethodDescriptorProto options
                 * @property {boolean|null} [clientStreaming] MethodDescriptorProto clientStreaming
                 * @property {boolean|null} [serverStreaming] MethodDescriptorProto serverStreaming
                 */
    
                /**
                 * Constructs a new MethodDescriptorProto.
                 * @memberof google.protobuf
                 * @classdesc Represents a MethodDescriptorProto.
                 * @implements IMethodDescriptorProto
                 * @constructor
                 * @param {google.protobuf.IMethodDescriptorProto=} [properties] Properties to set
                 */
                function MethodDescriptorProto(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * MethodDescriptorProto name.
                 * @member {string} name
                 * @memberof google.protobuf.MethodDescriptorProto
                 * @instance
                 */
                MethodDescriptorProto.prototype.name = "";
    
                /**
                 * MethodDescriptorProto inputType.
                 * @member {string} inputType
                 * @memberof google.protobuf.MethodDescriptorProto
                 * @instance
                 */
                MethodDescriptorProto.prototype.inputType = "";
    
                /**
                 * MethodDescriptorProto outputType.
                 * @member {string} outputType
                 * @memberof google.protobuf.MethodDescriptorProto
                 * @instance
                 */
                MethodDescriptorProto.prototype.outputType = "";
    
                /**
                 * MethodDescriptorProto options.
                 * @member {google.protobuf.IMethodOptions|null|undefined} options
                 * @memberof google.protobuf.MethodDescriptorProto
                 * @instance
                 */
                MethodDescriptorProto.prototype.options = null;
    
                /**
                 * MethodDescriptorProto clientStreaming.
                 * @member {boolean} clientStreaming
                 * @memberof google.protobuf.MethodDescriptorProto
                 * @instance
                 */
                MethodDescriptorProto.prototype.clientStreaming = false;
    
                /**
                 * MethodDescriptorProto serverStreaming.
                 * @member {boolean} serverStreaming
                 * @memberof google.protobuf.MethodDescriptorProto
                 * @instance
                 */
                MethodDescriptorProto.prototype.serverStreaming = false;
    
                /**
                 * Creates a new MethodDescriptorProto instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.MethodDescriptorProto
                 * @static
                 * @param {google.protobuf.IMethodDescriptorProto=} [properties] Properties to set
                 * @returns {google.protobuf.MethodDescriptorProto} MethodDescriptorProto instance
                 */
                MethodDescriptorProto.create = function create(properties) {
                    return new MethodDescriptorProto(properties);
                };
    
                /**
                 * Encodes the specified MethodDescriptorProto message. Does not implicitly {@link google.protobuf.MethodDescriptorProto.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.MethodDescriptorProto
                 * @static
                 * @param {google.protobuf.IMethodDescriptorProto} message MethodDescriptorProto message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                MethodDescriptorProto.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                    if (message.inputType != null && Object.hasOwnProperty.call(message, "inputType"))
                        writer.uint32(/* id 2, wireType 2 =*/18).string(message.inputType);
                    if (message.outputType != null && Object.hasOwnProperty.call(message, "outputType"))
                        writer.uint32(/* id 3, wireType 2 =*/26).string(message.outputType);
                    if (message.options != null && Object.hasOwnProperty.call(message, "options"))
                        $root.google.protobuf.MethodOptions.encode(message.options, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                    if (message.clientStreaming != null && Object.hasOwnProperty.call(message, "clientStreaming"))
                        writer.uint32(/* id 5, wireType 0 =*/40).bool(message.clientStreaming);
                    if (message.serverStreaming != null && Object.hasOwnProperty.call(message, "serverStreaming"))
                        writer.uint32(/* id 6, wireType 0 =*/48).bool(message.serverStreaming);
                    return writer;
                };
    
                /**
                 * Encodes the specified MethodDescriptorProto message, length delimited. Does not implicitly {@link google.protobuf.MethodDescriptorProto.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.MethodDescriptorProto
                 * @static
                 * @param {google.protobuf.IMethodDescriptorProto} message MethodDescriptorProto message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                MethodDescriptorProto.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a MethodDescriptorProto message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.MethodDescriptorProto
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.MethodDescriptorProto} MethodDescriptorProto
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                MethodDescriptorProto.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.MethodDescriptorProto();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.name = reader.string();
                            break;
                        case 2:
                            message.inputType = reader.string();
                            break;
                        case 3:
                            message.outputType = reader.string();
                            break;
                        case 4:
                            message.options = $root.google.protobuf.MethodOptions.decode(reader, reader.uint32());
                            break;
                        case 5:
                            message.clientStreaming = reader.bool();
                            break;
                        case 6:
                            message.serverStreaming = reader.bool();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a MethodDescriptorProto message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.MethodDescriptorProto
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.MethodDescriptorProto} MethodDescriptorProto
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                MethodDescriptorProto.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a MethodDescriptorProto message.
                 * @function verify
                 * @memberof google.protobuf.MethodDescriptorProto
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                MethodDescriptorProto.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.name != null && message.hasOwnProperty("name"))
                        if (!$util.isString(message.name))
                            return "name: string expected";
                    if (message.inputType != null && message.hasOwnProperty("inputType"))
                        if (!$util.isString(message.inputType))
                            return "inputType: string expected";
                    if (message.outputType != null && message.hasOwnProperty("outputType"))
                        if (!$util.isString(message.outputType))
                            return "outputType: string expected";
                    if (message.options != null && message.hasOwnProperty("options")) {
                        var error = $root.google.protobuf.MethodOptions.verify(message.options);
                        if (error)
                            return "options." + error;
                    }
                    if (message.clientStreaming != null && message.hasOwnProperty("clientStreaming"))
                        if (typeof message.clientStreaming !== "boolean")
                            return "clientStreaming: boolean expected";
                    if (message.serverStreaming != null && message.hasOwnProperty("serverStreaming"))
                        if (typeof message.serverStreaming !== "boolean")
                            return "serverStreaming: boolean expected";
                    return null;
                };
    
                /**
                 * Creates a MethodDescriptorProto message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.MethodDescriptorProto
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.MethodDescriptorProto} MethodDescriptorProto
                 */
                MethodDescriptorProto.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.MethodDescriptorProto)
                        return object;
                    var message = new $root.google.protobuf.MethodDescriptorProto();
                    if (object.name != null)
                        message.name = String(object.name);
                    if (object.inputType != null)
                        message.inputType = String(object.inputType);
                    if (object.outputType != null)
                        message.outputType = String(object.outputType);
                    if (object.options != null) {
                        if (typeof object.options !== "object")
                            throw TypeError(".google.protobuf.MethodDescriptorProto.options: object expected");
                        message.options = $root.google.protobuf.MethodOptions.fromObject(object.options);
                    }
                    if (object.clientStreaming != null)
                        message.clientStreaming = Boolean(object.clientStreaming);
                    if (object.serverStreaming != null)
                        message.serverStreaming = Boolean(object.serverStreaming);
                    return message;
                };
    
                /**
                 * Creates a plain object from a MethodDescriptorProto message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.MethodDescriptorProto
                 * @static
                 * @param {google.protobuf.MethodDescriptorProto} message MethodDescriptorProto
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                MethodDescriptorProto.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults) {
                        object.name = "";
                        object.inputType = "";
                        object.outputType = "";
                        object.options = null;
                        object.clientStreaming = false;
                        object.serverStreaming = false;
                    }
                    if (message.name != null && message.hasOwnProperty("name"))
                        object.name = message.name;
                    if (message.inputType != null && message.hasOwnProperty("inputType"))
                        object.inputType = message.inputType;
                    if (message.outputType != null && message.hasOwnProperty("outputType"))
                        object.outputType = message.outputType;
                    if (message.options != null && message.hasOwnProperty("options"))
                        object.options = $root.google.protobuf.MethodOptions.toObject(message.options, options);
                    if (message.clientStreaming != null && message.hasOwnProperty("clientStreaming"))
                        object.clientStreaming = message.clientStreaming;
                    if (message.serverStreaming != null && message.hasOwnProperty("serverStreaming"))
                        object.serverStreaming = message.serverStreaming;
                    return object;
                };
    
                /**
                 * Converts this MethodDescriptorProto to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.MethodDescriptorProto
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                MethodDescriptorProto.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return MethodDescriptorProto;
            })();
    
            protobuf.FileOptions = (function() {
    
                /**
                 * Properties of a FileOptions.
                 * @memberof google.protobuf
                 * @interface IFileOptions
                 * @property {string|null} [javaPackage] FileOptions javaPackage
                 * @property {string|null} [javaOuterClassname] FileOptions javaOuterClassname
                 * @property {boolean|null} [javaMultipleFiles] FileOptions javaMultipleFiles
                 * @property {boolean|null} [javaGenerateEqualsAndHash] FileOptions javaGenerateEqualsAndHash
                 * @property {boolean|null} [javaStringCheckUtf8] FileOptions javaStringCheckUtf8
                 * @property {google.protobuf.FileOptions.OptimizeMode|null} [optimizeFor] FileOptions optimizeFor
                 * @property {string|null} [goPackage] FileOptions goPackage
                 * @property {boolean|null} [ccGenericServices] FileOptions ccGenericServices
                 * @property {boolean|null} [javaGenericServices] FileOptions javaGenericServices
                 * @property {boolean|null} [pyGenericServices] FileOptions pyGenericServices
                 * @property {boolean|null} [phpGenericServices] FileOptions phpGenericServices
                 * @property {boolean|null} [deprecated] FileOptions deprecated
                 * @property {boolean|null} [ccEnableArenas] FileOptions ccEnableArenas
                 * @property {string|null} [objcClassPrefix] FileOptions objcClassPrefix
                 * @property {string|null} [csharpNamespace] FileOptions csharpNamespace
                 * @property {string|null} [swiftPrefix] FileOptions swiftPrefix
                 * @property {string|null} [phpClassPrefix] FileOptions phpClassPrefix
                 * @property {string|null} [phpNamespace] FileOptions phpNamespace
                 * @property {string|null} [phpMetadataNamespace] FileOptions phpMetadataNamespace
                 * @property {string|null} [rubyPackage] FileOptions rubyPackage
                 * @property {Array.<google.protobuf.IUninterpretedOption>|null} [uninterpretedOption] FileOptions uninterpretedOption
                 * @property {Array.<google.api.IResourceDescriptor>|null} [".google.api.resourceDefinition"] FileOptions .google.api.resourceDefinition
                 */
    
                /**
                 * Constructs a new FileOptions.
                 * @memberof google.protobuf
                 * @classdesc Represents a FileOptions.
                 * @implements IFileOptions
                 * @constructor
                 * @param {google.protobuf.IFileOptions=} [properties] Properties to set
                 */
                function FileOptions(properties) {
                    this.uninterpretedOption = [];
                    this[".google.api.resourceDefinition"] = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * FileOptions javaPackage.
                 * @member {string} javaPackage
                 * @memberof google.protobuf.FileOptions
                 * @instance
                 */
                FileOptions.prototype.javaPackage = "";
    
                /**
                 * FileOptions javaOuterClassname.
                 * @member {string} javaOuterClassname
                 * @memberof google.protobuf.FileOptions
                 * @instance
                 */
                FileOptions.prototype.javaOuterClassname = "";
    
                /**
                 * FileOptions javaMultipleFiles.
                 * @member {boolean} javaMultipleFiles
                 * @memberof google.protobuf.FileOptions
                 * @instance
                 */
                FileOptions.prototype.javaMultipleFiles = false;
    
                /**
                 * FileOptions javaGenerateEqualsAndHash.
                 * @member {boolean} javaGenerateEqualsAndHash
                 * @memberof google.protobuf.FileOptions
                 * @instance
                 */
                FileOptions.prototype.javaGenerateEqualsAndHash = false;
    
                /**
                 * FileOptions javaStringCheckUtf8.
                 * @member {boolean} javaStringCheckUtf8
                 * @memberof google.protobuf.FileOptions
                 * @instance
                 */
                FileOptions.prototype.javaStringCheckUtf8 = false;
    
                /**
                 * FileOptions optimizeFor.
                 * @member {google.protobuf.FileOptions.OptimizeMode} optimizeFor
                 * @memberof google.protobuf.FileOptions
                 * @instance
                 */
                FileOptions.prototype.optimizeFor = 1;
    
                /**
                 * FileOptions goPackage.
                 * @member {string} goPackage
                 * @memberof google.protobuf.FileOptions
                 * @instance
                 */
                FileOptions.prototype.goPackage = "";
    
                /**
                 * FileOptions ccGenericServices.
                 * @member {boolean} ccGenericServices
                 * @memberof google.protobuf.FileOptions
                 * @instance
                 */
                FileOptions.prototype.ccGenericServices = false;
    
                /**
                 * FileOptions javaGenericServices.
                 * @member {boolean} javaGenericServices
                 * @memberof google.protobuf.FileOptions
                 * @instance
                 */
                FileOptions.prototype.javaGenericServices = false;
    
                /**
                 * FileOptions pyGenericServices.
                 * @member {boolean} pyGenericServices
                 * @memberof google.protobuf.FileOptions
                 * @instance
                 */
                FileOptions.prototype.pyGenericServices = false;
    
                /**
                 * FileOptions phpGenericServices.
                 * @member {boolean} phpGenericServices
                 * @memberof google.protobuf.FileOptions
                 * @instance
                 */
                FileOptions.prototype.phpGenericServices = false;
    
                /**
                 * FileOptions deprecated.
                 * @member {boolean} deprecated
                 * @memberof google.protobuf.FileOptions
                 * @instance
                 */
                FileOptions.prototype.deprecated = false;
    
                /**
                 * FileOptions ccEnableArenas.
                 * @member {boolean} ccEnableArenas
                 * @memberof google.protobuf.FileOptions
                 * @instance
                 */
                FileOptions.prototype.ccEnableArenas = true;
    
                /**
                 * FileOptions objcClassPrefix.
                 * @member {string} objcClassPrefix
                 * @memberof google.protobuf.FileOptions
                 * @instance
                 */
                FileOptions.prototype.objcClassPrefix = "";
    
                /**
                 * FileOptions csharpNamespace.
                 * @member {string} csharpNamespace
                 * @memberof google.protobuf.FileOptions
                 * @instance
                 */
                FileOptions.prototype.csharpNamespace = "";
    
                /**
                 * FileOptions swiftPrefix.
                 * @member {string} swiftPrefix
                 * @memberof google.protobuf.FileOptions
                 * @instance
                 */
                FileOptions.prototype.swiftPrefix = "";
    
                /**
                 * FileOptions phpClassPrefix.
                 * @member {string} phpClassPrefix
                 * @memberof google.protobuf.FileOptions
                 * @instance
                 */
                FileOptions.prototype.phpClassPrefix = "";
    
                /**
                 * FileOptions phpNamespace.
                 * @member {string} phpNamespace
                 * @memberof google.protobuf.FileOptions
                 * @instance
                 */
                FileOptions.prototype.phpNamespace = "";
    
                /**
                 * FileOptions phpMetadataNamespace.
                 * @member {string} phpMetadataNamespace
                 * @memberof google.protobuf.FileOptions
                 * @instance
                 */
                FileOptions.prototype.phpMetadataNamespace = "";
    
                /**
                 * FileOptions rubyPackage.
                 * @member {string} rubyPackage
                 * @memberof google.protobuf.FileOptions
                 * @instance
                 */
                FileOptions.prototype.rubyPackage = "";
    
                /**
                 * FileOptions uninterpretedOption.
                 * @member {Array.<google.protobuf.IUninterpretedOption>} uninterpretedOption
                 * @memberof google.protobuf.FileOptions
                 * @instance
                 */
                FileOptions.prototype.uninterpretedOption = $util.emptyArray;
    
                /**
                 * FileOptions .google.api.resourceDefinition.
                 * @member {Array.<google.api.IResourceDescriptor>} .google.api.resourceDefinition
                 * @memberof google.protobuf.FileOptions
                 * @instance
                 */
                FileOptions.prototype[".google.api.resourceDefinition"] = $util.emptyArray;
    
                /**
                 * Creates a new FileOptions instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.FileOptions
                 * @static
                 * @param {google.protobuf.IFileOptions=} [properties] Properties to set
                 * @returns {google.protobuf.FileOptions} FileOptions instance
                 */
                FileOptions.create = function create(properties) {
                    return new FileOptions(properties);
                };
    
                /**
                 * Encodes the specified FileOptions message. Does not implicitly {@link google.protobuf.FileOptions.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.FileOptions
                 * @static
                 * @param {google.protobuf.IFileOptions} message FileOptions message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                FileOptions.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.javaPackage != null && Object.hasOwnProperty.call(message, "javaPackage"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.javaPackage);
                    if (message.javaOuterClassname != null && Object.hasOwnProperty.call(message, "javaOuterClassname"))
                        writer.uint32(/* id 8, wireType 2 =*/66).string(message.javaOuterClassname);
                    if (message.optimizeFor != null && Object.hasOwnProperty.call(message, "optimizeFor"))
                        writer.uint32(/* id 9, wireType 0 =*/72).int32(message.optimizeFor);
                    if (message.javaMultipleFiles != null && Object.hasOwnProperty.call(message, "javaMultipleFiles"))
                        writer.uint32(/* id 10, wireType 0 =*/80).bool(message.javaMultipleFiles);
                    if (message.goPackage != null && Object.hasOwnProperty.call(message, "goPackage"))
                        writer.uint32(/* id 11, wireType 2 =*/90).string(message.goPackage);
                    if (message.ccGenericServices != null && Object.hasOwnProperty.call(message, "ccGenericServices"))
                        writer.uint32(/* id 16, wireType 0 =*/128).bool(message.ccGenericServices);
                    if (message.javaGenericServices != null && Object.hasOwnProperty.call(message, "javaGenericServices"))
                        writer.uint32(/* id 17, wireType 0 =*/136).bool(message.javaGenericServices);
                    if (message.pyGenericServices != null && Object.hasOwnProperty.call(message, "pyGenericServices"))
                        writer.uint32(/* id 18, wireType 0 =*/144).bool(message.pyGenericServices);
                    if (message.javaGenerateEqualsAndHash != null && Object.hasOwnProperty.call(message, "javaGenerateEqualsAndHash"))
                        writer.uint32(/* id 20, wireType 0 =*/160).bool(message.javaGenerateEqualsAndHash);
                    if (message.deprecated != null && Object.hasOwnProperty.call(message, "deprecated"))
                        writer.uint32(/* id 23, wireType 0 =*/184).bool(message.deprecated);
                    if (message.javaStringCheckUtf8 != null && Object.hasOwnProperty.call(message, "javaStringCheckUtf8"))
                        writer.uint32(/* id 27, wireType 0 =*/216).bool(message.javaStringCheckUtf8);
                    if (message.ccEnableArenas != null && Object.hasOwnProperty.call(message, "ccEnableArenas"))
                        writer.uint32(/* id 31, wireType 0 =*/248).bool(message.ccEnableArenas);
                    if (message.objcClassPrefix != null && Object.hasOwnProperty.call(message, "objcClassPrefix"))
                        writer.uint32(/* id 36, wireType 2 =*/290).string(message.objcClassPrefix);
                    if (message.csharpNamespace != null && Object.hasOwnProperty.call(message, "csharpNamespace"))
                        writer.uint32(/* id 37, wireType 2 =*/298).string(message.csharpNamespace);
                    if (message.swiftPrefix != null && Object.hasOwnProperty.call(message, "swiftPrefix"))
                        writer.uint32(/* id 39, wireType 2 =*/314).string(message.swiftPrefix);
                    if (message.phpClassPrefix != null && Object.hasOwnProperty.call(message, "phpClassPrefix"))
                        writer.uint32(/* id 40, wireType 2 =*/322).string(message.phpClassPrefix);
                    if (message.phpNamespace != null && Object.hasOwnProperty.call(message, "phpNamespace"))
                        writer.uint32(/* id 41, wireType 2 =*/330).string(message.phpNamespace);
                    if (message.phpGenericServices != null && Object.hasOwnProperty.call(message, "phpGenericServices"))
                        writer.uint32(/* id 42, wireType 0 =*/336).bool(message.phpGenericServices);
                    if (message.phpMetadataNamespace != null && Object.hasOwnProperty.call(message, "phpMetadataNamespace"))
                        writer.uint32(/* id 44, wireType 2 =*/354).string(message.phpMetadataNamespace);
                    if (message.rubyPackage != null && Object.hasOwnProperty.call(message, "rubyPackage"))
                        writer.uint32(/* id 45, wireType 2 =*/362).string(message.rubyPackage);
                    if (message.uninterpretedOption != null && message.uninterpretedOption.length)
                        for (var i = 0; i < message.uninterpretedOption.length; ++i)
                            $root.google.protobuf.UninterpretedOption.encode(message.uninterpretedOption[i], writer.uint32(/* id 999, wireType 2 =*/7994).fork()).ldelim();
                    if (message[".google.api.resourceDefinition"] != null && message[".google.api.resourceDefinition"].length)
                        for (var i = 0; i < message[".google.api.resourceDefinition"].length; ++i)
                            $root.google.api.ResourceDescriptor.encode(message[".google.api.resourceDefinition"][i], writer.uint32(/* id 1053, wireType 2 =*/8426).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified FileOptions message, length delimited. Does not implicitly {@link google.protobuf.FileOptions.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.FileOptions
                 * @static
                 * @param {google.protobuf.IFileOptions} message FileOptions message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                FileOptions.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a FileOptions message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.FileOptions
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.FileOptions} FileOptions
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                FileOptions.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.FileOptions();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.javaPackage = reader.string();
                            break;
                        case 8:
                            message.javaOuterClassname = reader.string();
                            break;
                        case 10:
                            message.javaMultipleFiles = reader.bool();
                            break;
                        case 20:
                            message.javaGenerateEqualsAndHash = reader.bool();
                            break;
                        case 27:
                            message.javaStringCheckUtf8 = reader.bool();
                            break;
                        case 9:
                            message.optimizeFor = reader.int32();
                            break;
                        case 11:
                            message.goPackage = reader.string();
                            break;
                        case 16:
                            message.ccGenericServices = reader.bool();
                            break;
                        case 17:
                            message.javaGenericServices = reader.bool();
                            break;
                        case 18:
                            message.pyGenericServices = reader.bool();
                            break;
                        case 42:
                            message.phpGenericServices = reader.bool();
                            break;
                        case 23:
                            message.deprecated = reader.bool();
                            break;
                        case 31:
                            message.ccEnableArenas = reader.bool();
                            break;
                        case 36:
                            message.objcClassPrefix = reader.string();
                            break;
                        case 37:
                            message.csharpNamespace = reader.string();
                            break;
                        case 39:
                            message.swiftPrefix = reader.string();
                            break;
                        case 40:
                            message.phpClassPrefix = reader.string();
                            break;
                        case 41:
                            message.phpNamespace = reader.string();
                            break;
                        case 44:
                            message.phpMetadataNamespace = reader.string();
                            break;
                        case 45:
                            message.rubyPackage = reader.string();
                            break;
                        case 999:
                            if (!(message.uninterpretedOption && message.uninterpretedOption.length))
                                message.uninterpretedOption = [];
                            message.uninterpretedOption.push($root.google.protobuf.UninterpretedOption.decode(reader, reader.uint32()));
                            break;
                        case 1053:
                            if (!(message[".google.api.resourceDefinition"] && message[".google.api.resourceDefinition"].length))
                                message[".google.api.resourceDefinition"] = [];
                            message[".google.api.resourceDefinition"].push($root.google.api.ResourceDescriptor.decode(reader, reader.uint32()));
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a FileOptions message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.FileOptions
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.FileOptions} FileOptions
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                FileOptions.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a FileOptions message.
                 * @function verify
                 * @memberof google.protobuf.FileOptions
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                FileOptions.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.javaPackage != null && message.hasOwnProperty("javaPackage"))
                        if (!$util.isString(message.javaPackage))
                            return "javaPackage: string expected";
                    if (message.javaOuterClassname != null && message.hasOwnProperty("javaOuterClassname"))
                        if (!$util.isString(message.javaOuterClassname))
                            return "javaOuterClassname: string expected";
                    if (message.javaMultipleFiles != null && message.hasOwnProperty("javaMultipleFiles"))
                        if (typeof message.javaMultipleFiles !== "boolean")
                            return "javaMultipleFiles: boolean expected";
                    if (message.javaGenerateEqualsAndHash != null && message.hasOwnProperty("javaGenerateEqualsAndHash"))
                        if (typeof message.javaGenerateEqualsAndHash !== "boolean")
                            return "javaGenerateEqualsAndHash: boolean expected";
                    if (message.javaStringCheckUtf8 != null && message.hasOwnProperty("javaStringCheckUtf8"))
                        if (typeof message.javaStringCheckUtf8 !== "boolean")
                            return "javaStringCheckUtf8: boolean expected";
                    if (message.optimizeFor != null && message.hasOwnProperty("optimizeFor"))
                        switch (message.optimizeFor) {
                        default:
                            return "optimizeFor: enum value expected";
                        case 1:
                        case 2:
                        case 3:
                            break;
                        }
                    if (message.goPackage != null && message.hasOwnProperty("goPackage"))
                        if (!$util.isString(message.goPackage))
                            return "goPackage: string expected";
                    if (message.ccGenericServices != null && message.hasOwnProperty("ccGenericServices"))
                        if (typeof message.ccGenericServices !== "boolean")
                            return "ccGenericServices: boolean expected";
                    if (message.javaGenericServices != null && message.hasOwnProperty("javaGenericServices"))
                        if (typeof message.javaGenericServices !== "boolean")
                            return "javaGenericServices: boolean expected";
                    if (message.pyGenericServices != null && message.hasOwnProperty("pyGenericServices"))
                        if (typeof message.pyGenericServices !== "boolean")
                            return "pyGenericServices: boolean expected";
                    if (message.phpGenericServices != null && message.hasOwnProperty("phpGenericServices"))
                        if (typeof message.phpGenericServices !== "boolean")
                            return "phpGenericServices: boolean expected";
                    if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                        if (typeof message.deprecated !== "boolean")
                            return "deprecated: boolean expected";
                    if (message.ccEnableArenas != null && message.hasOwnProperty("ccEnableArenas"))
                        if (typeof message.ccEnableArenas !== "boolean")
                            return "ccEnableArenas: boolean expected";
                    if (message.objcClassPrefix != null && message.hasOwnProperty("objcClassPrefix"))
                        if (!$util.isString(message.objcClassPrefix))
                            return "objcClassPrefix: string expected";
                    if (message.csharpNamespace != null && message.hasOwnProperty("csharpNamespace"))
                        if (!$util.isString(message.csharpNamespace))
                            return "csharpNamespace: string expected";
                    if (message.swiftPrefix != null && message.hasOwnProperty("swiftPrefix"))
                        if (!$util.isString(message.swiftPrefix))
                            return "swiftPrefix: string expected";
                    if (message.phpClassPrefix != null && message.hasOwnProperty("phpClassPrefix"))
                        if (!$util.isString(message.phpClassPrefix))
                            return "phpClassPrefix: string expected";
                    if (message.phpNamespace != null && message.hasOwnProperty("phpNamespace"))
                        if (!$util.isString(message.phpNamespace))
                            return "phpNamespace: string expected";
                    if (message.phpMetadataNamespace != null && message.hasOwnProperty("phpMetadataNamespace"))
                        if (!$util.isString(message.phpMetadataNamespace))
                            return "phpMetadataNamespace: string expected";
                    if (message.rubyPackage != null && message.hasOwnProperty("rubyPackage"))
                        if (!$util.isString(message.rubyPackage))
                            return "rubyPackage: string expected";
                    if (message.uninterpretedOption != null && message.hasOwnProperty("uninterpretedOption")) {
                        if (!Array.isArray(message.uninterpretedOption))
                            return "uninterpretedOption: array expected";
                        for (var i = 0; i < message.uninterpretedOption.length; ++i) {
                            var error = $root.google.protobuf.UninterpretedOption.verify(message.uninterpretedOption[i]);
                            if (error)
                                return "uninterpretedOption." + error;
                        }
                    }
                    if (message[".google.api.resourceDefinition"] != null && message.hasOwnProperty(".google.api.resourceDefinition")) {
                        if (!Array.isArray(message[".google.api.resourceDefinition"]))
                            return ".google.api.resourceDefinition: array expected";
                        for (var i = 0; i < message[".google.api.resourceDefinition"].length; ++i) {
                            var error = $root.google.api.ResourceDescriptor.verify(message[".google.api.resourceDefinition"][i]);
                            if (error)
                                return ".google.api.resourceDefinition." + error;
                        }
                    }
                    return null;
                };
    
                /**
                 * Creates a FileOptions message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.FileOptions
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.FileOptions} FileOptions
                 */
                FileOptions.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.FileOptions)
                        return object;
                    var message = new $root.google.protobuf.FileOptions();
                    if (object.javaPackage != null)
                        message.javaPackage = String(object.javaPackage);
                    if (object.javaOuterClassname != null)
                        message.javaOuterClassname = String(object.javaOuterClassname);
                    if (object.javaMultipleFiles != null)
                        message.javaMultipleFiles = Boolean(object.javaMultipleFiles);
                    if (object.javaGenerateEqualsAndHash != null)
                        message.javaGenerateEqualsAndHash = Boolean(object.javaGenerateEqualsAndHash);
                    if (object.javaStringCheckUtf8 != null)
                        message.javaStringCheckUtf8 = Boolean(object.javaStringCheckUtf8);
                    switch (object.optimizeFor) {
                    case "SPEED":
                    case 1:
                        message.optimizeFor = 1;
                        break;
                    case "CODE_SIZE":
                    case 2:
                        message.optimizeFor = 2;
                        break;
                    case "LITE_RUNTIME":
                    case 3:
                        message.optimizeFor = 3;
                        break;
                    }
                    if (object.goPackage != null)
                        message.goPackage = String(object.goPackage);
                    if (object.ccGenericServices != null)
                        message.ccGenericServices = Boolean(object.ccGenericServices);
                    if (object.javaGenericServices != null)
                        message.javaGenericServices = Boolean(object.javaGenericServices);
                    if (object.pyGenericServices != null)
                        message.pyGenericServices = Boolean(object.pyGenericServices);
                    if (object.phpGenericServices != null)
                        message.phpGenericServices = Boolean(object.phpGenericServices);
                    if (object.deprecated != null)
                        message.deprecated = Boolean(object.deprecated);
                    if (object.ccEnableArenas != null)
                        message.ccEnableArenas = Boolean(object.ccEnableArenas);
                    if (object.objcClassPrefix != null)
                        message.objcClassPrefix = String(object.objcClassPrefix);
                    if (object.csharpNamespace != null)
                        message.csharpNamespace = String(object.csharpNamespace);
                    if (object.swiftPrefix != null)
                        message.swiftPrefix = String(object.swiftPrefix);
                    if (object.phpClassPrefix != null)
                        message.phpClassPrefix = String(object.phpClassPrefix);
                    if (object.phpNamespace != null)
                        message.phpNamespace = String(object.phpNamespace);
                    if (object.phpMetadataNamespace != null)
                        message.phpMetadataNamespace = String(object.phpMetadataNamespace);
                    if (object.rubyPackage != null)
                        message.rubyPackage = String(object.rubyPackage);
                    if (object.uninterpretedOption) {
                        if (!Array.isArray(object.uninterpretedOption))
                            throw TypeError(".google.protobuf.FileOptions.uninterpretedOption: array expected");
                        message.uninterpretedOption = [];
                        for (var i = 0; i < object.uninterpretedOption.length; ++i) {
                            if (typeof object.uninterpretedOption[i] !== "object")
                                throw TypeError(".google.protobuf.FileOptions.uninterpretedOption: object expected");
                            message.uninterpretedOption[i] = $root.google.protobuf.UninterpretedOption.fromObject(object.uninterpretedOption[i]);
                        }
                    }
                    if (object[".google.api.resourceDefinition"]) {
                        if (!Array.isArray(object[".google.api.resourceDefinition"]))
                            throw TypeError(".google.protobuf.FileOptions..google.api.resourceDefinition: array expected");
                        message[".google.api.resourceDefinition"] = [];
                        for (var i = 0; i < object[".google.api.resourceDefinition"].length; ++i) {
                            if (typeof object[".google.api.resourceDefinition"][i] !== "object")
                                throw TypeError(".google.protobuf.FileOptions..google.api.resourceDefinition: object expected");
                            message[".google.api.resourceDefinition"][i] = $root.google.api.ResourceDescriptor.fromObject(object[".google.api.resourceDefinition"][i]);
                        }
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from a FileOptions message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.FileOptions
                 * @static
                 * @param {google.protobuf.FileOptions} message FileOptions
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                FileOptions.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults) {
                        object.uninterpretedOption = [];
                        object[".google.api.resourceDefinition"] = [];
                    }
                    if (options.defaults) {
                        object.javaPackage = "";
                        object.javaOuterClassname = "";
                        object.optimizeFor = options.enums === String ? "SPEED" : 1;
                        object.javaMultipleFiles = false;
                        object.goPackage = "";
                        object.ccGenericServices = false;
                        object.javaGenericServices = false;
                        object.pyGenericServices = false;
                        object.javaGenerateEqualsAndHash = false;
                        object.deprecated = false;
                        object.javaStringCheckUtf8 = false;
                        object.ccEnableArenas = true;
                        object.objcClassPrefix = "";
                        object.csharpNamespace = "";
                        object.swiftPrefix = "";
                        object.phpClassPrefix = "";
                        object.phpNamespace = "";
                        object.phpGenericServices = false;
                        object.phpMetadataNamespace = "";
                        object.rubyPackage = "";
                    }
                    if (message.javaPackage != null && message.hasOwnProperty("javaPackage"))
                        object.javaPackage = message.javaPackage;
                    if (message.javaOuterClassname != null && message.hasOwnProperty("javaOuterClassname"))
                        object.javaOuterClassname = message.javaOuterClassname;
                    if (message.optimizeFor != null && message.hasOwnProperty("optimizeFor"))
                        object.optimizeFor = options.enums === String ? $root.google.protobuf.FileOptions.OptimizeMode[message.optimizeFor] : message.optimizeFor;
                    if (message.javaMultipleFiles != null && message.hasOwnProperty("javaMultipleFiles"))
                        object.javaMultipleFiles = message.javaMultipleFiles;
                    if (message.goPackage != null && message.hasOwnProperty("goPackage"))
                        object.goPackage = message.goPackage;
                    if (message.ccGenericServices != null && message.hasOwnProperty("ccGenericServices"))
                        object.ccGenericServices = message.ccGenericServices;
                    if (message.javaGenericServices != null && message.hasOwnProperty("javaGenericServices"))
                        object.javaGenericServices = message.javaGenericServices;
                    if (message.pyGenericServices != null && message.hasOwnProperty("pyGenericServices"))
                        object.pyGenericServices = message.pyGenericServices;
                    if (message.javaGenerateEqualsAndHash != null && message.hasOwnProperty("javaGenerateEqualsAndHash"))
                        object.javaGenerateEqualsAndHash = message.javaGenerateEqualsAndHash;
                    if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                        object.deprecated = message.deprecated;
                    if (message.javaStringCheckUtf8 != null && message.hasOwnProperty("javaStringCheckUtf8"))
                        object.javaStringCheckUtf8 = message.javaStringCheckUtf8;
                    if (message.ccEnableArenas != null && message.hasOwnProperty("ccEnableArenas"))
                        object.ccEnableArenas = message.ccEnableArenas;
                    if (message.objcClassPrefix != null && message.hasOwnProperty("objcClassPrefix"))
                        object.objcClassPrefix = message.objcClassPrefix;
                    if (message.csharpNamespace != null && message.hasOwnProperty("csharpNamespace"))
                        object.csharpNamespace = message.csharpNamespace;
                    if (message.swiftPrefix != null && message.hasOwnProperty("swiftPrefix"))
                        object.swiftPrefix = message.swiftPrefix;
                    if (message.phpClassPrefix != null && message.hasOwnProperty("phpClassPrefix"))
                        object.phpClassPrefix = message.phpClassPrefix;
                    if (message.phpNamespace != null && message.hasOwnProperty("phpNamespace"))
                        object.phpNamespace = message.phpNamespace;
                    if (message.phpGenericServices != null && message.hasOwnProperty("phpGenericServices"))
                        object.phpGenericServices = message.phpGenericServices;
                    if (message.phpMetadataNamespace != null && message.hasOwnProperty("phpMetadataNamespace"))
                        object.phpMetadataNamespace = message.phpMetadataNamespace;
                    if (message.rubyPackage != null && message.hasOwnProperty("rubyPackage"))
                        object.rubyPackage = message.rubyPackage;
                    if (message.uninterpretedOption && message.uninterpretedOption.length) {
                        object.uninterpretedOption = [];
                        for (var j = 0; j < message.uninterpretedOption.length; ++j)
                            object.uninterpretedOption[j] = $root.google.protobuf.UninterpretedOption.toObject(message.uninterpretedOption[j], options);
                    }
                    if (message[".google.api.resourceDefinition"] && message[".google.api.resourceDefinition"].length) {
                        object[".google.api.resourceDefinition"] = [];
                        for (var j = 0; j < message[".google.api.resourceDefinition"].length; ++j)
                            object[".google.api.resourceDefinition"][j] = $root.google.api.ResourceDescriptor.toObject(message[".google.api.resourceDefinition"][j], options);
                    }
                    return object;
                };
    
                /**
                 * Converts this FileOptions to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.FileOptions
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                FileOptions.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * OptimizeMode enum.
                 * @name google.protobuf.FileOptions.OptimizeMode
                 * @enum {number}
                 * @property {number} SPEED=1 SPEED value
                 * @property {number} CODE_SIZE=2 CODE_SIZE value
                 * @property {number} LITE_RUNTIME=3 LITE_RUNTIME value
                 */
                FileOptions.OptimizeMode = (function() {
                    var valuesById = {}, values = Object.create(valuesById);
                    values[valuesById[1] = "SPEED"] = 1;
                    values[valuesById[2] = "CODE_SIZE"] = 2;
                    values[valuesById[3] = "LITE_RUNTIME"] = 3;
                    return values;
                })();
    
                return FileOptions;
            })();
    
            protobuf.MessageOptions = (function() {
    
                /**
                 * Properties of a MessageOptions.
                 * @memberof google.protobuf
                 * @interface IMessageOptions
                 * @property {boolean|null} [messageSetWireFormat] MessageOptions messageSetWireFormat
                 * @property {boolean|null} [noStandardDescriptorAccessor] MessageOptions noStandardDescriptorAccessor
                 * @property {boolean|null} [deprecated] MessageOptions deprecated
                 * @property {boolean|null} [mapEntry] MessageOptions mapEntry
                 * @property {Array.<google.protobuf.IUninterpretedOption>|null} [uninterpretedOption] MessageOptions uninterpretedOption
                 * @property {google.api.IResourceDescriptor|null} [".google.api.resource"] MessageOptions .google.api.resource
                 */
    
                /**
                 * Constructs a new MessageOptions.
                 * @memberof google.protobuf
                 * @classdesc Represents a MessageOptions.
                 * @implements IMessageOptions
                 * @constructor
                 * @param {google.protobuf.IMessageOptions=} [properties] Properties to set
                 */
                function MessageOptions(properties) {
                    this.uninterpretedOption = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * MessageOptions messageSetWireFormat.
                 * @member {boolean} messageSetWireFormat
                 * @memberof google.protobuf.MessageOptions
                 * @instance
                 */
                MessageOptions.prototype.messageSetWireFormat = false;
    
                /**
                 * MessageOptions noStandardDescriptorAccessor.
                 * @member {boolean} noStandardDescriptorAccessor
                 * @memberof google.protobuf.MessageOptions
                 * @instance
                 */
                MessageOptions.prototype.noStandardDescriptorAccessor = false;
    
                /**
                 * MessageOptions deprecated.
                 * @member {boolean} deprecated
                 * @memberof google.protobuf.MessageOptions
                 * @instance
                 */
                MessageOptions.prototype.deprecated = false;
    
                /**
                 * MessageOptions mapEntry.
                 * @member {boolean} mapEntry
                 * @memberof google.protobuf.MessageOptions
                 * @instance
                 */
                MessageOptions.prototype.mapEntry = false;
    
                /**
                 * MessageOptions uninterpretedOption.
                 * @member {Array.<google.protobuf.IUninterpretedOption>} uninterpretedOption
                 * @memberof google.protobuf.MessageOptions
                 * @instance
                 */
                MessageOptions.prototype.uninterpretedOption = $util.emptyArray;
    
                /**
                 * MessageOptions .google.api.resource.
                 * @member {google.api.IResourceDescriptor|null|undefined} .google.api.resource
                 * @memberof google.protobuf.MessageOptions
                 * @instance
                 */
                MessageOptions.prototype[".google.api.resource"] = null;
    
                /**
                 * Creates a new MessageOptions instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.MessageOptions
                 * @static
                 * @param {google.protobuf.IMessageOptions=} [properties] Properties to set
                 * @returns {google.protobuf.MessageOptions} MessageOptions instance
                 */
                MessageOptions.create = function create(properties) {
                    return new MessageOptions(properties);
                };
    
                /**
                 * Encodes the specified MessageOptions message. Does not implicitly {@link google.protobuf.MessageOptions.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.MessageOptions
                 * @static
                 * @param {google.protobuf.IMessageOptions} message MessageOptions message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                MessageOptions.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.messageSetWireFormat != null && Object.hasOwnProperty.call(message, "messageSetWireFormat"))
                        writer.uint32(/* id 1, wireType 0 =*/8).bool(message.messageSetWireFormat);
                    if (message.noStandardDescriptorAccessor != null && Object.hasOwnProperty.call(message, "noStandardDescriptorAccessor"))
                        writer.uint32(/* id 2, wireType 0 =*/16).bool(message.noStandardDescriptorAccessor);
                    if (message.deprecated != null && Object.hasOwnProperty.call(message, "deprecated"))
                        writer.uint32(/* id 3, wireType 0 =*/24).bool(message.deprecated);
                    if (message.mapEntry != null && Object.hasOwnProperty.call(message, "mapEntry"))
                        writer.uint32(/* id 7, wireType 0 =*/56).bool(message.mapEntry);
                    if (message.uninterpretedOption != null && message.uninterpretedOption.length)
                        for (var i = 0; i < message.uninterpretedOption.length; ++i)
                            $root.google.protobuf.UninterpretedOption.encode(message.uninterpretedOption[i], writer.uint32(/* id 999, wireType 2 =*/7994).fork()).ldelim();
                    if (message[".google.api.resource"] != null && Object.hasOwnProperty.call(message, ".google.api.resource"))
                        $root.google.api.ResourceDescriptor.encode(message[".google.api.resource"], writer.uint32(/* id 1053, wireType 2 =*/8426).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified MessageOptions message, length delimited. Does not implicitly {@link google.protobuf.MessageOptions.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.MessageOptions
                 * @static
                 * @param {google.protobuf.IMessageOptions} message MessageOptions message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                MessageOptions.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a MessageOptions message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.MessageOptions
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.MessageOptions} MessageOptions
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                MessageOptions.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.MessageOptions();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.messageSetWireFormat = reader.bool();
                            break;
                        case 2:
                            message.noStandardDescriptorAccessor = reader.bool();
                            break;
                        case 3:
                            message.deprecated = reader.bool();
                            break;
                        case 7:
                            message.mapEntry = reader.bool();
                            break;
                        case 999:
                            if (!(message.uninterpretedOption && message.uninterpretedOption.length))
                                message.uninterpretedOption = [];
                            message.uninterpretedOption.push($root.google.protobuf.UninterpretedOption.decode(reader, reader.uint32()));
                            break;
                        case 1053:
                            message[".google.api.resource"] = $root.google.api.ResourceDescriptor.decode(reader, reader.uint32());
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a MessageOptions message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.MessageOptions
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.MessageOptions} MessageOptions
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                MessageOptions.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a MessageOptions message.
                 * @function verify
                 * @memberof google.protobuf.MessageOptions
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                MessageOptions.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.messageSetWireFormat != null && message.hasOwnProperty("messageSetWireFormat"))
                        if (typeof message.messageSetWireFormat !== "boolean")
                            return "messageSetWireFormat: boolean expected";
                    if (message.noStandardDescriptorAccessor != null && message.hasOwnProperty("noStandardDescriptorAccessor"))
                        if (typeof message.noStandardDescriptorAccessor !== "boolean")
                            return "noStandardDescriptorAccessor: boolean expected";
                    if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                        if (typeof message.deprecated !== "boolean")
                            return "deprecated: boolean expected";
                    if (message.mapEntry != null && message.hasOwnProperty("mapEntry"))
                        if (typeof message.mapEntry !== "boolean")
                            return "mapEntry: boolean expected";
                    if (message.uninterpretedOption != null && message.hasOwnProperty("uninterpretedOption")) {
                        if (!Array.isArray(message.uninterpretedOption))
                            return "uninterpretedOption: array expected";
                        for (var i = 0; i < message.uninterpretedOption.length; ++i) {
                            var error = $root.google.protobuf.UninterpretedOption.verify(message.uninterpretedOption[i]);
                            if (error)
                                return "uninterpretedOption." + error;
                        }
                    }
                    if (message[".google.api.resource"] != null && message.hasOwnProperty(".google.api.resource")) {
                        var error = $root.google.api.ResourceDescriptor.verify(message[".google.api.resource"]);
                        if (error)
                            return ".google.api.resource." + error;
                    }
                    return null;
                };
    
                /**
                 * Creates a MessageOptions message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.MessageOptions
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.MessageOptions} MessageOptions
                 */
                MessageOptions.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.MessageOptions)
                        return object;
                    var message = new $root.google.protobuf.MessageOptions();
                    if (object.messageSetWireFormat != null)
                        message.messageSetWireFormat = Boolean(object.messageSetWireFormat);
                    if (object.noStandardDescriptorAccessor != null)
                        message.noStandardDescriptorAccessor = Boolean(object.noStandardDescriptorAccessor);
                    if (object.deprecated != null)
                        message.deprecated = Boolean(object.deprecated);
                    if (object.mapEntry != null)
                        message.mapEntry = Boolean(object.mapEntry);
                    if (object.uninterpretedOption) {
                        if (!Array.isArray(object.uninterpretedOption))
                            throw TypeError(".google.protobuf.MessageOptions.uninterpretedOption: array expected");
                        message.uninterpretedOption = [];
                        for (var i = 0; i < object.uninterpretedOption.length; ++i) {
                            if (typeof object.uninterpretedOption[i] !== "object")
                                throw TypeError(".google.protobuf.MessageOptions.uninterpretedOption: object expected");
                            message.uninterpretedOption[i] = $root.google.protobuf.UninterpretedOption.fromObject(object.uninterpretedOption[i]);
                        }
                    }
                    if (object[".google.api.resource"] != null) {
                        if (typeof object[".google.api.resource"] !== "object")
                            throw TypeError(".google.protobuf.MessageOptions..google.api.resource: object expected");
                        message[".google.api.resource"] = $root.google.api.ResourceDescriptor.fromObject(object[".google.api.resource"]);
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from a MessageOptions message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.MessageOptions
                 * @static
                 * @param {google.protobuf.MessageOptions} message MessageOptions
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                MessageOptions.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.uninterpretedOption = [];
                    if (options.defaults) {
                        object.messageSetWireFormat = false;
                        object.noStandardDescriptorAccessor = false;
                        object.deprecated = false;
                        object.mapEntry = false;
                        object[".google.api.resource"] = null;
                    }
                    if (message.messageSetWireFormat != null && message.hasOwnProperty("messageSetWireFormat"))
                        object.messageSetWireFormat = message.messageSetWireFormat;
                    if (message.noStandardDescriptorAccessor != null && message.hasOwnProperty("noStandardDescriptorAccessor"))
                        object.noStandardDescriptorAccessor = message.noStandardDescriptorAccessor;
                    if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                        object.deprecated = message.deprecated;
                    if (message.mapEntry != null && message.hasOwnProperty("mapEntry"))
                        object.mapEntry = message.mapEntry;
                    if (message.uninterpretedOption && message.uninterpretedOption.length) {
                        object.uninterpretedOption = [];
                        for (var j = 0; j < message.uninterpretedOption.length; ++j)
                            object.uninterpretedOption[j] = $root.google.protobuf.UninterpretedOption.toObject(message.uninterpretedOption[j], options);
                    }
                    if (message[".google.api.resource"] != null && message.hasOwnProperty(".google.api.resource"))
                        object[".google.api.resource"] = $root.google.api.ResourceDescriptor.toObject(message[".google.api.resource"], options);
                    return object;
                };
    
                /**
                 * Converts this MessageOptions to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.MessageOptions
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                MessageOptions.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return MessageOptions;
            })();
    
            protobuf.FieldOptions = (function() {
    
                /**
                 * Properties of a FieldOptions.
                 * @memberof google.protobuf
                 * @interface IFieldOptions
                 * @property {google.protobuf.FieldOptions.CType|null} [ctype] FieldOptions ctype
                 * @property {boolean|null} [packed] FieldOptions packed
                 * @property {google.protobuf.FieldOptions.JSType|null} [jstype] FieldOptions jstype
                 * @property {boolean|null} [lazy] FieldOptions lazy
                 * @property {boolean|null} [deprecated] FieldOptions deprecated
                 * @property {boolean|null} [weak] FieldOptions weak
                 * @property {Array.<google.protobuf.IUninterpretedOption>|null} [uninterpretedOption] FieldOptions uninterpretedOption
                 * @property {Array.<google.api.FieldBehavior>|null} [".google.api.fieldBehavior"] FieldOptions .google.api.fieldBehavior
                 * @property {google.api.IResourceReference|null} [".google.api.resourceReference"] FieldOptions .google.api.resourceReference
                 */
    
                /**
                 * Constructs a new FieldOptions.
                 * @memberof google.protobuf
                 * @classdesc Represents a FieldOptions.
                 * @implements IFieldOptions
                 * @constructor
                 * @param {google.protobuf.IFieldOptions=} [properties] Properties to set
                 */
                function FieldOptions(properties) {
                    this.uninterpretedOption = [];
                    this[".google.api.fieldBehavior"] = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * FieldOptions ctype.
                 * @member {google.protobuf.FieldOptions.CType} ctype
                 * @memberof google.protobuf.FieldOptions
                 * @instance
                 */
                FieldOptions.prototype.ctype = 0;
    
                /**
                 * FieldOptions packed.
                 * @member {boolean} packed
                 * @memberof google.protobuf.FieldOptions
                 * @instance
                 */
                FieldOptions.prototype.packed = false;
    
                /**
                 * FieldOptions jstype.
                 * @member {google.protobuf.FieldOptions.JSType} jstype
                 * @memberof google.protobuf.FieldOptions
                 * @instance
                 */
                FieldOptions.prototype.jstype = 0;
    
                /**
                 * FieldOptions lazy.
                 * @member {boolean} lazy
                 * @memberof google.protobuf.FieldOptions
                 * @instance
                 */
                FieldOptions.prototype.lazy = false;
    
                /**
                 * FieldOptions deprecated.
                 * @member {boolean} deprecated
                 * @memberof google.protobuf.FieldOptions
                 * @instance
                 */
                FieldOptions.prototype.deprecated = false;
    
                /**
                 * FieldOptions weak.
                 * @member {boolean} weak
                 * @memberof google.protobuf.FieldOptions
                 * @instance
                 */
                FieldOptions.prototype.weak = false;
    
                /**
                 * FieldOptions uninterpretedOption.
                 * @member {Array.<google.protobuf.IUninterpretedOption>} uninterpretedOption
                 * @memberof google.protobuf.FieldOptions
                 * @instance
                 */
                FieldOptions.prototype.uninterpretedOption = $util.emptyArray;
    
                /**
                 * FieldOptions .google.api.fieldBehavior.
                 * @member {Array.<google.api.FieldBehavior>} .google.api.fieldBehavior
                 * @memberof google.protobuf.FieldOptions
                 * @instance
                 */
                FieldOptions.prototype[".google.api.fieldBehavior"] = $util.emptyArray;
    
                /**
                 * FieldOptions .google.api.resourceReference.
                 * @member {google.api.IResourceReference|null|undefined} .google.api.resourceReference
                 * @memberof google.protobuf.FieldOptions
                 * @instance
                 */
                FieldOptions.prototype[".google.api.resourceReference"] = null;
    
                /**
                 * Creates a new FieldOptions instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.FieldOptions
                 * @static
                 * @param {google.protobuf.IFieldOptions=} [properties] Properties to set
                 * @returns {google.protobuf.FieldOptions} FieldOptions instance
                 */
                FieldOptions.create = function create(properties) {
                    return new FieldOptions(properties);
                };
    
                /**
                 * Encodes the specified FieldOptions message. Does not implicitly {@link google.protobuf.FieldOptions.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.FieldOptions
                 * @static
                 * @param {google.protobuf.IFieldOptions} message FieldOptions message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                FieldOptions.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.ctype != null && Object.hasOwnProperty.call(message, "ctype"))
                        writer.uint32(/* id 1, wireType 0 =*/8).int32(message.ctype);
                    if (message.packed != null && Object.hasOwnProperty.call(message, "packed"))
                        writer.uint32(/* id 2, wireType 0 =*/16).bool(message.packed);
                    if (message.deprecated != null && Object.hasOwnProperty.call(message, "deprecated"))
                        writer.uint32(/* id 3, wireType 0 =*/24).bool(message.deprecated);
                    if (message.lazy != null && Object.hasOwnProperty.call(message, "lazy"))
                        writer.uint32(/* id 5, wireType 0 =*/40).bool(message.lazy);
                    if (message.jstype != null && Object.hasOwnProperty.call(message, "jstype"))
                        writer.uint32(/* id 6, wireType 0 =*/48).int32(message.jstype);
                    if (message.weak != null && Object.hasOwnProperty.call(message, "weak"))
                        writer.uint32(/* id 10, wireType 0 =*/80).bool(message.weak);
                    if (message.uninterpretedOption != null && message.uninterpretedOption.length)
                        for (var i = 0; i < message.uninterpretedOption.length; ++i)
                            $root.google.protobuf.UninterpretedOption.encode(message.uninterpretedOption[i], writer.uint32(/* id 999, wireType 2 =*/7994).fork()).ldelim();
                    if (message[".google.api.fieldBehavior"] != null && message[".google.api.fieldBehavior"].length) {
                        writer.uint32(/* id 1052, wireType 2 =*/8418).fork();
                        for (var i = 0; i < message[".google.api.fieldBehavior"].length; ++i)
                            writer.int32(message[".google.api.fieldBehavior"][i]);
                        writer.ldelim();
                    }
                    if (message[".google.api.resourceReference"] != null && Object.hasOwnProperty.call(message, ".google.api.resourceReference"))
                        $root.google.api.ResourceReference.encode(message[".google.api.resourceReference"], writer.uint32(/* id 1055, wireType 2 =*/8442).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified FieldOptions message, length delimited. Does not implicitly {@link google.protobuf.FieldOptions.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.FieldOptions
                 * @static
                 * @param {google.protobuf.IFieldOptions} message FieldOptions message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                FieldOptions.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a FieldOptions message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.FieldOptions
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.FieldOptions} FieldOptions
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                FieldOptions.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.FieldOptions();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.ctype = reader.int32();
                            break;
                        case 2:
                            message.packed = reader.bool();
                            break;
                        case 6:
                            message.jstype = reader.int32();
                            break;
                        case 5:
                            message.lazy = reader.bool();
                            break;
                        case 3:
                            message.deprecated = reader.bool();
                            break;
                        case 10:
                            message.weak = reader.bool();
                            break;
                        case 999:
                            if (!(message.uninterpretedOption && message.uninterpretedOption.length))
                                message.uninterpretedOption = [];
                            message.uninterpretedOption.push($root.google.protobuf.UninterpretedOption.decode(reader, reader.uint32()));
                            break;
                        case 1052:
                            if (!(message[".google.api.fieldBehavior"] && message[".google.api.fieldBehavior"].length))
                                message[".google.api.fieldBehavior"] = [];
                            if ((tag & 7) === 2) {
                                var end2 = reader.uint32() + reader.pos;
                                while (reader.pos < end2)
                                    message[".google.api.fieldBehavior"].push(reader.int32());
                            } else
                                message[".google.api.fieldBehavior"].push(reader.int32());
                            break;
                        case 1055:
                            message[".google.api.resourceReference"] = $root.google.api.ResourceReference.decode(reader, reader.uint32());
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a FieldOptions message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.FieldOptions
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.FieldOptions} FieldOptions
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                FieldOptions.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a FieldOptions message.
                 * @function verify
                 * @memberof google.protobuf.FieldOptions
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                FieldOptions.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.ctype != null && message.hasOwnProperty("ctype"))
                        switch (message.ctype) {
                        default:
                            return "ctype: enum value expected";
                        case 0:
                        case 1:
                        case 2:
                            break;
                        }
                    if (message.packed != null && message.hasOwnProperty("packed"))
                        if (typeof message.packed !== "boolean")
                            return "packed: boolean expected";
                    if (message.jstype != null && message.hasOwnProperty("jstype"))
                        switch (message.jstype) {
                        default:
                            return "jstype: enum value expected";
                        case 0:
                        case 1:
                        case 2:
                            break;
                        }
                    if (message.lazy != null && message.hasOwnProperty("lazy"))
                        if (typeof message.lazy !== "boolean")
                            return "lazy: boolean expected";
                    if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                        if (typeof message.deprecated !== "boolean")
                            return "deprecated: boolean expected";
                    if (message.weak != null && message.hasOwnProperty("weak"))
                        if (typeof message.weak !== "boolean")
                            return "weak: boolean expected";
                    if (message.uninterpretedOption != null && message.hasOwnProperty("uninterpretedOption")) {
                        if (!Array.isArray(message.uninterpretedOption))
                            return "uninterpretedOption: array expected";
                        for (var i = 0; i < message.uninterpretedOption.length; ++i) {
                            var error = $root.google.protobuf.UninterpretedOption.verify(message.uninterpretedOption[i]);
                            if (error)
                                return "uninterpretedOption." + error;
                        }
                    }
                    if (message[".google.api.fieldBehavior"] != null && message.hasOwnProperty(".google.api.fieldBehavior")) {
                        if (!Array.isArray(message[".google.api.fieldBehavior"]))
                            return ".google.api.fieldBehavior: array expected";
                        for (var i = 0; i < message[".google.api.fieldBehavior"].length; ++i)
                            switch (message[".google.api.fieldBehavior"][i]) {
                            default:
                                return ".google.api.fieldBehavior: enum value[] expected";
                            case 0:
                            case 1:
                            case 2:
                            case 3:
                            case 4:
                            case 5:
                            case 6:
                            case 7:
                                break;
                            }
                    }
                    if (message[".google.api.resourceReference"] != null && message.hasOwnProperty(".google.api.resourceReference")) {
                        var error = $root.google.api.ResourceReference.verify(message[".google.api.resourceReference"]);
                        if (error)
                            return ".google.api.resourceReference." + error;
                    }
                    return null;
                };
    
                /**
                 * Creates a FieldOptions message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.FieldOptions
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.FieldOptions} FieldOptions
                 */
                FieldOptions.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.FieldOptions)
                        return object;
                    var message = new $root.google.protobuf.FieldOptions();
                    switch (object.ctype) {
                    case "STRING":
                    case 0:
                        message.ctype = 0;
                        break;
                    case "CORD":
                    case 1:
                        message.ctype = 1;
                        break;
                    case "STRING_PIECE":
                    case 2:
                        message.ctype = 2;
                        break;
                    }
                    if (object.packed != null)
                        message.packed = Boolean(object.packed);
                    switch (object.jstype) {
                    case "JS_NORMAL":
                    case 0:
                        message.jstype = 0;
                        break;
                    case "JS_STRING":
                    case 1:
                        message.jstype = 1;
                        break;
                    case "JS_NUMBER":
                    case 2:
                        message.jstype = 2;
                        break;
                    }
                    if (object.lazy != null)
                        message.lazy = Boolean(object.lazy);
                    if (object.deprecated != null)
                        message.deprecated = Boolean(object.deprecated);
                    if (object.weak != null)
                        message.weak = Boolean(object.weak);
                    if (object.uninterpretedOption) {
                        if (!Array.isArray(object.uninterpretedOption))
                            throw TypeError(".google.protobuf.FieldOptions.uninterpretedOption: array expected");
                        message.uninterpretedOption = [];
                        for (var i = 0; i < object.uninterpretedOption.length; ++i) {
                            if (typeof object.uninterpretedOption[i] !== "object")
                                throw TypeError(".google.protobuf.FieldOptions.uninterpretedOption: object expected");
                            message.uninterpretedOption[i] = $root.google.protobuf.UninterpretedOption.fromObject(object.uninterpretedOption[i]);
                        }
                    }
                    if (object[".google.api.fieldBehavior"]) {
                        if (!Array.isArray(object[".google.api.fieldBehavior"]))
                            throw TypeError(".google.protobuf.FieldOptions..google.api.fieldBehavior: array expected");
                        message[".google.api.fieldBehavior"] = [];
                        for (var i = 0; i < object[".google.api.fieldBehavior"].length; ++i)
                            switch (object[".google.api.fieldBehavior"][i]) {
                            default:
                            case "FIELD_BEHAVIOR_UNSPECIFIED":
                            case 0:
                                message[".google.api.fieldBehavior"][i] = 0;
                                break;
                            case "OPTIONAL":
                            case 1:
                                message[".google.api.fieldBehavior"][i] = 1;
                                break;
                            case "REQUIRED":
                            case 2:
                                message[".google.api.fieldBehavior"][i] = 2;
                                break;
                            case "OUTPUT_ONLY":
                            case 3:
                                message[".google.api.fieldBehavior"][i] = 3;
                                break;
                            case "INPUT_ONLY":
                            case 4:
                                message[".google.api.fieldBehavior"][i] = 4;
                                break;
                            case "IMMUTABLE":
                            case 5:
                                message[".google.api.fieldBehavior"][i] = 5;
                                break;
                            case "UNORDERED_LIST":
                            case 6:
                                message[".google.api.fieldBehavior"][i] = 6;
                                break;
                            case "NON_EMPTY_DEFAULT":
                            case 7:
                                message[".google.api.fieldBehavior"][i] = 7;
                                break;
                            }
                    }
                    if (object[".google.api.resourceReference"] != null) {
                        if (typeof object[".google.api.resourceReference"] !== "object")
                            throw TypeError(".google.protobuf.FieldOptions..google.api.resourceReference: object expected");
                        message[".google.api.resourceReference"] = $root.google.api.ResourceReference.fromObject(object[".google.api.resourceReference"]);
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from a FieldOptions message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.FieldOptions
                 * @static
                 * @param {google.protobuf.FieldOptions} message FieldOptions
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                FieldOptions.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults) {
                        object.uninterpretedOption = [];
                        object[".google.api.fieldBehavior"] = [];
                    }
                    if (options.defaults) {
                        object.ctype = options.enums === String ? "STRING" : 0;
                        object.packed = false;
                        object.deprecated = false;
                        object.lazy = false;
                        object.jstype = options.enums === String ? "JS_NORMAL" : 0;
                        object.weak = false;
                        object[".google.api.resourceReference"] = null;
                    }
                    if (message.ctype != null && message.hasOwnProperty("ctype"))
                        object.ctype = options.enums === String ? $root.google.protobuf.FieldOptions.CType[message.ctype] : message.ctype;
                    if (message.packed != null && message.hasOwnProperty("packed"))
                        object.packed = message.packed;
                    if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                        object.deprecated = message.deprecated;
                    if (message.lazy != null && message.hasOwnProperty("lazy"))
                        object.lazy = message.lazy;
                    if (message.jstype != null && message.hasOwnProperty("jstype"))
                        object.jstype = options.enums === String ? $root.google.protobuf.FieldOptions.JSType[message.jstype] : message.jstype;
                    if (message.weak != null && message.hasOwnProperty("weak"))
                        object.weak = message.weak;
                    if (message.uninterpretedOption && message.uninterpretedOption.length) {
                        object.uninterpretedOption = [];
                        for (var j = 0; j < message.uninterpretedOption.length; ++j)
                            object.uninterpretedOption[j] = $root.google.protobuf.UninterpretedOption.toObject(message.uninterpretedOption[j], options);
                    }
                    if (message[".google.api.fieldBehavior"] && message[".google.api.fieldBehavior"].length) {
                        object[".google.api.fieldBehavior"] = [];
                        for (var j = 0; j < message[".google.api.fieldBehavior"].length; ++j)
                            object[".google.api.fieldBehavior"][j] = options.enums === String ? $root.google.api.FieldBehavior[message[".google.api.fieldBehavior"][j]] : message[".google.api.fieldBehavior"][j];
                    }
                    if (message[".google.api.resourceReference"] != null && message.hasOwnProperty(".google.api.resourceReference"))
                        object[".google.api.resourceReference"] = $root.google.api.ResourceReference.toObject(message[".google.api.resourceReference"], options);
                    return object;
                };
    
                /**
                 * Converts this FieldOptions to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.FieldOptions
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                FieldOptions.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * CType enum.
                 * @name google.protobuf.FieldOptions.CType
                 * @enum {number}
                 * @property {number} STRING=0 STRING value
                 * @property {number} CORD=1 CORD value
                 * @property {number} STRING_PIECE=2 STRING_PIECE value
                 */
                FieldOptions.CType = (function() {
                    var valuesById = {}, values = Object.create(valuesById);
                    values[valuesById[0] = "STRING"] = 0;
                    values[valuesById[1] = "CORD"] = 1;
                    values[valuesById[2] = "STRING_PIECE"] = 2;
                    return values;
                })();
    
                /**
                 * JSType enum.
                 * @name google.protobuf.FieldOptions.JSType
                 * @enum {number}
                 * @property {number} JS_NORMAL=0 JS_NORMAL value
                 * @property {number} JS_STRING=1 JS_STRING value
                 * @property {number} JS_NUMBER=2 JS_NUMBER value
                 */
                FieldOptions.JSType = (function() {
                    var valuesById = {}, values = Object.create(valuesById);
                    values[valuesById[0] = "JS_NORMAL"] = 0;
                    values[valuesById[1] = "JS_STRING"] = 1;
                    values[valuesById[2] = "JS_NUMBER"] = 2;
                    return values;
                })();
    
                return FieldOptions;
            })();
    
            protobuf.OneofOptions = (function() {
    
                /**
                 * Properties of an OneofOptions.
                 * @memberof google.protobuf
                 * @interface IOneofOptions
                 * @property {Array.<google.protobuf.IUninterpretedOption>|null} [uninterpretedOption] OneofOptions uninterpretedOption
                 */
    
                /**
                 * Constructs a new OneofOptions.
                 * @memberof google.protobuf
                 * @classdesc Represents an OneofOptions.
                 * @implements IOneofOptions
                 * @constructor
                 * @param {google.protobuf.IOneofOptions=} [properties] Properties to set
                 */
                function OneofOptions(properties) {
                    this.uninterpretedOption = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * OneofOptions uninterpretedOption.
                 * @member {Array.<google.protobuf.IUninterpretedOption>} uninterpretedOption
                 * @memberof google.protobuf.OneofOptions
                 * @instance
                 */
                OneofOptions.prototype.uninterpretedOption = $util.emptyArray;
    
                /**
                 * Creates a new OneofOptions instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.OneofOptions
                 * @static
                 * @param {google.protobuf.IOneofOptions=} [properties] Properties to set
                 * @returns {google.protobuf.OneofOptions} OneofOptions instance
                 */
                OneofOptions.create = function create(properties) {
                    return new OneofOptions(properties);
                };
    
                /**
                 * Encodes the specified OneofOptions message. Does not implicitly {@link google.protobuf.OneofOptions.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.OneofOptions
                 * @static
                 * @param {google.protobuf.IOneofOptions} message OneofOptions message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                OneofOptions.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.uninterpretedOption != null && message.uninterpretedOption.length)
                        for (var i = 0; i < message.uninterpretedOption.length; ++i)
                            $root.google.protobuf.UninterpretedOption.encode(message.uninterpretedOption[i], writer.uint32(/* id 999, wireType 2 =*/7994).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified OneofOptions message, length delimited. Does not implicitly {@link google.protobuf.OneofOptions.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.OneofOptions
                 * @static
                 * @param {google.protobuf.IOneofOptions} message OneofOptions message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                OneofOptions.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes an OneofOptions message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.OneofOptions
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.OneofOptions} OneofOptions
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                OneofOptions.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.OneofOptions();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 999:
                            if (!(message.uninterpretedOption && message.uninterpretedOption.length))
                                message.uninterpretedOption = [];
                            message.uninterpretedOption.push($root.google.protobuf.UninterpretedOption.decode(reader, reader.uint32()));
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes an OneofOptions message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.OneofOptions
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.OneofOptions} OneofOptions
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                OneofOptions.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies an OneofOptions message.
                 * @function verify
                 * @memberof google.protobuf.OneofOptions
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                OneofOptions.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.uninterpretedOption != null && message.hasOwnProperty("uninterpretedOption")) {
                        if (!Array.isArray(message.uninterpretedOption))
                            return "uninterpretedOption: array expected";
                        for (var i = 0; i < message.uninterpretedOption.length; ++i) {
                            var error = $root.google.protobuf.UninterpretedOption.verify(message.uninterpretedOption[i]);
                            if (error)
                                return "uninterpretedOption." + error;
                        }
                    }
                    return null;
                };
    
                /**
                 * Creates an OneofOptions message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.OneofOptions
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.OneofOptions} OneofOptions
                 */
                OneofOptions.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.OneofOptions)
                        return object;
                    var message = new $root.google.protobuf.OneofOptions();
                    if (object.uninterpretedOption) {
                        if (!Array.isArray(object.uninterpretedOption))
                            throw TypeError(".google.protobuf.OneofOptions.uninterpretedOption: array expected");
                        message.uninterpretedOption = [];
                        for (var i = 0; i < object.uninterpretedOption.length; ++i) {
                            if (typeof object.uninterpretedOption[i] !== "object")
                                throw TypeError(".google.protobuf.OneofOptions.uninterpretedOption: object expected");
                            message.uninterpretedOption[i] = $root.google.protobuf.UninterpretedOption.fromObject(object.uninterpretedOption[i]);
                        }
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from an OneofOptions message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.OneofOptions
                 * @static
                 * @param {google.protobuf.OneofOptions} message OneofOptions
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                OneofOptions.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.uninterpretedOption = [];
                    if (message.uninterpretedOption && message.uninterpretedOption.length) {
                        object.uninterpretedOption = [];
                        for (var j = 0; j < message.uninterpretedOption.length; ++j)
                            object.uninterpretedOption[j] = $root.google.protobuf.UninterpretedOption.toObject(message.uninterpretedOption[j], options);
                    }
                    return object;
                };
    
                /**
                 * Converts this OneofOptions to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.OneofOptions
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                OneofOptions.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return OneofOptions;
            })();
    
            protobuf.EnumOptions = (function() {
    
                /**
                 * Properties of an EnumOptions.
                 * @memberof google.protobuf
                 * @interface IEnumOptions
                 * @property {boolean|null} [allowAlias] EnumOptions allowAlias
                 * @property {boolean|null} [deprecated] EnumOptions deprecated
                 * @property {Array.<google.protobuf.IUninterpretedOption>|null} [uninterpretedOption] EnumOptions uninterpretedOption
                 */
    
                /**
                 * Constructs a new EnumOptions.
                 * @memberof google.protobuf
                 * @classdesc Represents an EnumOptions.
                 * @implements IEnumOptions
                 * @constructor
                 * @param {google.protobuf.IEnumOptions=} [properties] Properties to set
                 */
                function EnumOptions(properties) {
                    this.uninterpretedOption = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * EnumOptions allowAlias.
                 * @member {boolean} allowAlias
                 * @memberof google.protobuf.EnumOptions
                 * @instance
                 */
                EnumOptions.prototype.allowAlias = false;
    
                /**
                 * EnumOptions deprecated.
                 * @member {boolean} deprecated
                 * @memberof google.protobuf.EnumOptions
                 * @instance
                 */
                EnumOptions.prototype.deprecated = false;
    
                /**
                 * EnumOptions uninterpretedOption.
                 * @member {Array.<google.protobuf.IUninterpretedOption>} uninterpretedOption
                 * @memberof google.protobuf.EnumOptions
                 * @instance
                 */
                EnumOptions.prototype.uninterpretedOption = $util.emptyArray;
    
                /**
                 * Creates a new EnumOptions instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.EnumOptions
                 * @static
                 * @param {google.protobuf.IEnumOptions=} [properties] Properties to set
                 * @returns {google.protobuf.EnumOptions} EnumOptions instance
                 */
                EnumOptions.create = function create(properties) {
                    return new EnumOptions(properties);
                };
    
                /**
                 * Encodes the specified EnumOptions message. Does not implicitly {@link google.protobuf.EnumOptions.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.EnumOptions
                 * @static
                 * @param {google.protobuf.IEnumOptions} message EnumOptions message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                EnumOptions.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.allowAlias != null && Object.hasOwnProperty.call(message, "allowAlias"))
                        writer.uint32(/* id 2, wireType 0 =*/16).bool(message.allowAlias);
                    if (message.deprecated != null && Object.hasOwnProperty.call(message, "deprecated"))
                        writer.uint32(/* id 3, wireType 0 =*/24).bool(message.deprecated);
                    if (message.uninterpretedOption != null && message.uninterpretedOption.length)
                        for (var i = 0; i < message.uninterpretedOption.length; ++i)
                            $root.google.protobuf.UninterpretedOption.encode(message.uninterpretedOption[i], writer.uint32(/* id 999, wireType 2 =*/7994).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified EnumOptions message, length delimited. Does not implicitly {@link google.protobuf.EnumOptions.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.EnumOptions
                 * @static
                 * @param {google.protobuf.IEnumOptions} message EnumOptions message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                EnumOptions.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes an EnumOptions message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.EnumOptions
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.EnumOptions} EnumOptions
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                EnumOptions.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.EnumOptions();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 2:
                            message.allowAlias = reader.bool();
                            break;
                        case 3:
                            message.deprecated = reader.bool();
                            break;
                        case 999:
                            if (!(message.uninterpretedOption && message.uninterpretedOption.length))
                                message.uninterpretedOption = [];
                            message.uninterpretedOption.push($root.google.protobuf.UninterpretedOption.decode(reader, reader.uint32()));
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes an EnumOptions message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.EnumOptions
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.EnumOptions} EnumOptions
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                EnumOptions.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies an EnumOptions message.
                 * @function verify
                 * @memberof google.protobuf.EnumOptions
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                EnumOptions.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.allowAlias != null && message.hasOwnProperty("allowAlias"))
                        if (typeof message.allowAlias !== "boolean")
                            return "allowAlias: boolean expected";
                    if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                        if (typeof message.deprecated !== "boolean")
                            return "deprecated: boolean expected";
                    if (message.uninterpretedOption != null && message.hasOwnProperty("uninterpretedOption")) {
                        if (!Array.isArray(message.uninterpretedOption))
                            return "uninterpretedOption: array expected";
                        for (var i = 0; i < message.uninterpretedOption.length; ++i) {
                            var error = $root.google.protobuf.UninterpretedOption.verify(message.uninterpretedOption[i]);
                            if (error)
                                return "uninterpretedOption." + error;
                        }
                    }
                    return null;
                };
    
                /**
                 * Creates an EnumOptions message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.EnumOptions
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.EnumOptions} EnumOptions
                 */
                EnumOptions.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.EnumOptions)
                        return object;
                    var message = new $root.google.protobuf.EnumOptions();
                    if (object.allowAlias != null)
                        message.allowAlias = Boolean(object.allowAlias);
                    if (object.deprecated != null)
                        message.deprecated = Boolean(object.deprecated);
                    if (object.uninterpretedOption) {
                        if (!Array.isArray(object.uninterpretedOption))
                            throw TypeError(".google.protobuf.EnumOptions.uninterpretedOption: array expected");
                        message.uninterpretedOption = [];
                        for (var i = 0; i < object.uninterpretedOption.length; ++i) {
                            if (typeof object.uninterpretedOption[i] !== "object")
                                throw TypeError(".google.protobuf.EnumOptions.uninterpretedOption: object expected");
                            message.uninterpretedOption[i] = $root.google.protobuf.UninterpretedOption.fromObject(object.uninterpretedOption[i]);
                        }
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from an EnumOptions message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.EnumOptions
                 * @static
                 * @param {google.protobuf.EnumOptions} message EnumOptions
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                EnumOptions.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.uninterpretedOption = [];
                    if (options.defaults) {
                        object.allowAlias = false;
                        object.deprecated = false;
                    }
                    if (message.allowAlias != null && message.hasOwnProperty("allowAlias"))
                        object.allowAlias = message.allowAlias;
                    if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                        object.deprecated = message.deprecated;
                    if (message.uninterpretedOption && message.uninterpretedOption.length) {
                        object.uninterpretedOption = [];
                        for (var j = 0; j < message.uninterpretedOption.length; ++j)
                            object.uninterpretedOption[j] = $root.google.protobuf.UninterpretedOption.toObject(message.uninterpretedOption[j], options);
                    }
                    return object;
                };
    
                /**
                 * Converts this EnumOptions to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.EnumOptions
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                EnumOptions.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return EnumOptions;
            })();
    
            protobuf.EnumValueOptions = (function() {
    
                /**
                 * Properties of an EnumValueOptions.
                 * @memberof google.protobuf
                 * @interface IEnumValueOptions
                 * @property {boolean|null} [deprecated] EnumValueOptions deprecated
                 * @property {Array.<google.protobuf.IUninterpretedOption>|null} [uninterpretedOption] EnumValueOptions uninterpretedOption
                 */
    
                /**
                 * Constructs a new EnumValueOptions.
                 * @memberof google.protobuf
                 * @classdesc Represents an EnumValueOptions.
                 * @implements IEnumValueOptions
                 * @constructor
                 * @param {google.protobuf.IEnumValueOptions=} [properties] Properties to set
                 */
                function EnumValueOptions(properties) {
                    this.uninterpretedOption = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * EnumValueOptions deprecated.
                 * @member {boolean} deprecated
                 * @memberof google.protobuf.EnumValueOptions
                 * @instance
                 */
                EnumValueOptions.prototype.deprecated = false;
    
                /**
                 * EnumValueOptions uninterpretedOption.
                 * @member {Array.<google.protobuf.IUninterpretedOption>} uninterpretedOption
                 * @memberof google.protobuf.EnumValueOptions
                 * @instance
                 */
                EnumValueOptions.prototype.uninterpretedOption = $util.emptyArray;
    
                /**
                 * Creates a new EnumValueOptions instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.EnumValueOptions
                 * @static
                 * @param {google.protobuf.IEnumValueOptions=} [properties] Properties to set
                 * @returns {google.protobuf.EnumValueOptions} EnumValueOptions instance
                 */
                EnumValueOptions.create = function create(properties) {
                    return new EnumValueOptions(properties);
                };
    
                /**
                 * Encodes the specified EnumValueOptions message. Does not implicitly {@link google.protobuf.EnumValueOptions.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.EnumValueOptions
                 * @static
                 * @param {google.protobuf.IEnumValueOptions} message EnumValueOptions message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                EnumValueOptions.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.deprecated != null && Object.hasOwnProperty.call(message, "deprecated"))
                        writer.uint32(/* id 1, wireType 0 =*/8).bool(message.deprecated);
                    if (message.uninterpretedOption != null && message.uninterpretedOption.length)
                        for (var i = 0; i < message.uninterpretedOption.length; ++i)
                            $root.google.protobuf.UninterpretedOption.encode(message.uninterpretedOption[i], writer.uint32(/* id 999, wireType 2 =*/7994).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified EnumValueOptions message, length delimited. Does not implicitly {@link google.protobuf.EnumValueOptions.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.EnumValueOptions
                 * @static
                 * @param {google.protobuf.IEnumValueOptions} message EnumValueOptions message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                EnumValueOptions.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes an EnumValueOptions message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.EnumValueOptions
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.EnumValueOptions} EnumValueOptions
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                EnumValueOptions.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.EnumValueOptions();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.deprecated = reader.bool();
                            break;
                        case 999:
                            if (!(message.uninterpretedOption && message.uninterpretedOption.length))
                                message.uninterpretedOption = [];
                            message.uninterpretedOption.push($root.google.protobuf.UninterpretedOption.decode(reader, reader.uint32()));
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes an EnumValueOptions message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.EnumValueOptions
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.EnumValueOptions} EnumValueOptions
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                EnumValueOptions.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies an EnumValueOptions message.
                 * @function verify
                 * @memberof google.protobuf.EnumValueOptions
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                EnumValueOptions.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                        if (typeof message.deprecated !== "boolean")
                            return "deprecated: boolean expected";
                    if (message.uninterpretedOption != null && message.hasOwnProperty("uninterpretedOption")) {
                        if (!Array.isArray(message.uninterpretedOption))
                            return "uninterpretedOption: array expected";
                        for (var i = 0; i < message.uninterpretedOption.length; ++i) {
                            var error = $root.google.protobuf.UninterpretedOption.verify(message.uninterpretedOption[i]);
                            if (error)
                                return "uninterpretedOption." + error;
                        }
                    }
                    return null;
                };
    
                /**
                 * Creates an EnumValueOptions message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.EnumValueOptions
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.EnumValueOptions} EnumValueOptions
                 */
                EnumValueOptions.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.EnumValueOptions)
                        return object;
                    var message = new $root.google.protobuf.EnumValueOptions();
                    if (object.deprecated != null)
                        message.deprecated = Boolean(object.deprecated);
                    if (object.uninterpretedOption) {
                        if (!Array.isArray(object.uninterpretedOption))
                            throw TypeError(".google.protobuf.EnumValueOptions.uninterpretedOption: array expected");
                        message.uninterpretedOption = [];
                        for (var i = 0; i < object.uninterpretedOption.length; ++i) {
                            if (typeof object.uninterpretedOption[i] !== "object")
                                throw TypeError(".google.protobuf.EnumValueOptions.uninterpretedOption: object expected");
                            message.uninterpretedOption[i] = $root.google.protobuf.UninterpretedOption.fromObject(object.uninterpretedOption[i]);
                        }
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from an EnumValueOptions message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.EnumValueOptions
                 * @static
                 * @param {google.protobuf.EnumValueOptions} message EnumValueOptions
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                EnumValueOptions.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.uninterpretedOption = [];
                    if (options.defaults)
                        object.deprecated = false;
                    if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                        object.deprecated = message.deprecated;
                    if (message.uninterpretedOption && message.uninterpretedOption.length) {
                        object.uninterpretedOption = [];
                        for (var j = 0; j < message.uninterpretedOption.length; ++j)
                            object.uninterpretedOption[j] = $root.google.protobuf.UninterpretedOption.toObject(message.uninterpretedOption[j], options);
                    }
                    return object;
                };
    
                /**
                 * Converts this EnumValueOptions to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.EnumValueOptions
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                EnumValueOptions.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return EnumValueOptions;
            })();
    
            protobuf.ServiceOptions = (function() {
    
                /**
                 * Properties of a ServiceOptions.
                 * @memberof google.protobuf
                 * @interface IServiceOptions
                 * @property {boolean|null} [deprecated] ServiceOptions deprecated
                 * @property {Array.<google.protobuf.IUninterpretedOption>|null} [uninterpretedOption] ServiceOptions uninterpretedOption
                 * @property {string|null} [".google.api.defaultHost"] ServiceOptions .google.api.defaultHost
                 * @property {string|null} [".google.api.oauthScopes"] ServiceOptions .google.api.oauthScopes
                 */
    
                /**
                 * Constructs a new ServiceOptions.
                 * @memberof google.protobuf
                 * @classdesc Represents a ServiceOptions.
                 * @implements IServiceOptions
                 * @constructor
                 * @param {google.protobuf.IServiceOptions=} [properties] Properties to set
                 */
                function ServiceOptions(properties) {
                    this.uninterpretedOption = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * ServiceOptions deprecated.
                 * @member {boolean} deprecated
                 * @memberof google.protobuf.ServiceOptions
                 * @instance
                 */
                ServiceOptions.prototype.deprecated = false;
    
                /**
                 * ServiceOptions uninterpretedOption.
                 * @member {Array.<google.protobuf.IUninterpretedOption>} uninterpretedOption
                 * @memberof google.protobuf.ServiceOptions
                 * @instance
                 */
                ServiceOptions.prototype.uninterpretedOption = $util.emptyArray;
    
                /**
                 * ServiceOptions .google.api.defaultHost.
                 * @member {string} .google.api.defaultHost
                 * @memberof google.protobuf.ServiceOptions
                 * @instance
                 */
                ServiceOptions.prototype[".google.api.defaultHost"] = "";
    
                /**
                 * ServiceOptions .google.api.oauthScopes.
                 * @member {string} .google.api.oauthScopes
                 * @memberof google.protobuf.ServiceOptions
                 * @instance
                 */
                ServiceOptions.prototype[".google.api.oauthScopes"] = "";
    
                /**
                 * Creates a new ServiceOptions instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.ServiceOptions
                 * @static
                 * @param {google.protobuf.IServiceOptions=} [properties] Properties to set
                 * @returns {google.protobuf.ServiceOptions} ServiceOptions instance
                 */
                ServiceOptions.create = function create(properties) {
                    return new ServiceOptions(properties);
                };
    
                /**
                 * Encodes the specified ServiceOptions message. Does not implicitly {@link google.protobuf.ServiceOptions.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.ServiceOptions
                 * @static
                 * @param {google.protobuf.IServiceOptions} message ServiceOptions message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                ServiceOptions.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.deprecated != null && Object.hasOwnProperty.call(message, "deprecated"))
                        writer.uint32(/* id 33, wireType 0 =*/264).bool(message.deprecated);
                    if (message.uninterpretedOption != null && message.uninterpretedOption.length)
                        for (var i = 0; i < message.uninterpretedOption.length; ++i)
                            $root.google.protobuf.UninterpretedOption.encode(message.uninterpretedOption[i], writer.uint32(/* id 999, wireType 2 =*/7994).fork()).ldelim();
                    if (message[".google.api.defaultHost"] != null && Object.hasOwnProperty.call(message, ".google.api.defaultHost"))
                        writer.uint32(/* id 1049, wireType 2 =*/8394).string(message[".google.api.defaultHost"]);
                    if (message[".google.api.oauthScopes"] != null && Object.hasOwnProperty.call(message, ".google.api.oauthScopes"))
                        writer.uint32(/* id 1050, wireType 2 =*/8402).string(message[".google.api.oauthScopes"]);
                    return writer;
                };
    
                /**
                 * Encodes the specified ServiceOptions message, length delimited. Does not implicitly {@link google.protobuf.ServiceOptions.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.ServiceOptions
                 * @static
                 * @param {google.protobuf.IServiceOptions} message ServiceOptions message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                ServiceOptions.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a ServiceOptions message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.ServiceOptions
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.ServiceOptions} ServiceOptions
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                ServiceOptions.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.ServiceOptions();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 33:
                            message.deprecated = reader.bool();
                            break;
                        case 999:
                            if (!(message.uninterpretedOption && message.uninterpretedOption.length))
                                message.uninterpretedOption = [];
                            message.uninterpretedOption.push($root.google.protobuf.UninterpretedOption.decode(reader, reader.uint32()));
                            break;
                        case 1049:
                            message[".google.api.defaultHost"] = reader.string();
                            break;
                        case 1050:
                            message[".google.api.oauthScopes"] = reader.string();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a ServiceOptions message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.ServiceOptions
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.ServiceOptions} ServiceOptions
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                ServiceOptions.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a ServiceOptions message.
                 * @function verify
                 * @memberof google.protobuf.ServiceOptions
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                ServiceOptions.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                        if (typeof message.deprecated !== "boolean")
                            return "deprecated: boolean expected";
                    if (message.uninterpretedOption != null && message.hasOwnProperty("uninterpretedOption")) {
                        if (!Array.isArray(message.uninterpretedOption))
                            return "uninterpretedOption: array expected";
                        for (var i = 0; i < message.uninterpretedOption.length; ++i) {
                            var error = $root.google.protobuf.UninterpretedOption.verify(message.uninterpretedOption[i]);
                            if (error)
                                return "uninterpretedOption." + error;
                        }
                    }
                    if (message[".google.api.defaultHost"] != null && message.hasOwnProperty(".google.api.defaultHost"))
                        if (!$util.isString(message[".google.api.defaultHost"]))
                            return ".google.api.defaultHost: string expected";
                    if (message[".google.api.oauthScopes"] != null && message.hasOwnProperty(".google.api.oauthScopes"))
                        if (!$util.isString(message[".google.api.oauthScopes"]))
                            return ".google.api.oauthScopes: string expected";
                    return null;
                };
    
                /**
                 * Creates a ServiceOptions message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.ServiceOptions
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.ServiceOptions} ServiceOptions
                 */
                ServiceOptions.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.ServiceOptions)
                        return object;
                    var message = new $root.google.protobuf.ServiceOptions();
                    if (object.deprecated != null)
                        message.deprecated = Boolean(object.deprecated);
                    if (object.uninterpretedOption) {
                        if (!Array.isArray(object.uninterpretedOption))
                            throw TypeError(".google.protobuf.ServiceOptions.uninterpretedOption: array expected");
                        message.uninterpretedOption = [];
                        for (var i = 0; i < object.uninterpretedOption.length; ++i) {
                            if (typeof object.uninterpretedOption[i] !== "object")
                                throw TypeError(".google.protobuf.ServiceOptions.uninterpretedOption: object expected");
                            message.uninterpretedOption[i] = $root.google.protobuf.UninterpretedOption.fromObject(object.uninterpretedOption[i]);
                        }
                    }
                    if (object[".google.api.defaultHost"] != null)
                        message[".google.api.defaultHost"] = String(object[".google.api.defaultHost"]);
                    if (object[".google.api.oauthScopes"] != null)
                        message[".google.api.oauthScopes"] = String(object[".google.api.oauthScopes"]);
                    return message;
                };
    
                /**
                 * Creates a plain object from a ServiceOptions message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.ServiceOptions
                 * @static
                 * @param {google.protobuf.ServiceOptions} message ServiceOptions
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                ServiceOptions.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.uninterpretedOption = [];
                    if (options.defaults) {
                        object.deprecated = false;
                        object[".google.api.defaultHost"] = "";
                        object[".google.api.oauthScopes"] = "";
                    }
                    if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                        object.deprecated = message.deprecated;
                    if (message.uninterpretedOption && message.uninterpretedOption.length) {
                        object.uninterpretedOption = [];
                        for (var j = 0; j < message.uninterpretedOption.length; ++j)
                            object.uninterpretedOption[j] = $root.google.protobuf.UninterpretedOption.toObject(message.uninterpretedOption[j], options);
                    }
                    if (message[".google.api.defaultHost"] != null && message.hasOwnProperty(".google.api.defaultHost"))
                        object[".google.api.defaultHost"] = message[".google.api.defaultHost"];
                    if (message[".google.api.oauthScopes"] != null && message.hasOwnProperty(".google.api.oauthScopes"))
                        object[".google.api.oauthScopes"] = message[".google.api.oauthScopes"];
                    return object;
                };
    
                /**
                 * Converts this ServiceOptions to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.ServiceOptions
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                ServiceOptions.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return ServiceOptions;
            })();
    
            protobuf.MethodOptions = (function() {
    
                /**
                 * Properties of a MethodOptions.
                 * @memberof google.protobuf
                 * @interface IMethodOptions
                 * @property {boolean|null} [deprecated] MethodOptions deprecated
                 * @property {google.protobuf.MethodOptions.IdempotencyLevel|null} [idempotencyLevel] MethodOptions idempotencyLevel
                 * @property {Array.<google.protobuf.IUninterpretedOption>|null} [uninterpretedOption] MethodOptions uninterpretedOption
                 * @property {google.api.IHttpRule|null} [".google.api.http"] MethodOptions .google.api.http
                 * @property {Array.<string>|null} [".google.api.methodSignature"] MethodOptions .google.api.methodSignature
                 * @property {google.longrunning.IOperationInfo|null} [".google.longrunning.operationInfo"] MethodOptions .google.longrunning.operationInfo
                 */
    
                /**
                 * Constructs a new MethodOptions.
                 * @memberof google.protobuf
                 * @classdesc Represents a MethodOptions.
                 * @implements IMethodOptions
                 * @constructor
                 * @param {google.protobuf.IMethodOptions=} [properties] Properties to set
                 */
                function MethodOptions(properties) {
                    this.uninterpretedOption = [];
                    this[".google.api.methodSignature"] = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * MethodOptions deprecated.
                 * @member {boolean} deprecated
                 * @memberof google.protobuf.MethodOptions
                 * @instance
                 */
                MethodOptions.prototype.deprecated = false;
    
                /**
                 * MethodOptions idempotencyLevel.
                 * @member {google.protobuf.MethodOptions.IdempotencyLevel} idempotencyLevel
                 * @memberof google.protobuf.MethodOptions
                 * @instance
                 */
                MethodOptions.prototype.idempotencyLevel = 0;
    
                /**
                 * MethodOptions uninterpretedOption.
                 * @member {Array.<google.protobuf.IUninterpretedOption>} uninterpretedOption
                 * @memberof google.protobuf.MethodOptions
                 * @instance
                 */
                MethodOptions.prototype.uninterpretedOption = $util.emptyArray;
    
                /**
                 * MethodOptions .google.api.http.
                 * @member {google.api.IHttpRule|null|undefined} .google.api.http
                 * @memberof google.protobuf.MethodOptions
                 * @instance
                 */
                MethodOptions.prototype[".google.api.http"] = null;
    
                /**
                 * MethodOptions .google.api.methodSignature.
                 * @member {Array.<string>} .google.api.methodSignature
                 * @memberof google.protobuf.MethodOptions
                 * @instance
                 */
                MethodOptions.prototype[".google.api.methodSignature"] = $util.emptyArray;
    
                /**
                 * MethodOptions .google.longrunning.operationInfo.
                 * @member {google.longrunning.IOperationInfo|null|undefined} .google.longrunning.operationInfo
                 * @memberof google.protobuf.MethodOptions
                 * @instance
                 */
                MethodOptions.prototype[".google.longrunning.operationInfo"] = null;
    
                /**
                 * Creates a new MethodOptions instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.MethodOptions
                 * @static
                 * @param {google.protobuf.IMethodOptions=} [properties] Properties to set
                 * @returns {google.protobuf.MethodOptions} MethodOptions instance
                 */
                MethodOptions.create = function create(properties) {
                    return new MethodOptions(properties);
                };
    
                /**
                 * Encodes the specified MethodOptions message. Does not implicitly {@link google.protobuf.MethodOptions.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.MethodOptions
                 * @static
                 * @param {google.protobuf.IMethodOptions} message MethodOptions message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                MethodOptions.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.deprecated != null && Object.hasOwnProperty.call(message, "deprecated"))
                        writer.uint32(/* id 33, wireType 0 =*/264).bool(message.deprecated);
                    if (message.idempotencyLevel != null && Object.hasOwnProperty.call(message, "idempotencyLevel"))
                        writer.uint32(/* id 34, wireType 0 =*/272).int32(message.idempotencyLevel);
                    if (message.uninterpretedOption != null && message.uninterpretedOption.length)
                        for (var i = 0; i < message.uninterpretedOption.length; ++i)
                            $root.google.protobuf.UninterpretedOption.encode(message.uninterpretedOption[i], writer.uint32(/* id 999, wireType 2 =*/7994).fork()).ldelim();
                    if (message[".google.longrunning.operationInfo"] != null && Object.hasOwnProperty.call(message, ".google.longrunning.operationInfo"))
                        $root.google.longrunning.OperationInfo.encode(message[".google.longrunning.operationInfo"], writer.uint32(/* id 1049, wireType 2 =*/8394).fork()).ldelim();
                    if (message[".google.api.methodSignature"] != null && message[".google.api.methodSignature"].length)
                        for (var i = 0; i < message[".google.api.methodSignature"].length; ++i)
                            writer.uint32(/* id 1051, wireType 2 =*/8410).string(message[".google.api.methodSignature"][i]);
                    if (message[".google.api.http"] != null && Object.hasOwnProperty.call(message, ".google.api.http"))
                        $root.google.api.HttpRule.encode(message[".google.api.http"], writer.uint32(/* id 72295728, wireType 2 =*/578365826).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified MethodOptions message, length delimited. Does not implicitly {@link google.protobuf.MethodOptions.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.MethodOptions
                 * @static
                 * @param {google.protobuf.IMethodOptions} message MethodOptions message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                MethodOptions.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a MethodOptions message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.MethodOptions
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.MethodOptions} MethodOptions
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                MethodOptions.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.MethodOptions();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 33:
                            message.deprecated = reader.bool();
                            break;
                        case 34:
                            message.idempotencyLevel = reader.int32();
                            break;
                        case 999:
                            if (!(message.uninterpretedOption && message.uninterpretedOption.length))
                                message.uninterpretedOption = [];
                            message.uninterpretedOption.push($root.google.protobuf.UninterpretedOption.decode(reader, reader.uint32()));
                            break;
                        case 72295728:
                            message[".google.api.http"] = $root.google.api.HttpRule.decode(reader, reader.uint32());
                            break;
                        case 1051:
                            if (!(message[".google.api.methodSignature"] && message[".google.api.methodSignature"].length))
                                message[".google.api.methodSignature"] = [];
                            message[".google.api.methodSignature"].push(reader.string());
                            break;
                        case 1049:
                            message[".google.longrunning.operationInfo"] = $root.google.longrunning.OperationInfo.decode(reader, reader.uint32());
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a MethodOptions message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.MethodOptions
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.MethodOptions} MethodOptions
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                MethodOptions.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a MethodOptions message.
                 * @function verify
                 * @memberof google.protobuf.MethodOptions
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                MethodOptions.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                        if (typeof message.deprecated !== "boolean")
                            return "deprecated: boolean expected";
                    if (message.idempotencyLevel != null && message.hasOwnProperty("idempotencyLevel"))
                        switch (message.idempotencyLevel) {
                        default:
                            return "idempotencyLevel: enum value expected";
                        case 0:
                        case 1:
                        case 2:
                            break;
                        }
                    if (message.uninterpretedOption != null && message.hasOwnProperty("uninterpretedOption")) {
                        if (!Array.isArray(message.uninterpretedOption))
                            return "uninterpretedOption: array expected";
                        for (var i = 0; i < message.uninterpretedOption.length; ++i) {
                            var error = $root.google.protobuf.UninterpretedOption.verify(message.uninterpretedOption[i]);
                            if (error)
                                return "uninterpretedOption." + error;
                        }
                    }
                    if (message[".google.api.http"] != null && message.hasOwnProperty(".google.api.http")) {
                        var error = $root.google.api.HttpRule.verify(message[".google.api.http"]);
                        if (error)
                            return ".google.api.http." + error;
                    }
                    if (message[".google.api.methodSignature"] != null && message.hasOwnProperty(".google.api.methodSignature")) {
                        if (!Array.isArray(message[".google.api.methodSignature"]))
                            return ".google.api.methodSignature: array expected";
                        for (var i = 0; i < message[".google.api.methodSignature"].length; ++i)
                            if (!$util.isString(message[".google.api.methodSignature"][i]))
                                return ".google.api.methodSignature: string[] expected";
                    }
                    if (message[".google.longrunning.operationInfo"] != null && message.hasOwnProperty(".google.longrunning.operationInfo")) {
                        var error = $root.google.longrunning.OperationInfo.verify(message[".google.longrunning.operationInfo"]);
                        if (error)
                            return ".google.longrunning.operationInfo." + error;
                    }
                    return null;
                };
    
                /**
                 * Creates a MethodOptions message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.MethodOptions
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.MethodOptions} MethodOptions
                 */
                MethodOptions.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.MethodOptions)
                        return object;
                    var message = new $root.google.protobuf.MethodOptions();
                    if (object.deprecated != null)
                        message.deprecated = Boolean(object.deprecated);
                    switch (object.idempotencyLevel) {
                    case "IDEMPOTENCY_UNKNOWN":
                    case 0:
                        message.idempotencyLevel = 0;
                        break;
                    case "NO_SIDE_EFFECTS":
                    case 1:
                        message.idempotencyLevel = 1;
                        break;
                    case "IDEMPOTENT":
                    case 2:
                        message.idempotencyLevel = 2;
                        break;
                    }
                    if (object.uninterpretedOption) {
                        if (!Array.isArray(object.uninterpretedOption))
                            throw TypeError(".google.protobuf.MethodOptions.uninterpretedOption: array expected");
                        message.uninterpretedOption = [];
                        for (var i = 0; i < object.uninterpretedOption.length; ++i) {
                            if (typeof object.uninterpretedOption[i] !== "object")
                                throw TypeError(".google.protobuf.MethodOptions.uninterpretedOption: object expected");
                            message.uninterpretedOption[i] = $root.google.protobuf.UninterpretedOption.fromObject(object.uninterpretedOption[i]);
                        }
                    }
                    if (object[".google.api.http"] != null) {
                        if (typeof object[".google.api.http"] !== "object")
                            throw TypeError(".google.protobuf.MethodOptions..google.api.http: object expected");
                        message[".google.api.http"] = $root.google.api.HttpRule.fromObject(object[".google.api.http"]);
                    }
                    if (object[".google.api.methodSignature"]) {
                        if (!Array.isArray(object[".google.api.methodSignature"]))
                            throw TypeError(".google.protobuf.MethodOptions..google.api.methodSignature: array expected");
                        message[".google.api.methodSignature"] = [];
                        for (var i = 0; i < object[".google.api.methodSignature"].length; ++i)
                            message[".google.api.methodSignature"][i] = String(object[".google.api.methodSignature"][i]);
                    }
                    if (object[".google.longrunning.operationInfo"] != null) {
                        if (typeof object[".google.longrunning.operationInfo"] !== "object")
                            throw TypeError(".google.protobuf.MethodOptions..google.longrunning.operationInfo: object expected");
                        message[".google.longrunning.operationInfo"] = $root.google.longrunning.OperationInfo.fromObject(object[".google.longrunning.operationInfo"]);
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from a MethodOptions message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.MethodOptions
                 * @static
                 * @param {google.protobuf.MethodOptions} message MethodOptions
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                MethodOptions.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults) {
                        object.uninterpretedOption = [];
                        object[".google.api.methodSignature"] = [];
                    }
                    if (options.defaults) {
                        object.deprecated = false;
                        object.idempotencyLevel = options.enums === String ? "IDEMPOTENCY_UNKNOWN" : 0;
                        object[".google.longrunning.operationInfo"] = null;
                        object[".google.api.http"] = null;
                    }
                    if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                        object.deprecated = message.deprecated;
                    if (message.idempotencyLevel != null && message.hasOwnProperty("idempotencyLevel"))
                        object.idempotencyLevel = options.enums === String ? $root.google.protobuf.MethodOptions.IdempotencyLevel[message.idempotencyLevel] : message.idempotencyLevel;
                    if (message.uninterpretedOption && message.uninterpretedOption.length) {
                        object.uninterpretedOption = [];
                        for (var j = 0; j < message.uninterpretedOption.length; ++j)
                            object.uninterpretedOption[j] = $root.google.protobuf.UninterpretedOption.toObject(message.uninterpretedOption[j], options);
                    }
                    if (message[".google.longrunning.operationInfo"] != null && message.hasOwnProperty(".google.longrunning.operationInfo"))
                        object[".google.longrunning.operationInfo"] = $root.google.longrunning.OperationInfo.toObject(message[".google.longrunning.operationInfo"], options);
                    if (message[".google.api.methodSignature"] && message[".google.api.methodSignature"].length) {
                        object[".google.api.methodSignature"] = [];
                        for (var j = 0; j < message[".google.api.methodSignature"].length; ++j)
                            object[".google.api.methodSignature"][j] = message[".google.api.methodSignature"][j];
                    }
                    if (message[".google.api.http"] != null && message.hasOwnProperty(".google.api.http"))
                        object[".google.api.http"] = $root.google.api.HttpRule.toObject(message[".google.api.http"], options);
                    return object;
                };
    
                /**
                 * Converts this MethodOptions to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.MethodOptions
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                MethodOptions.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * IdempotencyLevel enum.
                 * @name google.protobuf.MethodOptions.IdempotencyLevel
                 * @enum {number}
                 * @property {number} IDEMPOTENCY_UNKNOWN=0 IDEMPOTENCY_UNKNOWN value
                 * @property {number} NO_SIDE_EFFECTS=1 NO_SIDE_EFFECTS value
                 * @property {number} IDEMPOTENT=2 IDEMPOTENT value
                 */
                MethodOptions.IdempotencyLevel = (function() {
                    var valuesById = {}, values = Object.create(valuesById);
                    values[valuesById[0] = "IDEMPOTENCY_UNKNOWN"] = 0;
                    values[valuesById[1] = "NO_SIDE_EFFECTS"] = 1;
                    values[valuesById[2] = "IDEMPOTENT"] = 2;
                    return values;
                })();
    
                return MethodOptions;
            })();
    
            protobuf.UninterpretedOption = (function() {
    
                /**
                 * Properties of an UninterpretedOption.
                 * @memberof google.protobuf
                 * @interface IUninterpretedOption
                 * @property {Array.<google.protobuf.UninterpretedOption.INamePart>|null} [name] UninterpretedOption name
                 * @property {string|null} [identifierValue] UninterpretedOption identifierValue
                 * @property {number|Long|null} [positiveIntValue] UninterpretedOption positiveIntValue
                 * @property {number|Long|null} [negativeIntValue] UninterpretedOption negativeIntValue
                 * @property {number|null} [doubleValue] UninterpretedOption doubleValue
                 * @property {Uint8Array|null} [stringValue] UninterpretedOption stringValue
                 * @property {string|null} [aggregateValue] UninterpretedOption aggregateValue
                 */
    
                /**
                 * Constructs a new UninterpretedOption.
                 * @memberof google.protobuf
                 * @classdesc Represents an UninterpretedOption.
                 * @implements IUninterpretedOption
                 * @constructor
                 * @param {google.protobuf.IUninterpretedOption=} [properties] Properties to set
                 */
                function UninterpretedOption(properties) {
                    this.name = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * UninterpretedOption name.
                 * @member {Array.<google.protobuf.UninterpretedOption.INamePart>} name
                 * @memberof google.protobuf.UninterpretedOption
                 * @instance
                 */
                UninterpretedOption.prototype.name = $util.emptyArray;
    
                /**
                 * UninterpretedOption identifierValue.
                 * @member {string} identifierValue
                 * @memberof google.protobuf.UninterpretedOption
                 * @instance
                 */
                UninterpretedOption.prototype.identifierValue = "";
    
                /**
                 * UninterpretedOption positiveIntValue.
                 * @member {number|Long} positiveIntValue
                 * @memberof google.protobuf.UninterpretedOption
                 * @instance
                 */
                UninterpretedOption.prototype.positiveIntValue = $util.Long ? $util.Long.fromBits(0,0,true) : 0;
    
                /**
                 * UninterpretedOption negativeIntValue.
                 * @member {number|Long} negativeIntValue
                 * @memberof google.protobuf.UninterpretedOption
                 * @instance
                 */
                UninterpretedOption.prototype.negativeIntValue = $util.Long ? $util.Long.fromBits(0,0,false) : 0;
    
                /**
                 * UninterpretedOption doubleValue.
                 * @member {number} doubleValue
                 * @memberof google.protobuf.UninterpretedOption
                 * @instance
                 */
                UninterpretedOption.prototype.doubleValue = 0;
    
                /**
                 * UninterpretedOption stringValue.
                 * @member {Uint8Array} stringValue
                 * @memberof google.protobuf.UninterpretedOption
                 * @instance
                 */
                UninterpretedOption.prototype.stringValue = $util.newBuffer([]);
    
                /**
                 * UninterpretedOption aggregateValue.
                 * @member {string} aggregateValue
                 * @memberof google.protobuf.UninterpretedOption
                 * @instance
                 */
                UninterpretedOption.prototype.aggregateValue = "";
    
                /**
                 * Creates a new UninterpretedOption instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.UninterpretedOption
                 * @static
                 * @param {google.protobuf.IUninterpretedOption=} [properties] Properties to set
                 * @returns {google.protobuf.UninterpretedOption} UninterpretedOption instance
                 */
                UninterpretedOption.create = function create(properties) {
                    return new UninterpretedOption(properties);
                };
    
                /**
                 * Encodes the specified UninterpretedOption message. Does not implicitly {@link google.protobuf.UninterpretedOption.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.UninterpretedOption
                 * @static
                 * @param {google.protobuf.IUninterpretedOption} message UninterpretedOption message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                UninterpretedOption.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.name != null && message.name.length)
                        for (var i = 0; i < message.name.length; ++i)
                            $root.google.protobuf.UninterpretedOption.NamePart.encode(message.name[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                    if (message.identifierValue != null && Object.hasOwnProperty.call(message, "identifierValue"))
                        writer.uint32(/* id 3, wireType 2 =*/26).string(message.identifierValue);
                    if (message.positiveIntValue != null && Object.hasOwnProperty.call(message, "positiveIntValue"))
                        writer.uint32(/* id 4, wireType 0 =*/32).uint64(message.positiveIntValue);
                    if (message.negativeIntValue != null && Object.hasOwnProperty.call(message, "negativeIntValue"))
                        writer.uint32(/* id 5, wireType 0 =*/40).int64(message.negativeIntValue);
                    if (message.doubleValue != null && Object.hasOwnProperty.call(message, "doubleValue"))
                        writer.uint32(/* id 6, wireType 1 =*/49).double(message.doubleValue);
                    if (message.stringValue != null && Object.hasOwnProperty.call(message, "stringValue"))
                        writer.uint32(/* id 7, wireType 2 =*/58).bytes(message.stringValue);
                    if (message.aggregateValue != null && Object.hasOwnProperty.call(message, "aggregateValue"))
                        writer.uint32(/* id 8, wireType 2 =*/66).string(message.aggregateValue);
                    return writer;
                };
    
                /**
                 * Encodes the specified UninterpretedOption message, length delimited. Does not implicitly {@link google.protobuf.UninterpretedOption.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.UninterpretedOption
                 * @static
                 * @param {google.protobuf.IUninterpretedOption} message UninterpretedOption message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                UninterpretedOption.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes an UninterpretedOption message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.UninterpretedOption
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.UninterpretedOption} UninterpretedOption
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                UninterpretedOption.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.UninterpretedOption();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 2:
                            if (!(message.name && message.name.length))
                                message.name = [];
                            message.name.push($root.google.protobuf.UninterpretedOption.NamePart.decode(reader, reader.uint32()));
                            break;
                        case 3:
                            message.identifierValue = reader.string();
                            break;
                        case 4:
                            message.positiveIntValue = reader.uint64();
                            break;
                        case 5:
                            message.negativeIntValue = reader.int64();
                            break;
                        case 6:
                            message.doubleValue = reader.double();
                            break;
                        case 7:
                            message.stringValue = reader.bytes();
                            break;
                        case 8:
                            message.aggregateValue = reader.string();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes an UninterpretedOption message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.UninterpretedOption
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.UninterpretedOption} UninterpretedOption
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                UninterpretedOption.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies an UninterpretedOption message.
                 * @function verify
                 * @memberof google.protobuf.UninterpretedOption
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                UninterpretedOption.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.name != null && message.hasOwnProperty("name")) {
                        if (!Array.isArray(message.name))
                            return "name: array expected";
                        for (var i = 0; i < message.name.length; ++i) {
                            var error = $root.google.protobuf.UninterpretedOption.NamePart.verify(message.name[i]);
                            if (error)
                                return "name." + error;
                        }
                    }
                    if (message.identifierValue != null && message.hasOwnProperty("identifierValue"))
                        if (!$util.isString(message.identifierValue))
                            return "identifierValue: string expected";
                    if (message.positiveIntValue != null && message.hasOwnProperty("positiveIntValue"))
                        if (!$util.isInteger(message.positiveIntValue) && !(message.positiveIntValue && $util.isInteger(message.positiveIntValue.low) && $util.isInteger(message.positiveIntValue.high)))
                            return "positiveIntValue: integer|Long expected";
                    if (message.negativeIntValue != null && message.hasOwnProperty("negativeIntValue"))
                        if (!$util.isInteger(message.negativeIntValue) && !(message.negativeIntValue && $util.isInteger(message.negativeIntValue.low) && $util.isInteger(message.negativeIntValue.high)))
                            return "negativeIntValue: integer|Long expected";
                    if (message.doubleValue != null && message.hasOwnProperty("doubleValue"))
                        if (typeof message.doubleValue !== "number")
                            return "doubleValue: number expected";
                    if (message.stringValue != null && message.hasOwnProperty("stringValue"))
                        if (!(message.stringValue && typeof message.stringValue.length === "number" || $util.isString(message.stringValue)))
                            return "stringValue: buffer expected";
                    if (message.aggregateValue != null && message.hasOwnProperty("aggregateValue"))
                        if (!$util.isString(message.aggregateValue))
                            return "aggregateValue: string expected";
                    return null;
                };
    
                /**
                 * Creates an UninterpretedOption message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.UninterpretedOption
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.UninterpretedOption} UninterpretedOption
                 */
                UninterpretedOption.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.UninterpretedOption)
                        return object;
                    var message = new $root.google.protobuf.UninterpretedOption();
                    if (object.name) {
                        if (!Array.isArray(object.name))
                            throw TypeError(".google.protobuf.UninterpretedOption.name: array expected");
                        message.name = [];
                        for (var i = 0; i < object.name.length; ++i) {
                            if (typeof object.name[i] !== "object")
                                throw TypeError(".google.protobuf.UninterpretedOption.name: object expected");
                            message.name[i] = $root.google.protobuf.UninterpretedOption.NamePart.fromObject(object.name[i]);
                        }
                    }
                    if (object.identifierValue != null)
                        message.identifierValue = String(object.identifierValue);
                    if (object.positiveIntValue != null)
                        if ($util.Long)
                            (message.positiveIntValue = $util.Long.fromValue(object.positiveIntValue)).unsigned = true;
                        else if (typeof object.positiveIntValue === "string")
                            message.positiveIntValue = parseInt(object.positiveIntValue, 10);
                        else if (typeof object.positiveIntValue === "number")
                            message.positiveIntValue = object.positiveIntValue;
                        else if (typeof object.positiveIntValue === "object")
                            message.positiveIntValue = new $util.LongBits(object.positiveIntValue.low >>> 0, object.positiveIntValue.high >>> 0).toNumber(true);
                    if (object.negativeIntValue != null)
                        if ($util.Long)
                            (message.negativeIntValue = $util.Long.fromValue(object.negativeIntValue)).unsigned = false;
                        else if (typeof object.negativeIntValue === "string")
                            message.negativeIntValue = parseInt(object.negativeIntValue, 10);
                        else if (typeof object.negativeIntValue === "number")
                            message.negativeIntValue = object.negativeIntValue;
                        else if (typeof object.negativeIntValue === "object")
                            message.negativeIntValue = new $util.LongBits(object.negativeIntValue.low >>> 0, object.negativeIntValue.high >>> 0).toNumber();
                    if (object.doubleValue != null)
                        message.doubleValue = Number(object.doubleValue);
                    if (object.stringValue != null)
                        if (typeof object.stringValue === "string")
                            $util.base64.decode(object.stringValue, message.stringValue = $util.newBuffer($util.base64.length(object.stringValue)), 0);
                        else if (object.stringValue.length)
                            message.stringValue = object.stringValue;
                    if (object.aggregateValue != null)
                        message.aggregateValue = String(object.aggregateValue);
                    return message;
                };
    
                /**
                 * Creates a plain object from an UninterpretedOption message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.UninterpretedOption
                 * @static
                 * @param {google.protobuf.UninterpretedOption} message UninterpretedOption
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                UninterpretedOption.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.name = [];
                    if (options.defaults) {
                        object.identifierValue = "";
                        if ($util.Long) {
                            var long = new $util.Long(0, 0, true);
                            object.positiveIntValue = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                        } else
                            object.positiveIntValue = options.longs === String ? "0" : 0;
                        if ($util.Long) {
                            var long = new $util.Long(0, 0, false);
                            object.negativeIntValue = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                        } else
                            object.negativeIntValue = options.longs === String ? "0" : 0;
                        object.doubleValue = 0;
                        if (options.bytes === String)
                            object.stringValue = "";
                        else {
                            object.stringValue = [];
                            if (options.bytes !== Array)
                                object.stringValue = $util.newBuffer(object.stringValue);
                        }
                        object.aggregateValue = "";
                    }
                    if (message.name && message.name.length) {
                        object.name = [];
                        for (var j = 0; j < message.name.length; ++j)
                            object.name[j] = $root.google.protobuf.UninterpretedOption.NamePart.toObject(message.name[j], options);
                    }
                    if (message.identifierValue != null && message.hasOwnProperty("identifierValue"))
                        object.identifierValue = message.identifierValue;
                    if (message.positiveIntValue != null && message.hasOwnProperty("positiveIntValue"))
                        if (typeof message.positiveIntValue === "number")
                            object.positiveIntValue = options.longs === String ? String(message.positiveIntValue) : message.positiveIntValue;
                        else
                            object.positiveIntValue = options.longs === String ? $util.Long.prototype.toString.call(message.positiveIntValue) : options.longs === Number ? new $util.LongBits(message.positiveIntValue.low >>> 0, message.positiveIntValue.high >>> 0).toNumber(true) : message.positiveIntValue;
                    if (message.negativeIntValue != null && message.hasOwnProperty("negativeIntValue"))
                        if (typeof message.negativeIntValue === "number")
                            object.negativeIntValue = options.longs === String ? String(message.negativeIntValue) : message.negativeIntValue;
                        else
                            object.negativeIntValue = options.longs === String ? $util.Long.prototype.toString.call(message.negativeIntValue) : options.longs === Number ? new $util.LongBits(message.negativeIntValue.low >>> 0, message.negativeIntValue.high >>> 0).toNumber() : message.negativeIntValue;
                    if (message.doubleValue != null && message.hasOwnProperty("doubleValue"))
                        object.doubleValue = options.json && !isFinite(message.doubleValue) ? String(message.doubleValue) : message.doubleValue;
                    if (message.stringValue != null && message.hasOwnProperty("stringValue"))
                        object.stringValue = options.bytes === String ? $util.base64.encode(message.stringValue, 0, message.stringValue.length) : options.bytes === Array ? Array.prototype.slice.call(message.stringValue) : message.stringValue;
                    if (message.aggregateValue != null && message.hasOwnProperty("aggregateValue"))
                        object.aggregateValue = message.aggregateValue;
                    return object;
                };
    
                /**
                 * Converts this UninterpretedOption to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.UninterpretedOption
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                UninterpretedOption.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                UninterpretedOption.NamePart = (function() {
    
                    /**
                     * Properties of a NamePart.
                     * @memberof google.protobuf.UninterpretedOption
                     * @interface INamePart
                     * @property {string} namePart NamePart namePart
                     * @property {boolean} isExtension NamePart isExtension
                     */
    
                    /**
                     * Constructs a new NamePart.
                     * @memberof google.protobuf.UninterpretedOption
                     * @classdesc Represents a NamePart.
                     * @implements INamePart
                     * @constructor
                     * @param {google.protobuf.UninterpretedOption.INamePart=} [properties] Properties to set
                     */
                    function NamePart(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * NamePart namePart.
                     * @member {string} namePart
                     * @memberof google.protobuf.UninterpretedOption.NamePart
                     * @instance
                     */
                    NamePart.prototype.namePart = "";
    
                    /**
                     * NamePart isExtension.
                     * @member {boolean} isExtension
                     * @memberof google.protobuf.UninterpretedOption.NamePart
                     * @instance
                     */
                    NamePart.prototype.isExtension = false;
    
                    /**
                     * Creates a new NamePart instance using the specified properties.
                     * @function create
                     * @memberof google.protobuf.UninterpretedOption.NamePart
                     * @static
                     * @param {google.protobuf.UninterpretedOption.INamePart=} [properties] Properties to set
                     * @returns {google.protobuf.UninterpretedOption.NamePart} NamePart instance
                     */
                    NamePart.create = function create(properties) {
                        return new NamePart(properties);
                    };
    
                    /**
                     * Encodes the specified NamePart message. Does not implicitly {@link google.protobuf.UninterpretedOption.NamePart.verify|verify} messages.
                     * @function encode
                     * @memberof google.protobuf.UninterpretedOption.NamePart
                     * @static
                     * @param {google.protobuf.UninterpretedOption.INamePart} message NamePart message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    NamePart.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.namePart);
                        writer.uint32(/* id 2, wireType 0 =*/16).bool(message.isExtension);
                        return writer;
                    };
    
                    /**
                     * Encodes the specified NamePart message, length delimited. Does not implicitly {@link google.protobuf.UninterpretedOption.NamePart.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof google.protobuf.UninterpretedOption.NamePart
                     * @static
                     * @param {google.protobuf.UninterpretedOption.INamePart} message NamePart message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    NamePart.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a NamePart message from the specified reader or buffer.
                     * @function decode
                     * @memberof google.protobuf.UninterpretedOption.NamePart
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {google.protobuf.UninterpretedOption.NamePart} NamePart
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    NamePart.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.UninterpretedOption.NamePart();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.namePart = reader.string();
                                break;
                            case 2:
                                message.isExtension = reader.bool();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        if (!message.hasOwnProperty("namePart"))
                            throw $util.ProtocolError("missing required 'namePart'", { instance: message });
                        if (!message.hasOwnProperty("isExtension"))
                            throw $util.ProtocolError("missing required 'isExtension'", { instance: message });
                        return message;
                    };
    
                    /**
                     * Decodes a NamePart message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof google.protobuf.UninterpretedOption.NamePart
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {google.protobuf.UninterpretedOption.NamePart} NamePart
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    NamePart.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a NamePart message.
                     * @function verify
                     * @memberof google.protobuf.UninterpretedOption.NamePart
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    NamePart.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (!$util.isString(message.namePart))
                            return "namePart: string expected";
                        if (typeof message.isExtension !== "boolean")
                            return "isExtension: boolean expected";
                        return null;
                    };
    
                    /**
                     * Creates a NamePart message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof google.protobuf.UninterpretedOption.NamePart
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {google.protobuf.UninterpretedOption.NamePart} NamePart
                     */
                    NamePart.fromObject = function fromObject(object) {
                        if (object instanceof $root.google.protobuf.UninterpretedOption.NamePart)
                            return object;
                        var message = new $root.google.protobuf.UninterpretedOption.NamePart();
                        if (object.namePart != null)
                            message.namePart = String(object.namePart);
                        if (object.isExtension != null)
                            message.isExtension = Boolean(object.isExtension);
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a NamePart message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof google.protobuf.UninterpretedOption.NamePart
                     * @static
                     * @param {google.protobuf.UninterpretedOption.NamePart} message NamePart
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    NamePart.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults) {
                            object.namePart = "";
                            object.isExtension = false;
                        }
                        if (message.namePart != null && message.hasOwnProperty("namePart"))
                            object.namePart = message.namePart;
                        if (message.isExtension != null && message.hasOwnProperty("isExtension"))
                            object.isExtension = message.isExtension;
                        return object;
                    };
    
                    /**
                     * Converts this NamePart to JSON.
                     * @function toJSON
                     * @memberof google.protobuf.UninterpretedOption.NamePart
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    NamePart.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    return NamePart;
                })();
    
                return UninterpretedOption;
            })();
    
            protobuf.SourceCodeInfo = (function() {
    
                /**
                 * Properties of a SourceCodeInfo.
                 * @memberof google.protobuf
                 * @interface ISourceCodeInfo
                 * @property {Array.<google.protobuf.SourceCodeInfo.ILocation>|null} [location] SourceCodeInfo location
                 */
    
                /**
                 * Constructs a new SourceCodeInfo.
                 * @memberof google.protobuf
                 * @classdesc Represents a SourceCodeInfo.
                 * @implements ISourceCodeInfo
                 * @constructor
                 * @param {google.protobuf.ISourceCodeInfo=} [properties] Properties to set
                 */
                function SourceCodeInfo(properties) {
                    this.location = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * SourceCodeInfo location.
                 * @member {Array.<google.protobuf.SourceCodeInfo.ILocation>} location
                 * @memberof google.protobuf.SourceCodeInfo
                 * @instance
                 */
                SourceCodeInfo.prototype.location = $util.emptyArray;
    
                /**
                 * Creates a new SourceCodeInfo instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.SourceCodeInfo
                 * @static
                 * @param {google.protobuf.ISourceCodeInfo=} [properties] Properties to set
                 * @returns {google.protobuf.SourceCodeInfo} SourceCodeInfo instance
                 */
                SourceCodeInfo.create = function create(properties) {
                    return new SourceCodeInfo(properties);
                };
    
                /**
                 * Encodes the specified SourceCodeInfo message. Does not implicitly {@link google.protobuf.SourceCodeInfo.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.SourceCodeInfo
                 * @static
                 * @param {google.protobuf.ISourceCodeInfo} message SourceCodeInfo message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                SourceCodeInfo.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.location != null && message.location.length)
                        for (var i = 0; i < message.location.length; ++i)
                            $root.google.protobuf.SourceCodeInfo.Location.encode(message.location[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified SourceCodeInfo message, length delimited. Does not implicitly {@link google.protobuf.SourceCodeInfo.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.SourceCodeInfo
                 * @static
                 * @param {google.protobuf.ISourceCodeInfo} message SourceCodeInfo message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                SourceCodeInfo.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a SourceCodeInfo message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.SourceCodeInfo
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.SourceCodeInfo} SourceCodeInfo
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                SourceCodeInfo.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.SourceCodeInfo();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            if (!(message.location && message.location.length))
                                message.location = [];
                            message.location.push($root.google.protobuf.SourceCodeInfo.Location.decode(reader, reader.uint32()));
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a SourceCodeInfo message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.SourceCodeInfo
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.SourceCodeInfo} SourceCodeInfo
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                SourceCodeInfo.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a SourceCodeInfo message.
                 * @function verify
                 * @memberof google.protobuf.SourceCodeInfo
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                SourceCodeInfo.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.location != null && message.hasOwnProperty("location")) {
                        if (!Array.isArray(message.location))
                            return "location: array expected";
                        for (var i = 0; i < message.location.length; ++i) {
                            var error = $root.google.protobuf.SourceCodeInfo.Location.verify(message.location[i]);
                            if (error)
                                return "location." + error;
                        }
                    }
                    return null;
                };
    
                /**
                 * Creates a SourceCodeInfo message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.SourceCodeInfo
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.SourceCodeInfo} SourceCodeInfo
                 */
                SourceCodeInfo.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.SourceCodeInfo)
                        return object;
                    var message = new $root.google.protobuf.SourceCodeInfo();
                    if (object.location) {
                        if (!Array.isArray(object.location))
                            throw TypeError(".google.protobuf.SourceCodeInfo.location: array expected");
                        message.location = [];
                        for (var i = 0; i < object.location.length; ++i) {
                            if (typeof object.location[i] !== "object")
                                throw TypeError(".google.protobuf.SourceCodeInfo.location: object expected");
                            message.location[i] = $root.google.protobuf.SourceCodeInfo.Location.fromObject(object.location[i]);
                        }
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from a SourceCodeInfo message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.SourceCodeInfo
                 * @static
                 * @param {google.protobuf.SourceCodeInfo} message SourceCodeInfo
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                SourceCodeInfo.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.location = [];
                    if (message.location && message.location.length) {
                        object.location = [];
                        for (var j = 0; j < message.location.length; ++j)
                            object.location[j] = $root.google.protobuf.SourceCodeInfo.Location.toObject(message.location[j], options);
                    }
                    return object;
                };
    
                /**
                 * Converts this SourceCodeInfo to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.SourceCodeInfo
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                SourceCodeInfo.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                SourceCodeInfo.Location = (function() {
    
                    /**
                     * Properties of a Location.
                     * @memberof google.protobuf.SourceCodeInfo
                     * @interface ILocation
                     * @property {Array.<number>|null} [path] Location path
                     * @property {Array.<number>|null} [span] Location span
                     * @property {string|null} [leadingComments] Location leadingComments
                     * @property {string|null} [trailingComments] Location trailingComments
                     * @property {Array.<string>|null} [leadingDetachedComments] Location leadingDetachedComments
                     */
    
                    /**
                     * Constructs a new Location.
                     * @memberof google.protobuf.SourceCodeInfo
                     * @classdesc Represents a Location.
                     * @implements ILocation
                     * @constructor
                     * @param {google.protobuf.SourceCodeInfo.ILocation=} [properties] Properties to set
                     */
                    function Location(properties) {
                        this.path = [];
                        this.span = [];
                        this.leadingDetachedComments = [];
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * Location path.
                     * @member {Array.<number>} path
                     * @memberof google.protobuf.SourceCodeInfo.Location
                     * @instance
                     */
                    Location.prototype.path = $util.emptyArray;
    
                    /**
                     * Location span.
                     * @member {Array.<number>} span
                     * @memberof google.protobuf.SourceCodeInfo.Location
                     * @instance
                     */
                    Location.prototype.span = $util.emptyArray;
    
                    /**
                     * Location leadingComments.
                     * @member {string} leadingComments
                     * @memberof google.protobuf.SourceCodeInfo.Location
                     * @instance
                     */
                    Location.prototype.leadingComments = "";
    
                    /**
                     * Location trailingComments.
                     * @member {string} trailingComments
                     * @memberof google.protobuf.SourceCodeInfo.Location
                     * @instance
                     */
                    Location.prototype.trailingComments = "";
    
                    /**
                     * Location leadingDetachedComments.
                     * @member {Array.<string>} leadingDetachedComments
                     * @memberof google.protobuf.SourceCodeInfo.Location
                     * @instance
                     */
                    Location.prototype.leadingDetachedComments = $util.emptyArray;
    
                    /**
                     * Creates a new Location instance using the specified properties.
                     * @function create
                     * @memberof google.protobuf.SourceCodeInfo.Location
                     * @static
                     * @param {google.protobuf.SourceCodeInfo.ILocation=} [properties] Properties to set
                     * @returns {google.protobuf.SourceCodeInfo.Location} Location instance
                     */
                    Location.create = function create(properties) {
                        return new Location(properties);
                    };
    
                    /**
                     * Encodes the specified Location message. Does not implicitly {@link google.protobuf.SourceCodeInfo.Location.verify|verify} messages.
                     * @function encode
                     * @memberof google.protobuf.SourceCodeInfo.Location
                     * @static
                     * @param {google.protobuf.SourceCodeInfo.ILocation} message Location message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Location.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.path != null && message.path.length) {
                            writer.uint32(/* id 1, wireType 2 =*/10).fork();
                            for (var i = 0; i < message.path.length; ++i)
                                writer.int32(message.path[i]);
                            writer.ldelim();
                        }
                        if (message.span != null && message.span.length) {
                            writer.uint32(/* id 2, wireType 2 =*/18).fork();
                            for (var i = 0; i < message.span.length; ++i)
                                writer.int32(message.span[i]);
                            writer.ldelim();
                        }
                        if (message.leadingComments != null && Object.hasOwnProperty.call(message, "leadingComments"))
                            writer.uint32(/* id 3, wireType 2 =*/26).string(message.leadingComments);
                        if (message.trailingComments != null && Object.hasOwnProperty.call(message, "trailingComments"))
                            writer.uint32(/* id 4, wireType 2 =*/34).string(message.trailingComments);
                        if (message.leadingDetachedComments != null && message.leadingDetachedComments.length)
                            for (var i = 0; i < message.leadingDetachedComments.length; ++i)
                                writer.uint32(/* id 6, wireType 2 =*/50).string(message.leadingDetachedComments[i]);
                        return writer;
                    };
    
                    /**
                     * Encodes the specified Location message, length delimited. Does not implicitly {@link google.protobuf.SourceCodeInfo.Location.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof google.protobuf.SourceCodeInfo.Location
                     * @static
                     * @param {google.protobuf.SourceCodeInfo.ILocation} message Location message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Location.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a Location message from the specified reader or buffer.
                     * @function decode
                     * @memberof google.protobuf.SourceCodeInfo.Location
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {google.protobuf.SourceCodeInfo.Location} Location
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Location.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.SourceCodeInfo.Location();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                if (!(message.path && message.path.length))
                                    message.path = [];
                                if ((tag & 7) === 2) {
                                    var end2 = reader.uint32() + reader.pos;
                                    while (reader.pos < end2)
                                        message.path.push(reader.int32());
                                } else
                                    message.path.push(reader.int32());
                                break;
                            case 2:
                                if (!(message.span && message.span.length))
                                    message.span = [];
                                if ((tag & 7) === 2) {
                                    var end2 = reader.uint32() + reader.pos;
                                    while (reader.pos < end2)
                                        message.span.push(reader.int32());
                                } else
                                    message.span.push(reader.int32());
                                break;
                            case 3:
                                message.leadingComments = reader.string();
                                break;
                            case 4:
                                message.trailingComments = reader.string();
                                break;
                            case 6:
                                if (!(message.leadingDetachedComments && message.leadingDetachedComments.length))
                                    message.leadingDetachedComments = [];
                                message.leadingDetachedComments.push(reader.string());
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a Location message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof google.protobuf.SourceCodeInfo.Location
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {google.protobuf.SourceCodeInfo.Location} Location
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Location.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a Location message.
                     * @function verify
                     * @memberof google.protobuf.SourceCodeInfo.Location
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    Location.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.path != null && message.hasOwnProperty("path")) {
                            if (!Array.isArray(message.path))
                                return "path: array expected";
                            for (var i = 0; i < message.path.length; ++i)
                                if (!$util.isInteger(message.path[i]))
                                    return "path: integer[] expected";
                        }
                        if (message.span != null && message.hasOwnProperty("span")) {
                            if (!Array.isArray(message.span))
                                return "span: array expected";
                            for (var i = 0; i < message.span.length; ++i)
                                if (!$util.isInteger(message.span[i]))
                                    return "span: integer[] expected";
                        }
                        if (message.leadingComments != null && message.hasOwnProperty("leadingComments"))
                            if (!$util.isString(message.leadingComments))
                                return "leadingComments: string expected";
                        if (message.trailingComments != null && message.hasOwnProperty("trailingComments"))
                            if (!$util.isString(message.trailingComments))
                                return "trailingComments: string expected";
                        if (message.leadingDetachedComments != null && message.hasOwnProperty("leadingDetachedComments")) {
                            if (!Array.isArray(message.leadingDetachedComments))
                                return "leadingDetachedComments: array expected";
                            for (var i = 0; i < message.leadingDetachedComments.length; ++i)
                                if (!$util.isString(message.leadingDetachedComments[i]))
                                    return "leadingDetachedComments: string[] expected";
                        }
                        return null;
                    };
    
                    /**
                     * Creates a Location message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof google.protobuf.SourceCodeInfo.Location
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {google.protobuf.SourceCodeInfo.Location} Location
                     */
                    Location.fromObject = function fromObject(object) {
                        if (object instanceof $root.google.protobuf.SourceCodeInfo.Location)
                            return object;
                        var message = new $root.google.protobuf.SourceCodeInfo.Location();
                        if (object.path) {
                            if (!Array.isArray(object.path))
                                throw TypeError(".google.protobuf.SourceCodeInfo.Location.path: array expected");
                            message.path = [];
                            for (var i = 0; i < object.path.length; ++i)
                                message.path[i] = object.path[i] | 0;
                        }
                        if (object.span) {
                            if (!Array.isArray(object.span))
                                throw TypeError(".google.protobuf.SourceCodeInfo.Location.span: array expected");
                            message.span = [];
                            for (var i = 0; i < object.span.length; ++i)
                                message.span[i] = object.span[i] | 0;
                        }
                        if (object.leadingComments != null)
                            message.leadingComments = String(object.leadingComments);
                        if (object.trailingComments != null)
                            message.trailingComments = String(object.trailingComments);
                        if (object.leadingDetachedComments) {
                            if (!Array.isArray(object.leadingDetachedComments))
                                throw TypeError(".google.protobuf.SourceCodeInfo.Location.leadingDetachedComments: array expected");
                            message.leadingDetachedComments = [];
                            for (var i = 0; i < object.leadingDetachedComments.length; ++i)
                                message.leadingDetachedComments[i] = String(object.leadingDetachedComments[i]);
                        }
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a Location message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof google.protobuf.SourceCodeInfo.Location
                     * @static
                     * @param {google.protobuf.SourceCodeInfo.Location} message Location
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    Location.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.arrays || options.defaults) {
                            object.path = [];
                            object.span = [];
                            object.leadingDetachedComments = [];
                        }
                        if (options.defaults) {
                            object.leadingComments = "";
                            object.trailingComments = "";
                        }
                        if (message.path && message.path.length) {
                            object.path = [];
                            for (var j = 0; j < message.path.length; ++j)
                                object.path[j] = message.path[j];
                        }
                        if (message.span && message.span.length) {
                            object.span = [];
                            for (var j = 0; j < message.span.length; ++j)
                                object.span[j] = message.span[j];
                        }
                        if (message.leadingComments != null && message.hasOwnProperty("leadingComments"))
                            object.leadingComments = message.leadingComments;
                        if (message.trailingComments != null && message.hasOwnProperty("trailingComments"))
                            object.trailingComments = message.trailingComments;
                        if (message.leadingDetachedComments && message.leadingDetachedComments.length) {
                            object.leadingDetachedComments = [];
                            for (var j = 0; j < message.leadingDetachedComments.length; ++j)
                                object.leadingDetachedComments[j] = message.leadingDetachedComments[j];
                        }
                        return object;
                    };
    
                    /**
                     * Converts this Location to JSON.
                     * @function toJSON
                     * @memberof google.protobuf.SourceCodeInfo.Location
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    Location.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    return Location;
                })();
    
                return SourceCodeInfo;
            })();
    
            protobuf.GeneratedCodeInfo = (function() {
    
                /**
                 * Properties of a GeneratedCodeInfo.
                 * @memberof google.protobuf
                 * @interface IGeneratedCodeInfo
                 * @property {Array.<google.protobuf.GeneratedCodeInfo.IAnnotation>|null} [annotation] GeneratedCodeInfo annotation
                 */
    
                /**
                 * Constructs a new GeneratedCodeInfo.
                 * @memberof google.protobuf
                 * @classdesc Represents a GeneratedCodeInfo.
                 * @implements IGeneratedCodeInfo
                 * @constructor
                 * @param {google.protobuf.IGeneratedCodeInfo=} [properties] Properties to set
                 */
                function GeneratedCodeInfo(properties) {
                    this.annotation = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * GeneratedCodeInfo annotation.
                 * @member {Array.<google.protobuf.GeneratedCodeInfo.IAnnotation>} annotation
                 * @memberof google.protobuf.GeneratedCodeInfo
                 * @instance
                 */
                GeneratedCodeInfo.prototype.annotation = $util.emptyArray;
    
                /**
                 * Creates a new GeneratedCodeInfo instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.GeneratedCodeInfo
                 * @static
                 * @param {google.protobuf.IGeneratedCodeInfo=} [properties] Properties to set
                 * @returns {google.protobuf.GeneratedCodeInfo} GeneratedCodeInfo instance
                 */
                GeneratedCodeInfo.create = function create(properties) {
                    return new GeneratedCodeInfo(properties);
                };
    
                /**
                 * Encodes the specified GeneratedCodeInfo message. Does not implicitly {@link google.protobuf.GeneratedCodeInfo.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.GeneratedCodeInfo
                 * @static
                 * @param {google.protobuf.IGeneratedCodeInfo} message GeneratedCodeInfo message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                GeneratedCodeInfo.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.annotation != null && message.annotation.length)
                        for (var i = 0; i < message.annotation.length; ++i)
                            $root.google.protobuf.GeneratedCodeInfo.Annotation.encode(message.annotation[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified GeneratedCodeInfo message, length delimited. Does not implicitly {@link google.protobuf.GeneratedCodeInfo.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.GeneratedCodeInfo
                 * @static
                 * @param {google.protobuf.IGeneratedCodeInfo} message GeneratedCodeInfo message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                GeneratedCodeInfo.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a GeneratedCodeInfo message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.GeneratedCodeInfo
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.GeneratedCodeInfo} GeneratedCodeInfo
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                GeneratedCodeInfo.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.GeneratedCodeInfo();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            if (!(message.annotation && message.annotation.length))
                                message.annotation = [];
                            message.annotation.push($root.google.protobuf.GeneratedCodeInfo.Annotation.decode(reader, reader.uint32()));
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a GeneratedCodeInfo message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.GeneratedCodeInfo
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.GeneratedCodeInfo} GeneratedCodeInfo
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                GeneratedCodeInfo.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a GeneratedCodeInfo message.
                 * @function verify
                 * @memberof google.protobuf.GeneratedCodeInfo
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                GeneratedCodeInfo.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.annotation != null && message.hasOwnProperty("annotation")) {
                        if (!Array.isArray(message.annotation))
                            return "annotation: array expected";
                        for (var i = 0; i < message.annotation.length; ++i) {
                            var error = $root.google.protobuf.GeneratedCodeInfo.Annotation.verify(message.annotation[i]);
                            if (error)
                                return "annotation." + error;
                        }
                    }
                    return null;
                };
    
                /**
                 * Creates a GeneratedCodeInfo message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.GeneratedCodeInfo
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.GeneratedCodeInfo} GeneratedCodeInfo
                 */
                GeneratedCodeInfo.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.GeneratedCodeInfo)
                        return object;
                    var message = new $root.google.protobuf.GeneratedCodeInfo();
                    if (object.annotation) {
                        if (!Array.isArray(object.annotation))
                            throw TypeError(".google.protobuf.GeneratedCodeInfo.annotation: array expected");
                        message.annotation = [];
                        for (var i = 0; i < object.annotation.length; ++i) {
                            if (typeof object.annotation[i] !== "object")
                                throw TypeError(".google.protobuf.GeneratedCodeInfo.annotation: object expected");
                            message.annotation[i] = $root.google.protobuf.GeneratedCodeInfo.Annotation.fromObject(object.annotation[i]);
                        }
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from a GeneratedCodeInfo message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.GeneratedCodeInfo
                 * @static
                 * @param {google.protobuf.GeneratedCodeInfo} message GeneratedCodeInfo
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                GeneratedCodeInfo.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.annotation = [];
                    if (message.annotation && message.annotation.length) {
                        object.annotation = [];
                        for (var j = 0; j < message.annotation.length; ++j)
                            object.annotation[j] = $root.google.protobuf.GeneratedCodeInfo.Annotation.toObject(message.annotation[j], options);
                    }
                    return object;
                };
    
                /**
                 * Converts this GeneratedCodeInfo to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.GeneratedCodeInfo
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                GeneratedCodeInfo.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                GeneratedCodeInfo.Annotation = (function() {
    
                    /**
                     * Properties of an Annotation.
                     * @memberof google.protobuf.GeneratedCodeInfo
                     * @interface IAnnotation
                     * @property {Array.<number>|null} [path] Annotation path
                     * @property {string|null} [sourceFile] Annotation sourceFile
                     * @property {number|null} [begin] Annotation begin
                     * @property {number|null} [end] Annotation end
                     */
    
                    /**
                     * Constructs a new Annotation.
                     * @memberof google.protobuf.GeneratedCodeInfo
                     * @classdesc Represents an Annotation.
                     * @implements IAnnotation
                     * @constructor
                     * @param {google.protobuf.GeneratedCodeInfo.IAnnotation=} [properties] Properties to set
                     */
                    function Annotation(properties) {
                        this.path = [];
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * Annotation path.
                     * @member {Array.<number>} path
                     * @memberof google.protobuf.GeneratedCodeInfo.Annotation
                     * @instance
                     */
                    Annotation.prototype.path = $util.emptyArray;
    
                    /**
                     * Annotation sourceFile.
                     * @member {string} sourceFile
                     * @memberof google.protobuf.GeneratedCodeInfo.Annotation
                     * @instance
                     */
                    Annotation.prototype.sourceFile = "";
    
                    /**
                     * Annotation begin.
                     * @member {number} begin
                     * @memberof google.protobuf.GeneratedCodeInfo.Annotation
                     * @instance
                     */
                    Annotation.prototype.begin = 0;
    
                    /**
                     * Annotation end.
                     * @member {number} end
                     * @memberof google.protobuf.GeneratedCodeInfo.Annotation
                     * @instance
                     */
                    Annotation.prototype.end = 0;
    
                    /**
                     * Creates a new Annotation instance using the specified properties.
                     * @function create
                     * @memberof google.protobuf.GeneratedCodeInfo.Annotation
                     * @static
                     * @param {google.protobuf.GeneratedCodeInfo.IAnnotation=} [properties] Properties to set
                     * @returns {google.protobuf.GeneratedCodeInfo.Annotation} Annotation instance
                     */
                    Annotation.create = function create(properties) {
                        return new Annotation(properties);
                    };
    
                    /**
                     * Encodes the specified Annotation message. Does not implicitly {@link google.protobuf.GeneratedCodeInfo.Annotation.verify|verify} messages.
                     * @function encode
                     * @memberof google.protobuf.GeneratedCodeInfo.Annotation
                     * @static
                     * @param {google.protobuf.GeneratedCodeInfo.IAnnotation} message Annotation message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Annotation.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.path != null && message.path.length) {
                            writer.uint32(/* id 1, wireType 2 =*/10).fork();
                            for (var i = 0; i < message.path.length; ++i)
                                writer.int32(message.path[i]);
                            writer.ldelim();
                        }
                        if (message.sourceFile != null && Object.hasOwnProperty.call(message, "sourceFile"))
                            writer.uint32(/* id 2, wireType 2 =*/18).string(message.sourceFile);
                        if (message.begin != null && Object.hasOwnProperty.call(message, "begin"))
                            writer.uint32(/* id 3, wireType 0 =*/24).int32(message.begin);
                        if (message.end != null && Object.hasOwnProperty.call(message, "end"))
                            writer.uint32(/* id 4, wireType 0 =*/32).int32(message.end);
                        return writer;
                    };
    
                    /**
                     * Encodes the specified Annotation message, length delimited. Does not implicitly {@link google.protobuf.GeneratedCodeInfo.Annotation.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof google.protobuf.GeneratedCodeInfo.Annotation
                     * @static
                     * @param {google.protobuf.GeneratedCodeInfo.IAnnotation} message Annotation message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Annotation.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes an Annotation message from the specified reader or buffer.
                     * @function decode
                     * @memberof google.protobuf.GeneratedCodeInfo.Annotation
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {google.protobuf.GeneratedCodeInfo.Annotation} Annotation
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Annotation.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.GeneratedCodeInfo.Annotation();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                if (!(message.path && message.path.length))
                                    message.path = [];
                                if ((tag & 7) === 2) {
                                    var end2 = reader.uint32() + reader.pos;
                                    while (reader.pos < end2)
                                        message.path.push(reader.int32());
                                } else
                                    message.path.push(reader.int32());
                                break;
                            case 2:
                                message.sourceFile = reader.string();
                                break;
                            case 3:
                                message.begin = reader.int32();
                                break;
                            case 4:
                                message.end = reader.int32();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes an Annotation message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof google.protobuf.GeneratedCodeInfo.Annotation
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {google.protobuf.GeneratedCodeInfo.Annotation} Annotation
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Annotation.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies an Annotation message.
                     * @function verify
                     * @memberof google.protobuf.GeneratedCodeInfo.Annotation
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    Annotation.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.path != null && message.hasOwnProperty("path")) {
                            if (!Array.isArray(message.path))
                                return "path: array expected";
                            for (var i = 0; i < message.path.length; ++i)
                                if (!$util.isInteger(message.path[i]))
                                    return "path: integer[] expected";
                        }
                        if (message.sourceFile != null && message.hasOwnProperty("sourceFile"))
                            if (!$util.isString(message.sourceFile))
                                return "sourceFile: string expected";
                        if (message.begin != null && message.hasOwnProperty("begin"))
                            if (!$util.isInteger(message.begin))
                                return "begin: integer expected";
                        if (message.end != null && message.hasOwnProperty("end"))
                            if (!$util.isInteger(message.end))
                                return "end: integer expected";
                        return null;
                    };
    
                    /**
                     * Creates an Annotation message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof google.protobuf.GeneratedCodeInfo.Annotation
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {google.protobuf.GeneratedCodeInfo.Annotation} Annotation
                     */
                    Annotation.fromObject = function fromObject(object) {
                        if (object instanceof $root.google.protobuf.GeneratedCodeInfo.Annotation)
                            return object;
                        var message = new $root.google.protobuf.GeneratedCodeInfo.Annotation();
                        if (object.path) {
                            if (!Array.isArray(object.path))
                                throw TypeError(".google.protobuf.GeneratedCodeInfo.Annotation.path: array expected");
                            message.path = [];
                            for (var i = 0; i < object.path.length; ++i)
                                message.path[i] = object.path[i] | 0;
                        }
                        if (object.sourceFile != null)
                            message.sourceFile = String(object.sourceFile);
                        if (object.begin != null)
                            message.begin = object.begin | 0;
                        if (object.end != null)
                            message.end = object.end | 0;
                        return message;
                    };
    
                    /**
                     * Creates a plain object from an Annotation message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof google.protobuf.GeneratedCodeInfo.Annotation
                     * @static
                     * @param {google.protobuf.GeneratedCodeInfo.Annotation} message Annotation
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    Annotation.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.arrays || options.defaults)
                            object.path = [];
                        if (options.defaults) {
                            object.sourceFile = "";
                            object.begin = 0;
                            object.end = 0;
                        }
                        if (message.path && message.path.length) {
                            object.path = [];
                            for (var j = 0; j < message.path.length; ++j)
                                object.path[j] = message.path[j];
                        }
                        if (message.sourceFile != null && message.hasOwnProperty("sourceFile"))
                            object.sourceFile = message.sourceFile;
                        if (message.begin != null && message.hasOwnProperty("begin"))
                            object.begin = message.begin;
                        if (message.end != null && message.hasOwnProperty("end"))
                            object.end = message.end;
                        return object;
                    };
    
                    /**
                     * Converts this Annotation to JSON.
                     * @function toJSON
                     * @memberof google.protobuf.GeneratedCodeInfo.Annotation
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    Annotation.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    return Annotation;
                })();
    
                return GeneratedCodeInfo;
            })();
    
            protobuf.Any = (function() {
    
                /**
                 * Properties of an Any.
                 * @memberof google.protobuf
                 * @interface IAny
                 * @property {string|null} [type_url] Any type_url
                 * @property {Uint8Array|null} [value] Any value
                 */
    
                /**
                 * Constructs a new Any.
                 * @memberof google.protobuf
                 * @classdesc Represents an Any.
                 * @implements IAny
                 * @constructor
                 * @param {google.protobuf.IAny=} [properties] Properties to set
                 */
                function Any(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * Any type_url.
                 * @member {string} type_url
                 * @memberof google.protobuf.Any
                 * @instance
                 */
                Any.prototype.type_url = "";
    
                /**
                 * Any value.
                 * @member {Uint8Array} value
                 * @memberof google.protobuf.Any
                 * @instance
                 */
                Any.prototype.value = $util.newBuffer([]);
    
                /**
                 * Creates a new Any instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.Any
                 * @static
                 * @param {google.protobuf.IAny=} [properties] Properties to set
                 * @returns {google.protobuf.Any} Any instance
                 */
                Any.create = function create(properties) {
                    return new Any(properties);
                };
    
                /**
                 * Encodes the specified Any message. Does not implicitly {@link google.protobuf.Any.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.Any
                 * @static
                 * @param {google.protobuf.IAny} message Any message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Any.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.type_url != null && Object.hasOwnProperty.call(message, "type_url"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.type_url);
                    if (message.value != null && Object.hasOwnProperty.call(message, "value"))
                        writer.uint32(/* id 2, wireType 2 =*/18).bytes(message.value);
                    return writer;
                };
    
                /**
                 * Encodes the specified Any message, length delimited. Does not implicitly {@link google.protobuf.Any.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.Any
                 * @static
                 * @param {google.protobuf.IAny} message Any message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Any.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes an Any message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.Any
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.Any} Any
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Any.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.Any();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.type_url = reader.string();
                            break;
                        case 2:
                            message.value = reader.bytes();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes an Any message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.Any
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.Any} Any
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Any.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies an Any message.
                 * @function verify
                 * @memberof google.protobuf.Any
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                Any.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.type_url != null && message.hasOwnProperty("type_url"))
                        if (!$util.isString(message.type_url))
                            return "type_url: string expected";
                    if (message.value != null && message.hasOwnProperty("value"))
                        if (!(message.value && typeof message.value.length === "number" || $util.isString(message.value)))
                            return "value: buffer expected";
                    return null;
                };
    
                /**
                 * Creates an Any message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.Any
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.Any} Any
                 */
                Any.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.Any)
                        return object;
                    var message = new $root.google.protobuf.Any();
                    if (object.type_url != null)
                        message.type_url = String(object.type_url);
                    if (object.value != null)
                        if (typeof object.value === "string")
                            $util.base64.decode(object.value, message.value = $util.newBuffer($util.base64.length(object.value)), 0);
                        else if (object.value.length)
                            message.value = object.value;
                    return message;
                };
    
                /**
                 * Creates a plain object from an Any message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.Any
                 * @static
                 * @param {google.protobuf.Any} message Any
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                Any.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults) {
                        object.type_url = "";
                        if (options.bytes === String)
                            object.value = "";
                        else {
                            object.value = [];
                            if (options.bytes !== Array)
                                object.value = $util.newBuffer(object.value);
                        }
                    }
                    if (message.type_url != null && message.hasOwnProperty("type_url"))
                        object.type_url = message.type_url;
                    if (message.value != null && message.hasOwnProperty("value"))
                        object.value = options.bytes === String ? $util.base64.encode(message.value, 0, message.value.length) : options.bytes === Array ? Array.prototype.slice.call(message.value) : message.value;
                    return object;
                };
    
                /**
                 * Converts this Any to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.Any
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                Any.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return Any;
            })();
    
            protobuf.Duration = (function() {
    
                /**
                 * Properties of a Duration.
                 * @memberof google.protobuf
                 * @interface IDuration
                 * @property {number|Long|null} [seconds] Duration seconds
                 * @property {number|null} [nanos] Duration nanos
                 */
    
                /**
                 * Constructs a new Duration.
                 * @memberof google.protobuf
                 * @classdesc Represents a Duration.
                 * @implements IDuration
                 * @constructor
                 * @param {google.protobuf.IDuration=} [properties] Properties to set
                 */
                function Duration(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * Duration seconds.
                 * @member {number|Long} seconds
                 * @memberof google.protobuf.Duration
                 * @instance
                 */
                Duration.prototype.seconds = $util.Long ? $util.Long.fromBits(0,0,false) : 0;
    
                /**
                 * Duration nanos.
                 * @member {number} nanos
                 * @memberof google.protobuf.Duration
                 * @instance
                 */
                Duration.prototype.nanos = 0;
    
                /**
                 * Creates a new Duration instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.Duration
                 * @static
                 * @param {google.protobuf.IDuration=} [properties] Properties to set
                 * @returns {google.protobuf.Duration} Duration instance
                 */
                Duration.create = function create(properties) {
                    return new Duration(properties);
                };
    
                /**
                 * Encodes the specified Duration message. Does not implicitly {@link google.protobuf.Duration.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.Duration
                 * @static
                 * @param {google.protobuf.IDuration} message Duration message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Duration.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.seconds != null && Object.hasOwnProperty.call(message, "seconds"))
                        writer.uint32(/* id 1, wireType 0 =*/8).int64(message.seconds);
                    if (message.nanos != null && Object.hasOwnProperty.call(message, "nanos"))
                        writer.uint32(/* id 2, wireType 0 =*/16).int32(message.nanos);
                    return writer;
                };
    
                /**
                 * Encodes the specified Duration message, length delimited. Does not implicitly {@link google.protobuf.Duration.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.Duration
                 * @static
                 * @param {google.protobuf.IDuration} message Duration message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Duration.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a Duration message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.Duration
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.Duration} Duration
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Duration.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.Duration();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.seconds = reader.int64();
                            break;
                        case 2:
                            message.nanos = reader.int32();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a Duration message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.Duration
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.Duration} Duration
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Duration.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a Duration message.
                 * @function verify
                 * @memberof google.protobuf.Duration
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                Duration.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.seconds != null && message.hasOwnProperty("seconds"))
                        if (!$util.isInteger(message.seconds) && !(message.seconds && $util.isInteger(message.seconds.low) && $util.isInteger(message.seconds.high)))
                            return "seconds: integer|Long expected";
                    if (message.nanos != null && message.hasOwnProperty("nanos"))
                        if (!$util.isInteger(message.nanos))
                            return "nanos: integer expected";
                    return null;
                };
    
                /**
                 * Creates a Duration message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.Duration
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.Duration} Duration
                 */
                Duration.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.Duration)
                        return object;
                    var message = new $root.google.protobuf.Duration();
                    if (object.seconds != null)
                        if ($util.Long)
                            (message.seconds = $util.Long.fromValue(object.seconds)).unsigned = false;
                        else if (typeof object.seconds === "string")
                            message.seconds = parseInt(object.seconds, 10);
                        else if (typeof object.seconds === "number")
                            message.seconds = object.seconds;
                        else if (typeof object.seconds === "object")
                            message.seconds = new $util.LongBits(object.seconds.low >>> 0, object.seconds.high >>> 0).toNumber();
                    if (object.nanos != null)
                        message.nanos = object.nanos | 0;
                    return message;
                };
    
                /**
                 * Creates a plain object from a Duration message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.Duration
                 * @static
                 * @param {google.protobuf.Duration} message Duration
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                Duration.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults) {
                        if ($util.Long) {
                            var long = new $util.Long(0, 0, false);
                            object.seconds = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                        } else
                            object.seconds = options.longs === String ? "0" : 0;
                        object.nanos = 0;
                    }
                    if (message.seconds != null && message.hasOwnProperty("seconds"))
                        if (typeof message.seconds === "number")
                            object.seconds = options.longs === String ? String(message.seconds) : message.seconds;
                        else
                            object.seconds = options.longs === String ? $util.Long.prototype.toString.call(message.seconds) : options.longs === Number ? new $util.LongBits(message.seconds.low >>> 0, message.seconds.high >>> 0).toNumber() : message.seconds;
                    if (message.nanos != null && message.hasOwnProperty("nanos"))
                        object.nanos = message.nanos;
                    return object;
                };
    
                /**
                 * Converts this Duration to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.Duration
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                Duration.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return Duration;
            })();
    
            protobuf.Empty = (function() {
    
                /**
                 * Properties of an Empty.
                 * @memberof google.protobuf
                 * @interface IEmpty
                 */
    
                /**
                 * Constructs a new Empty.
                 * @memberof google.protobuf
                 * @classdesc Represents an Empty.
                 * @implements IEmpty
                 * @constructor
                 * @param {google.protobuf.IEmpty=} [properties] Properties to set
                 */
                function Empty(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * Creates a new Empty instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.Empty
                 * @static
                 * @param {google.protobuf.IEmpty=} [properties] Properties to set
                 * @returns {google.protobuf.Empty} Empty instance
                 */
                Empty.create = function create(properties) {
                    return new Empty(properties);
                };
    
                /**
                 * Encodes the specified Empty message. Does not implicitly {@link google.protobuf.Empty.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.Empty
                 * @static
                 * @param {google.protobuf.IEmpty} message Empty message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Empty.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    return writer;
                };
    
                /**
                 * Encodes the specified Empty message, length delimited. Does not implicitly {@link google.protobuf.Empty.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.Empty
                 * @static
                 * @param {google.protobuf.IEmpty} message Empty message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Empty.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes an Empty message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.Empty
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.Empty} Empty
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Empty.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.Empty();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes an Empty message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.Empty
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.Empty} Empty
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Empty.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies an Empty message.
                 * @function verify
                 * @memberof google.protobuf.Empty
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                Empty.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    return null;
                };
    
                /**
                 * Creates an Empty message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.Empty
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.Empty} Empty
                 */
                Empty.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.Empty)
                        return object;
                    return new $root.google.protobuf.Empty();
                };
    
                /**
                 * Creates a plain object from an Empty message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.Empty
                 * @static
                 * @param {google.protobuf.Empty} message Empty
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                Empty.toObject = function toObject() {
                    return {};
                };
    
                /**
                 * Converts this Empty to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.Empty
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                Empty.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return Empty;
            })();
    
            protobuf.Timestamp = (function() {
    
                /**
                 * Properties of a Timestamp.
                 * @memberof google.protobuf
                 * @interface ITimestamp
                 * @property {number|Long|null} [seconds] Timestamp seconds
                 * @property {number|null} [nanos] Timestamp nanos
                 */
    
                /**
                 * Constructs a new Timestamp.
                 * @memberof google.protobuf
                 * @classdesc Represents a Timestamp.
                 * @implements ITimestamp
                 * @constructor
                 * @param {google.protobuf.ITimestamp=} [properties] Properties to set
                 */
                function Timestamp(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * Timestamp seconds.
                 * @member {number|Long} seconds
                 * @memberof google.protobuf.Timestamp
                 * @instance
                 */
                Timestamp.prototype.seconds = $util.Long ? $util.Long.fromBits(0,0,false) : 0;
    
                /**
                 * Timestamp nanos.
                 * @member {number} nanos
                 * @memberof google.protobuf.Timestamp
                 * @instance
                 */
                Timestamp.prototype.nanos = 0;
    
                /**
                 * Creates a new Timestamp instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.Timestamp
                 * @static
                 * @param {google.protobuf.ITimestamp=} [properties] Properties to set
                 * @returns {google.protobuf.Timestamp} Timestamp instance
                 */
                Timestamp.create = function create(properties) {
                    return new Timestamp(properties);
                };
    
                /**
                 * Encodes the specified Timestamp message. Does not implicitly {@link google.protobuf.Timestamp.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.Timestamp
                 * @static
                 * @param {google.protobuf.ITimestamp} message Timestamp message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Timestamp.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.seconds != null && Object.hasOwnProperty.call(message, "seconds"))
                        writer.uint32(/* id 1, wireType 0 =*/8).int64(message.seconds);
                    if (message.nanos != null && Object.hasOwnProperty.call(message, "nanos"))
                        writer.uint32(/* id 2, wireType 0 =*/16).int32(message.nanos);
                    return writer;
                };
    
                /**
                 * Encodes the specified Timestamp message, length delimited. Does not implicitly {@link google.protobuf.Timestamp.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.Timestamp
                 * @static
                 * @param {google.protobuf.ITimestamp} message Timestamp message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Timestamp.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a Timestamp message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.Timestamp
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.Timestamp} Timestamp
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Timestamp.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.Timestamp();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.seconds = reader.int64();
                            break;
                        case 2:
                            message.nanos = reader.int32();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a Timestamp message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.Timestamp
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.Timestamp} Timestamp
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Timestamp.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a Timestamp message.
                 * @function verify
                 * @memberof google.protobuf.Timestamp
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                Timestamp.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.seconds != null && message.hasOwnProperty("seconds"))
                        if (!$util.isInteger(message.seconds) && !(message.seconds && $util.isInteger(message.seconds.low) && $util.isInteger(message.seconds.high)))
                            return "seconds: integer|Long expected";
                    if (message.nanos != null && message.hasOwnProperty("nanos"))
                        if (!$util.isInteger(message.nanos))
                            return "nanos: integer expected";
                    return null;
                };
    
                /**
                 * Creates a Timestamp message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.Timestamp
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.Timestamp} Timestamp
                 */
                Timestamp.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.Timestamp)
                        return object;
                    var message = new $root.google.protobuf.Timestamp();
                    if (object.seconds != null)
                        if ($util.Long)
                            (message.seconds = $util.Long.fromValue(object.seconds)).unsigned = false;
                        else if (typeof object.seconds === "string")
                            message.seconds = parseInt(object.seconds, 10);
                        else if (typeof object.seconds === "number")
                            message.seconds = object.seconds;
                        else if (typeof object.seconds === "object")
                            message.seconds = new $util.LongBits(object.seconds.low >>> 0, object.seconds.high >>> 0).toNumber();
                    if (object.nanos != null)
                        message.nanos = object.nanos | 0;
                    return message;
                };
    
                /**
                 * Creates a plain object from a Timestamp message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.Timestamp
                 * @static
                 * @param {google.protobuf.Timestamp} message Timestamp
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                Timestamp.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults) {
                        if ($util.Long) {
                            var long = new $util.Long(0, 0, false);
                            object.seconds = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                        } else
                            object.seconds = options.longs === String ? "0" : 0;
                        object.nanos = 0;
                    }
                    if (message.seconds != null && message.hasOwnProperty("seconds"))
                        if (typeof message.seconds === "number")
                            object.seconds = options.longs === String ? String(message.seconds) : message.seconds;
                        else
                            object.seconds = options.longs === String ? $util.Long.prototype.toString.call(message.seconds) : options.longs === Number ? new $util.LongBits(message.seconds.low >>> 0, message.seconds.high >>> 0).toNumber() : message.seconds;
                    if (message.nanos != null && message.hasOwnProperty("nanos"))
                        object.nanos = message.nanos;
                    return object;
                };
    
                /**
                 * Converts this Timestamp to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.Timestamp
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                Timestamp.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return Timestamp;
            })();
    
            protobuf.FieldMask = (function() {
    
                /**
                 * Properties of a FieldMask.
                 * @memberof google.protobuf
                 * @interface IFieldMask
                 * @property {Array.<string>|null} [paths] FieldMask paths
                 */
    
                /**
                 * Constructs a new FieldMask.
                 * @memberof google.protobuf
                 * @classdesc Represents a FieldMask.
                 * @implements IFieldMask
                 * @constructor
                 * @param {google.protobuf.IFieldMask=} [properties] Properties to set
                 */
                function FieldMask(properties) {
                    this.paths = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * FieldMask paths.
                 * @member {Array.<string>} paths
                 * @memberof google.protobuf.FieldMask
                 * @instance
                 */
                FieldMask.prototype.paths = $util.emptyArray;
    
                /**
                 * Creates a new FieldMask instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.FieldMask
                 * @static
                 * @param {google.protobuf.IFieldMask=} [properties] Properties to set
                 * @returns {google.protobuf.FieldMask} FieldMask instance
                 */
                FieldMask.create = function create(properties) {
                    return new FieldMask(properties);
                };
    
                /**
                 * Encodes the specified FieldMask message. Does not implicitly {@link google.protobuf.FieldMask.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.FieldMask
                 * @static
                 * @param {google.protobuf.IFieldMask} message FieldMask message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                FieldMask.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.paths != null && message.paths.length)
                        for (var i = 0; i < message.paths.length; ++i)
                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.paths[i]);
                    return writer;
                };
    
                /**
                 * Encodes the specified FieldMask message, length delimited. Does not implicitly {@link google.protobuf.FieldMask.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.FieldMask
                 * @static
                 * @param {google.protobuf.IFieldMask} message FieldMask message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                FieldMask.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a FieldMask message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.FieldMask
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.FieldMask} FieldMask
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                FieldMask.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.FieldMask();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            if (!(message.paths && message.paths.length))
                                message.paths = [];
                            message.paths.push(reader.string());
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a FieldMask message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.FieldMask
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.FieldMask} FieldMask
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                FieldMask.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a FieldMask message.
                 * @function verify
                 * @memberof google.protobuf.FieldMask
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                FieldMask.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.paths != null && message.hasOwnProperty("paths")) {
                        if (!Array.isArray(message.paths))
                            return "paths: array expected";
                        for (var i = 0; i < message.paths.length; ++i)
                            if (!$util.isString(message.paths[i]))
                                return "paths: string[] expected";
                    }
                    return null;
                };
    
                /**
                 * Creates a FieldMask message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.FieldMask
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.FieldMask} FieldMask
                 */
                FieldMask.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.FieldMask)
                        return object;
                    var message = new $root.google.protobuf.FieldMask();
                    if (object.paths) {
                        if (!Array.isArray(object.paths))
                            throw TypeError(".google.protobuf.FieldMask.paths: array expected");
                        message.paths = [];
                        for (var i = 0; i < object.paths.length; ++i)
                            message.paths[i] = String(object.paths[i]);
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from a FieldMask message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.FieldMask
                 * @static
                 * @param {google.protobuf.FieldMask} message FieldMask
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                FieldMask.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.paths = [];
                    if (message.paths && message.paths.length) {
                        object.paths = [];
                        for (var j = 0; j < message.paths.length; ++j)
                            object.paths[j] = message.paths[j];
                    }
                    return object;
                };
    
                /**
                 * Converts this FieldMask to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.FieldMask
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                FieldMask.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return FieldMask;
            })();
    
            return protobuf;
        })();
    
        google.longrunning = (function() {
    
            /**
             * Namespace longrunning.
             * @memberof google
             * @namespace
             */
            var longrunning = {};
    
            longrunning.Operations = (function() {
    
                /**
                 * Constructs a new Operations service.
                 * @memberof google.longrunning
                 * @classdesc Represents an Operations
                 * @extends $protobuf.rpc.Service
                 * @constructor
                 * @param {$protobuf.RPCImpl} rpcImpl RPC implementation
                 * @param {boolean} [requestDelimited=false] Whether requests are length-delimited
                 * @param {boolean} [responseDelimited=false] Whether responses are length-delimited
                 */
                function Operations(rpcImpl, requestDelimited, responseDelimited) {
                    $protobuf.rpc.Service.call(this, rpcImpl, requestDelimited, responseDelimited);
                }
    
                (Operations.prototype = Object.create($protobuf.rpc.Service.prototype)).constructor = Operations;
    
                /**
                 * Creates new Operations service using the specified rpc implementation.
                 * @function create
                 * @memberof google.longrunning.Operations
                 * @static
                 * @param {$protobuf.RPCImpl} rpcImpl RPC implementation
                 * @param {boolean} [requestDelimited=false] Whether requests are length-delimited
                 * @param {boolean} [responseDelimited=false] Whether responses are length-delimited
                 * @returns {Operations} RPC service. Useful where requests and/or responses are streamed.
                 */
                Operations.create = function create(rpcImpl, requestDelimited, responseDelimited) {
                    return new this(rpcImpl, requestDelimited, responseDelimited);
                };
    
                /**
                 * Callback as used by {@link google.longrunning.Operations#listOperations}.
                 * @memberof google.longrunning.Operations
                 * @typedef ListOperationsCallback
                 * @type {function}
                 * @param {Error|null} error Error, if any
                 * @param {google.longrunning.ListOperationsResponse} [response] ListOperationsResponse
                 */
    
                /**
                 * Calls ListOperations.
                 * @function listOperations
                 * @memberof google.longrunning.Operations
                 * @instance
                 * @param {google.longrunning.IListOperationsRequest} request ListOperationsRequest message or plain object
                 * @param {google.longrunning.Operations.ListOperationsCallback} callback Node-style callback called with the error, if any, and ListOperationsResponse
                 * @returns {undefined}
                 * @variation 1
                 */
                Object.defineProperty(Operations.prototype.listOperations = function listOperations(request, callback) {
                    return this.rpcCall(listOperations, $root.google.longrunning.ListOperationsRequest, $root.google.longrunning.ListOperationsResponse, request, callback);
                }, "name", { value: "ListOperations" });
    
                /**
                 * Calls ListOperations.
                 * @function listOperations
                 * @memberof google.longrunning.Operations
                 * @instance
                 * @param {google.longrunning.IListOperationsRequest} request ListOperationsRequest message or plain object
                 * @returns {Promise<google.longrunning.ListOperationsResponse>} Promise
                 * @variation 2
                 */
    
                /**
                 * Callback as used by {@link google.longrunning.Operations#getOperation}.
                 * @memberof google.longrunning.Operations
                 * @typedef GetOperationCallback
                 * @type {function}
                 * @param {Error|null} error Error, if any
                 * @param {google.longrunning.Operation} [response] Operation
                 */
    
                /**
                 * Calls GetOperation.
                 * @function getOperation
                 * @memberof google.longrunning.Operations
                 * @instance
                 * @param {google.longrunning.IGetOperationRequest} request GetOperationRequest message or plain object
                 * @param {google.longrunning.Operations.GetOperationCallback} callback Node-style callback called with the error, if any, and Operation
                 * @returns {undefined}
                 * @variation 1
                 */
                Object.defineProperty(Operations.prototype.getOperation = function getOperation(request, callback) {
                    return this.rpcCall(getOperation, $root.google.longrunning.GetOperationRequest, $root.google.longrunning.Operation, request, callback);
                }, "name", { value: "GetOperation" });
    
                /**
                 * Calls GetOperation.
                 * @function getOperation
                 * @memberof google.longrunning.Operations
                 * @instance
                 * @param {google.longrunning.IGetOperationRequest} request GetOperationRequest message or plain object
                 * @returns {Promise<google.longrunning.Operation>} Promise
                 * @variation 2
                 */
    
                /**
                 * Callback as used by {@link google.longrunning.Operations#deleteOperation}.
                 * @memberof google.longrunning.Operations
                 * @typedef DeleteOperationCallback
                 * @type {function}
                 * @param {Error|null} error Error, if any
                 * @param {google.protobuf.Empty} [response] Empty
                 */
    
                /**
                 * Calls DeleteOperation.
                 * @function deleteOperation
                 * @memberof google.longrunning.Operations
                 * @instance
                 * @param {google.longrunning.IDeleteOperationRequest} request DeleteOperationRequest message or plain object
                 * @param {google.longrunning.Operations.DeleteOperationCallback} callback Node-style callback called with the error, if any, and Empty
                 * @returns {undefined}
                 * @variation 1
                 */
                Object.defineProperty(Operations.prototype.deleteOperation = function deleteOperation(request, callback) {
                    return this.rpcCall(deleteOperation, $root.google.longrunning.DeleteOperationRequest, $root.google.protobuf.Empty, request, callback);
                }, "name", { value: "DeleteOperation" });
    
                /**
                 * Calls DeleteOperation.
                 * @function deleteOperation
                 * @memberof google.longrunning.Operations
                 * @instance
                 * @param {google.longrunning.IDeleteOperationRequest} request DeleteOperationRequest message or plain object
                 * @returns {Promise<google.protobuf.Empty>} Promise
                 * @variation 2
                 */
    
                /**
                 * Callback as used by {@link google.longrunning.Operations#cancelOperation}.
                 * @memberof google.longrunning.Operations
                 * @typedef CancelOperationCallback
                 * @type {function}
                 * @param {Error|null} error Error, if any
                 * @param {google.protobuf.Empty} [response] Empty
                 */
    
                /**
                 * Calls CancelOperation.
                 * @function cancelOperation
                 * @memberof google.longrunning.Operations
                 * @instance
                 * @param {google.longrunning.ICancelOperationRequest} request CancelOperationRequest message or plain object
                 * @param {google.longrunning.Operations.CancelOperationCallback} callback Node-style callback called with the error, if any, and Empty
                 * @returns {undefined}
                 * @variation 1
                 */
                Object.defineProperty(Operations.prototype.cancelOperation = function cancelOperation(request, callback) {
                    return this.rpcCall(cancelOperation, $root.google.longrunning.CancelOperationRequest, $root.google.protobuf.Empty, request, callback);
                }, "name", { value: "CancelOperation" });
    
                /**
                 * Calls CancelOperation.
                 * @function cancelOperation
                 * @memberof google.longrunning.Operations
                 * @instance
                 * @param {google.longrunning.ICancelOperationRequest} request CancelOperationRequest message or plain object
                 * @returns {Promise<google.protobuf.Empty>} Promise
                 * @variation 2
                 */
    
                /**
                 * Callback as used by {@link google.longrunning.Operations#waitOperation}.
                 * @memberof google.longrunning.Operations
                 * @typedef WaitOperationCallback
                 * @type {function}
                 * @param {Error|null} error Error, if any
                 * @param {google.longrunning.Operation} [response] Operation
                 */
    
                /**
                 * Calls WaitOperation.
                 * @function waitOperation
                 * @memberof google.longrunning.Operations
                 * @instance
                 * @param {google.longrunning.IWaitOperationRequest} request WaitOperationRequest message or plain object
                 * @param {google.longrunning.Operations.WaitOperationCallback} callback Node-style callback called with the error, if any, and Operation
                 * @returns {undefined}
                 * @variation 1
                 */
                Object.defineProperty(Operations.prototype.waitOperation = function waitOperation(request, callback) {
                    return this.rpcCall(waitOperation, $root.google.longrunning.WaitOperationRequest, $root.google.longrunning.Operation, request, callback);
                }, "name", { value: "WaitOperation" });
    
                /**
                 * Calls WaitOperation.
                 * @function waitOperation
                 * @memberof google.longrunning.Operations
                 * @instance
                 * @param {google.longrunning.IWaitOperationRequest} request WaitOperationRequest message or plain object
                 * @returns {Promise<google.longrunning.Operation>} Promise
                 * @variation 2
                 */
    
                return Operations;
            })();
    
            longrunning.Operation = (function() {
    
                /**
                 * Properties of an Operation.
                 * @memberof google.longrunning
                 * @interface IOperation
                 * @property {string|null} [name] Operation name
                 * @property {google.protobuf.IAny|null} [metadata] Operation metadata
                 * @property {boolean|null} [done] Operation done
                 * @property {google.rpc.IStatus|null} [error] Operation error
                 * @property {google.protobuf.IAny|null} [response] Operation response
                 */
    
                /**
                 * Constructs a new Operation.
                 * @memberof google.longrunning
                 * @classdesc Represents an Operation.
                 * @implements IOperation
                 * @constructor
                 * @param {google.longrunning.IOperation=} [properties] Properties to set
                 */
                function Operation(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * Operation name.
                 * @member {string} name
                 * @memberof google.longrunning.Operation
                 * @instance
                 */
                Operation.prototype.name = "";
    
                /**
                 * Operation metadata.
                 * @member {google.protobuf.IAny|null|undefined} metadata
                 * @memberof google.longrunning.Operation
                 * @instance
                 */
                Operation.prototype.metadata = null;
    
                /**
                 * Operation done.
                 * @member {boolean} done
                 * @memberof google.longrunning.Operation
                 * @instance
                 */
                Operation.prototype.done = false;
    
                /**
                 * Operation error.
                 * @member {google.rpc.IStatus|null|undefined} error
                 * @memberof google.longrunning.Operation
                 * @instance
                 */
                Operation.prototype.error = null;
    
                /**
                 * Operation response.
                 * @member {google.protobuf.IAny|null|undefined} response
                 * @memberof google.longrunning.Operation
                 * @instance
                 */
                Operation.prototype.response = null;
    
                // OneOf field names bound to virtual getters and setters
                var $oneOfFields;
    
                /**
                 * Operation result.
                 * @member {"error"|"response"|undefined} result
                 * @memberof google.longrunning.Operation
                 * @instance
                 */
                Object.defineProperty(Operation.prototype, "result", {
                    get: $util.oneOfGetter($oneOfFields = ["error", "response"]),
                    set: $util.oneOfSetter($oneOfFields)
                });
    
                /**
                 * Creates a new Operation instance using the specified properties.
                 * @function create
                 * @memberof google.longrunning.Operation
                 * @static
                 * @param {google.longrunning.IOperation=} [properties] Properties to set
                 * @returns {google.longrunning.Operation} Operation instance
                 */
                Operation.create = function create(properties) {
                    return new Operation(properties);
                };
    
                /**
                 * Encodes the specified Operation message. Does not implicitly {@link google.longrunning.Operation.verify|verify} messages.
                 * @function encode
                 * @memberof google.longrunning.Operation
                 * @static
                 * @param {google.longrunning.IOperation} message Operation message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Operation.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                    if (message.metadata != null && Object.hasOwnProperty.call(message, "metadata"))
                        $root.google.protobuf.Any.encode(message.metadata, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                    if (message.done != null && Object.hasOwnProperty.call(message, "done"))
                        writer.uint32(/* id 3, wireType 0 =*/24).bool(message.done);
                    if (message.error != null && Object.hasOwnProperty.call(message, "error"))
                        $root.google.rpc.Status.encode(message.error, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                    if (message.response != null && Object.hasOwnProperty.call(message, "response"))
                        $root.google.protobuf.Any.encode(message.response, writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified Operation message, length delimited. Does not implicitly {@link google.longrunning.Operation.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.longrunning.Operation
                 * @static
                 * @param {google.longrunning.IOperation} message Operation message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Operation.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes an Operation message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.longrunning.Operation
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.longrunning.Operation} Operation
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Operation.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.longrunning.Operation();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.name = reader.string();
                            break;
                        case 2:
                            message.metadata = $root.google.protobuf.Any.decode(reader, reader.uint32());
                            break;
                        case 3:
                            message.done = reader.bool();
                            break;
                        case 4:
                            message.error = $root.google.rpc.Status.decode(reader, reader.uint32());
                            break;
                        case 5:
                            message.response = $root.google.protobuf.Any.decode(reader, reader.uint32());
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes an Operation message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.longrunning.Operation
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.longrunning.Operation} Operation
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Operation.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies an Operation message.
                 * @function verify
                 * @memberof google.longrunning.Operation
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                Operation.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    var properties = {};
                    if (message.name != null && message.hasOwnProperty("name"))
                        if (!$util.isString(message.name))
                            return "name: string expected";
                    if (message.metadata != null && message.hasOwnProperty("metadata")) {
                        var error = $root.google.protobuf.Any.verify(message.metadata);
                        if (error)
                            return "metadata." + error;
                    }
                    if (message.done != null && message.hasOwnProperty("done"))
                        if (typeof message.done !== "boolean")
                            return "done: boolean expected";
                    if (message.error != null && message.hasOwnProperty("error")) {
                        properties.result = 1;
                        {
                            var error = $root.google.rpc.Status.verify(message.error);
                            if (error)
                                return "error." + error;
                        }
                    }
                    if (message.response != null && message.hasOwnProperty("response")) {
                        if (properties.result === 1)
                            return "result: multiple values";
                        properties.result = 1;
                        {
                            var error = $root.google.protobuf.Any.verify(message.response);
                            if (error)
                                return "response." + error;
                        }
                    }
                    return null;
                };
    
                /**
                 * Creates an Operation message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.longrunning.Operation
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.longrunning.Operation} Operation
                 */
                Operation.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.longrunning.Operation)
                        return object;
                    var message = new $root.google.longrunning.Operation();
                    if (object.name != null)
                        message.name = String(object.name);
                    if (object.metadata != null) {
                        if (typeof object.metadata !== "object")
                            throw TypeError(".google.longrunning.Operation.metadata: object expected");
                        message.metadata = $root.google.protobuf.Any.fromObject(object.metadata);
                    }
                    if (object.done != null)
                        message.done = Boolean(object.done);
                    if (object.error != null) {
                        if (typeof object.error !== "object")
                            throw TypeError(".google.longrunning.Operation.error: object expected");
                        message.error = $root.google.rpc.Status.fromObject(object.error);
                    }
                    if (object.response != null) {
                        if (typeof object.response !== "object")
                            throw TypeError(".google.longrunning.Operation.response: object expected");
                        message.response = $root.google.protobuf.Any.fromObject(object.response);
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from an Operation message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.longrunning.Operation
                 * @static
                 * @param {google.longrunning.Operation} message Operation
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                Operation.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults) {
                        object.name = "";
                        object.metadata = null;
                        object.done = false;
                    }
                    if (message.name != null && message.hasOwnProperty("name"))
                        object.name = message.name;
                    if (message.metadata != null && message.hasOwnProperty("metadata"))
                        object.metadata = $root.google.protobuf.Any.toObject(message.metadata, options);
                    if (message.done != null && message.hasOwnProperty("done"))
                        object.done = message.done;
                    if (message.error != null && message.hasOwnProperty("error")) {
                        object.error = $root.google.rpc.Status.toObject(message.error, options);
                        if (options.oneofs)
                            object.result = "error";
                    }
                    if (message.response != null && message.hasOwnProperty("response")) {
                        object.response = $root.google.protobuf.Any.toObject(message.response, options);
                        if (options.oneofs)
                            object.result = "response";
                    }
                    return object;
                };
    
                /**
                 * Converts this Operation to JSON.
                 * @function toJSON
                 * @memberof google.longrunning.Operation
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                Operation.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return Operation;
            })();
    
            longrunning.GetOperationRequest = (function() {
    
                /**
                 * Properties of a GetOperationRequest.
                 * @memberof google.longrunning
                 * @interface IGetOperationRequest
                 * @property {string|null} [name] GetOperationRequest name
                 */
    
                /**
                 * Constructs a new GetOperationRequest.
                 * @memberof google.longrunning
                 * @classdesc Represents a GetOperationRequest.
                 * @implements IGetOperationRequest
                 * @constructor
                 * @param {google.longrunning.IGetOperationRequest=} [properties] Properties to set
                 */
                function GetOperationRequest(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * GetOperationRequest name.
                 * @member {string} name
                 * @memberof google.longrunning.GetOperationRequest
                 * @instance
                 */
                GetOperationRequest.prototype.name = "";
    
                /**
                 * Creates a new GetOperationRequest instance using the specified properties.
                 * @function create
                 * @memberof google.longrunning.GetOperationRequest
                 * @static
                 * @param {google.longrunning.IGetOperationRequest=} [properties] Properties to set
                 * @returns {google.longrunning.GetOperationRequest} GetOperationRequest instance
                 */
                GetOperationRequest.create = function create(properties) {
                    return new GetOperationRequest(properties);
                };
    
                /**
                 * Encodes the specified GetOperationRequest message. Does not implicitly {@link google.longrunning.GetOperationRequest.verify|verify} messages.
                 * @function encode
                 * @memberof google.longrunning.GetOperationRequest
                 * @static
                 * @param {google.longrunning.IGetOperationRequest} message GetOperationRequest message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                GetOperationRequest.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                    return writer;
                };
    
                /**
                 * Encodes the specified GetOperationRequest message, length delimited. Does not implicitly {@link google.longrunning.GetOperationRequest.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.longrunning.GetOperationRequest
                 * @static
                 * @param {google.longrunning.IGetOperationRequest} message GetOperationRequest message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                GetOperationRequest.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a GetOperationRequest message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.longrunning.GetOperationRequest
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.longrunning.GetOperationRequest} GetOperationRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                GetOperationRequest.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.longrunning.GetOperationRequest();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.name = reader.string();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a GetOperationRequest message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.longrunning.GetOperationRequest
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.longrunning.GetOperationRequest} GetOperationRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                GetOperationRequest.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a GetOperationRequest message.
                 * @function verify
                 * @memberof google.longrunning.GetOperationRequest
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                GetOperationRequest.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.name != null && message.hasOwnProperty("name"))
                        if (!$util.isString(message.name))
                            return "name: string expected";
                    return null;
                };
    
                /**
                 * Creates a GetOperationRequest message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.longrunning.GetOperationRequest
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.longrunning.GetOperationRequest} GetOperationRequest
                 */
                GetOperationRequest.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.longrunning.GetOperationRequest)
                        return object;
                    var message = new $root.google.longrunning.GetOperationRequest();
                    if (object.name != null)
                        message.name = String(object.name);
                    return message;
                };
    
                /**
                 * Creates a plain object from a GetOperationRequest message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.longrunning.GetOperationRequest
                 * @static
                 * @param {google.longrunning.GetOperationRequest} message GetOperationRequest
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                GetOperationRequest.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults)
                        object.name = "";
                    if (message.name != null && message.hasOwnProperty("name"))
                        object.name = message.name;
                    return object;
                };
    
                /**
                 * Converts this GetOperationRequest to JSON.
                 * @function toJSON
                 * @memberof google.longrunning.GetOperationRequest
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                GetOperationRequest.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return GetOperationRequest;
            })();
    
            longrunning.ListOperationsRequest = (function() {
    
                /**
                 * Properties of a ListOperationsRequest.
                 * @memberof google.longrunning
                 * @interface IListOperationsRequest
                 * @property {string|null} [name] ListOperationsRequest name
                 * @property {string|null} [filter] ListOperationsRequest filter
                 * @property {number|null} [pageSize] ListOperationsRequest pageSize
                 * @property {string|null} [pageToken] ListOperationsRequest pageToken
                 */
    
                /**
                 * Constructs a new ListOperationsRequest.
                 * @memberof google.longrunning
                 * @classdesc Represents a ListOperationsRequest.
                 * @implements IListOperationsRequest
                 * @constructor
                 * @param {google.longrunning.IListOperationsRequest=} [properties] Properties to set
                 */
                function ListOperationsRequest(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * ListOperationsRequest name.
                 * @member {string} name
                 * @memberof google.longrunning.ListOperationsRequest
                 * @instance
                 */
                ListOperationsRequest.prototype.name = "";
    
                /**
                 * ListOperationsRequest filter.
                 * @member {string} filter
                 * @memberof google.longrunning.ListOperationsRequest
                 * @instance
                 */
                ListOperationsRequest.prototype.filter = "";
    
                /**
                 * ListOperationsRequest pageSize.
                 * @member {number} pageSize
                 * @memberof google.longrunning.ListOperationsRequest
                 * @instance
                 */
                ListOperationsRequest.prototype.pageSize = 0;
    
                /**
                 * ListOperationsRequest pageToken.
                 * @member {string} pageToken
                 * @memberof google.longrunning.ListOperationsRequest
                 * @instance
                 */
                ListOperationsRequest.prototype.pageToken = "";
    
                /**
                 * Creates a new ListOperationsRequest instance using the specified properties.
                 * @function create
                 * @memberof google.longrunning.ListOperationsRequest
                 * @static
                 * @param {google.longrunning.IListOperationsRequest=} [properties] Properties to set
                 * @returns {google.longrunning.ListOperationsRequest} ListOperationsRequest instance
                 */
                ListOperationsRequest.create = function create(properties) {
                    return new ListOperationsRequest(properties);
                };
    
                /**
                 * Encodes the specified ListOperationsRequest message. Does not implicitly {@link google.longrunning.ListOperationsRequest.verify|verify} messages.
                 * @function encode
                 * @memberof google.longrunning.ListOperationsRequest
                 * @static
                 * @param {google.longrunning.IListOperationsRequest} message ListOperationsRequest message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                ListOperationsRequest.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.filter != null && Object.hasOwnProperty.call(message, "filter"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.filter);
                    if (message.pageSize != null && Object.hasOwnProperty.call(message, "pageSize"))
                        writer.uint32(/* id 2, wireType 0 =*/16).int32(message.pageSize);
                    if (message.pageToken != null && Object.hasOwnProperty.call(message, "pageToken"))
                        writer.uint32(/* id 3, wireType 2 =*/26).string(message.pageToken);
                    if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                        writer.uint32(/* id 4, wireType 2 =*/34).string(message.name);
                    return writer;
                };
    
                /**
                 * Encodes the specified ListOperationsRequest message, length delimited. Does not implicitly {@link google.longrunning.ListOperationsRequest.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.longrunning.ListOperationsRequest
                 * @static
                 * @param {google.longrunning.IListOperationsRequest} message ListOperationsRequest message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                ListOperationsRequest.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a ListOperationsRequest message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.longrunning.ListOperationsRequest
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.longrunning.ListOperationsRequest} ListOperationsRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                ListOperationsRequest.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.longrunning.ListOperationsRequest();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 4:
                            message.name = reader.string();
                            break;
                        case 1:
                            message.filter = reader.string();
                            break;
                        case 2:
                            message.pageSize = reader.int32();
                            break;
                        case 3:
                            message.pageToken = reader.string();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a ListOperationsRequest message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.longrunning.ListOperationsRequest
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.longrunning.ListOperationsRequest} ListOperationsRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                ListOperationsRequest.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a ListOperationsRequest message.
                 * @function verify
                 * @memberof google.longrunning.ListOperationsRequest
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                ListOperationsRequest.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.name != null && message.hasOwnProperty("name"))
                        if (!$util.isString(message.name))
                            return "name: string expected";
                    if (message.filter != null && message.hasOwnProperty("filter"))
                        if (!$util.isString(message.filter))
                            return "filter: string expected";
                    if (message.pageSize != null && message.hasOwnProperty("pageSize"))
                        if (!$util.isInteger(message.pageSize))
                            return "pageSize: integer expected";
                    if (message.pageToken != null && message.hasOwnProperty("pageToken"))
                        if (!$util.isString(message.pageToken))
                            return "pageToken: string expected";
                    return null;
                };
    
                /**
                 * Creates a ListOperationsRequest message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.longrunning.ListOperationsRequest
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.longrunning.ListOperationsRequest} ListOperationsRequest
                 */
                ListOperationsRequest.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.longrunning.ListOperationsRequest)
                        return object;
                    var message = new $root.google.longrunning.ListOperationsRequest();
                    if (object.name != null)
                        message.name = String(object.name);
                    if (object.filter != null)
                        message.filter = String(object.filter);
                    if (object.pageSize != null)
                        message.pageSize = object.pageSize | 0;
                    if (object.pageToken != null)
                        message.pageToken = String(object.pageToken);
                    return message;
                };
    
                /**
                 * Creates a plain object from a ListOperationsRequest message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.longrunning.ListOperationsRequest
                 * @static
                 * @param {google.longrunning.ListOperationsRequest} message ListOperationsRequest
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                ListOperationsRequest.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults) {
                        object.filter = "";
                        object.pageSize = 0;
                        object.pageToken = "";
                        object.name = "";
                    }
                    if (message.filter != null && message.hasOwnProperty("filter"))
                        object.filter = message.filter;
                    if (message.pageSize != null && message.hasOwnProperty("pageSize"))
                        object.pageSize = message.pageSize;
                    if (message.pageToken != null && message.hasOwnProperty("pageToken"))
                        object.pageToken = message.pageToken;
                    if (message.name != null && message.hasOwnProperty("name"))
                        object.name = message.name;
                    return object;
                };
    
                /**
                 * Converts this ListOperationsRequest to JSON.
                 * @function toJSON
                 * @memberof google.longrunning.ListOperationsRequest
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                ListOperationsRequest.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return ListOperationsRequest;
            })();
    
            longrunning.ListOperationsResponse = (function() {
    
                /**
                 * Properties of a ListOperationsResponse.
                 * @memberof google.longrunning
                 * @interface IListOperationsResponse
                 * @property {Array.<google.longrunning.IOperation>|null} [operations] ListOperationsResponse operations
                 * @property {string|null} [nextPageToken] ListOperationsResponse nextPageToken
                 */
    
                /**
                 * Constructs a new ListOperationsResponse.
                 * @memberof google.longrunning
                 * @classdesc Represents a ListOperationsResponse.
                 * @implements IListOperationsResponse
                 * @constructor
                 * @param {google.longrunning.IListOperationsResponse=} [properties] Properties to set
                 */
                function ListOperationsResponse(properties) {
                    this.operations = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * ListOperationsResponse operations.
                 * @member {Array.<google.longrunning.IOperation>} operations
                 * @memberof google.longrunning.ListOperationsResponse
                 * @instance
                 */
                ListOperationsResponse.prototype.operations = $util.emptyArray;
    
                /**
                 * ListOperationsResponse nextPageToken.
                 * @member {string} nextPageToken
                 * @memberof google.longrunning.ListOperationsResponse
                 * @instance
                 */
                ListOperationsResponse.prototype.nextPageToken = "";
    
                /**
                 * Creates a new ListOperationsResponse instance using the specified properties.
                 * @function create
                 * @memberof google.longrunning.ListOperationsResponse
                 * @static
                 * @param {google.longrunning.IListOperationsResponse=} [properties] Properties to set
                 * @returns {google.longrunning.ListOperationsResponse} ListOperationsResponse instance
                 */
                ListOperationsResponse.create = function create(properties) {
                    return new ListOperationsResponse(properties);
                };
    
                /**
                 * Encodes the specified ListOperationsResponse message. Does not implicitly {@link google.longrunning.ListOperationsResponse.verify|verify} messages.
                 * @function encode
                 * @memberof google.longrunning.ListOperationsResponse
                 * @static
                 * @param {google.longrunning.IListOperationsResponse} message ListOperationsResponse message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                ListOperationsResponse.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.operations != null && message.operations.length)
                        for (var i = 0; i < message.operations.length; ++i)
                            $root.google.longrunning.Operation.encode(message.operations[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                    if (message.nextPageToken != null && Object.hasOwnProperty.call(message, "nextPageToken"))
                        writer.uint32(/* id 2, wireType 2 =*/18).string(message.nextPageToken);
                    return writer;
                };
    
                /**
                 * Encodes the specified ListOperationsResponse message, length delimited. Does not implicitly {@link google.longrunning.ListOperationsResponse.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.longrunning.ListOperationsResponse
                 * @static
                 * @param {google.longrunning.IListOperationsResponse} message ListOperationsResponse message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                ListOperationsResponse.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a ListOperationsResponse message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.longrunning.ListOperationsResponse
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.longrunning.ListOperationsResponse} ListOperationsResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                ListOperationsResponse.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.longrunning.ListOperationsResponse();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            if (!(message.operations && message.operations.length))
                                message.operations = [];
                            message.operations.push($root.google.longrunning.Operation.decode(reader, reader.uint32()));
                            break;
                        case 2:
                            message.nextPageToken = reader.string();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a ListOperationsResponse message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.longrunning.ListOperationsResponse
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.longrunning.ListOperationsResponse} ListOperationsResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                ListOperationsResponse.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a ListOperationsResponse message.
                 * @function verify
                 * @memberof google.longrunning.ListOperationsResponse
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                ListOperationsResponse.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.operations != null && message.hasOwnProperty("operations")) {
                        if (!Array.isArray(message.operations))
                            return "operations: array expected";
                        for (var i = 0; i < message.operations.length; ++i) {
                            var error = $root.google.longrunning.Operation.verify(message.operations[i]);
                            if (error)
                                return "operations." + error;
                        }
                    }
                    if (message.nextPageToken != null && message.hasOwnProperty("nextPageToken"))
                        if (!$util.isString(message.nextPageToken))
                            return "nextPageToken: string expected";
                    return null;
                };
    
                /**
                 * Creates a ListOperationsResponse message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.longrunning.ListOperationsResponse
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.longrunning.ListOperationsResponse} ListOperationsResponse
                 */
                ListOperationsResponse.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.longrunning.ListOperationsResponse)
                        return object;
                    var message = new $root.google.longrunning.ListOperationsResponse();
                    if (object.operations) {
                        if (!Array.isArray(object.operations))
                            throw TypeError(".google.longrunning.ListOperationsResponse.operations: array expected");
                        message.operations = [];
                        for (var i = 0; i < object.operations.length; ++i) {
                            if (typeof object.operations[i] !== "object")
                                throw TypeError(".google.longrunning.ListOperationsResponse.operations: object expected");
                            message.operations[i] = $root.google.longrunning.Operation.fromObject(object.operations[i]);
                        }
                    }
                    if (object.nextPageToken != null)
                        message.nextPageToken = String(object.nextPageToken);
                    return message;
                };
    
                /**
                 * Creates a plain object from a ListOperationsResponse message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.longrunning.ListOperationsResponse
                 * @static
                 * @param {google.longrunning.ListOperationsResponse} message ListOperationsResponse
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                ListOperationsResponse.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.operations = [];
                    if (options.defaults)
                        object.nextPageToken = "";
                    if (message.operations && message.operations.length) {
                        object.operations = [];
                        for (var j = 0; j < message.operations.length; ++j)
                            object.operations[j] = $root.google.longrunning.Operation.toObject(message.operations[j], options);
                    }
                    if (message.nextPageToken != null && message.hasOwnProperty("nextPageToken"))
                        object.nextPageToken = message.nextPageToken;
                    return object;
                };
    
                /**
                 * Converts this ListOperationsResponse to JSON.
                 * @function toJSON
                 * @memberof google.longrunning.ListOperationsResponse
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                ListOperationsResponse.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return ListOperationsResponse;
            })();
    
            longrunning.CancelOperationRequest = (function() {
    
                /**
                 * Properties of a CancelOperationRequest.
                 * @memberof google.longrunning
                 * @interface ICancelOperationRequest
                 * @property {string|null} [name] CancelOperationRequest name
                 */
    
                /**
                 * Constructs a new CancelOperationRequest.
                 * @memberof google.longrunning
                 * @classdesc Represents a CancelOperationRequest.
                 * @implements ICancelOperationRequest
                 * @constructor
                 * @param {google.longrunning.ICancelOperationRequest=} [properties] Properties to set
                 */
                function CancelOperationRequest(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * CancelOperationRequest name.
                 * @member {string} name
                 * @memberof google.longrunning.CancelOperationRequest
                 * @instance
                 */
                CancelOperationRequest.prototype.name = "";
    
                /**
                 * Creates a new CancelOperationRequest instance using the specified properties.
                 * @function create
                 * @memberof google.longrunning.CancelOperationRequest
                 * @static
                 * @param {google.longrunning.ICancelOperationRequest=} [properties] Properties to set
                 * @returns {google.longrunning.CancelOperationRequest} CancelOperationRequest instance
                 */
                CancelOperationRequest.create = function create(properties) {
                    return new CancelOperationRequest(properties);
                };
    
                /**
                 * Encodes the specified CancelOperationRequest message. Does not implicitly {@link google.longrunning.CancelOperationRequest.verify|verify} messages.
                 * @function encode
                 * @memberof google.longrunning.CancelOperationRequest
                 * @static
                 * @param {google.longrunning.ICancelOperationRequest} message CancelOperationRequest message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                CancelOperationRequest.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                    return writer;
                };
    
                /**
                 * Encodes the specified CancelOperationRequest message, length delimited. Does not implicitly {@link google.longrunning.CancelOperationRequest.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.longrunning.CancelOperationRequest
                 * @static
                 * @param {google.longrunning.ICancelOperationRequest} message CancelOperationRequest message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                CancelOperationRequest.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a CancelOperationRequest message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.longrunning.CancelOperationRequest
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.longrunning.CancelOperationRequest} CancelOperationRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                CancelOperationRequest.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.longrunning.CancelOperationRequest();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.name = reader.string();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a CancelOperationRequest message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.longrunning.CancelOperationRequest
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.longrunning.CancelOperationRequest} CancelOperationRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                CancelOperationRequest.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a CancelOperationRequest message.
                 * @function verify
                 * @memberof google.longrunning.CancelOperationRequest
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                CancelOperationRequest.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.name != null && message.hasOwnProperty("name"))
                        if (!$util.isString(message.name))
                            return "name: string expected";
                    return null;
                };
    
                /**
                 * Creates a CancelOperationRequest message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.longrunning.CancelOperationRequest
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.longrunning.CancelOperationRequest} CancelOperationRequest
                 */
                CancelOperationRequest.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.longrunning.CancelOperationRequest)
                        return object;
                    var message = new $root.google.longrunning.CancelOperationRequest();
                    if (object.name != null)
                        message.name = String(object.name);
                    return message;
                };
    
                /**
                 * Creates a plain object from a CancelOperationRequest message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.longrunning.CancelOperationRequest
                 * @static
                 * @param {google.longrunning.CancelOperationRequest} message CancelOperationRequest
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                CancelOperationRequest.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults)
                        object.name = "";
                    if (message.name != null && message.hasOwnProperty("name"))
                        object.name = message.name;
                    return object;
                };
    
                /**
                 * Converts this CancelOperationRequest to JSON.
                 * @function toJSON
                 * @memberof google.longrunning.CancelOperationRequest
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                CancelOperationRequest.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return CancelOperationRequest;
            })();
    
            longrunning.DeleteOperationRequest = (function() {
    
                /**
                 * Properties of a DeleteOperationRequest.
                 * @memberof google.longrunning
                 * @interface IDeleteOperationRequest
                 * @property {string|null} [name] DeleteOperationRequest name
                 */
    
                /**
                 * Constructs a new DeleteOperationRequest.
                 * @memberof google.longrunning
                 * @classdesc Represents a DeleteOperationRequest.
                 * @implements IDeleteOperationRequest
                 * @constructor
                 * @param {google.longrunning.IDeleteOperationRequest=} [properties] Properties to set
                 */
                function DeleteOperationRequest(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * DeleteOperationRequest name.
                 * @member {string} name
                 * @memberof google.longrunning.DeleteOperationRequest
                 * @instance
                 */
                DeleteOperationRequest.prototype.name = "";
    
                /**
                 * Creates a new DeleteOperationRequest instance using the specified properties.
                 * @function create
                 * @memberof google.longrunning.DeleteOperationRequest
                 * @static
                 * @param {google.longrunning.IDeleteOperationRequest=} [properties] Properties to set
                 * @returns {google.longrunning.DeleteOperationRequest} DeleteOperationRequest instance
                 */
                DeleteOperationRequest.create = function create(properties) {
                    return new DeleteOperationRequest(properties);
                };
    
                /**
                 * Encodes the specified DeleteOperationRequest message. Does not implicitly {@link google.longrunning.DeleteOperationRequest.verify|verify} messages.
                 * @function encode
                 * @memberof google.longrunning.DeleteOperationRequest
                 * @static
                 * @param {google.longrunning.IDeleteOperationRequest} message DeleteOperationRequest message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                DeleteOperationRequest.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                    return writer;
                };
    
                /**
                 * Encodes the specified DeleteOperationRequest message, length delimited. Does not implicitly {@link google.longrunning.DeleteOperationRequest.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.longrunning.DeleteOperationRequest
                 * @static
                 * @param {google.longrunning.IDeleteOperationRequest} message DeleteOperationRequest message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                DeleteOperationRequest.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a DeleteOperationRequest message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.longrunning.DeleteOperationRequest
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.longrunning.DeleteOperationRequest} DeleteOperationRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                DeleteOperationRequest.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.longrunning.DeleteOperationRequest();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.name = reader.string();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a DeleteOperationRequest message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.longrunning.DeleteOperationRequest
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.longrunning.DeleteOperationRequest} DeleteOperationRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                DeleteOperationRequest.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a DeleteOperationRequest message.
                 * @function verify
                 * @memberof google.longrunning.DeleteOperationRequest
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                DeleteOperationRequest.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.name != null && message.hasOwnProperty("name"))
                        if (!$util.isString(message.name))
                            return "name: string expected";
                    return null;
                };
    
                /**
                 * Creates a DeleteOperationRequest message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.longrunning.DeleteOperationRequest
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.longrunning.DeleteOperationRequest} DeleteOperationRequest
                 */
                DeleteOperationRequest.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.longrunning.DeleteOperationRequest)
                        return object;
                    var message = new $root.google.longrunning.DeleteOperationRequest();
                    if (object.name != null)
                        message.name = String(object.name);
                    return message;
                };
    
                /**
                 * Creates a plain object from a DeleteOperationRequest message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.longrunning.DeleteOperationRequest
                 * @static
                 * @param {google.longrunning.DeleteOperationRequest} message DeleteOperationRequest
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                DeleteOperationRequest.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults)
                        object.name = "";
                    if (message.name != null && message.hasOwnProperty("name"))
                        object.name = message.name;
                    return object;
                };
    
                /**
                 * Converts this DeleteOperationRequest to JSON.
                 * @function toJSON
                 * @memberof google.longrunning.DeleteOperationRequest
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                DeleteOperationRequest.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return DeleteOperationRequest;
            })();
    
            longrunning.WaitOperationRequest = (function() {
    
                /**
                 * Properties of a WaitOperationRequest.
                 * @memberof google.longrunning
                 * @interface IWaitOperationRequest
                 * @property {string|null} [name] WaitOperationRequest name
                 * @property {google.protobuf.IDuration|null} [timeout] WaitOperationRequest timeout
                 */
    
                /**
                 * Constructs a new WaitOperationRequest.
                 * @memberof google.longrunning
                 * @classdesc Represents a WaitOperationRequest.
                 * @implements IWaitOperationRequest
                 * @constructor
                 * @param {google.longrunning.IWaitOperationRequest=} [properties] Properties to set
                 */
                function WaitOperationRequest(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * WaitOperationRequest name.
                 * @member {string} name
                 * @memberof google.longrunning.WaitOperationRequest
                 * @instance
                 */
                WaitOperationRequest.prototype.name = "";
    
                /**
                 * WaitOperationRequest timeout.
                 * @member {google.protobuf.IDuration|null|undefined} timeout
                 * @memberof google.longrunning.WaitOperationRequest
                 * @instance
                 */
                WaitOperationRequest.prototype.timeout = null;
    
                /**
                 * Creates a new WaitOperationRequest instance using the specified properties.
                 * @function create
                 * @memberof google.longrunning.WaitOperationRequest
                 * @static
                 * @param {google.longrunning.IWaitOperationRequest=} [properties] Properties to set
                 * @returns {google.longrunning.WaitOperationRequest} WaitOperationRequest instance
                 */
                WaitOperationRequest.create = function create(properties) {
                    return new WaitOperationRequest(properties);
                };
    
                /**
                 * Encodes the specified WaitOperationRequest message. Does not implicitly {@link google.longrunning.WaitOperationRequest.verify|verify} messages.
                 * @function encode
                 * @memberof google.longrunning.WaitOperationRequest
                 * @static
                 * @param {google.longrunning.IWaitOperationRequest} message WaitOperationRequest message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                WaitOperationRequest.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                    if (message.timeout != null && Object.hasOwnProperty.call(message, "timeout"))
                        $root.google.protobuf.Duration.encode(message.timeout, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified WaitOperationRequest message, length delimited. Does not implicitly {@link google.longrunning.WaitOperationRequest.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.longrunning.WaitOperationRequest
                 * @static
                 * @param {google.longrunning.IWaitOperationRequest} message WaitOperationRequest message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                WaitOperationRequest.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a WaitOperationRequest message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.longrunning.WaitOperationRequest
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.longrunning.WaitOperationRequest} WaitOperationRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                WaitOperationRequest.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.longrunning.WaitOperationRequest();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.name = reader.string();
                            break;
                        case 2:
                            message.timeout = $root.google.protobuf.Duration.decode(reader, reader.uint32());
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a WaitOperationRequest message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.longrunning.WaitOperationRequest
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.longrunning.WaitOperationRequest} WaitOperationRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                WaitOperationRequest.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a WaitOperationRequest message.
                 * @function verify
                 * @memberof google.longrunning.WaitOperationRequest
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                WaitOperationRequest.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.name != null && message.hasOwnProperty("name"))
                        if (!$util.isString(message.name))
                            return "name: string expected";
                    if (message.timeout != null && message.hasOwnProperty("timeout")) {
                        var error = $root.google.protobuf.Duration.verify(message.timeout);
                        if (error)
                            return "timeout." + error;
                    }
                    return null;
                };
    
                /**
                 * Creates a WaitOperationRequest message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.longrunning.WaitOperationRequest
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.longrunning.WaitOperationRequest} WaitOperationRequest
                 */
                WaitOperationRequest.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.longrunning.WaitOperationRequest)
                        return object;
                    var message = new $root.google.longrunning.WaitOperationRequest();
                    if (object.name != null)
                        message.name = String(object.name);
                    if (object.timeout != null) {
                        if (typeof object.timeout !== "object")
                            throw TypeError(".google.longrunning.WaitOperationRequest.timeout: object expected");
                        message.timeout = $root.google.protobuf.Duration.fromObject(object.timeout);
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from a WaitOperationRequest message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.longrunning.WaitOperationRequest
                 * @static
                 * @param {google.longrunning.WaitOperationRequest} message WaitOperationRequest
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                WaitOperationRequest.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults) {
                        object.name = "";
                        object.timeout = null;
                    }
                    if (message.name != null && message.hasOwnProperty("name"))
                        object.name = message.name;
                    if (message.timeout != null && message.hasOwnProperty("timeout"))
                        object.timeout = $root.google.protobuf.Duration.toObject(message.timeout, options);
                    return object;
                };
    
                /**
                 * Converts this WaitOperationRequest to JSON.
                 * @function toJSON
                 * @memberof google.longrunning.WaitOperationRequest
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                WaitOperationRequest.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return WaitOperationRequest;
            })();
    
            longrunning.OperationInfo = (function() {
    
                /**
                 * Properties of an OperationInfo.
                 * @memberof google.longrunning
                 * @interface IOperationInfo
                 * @property {string|null} [responseType] OperationInfo responseType
                 * @property {string|null} [metadataType] OperationInfo metadataType
                 */
    
                /**
                 * Constructs a new OperationInfo.
                 * @memberof google.longrunning
                 * @classdesc Represents an OperationInfo.
                 * @implements IOperationInfo
                 * @constructor
                 * @param {google.longrunning.IOperationInfo=} [properties] Properties to set
                 */
                function OperationInfo(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * OperationInfo responseType.
                 * @member {string} responseType
                 * @memberof google.longrunning.OperationInfo
                 * @instance
                 */
                OperationInfo.prototype.responseType = "";
    
                /**
                 * OperationInfo metadataType.
                 * @member {string} metadataType
                 * @memberof google.longrunning.OperationInfo
                 * @instance
                 */
                OperationInfo.prototype.metadataType = "";
    
                /**
                 * Creates a new OperationInfo instance using the specified properties.
                 * @function create
                 * @memberof google.longrunning.OperationInfo
                 * @static
                 * @param {google.longrunning.IOperationInfo=} [properties] Properties to set
                 * @returns {google.longrunning.OperationInfo} OperationInfo instance
                 */
                OperationInfo.create = function create(properties) {
                    return new OperationInfo(properties);
                };
    
                /**
                 * Encodes the specified OperationInfo message. Does not implicitly {@link google.longrunning.OperationInfo.verify|verify} messages.
                 * @function encode
                 * @memberof google.longrunning.OperationInfo
                 * @static
                 * @param {google.longrunning.IOperationInfo} message OperationInfo message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                OperationInfo.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.responseType != null && Object.hasOwnProperty.call(message, "responseType"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.responseType);
                    if (message.metadataType != null && Object.hasOwnProperty.call(message, "metadataType"))
                        writer.uint32(/* id 2, wireType 2 =*/18).string(message.metadataType);
                    return writer;
                };
    
                /**
                 * Encodes the specified OperationInfo message, length delimited. Does not implicitly {@link google.longrunning.OperationInfo.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.longrunning.OperationInfo
                 * @static
                 * @param {google.longrunning.IOperationInfo} message OperationInfo message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                OperationInfo.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes an OperationInfo message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.longrunning.OperationInfo
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.longrunning.OperationInfo} OperationInfo
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                OperationInfo.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.longrunning.OperationInfo();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.responseType = reader.string();
                            break;
                        case 2:
                            message.metadataType = reader.string();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes an OperationInfo message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.longrunning.OperationInfo
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.longrunning.OperationInfo} OperationInfo
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                OperationInfo.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies an OperationInfo message.
                 * @function verify
                 * @memberof google.longrunning.OperationInfo
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                OperationInfo.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.responseType != null && message.hasOwnProperty("responseType"))
                        if (!$util.isString(message.responseType))
                            return "responseType: string expected";
                    if (message.metadataType != null && message.hasOwnProperty("metadataType"))
                        if (!$util.isString(message.metadataType))
                            return "metadataType: string expected";
                    return null;
                };
    
                /**
                 * Creates an OperationInfo message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.longrunning.OperationInfo
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.longrunning.OperationInfo} OperationInfo
                 */
                OperationInfo.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.longrunning.OperationInfo)
                        return object;
                    var message = new $root.google.longrunning.OperationInfo();
                    if (object.responseType != null)
                        message.responseType = String(object.responseType);
                    if (object.metadataType != null)
                        message.metadataType = String(object.metadataType);
                    return message;
                };
    
                /**
                 * Creates a plain object from an OperationInfo message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.longrunning.OperationInfo
                 * @static
                 * @param {google.longrunning.OperationInfo} message OperationInfo
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                OperationInfo.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults) {
                        object.responseType = "";
                        object.metadataType = "";
                    }
                    if (message.responseType != null && message.hasOwnProperty("responseType"))
                        object.responseType = message.responseType;
                    if (message.metadataType != null && message.hasOwnProperty("metadataType"))
                        object.metadataType = message.metadataType;
                    return object;
                };
    
                /**
                 * Converts this OperationInfo to JSON.
                 * @function toJSON
                 * @memberof google.longrunning.OperationInfo
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                OperationInfo.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return OperationInfo;
            })();
    
            return longrunning;
        })();
    
        google.rpc = (function() {
    
            /**
             * Namespace rpc.
             * @memberof google
             * @namespace
             */
            var rpc = {};
    
            rpc.Status = (function() {
    
                /**
                 * Properties of a Status.
                 * @memberof google.rpc
                 * @interface IStatus
                 * @property {number|null} [code] Status code
                 * @property {string|null} [message] Status message
                 * @property {Array.<google.protobuf.IAny>|null} [details] Status details
                 */
    
                /**
                 * Constructs a new Status.
                 * @memberof google.rpc
                 * @classdesc Represents a Status.
                 * @implements IStatus
                 * @constructor
                 * @param {google.rpc.IStatus=} [properties] Properties to set
                 */
                function Status(properties) {
                    this.details = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * Status code.
                 * @member {number} code
                 * @memberof google.rpc.Status
                 * @instance
                 */
                Status.prototype.code = 0;
    
                /**
                 * Status message.
                 * @member {string} message
                 * @memberof google.rpc.Status
                 * @instance
                 */
                Status.prototype.message = "";
    
                /**
                 * Status details.
                 * @member {Array.<google.protobuf.IAny>} details
                 * @memberof google.rpc.Status
                 * @instance
                 */
                Status.prototype.details = $util.emptyArray;
    
                /**
                 * Creates a new Status instance using the specified properties.
                 * @function create
                 * @memberof google.rpc.Status
                 * @static
                 * @param {google.rpc.IStatus=} [properties] Properties to set
                 * @returns {google.rpc.Status} Status instance
                 */
                Status.create = function create(properties) {
                    return new Status(properties);
                };
    
                /**
                 * Encodes the specified Status message. Does not implicitly {@link google.rpc.Status.verify|verify} messages.
                 * @function encode
                 * @memberof google.rpc.Status
                 * @static
                 * @param {google.rpc.IStatus} message Status message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Status.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.code != null && Object.hasOwnProperty.call(message, "code"))
                        writer.uint32(/* id 1, wireType 0 =*/8).int32(message.code);
                    if (message.message != null && Object.hasOwnProperty.call(message, "message"))
                        writer.uint32(/* id 2, wireType 2 =*/18).string(message.message);
                    if (message.details != null && message.details.length)
                        for (var i = 0; i < message.details.length; ++i)
                            $root.google.protobuf.Any.encode(message.details[i], writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified Status message, length delimited. Does not implicitly {@link google.rpc.Status.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.rpc.Status
                 * @static
                 * @param {google.rpc.IStatus} message Status message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Status.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a Status message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.rpc.Status
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.rpc.Status} Status
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Status.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.rpc.Status();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.code = reader.int32();
                            break;
                        case 2:
                            message.message = reader.string();
                            break;
                        case 3:
                            if (!(message.details && message.details.length))
                                message.details = [];
                            message.details.push($root.google.protobuf.Any.decode(reader, reader.uint32()));
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a Status message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.rpc.Status
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.rpc.Status} Status
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Status.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a Status message.
                 * @function verify
                 * @memberof google.rpc.Status
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                Status.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.code != null && message.hasOwnProperty("code"))
                        if (!$util.isInteger(message.code))
                            return "code: integer expected";
                    if (message.message != null && message.hasOwnProperty("message"))
                        if (!$util.isString(message.message))
                            return "message: string expected";
                    if (message.details != null && message.hasOwnProperty("details")) {
                        if (!Array.isArray(message.details))
                            return "details: array expected";
                        for (var i = 0; i < message.details.length; ++i) {
                            var error = $root.google.protobuf.Any.verify(message.details[i]);
                            if (error)
                                return "details." + error;
                        }
                    }
                    return null;
                };
    
                /**
                 * Creates a Status message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.rpc.Status
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.rpc.Status} Status
                 */
                Status.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.rpc.Status)
                        return object;
                    var message = new $root.google.rpc.Status();
                    if (object.code != null)
                        message.code = object.code | 0;
                    if (object.message != null)
                        message.message = String(object.message);
                    if (object.details) {
                        if (!Array.isArray(object.details))
                            throw TypeError(".google.rpc.Status.details: array expected");
                        message.details = [];
                        for (var i = 0; i < object.details.length; ++i) {
                            if (typeof object.details[i] !== "object")
                                throw TypeError(".google.rpc.Status.details: object expected");
                            message.details[i] = $root.google.protobuf.Any.fromObject(object.details[i]);
                        }
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from a Status message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.rpc.Status
                 * @static
                 * @param {google.rpc.Status} message Status
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                Status.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.details = [];
                    if (options.defaults) {
                        object.code = 0;
                        object.message = "";
                    }
                    if (message.code != null && message.hasOwnProperty("code"))
                        object.code = message.code;
                    if (message.message != null && message.hasOwnProperty("message"))
                        object.message = message.message;
                    if (message.details && message.details.length) {
                        object.details = [];
                        for (var j = 0; j < message.details.length; ++j)
                            object.details[j] = $root.google.protobuf.Any.toObject(message.details[j], options);
                    }
                    return object;
                };
    
                /**
                 * Converts this Status to JSON.
                 * @function toJSON
                 * @memberof google.rpc.Status
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                Status.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return Status;
            })();
    
            rpc.RetryInfo = (function() {
    
                /**
                 * Properties of a RetryInfo.
                 * @memberof google.rpc
                 * @interface IRetryInfo
                 * @property {google.protobuf.IDuration|null} [retryDelay] RetryInfo retryDelay
                 */
    
                /**
                 * Constructs a new RetryInfo.
                 * @memberof google.rpc
                 * @classdesc Represents a RetryInfo.
                 * @implements IRetryInfo
                 * @constructor
                 * @param {google.rpc.IRetryInfo=} [properties] Properties to set
                 */
                function RetryInfo(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * RetryInfo retryDelay.
                 * @member {google.protobuf.IDuration|null|undefined} retryDelay
                 * @memberof google.rpc.RetryInfo
                 * @instance
                 */
                RetryInfo.prototype.retryDelay = null;
    
                /**
                 * Creates a new RetryInfo instance using the specified properties.
                 * @function create
                 * @memberof google.rpc.RetryInfo
                 * @static
                 * @param {google.rpc.IRetryInfo=} [properties] Properties to set
                 * @returns {google.rpc.RetryInfo} RetryInfo instance
                 */
                RetryInfo.create = function create(properties) {
                    return new RetryInfo(properties);
                };
    
                /**
                 * Encodes the specified RetryInfo message. Does not implicitly {@link google.rpc.RetryInfo.verify|verify} messages.
                 * @function encode
                 * @memberof google.rpc.RetryInfo
                 * @static
                 * @param {google.rpc.IRetryInfo} message RetryInfo message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                RetryInfo.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.retryDelay != null && Object.hasOwnProperty.call(message, "retryDelay"))
                        $root.google.protobuf.Duration.encode(message.retryDelay, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified RetryInfo message, length delimited. Does not implicitly {@link google.rpc.RetryInfo.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.rpc.RetryInfo
                 * @static
                 * @param {google.rpc.IRetryInfo} message RetryInfo message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                RetryInfo.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a RetryInfo message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.rpc.RetryInfo
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.rpc.RetryInfo} RetryInfo
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                RetryInfo.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.rpc.RetryInfo();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.retryDelay = $root.google.protobuf.Duration.decode(reader, reader.uint32());
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a RetryInfo message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.rpc.RetryInfo
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.rpc.RetryInfo} RetryInfo
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                RetryInfo.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a RetryInfo message.
                 * @function verify
                 * @memberof google.rpc.RetryInfo
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                RetryInfo.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.retryDelay != null && message.hasOwnProperty("retryDelay")) {
                        var error = $root.google.protobuf.Duration.verify(message.retryDelay);
                        if (error)
                            return "retryDelay." + error;
                    }
                    return null;
                };
    
                /**
                 * Creates a RetryInfo message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.rpc.RetryInfo
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.rpc.RetryInfo} RetryInfo
                 */
                RetryInfo.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.rpc.RetryInfo)
                        return object;
                    var message = new $root.google.rpc.RetryInfo();
                    if (object.retryDelay != null) {
                        if (typeof object.retryDelay !== "object")
                            throw TypeError(".google.rpc.RetryInfo.retryDelay: object expected");
                        message.retryDelay = $root.google.protobuf.Duration.fromObject(object.retryDelay);
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from a RetryInfo message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.rpc.RetryInfo
                 * @static
                 * @param {google.rpc.RetryInfo} message RetryInfo
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                RetryInfo.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults)
                        object.retryDelay = null;
                    if (message.retryDelay != null && message.hasOwnProperty("retryDelay"))
                        object.retryDelay = $root.google.protobuf.Duration.toObject(message.retryDelay, options);
                    return object;
                };
    
                /**
                 * Converts this RetryInfo to JSON.
                 * @function toJSON
                 * @memberof google.rpc.RetryInfo
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                RetryInfo.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return RetryInfo;
            })();
    
            rpc.DebugInfo = (function() {
    
                /**
                 * Properties of a DebugInfo.
                 * @memberof google.rpc
                 * @interface IDebugInfo
                 * @property {Array.<string>|null} [stackEntries] DebugInfo stackEntries
                 * @property {string|null} [detail] DebugInfo detail
                 */
    
                /**
                 * Constructs a new DebugInfo.
                 * @memberof google.rpc
                 * @classdesc Represents a DebugInfo.
                 * @implements IDebugInfo
                 * @constructor
                 * @param {google.rpc.IDebugInfo=} [properties] Properties to set
                 */
                function DebugInfo(properties) {
                    this.stackEntries = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * DebugInfo stackEntries.
                 * @member {Array.<string>} stackEntries
                 * @memberof google.rpc.DebugInfo
                 * @instance
                 */
                DebugInfo.prototype.stackEntries = $util.emptyArray;
    
                /**
                 * DebugInfo detail.
                 * @member {string} detail
                 * @memberof google.rpc.DebugInfo
                 * @instance
                 */
                DebugInfo.prototype.detail = "";
    
                /**
                 * Creates a new DebugInfo instance using the specified properties.
                 * @function create
                 * @memberof google.rpc.DebugInfo
                 * @static
                 * @param {google.rpc.IDebugInfo=} [properties] Properties to set
                 * @returns {google.rpc.DebugInfo} DebugInfo instance
                 */
                DebugInfo.create = function create(properties) {
                    return new DebugInfo(properties);
                };
    
                /**
                 * Encodes the specified DebugInfo message. Does not implicitly {@link google.rpc.DebugInfo.verify|verify} messages.
                 * @function encode
                 * @memberof google.rpc.DebugInfo
                 * @static
                 * @param {google.rpc.IDebugInfo} message DebugInfo message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                DebugInfo.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.stackEntries != null && message.stackEntries.length)
                        for (var i = 0; i < message.stackEntries.length; ++i)
                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.stackEntries[i]);
                    if (message.detail != null && Object.hasOwnProperty.call(message, "detail"))
                        writer.uint32(/* id 2, wireType 2 =*/18).string(message.detail);
                    return writer;
                };
    
                /**
                 * Encodes the specified DebugInfo message, length delimited. Does not implicitly {@link google.rpc.DebugInfo.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.rpc.DebugInfo
                 * @static
                 * @param {google.rpc.IDebugInfo} message DebugInfo message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                DebugInfo.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a DebugInfo message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.rpc.DebugInfo
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.rpc.DebugInfo} DebugInfo
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                DebugInfo.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.rpc.DebugInfo();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            if (!(message.stackEntries && message.stackEntries.length))
                                message.stackEntries = [];
                            message.stackEntries.push(reader.string());
                            break;
                        case 2:
                            message.detail = reader.string();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a DebugInfo message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.rpc.DebugInfo
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.rpc.DebugInfo} DebugInfo
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                DebugInfo.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a DebugInfo message.
                 * @function verify
                 * @memberof google.rpc.DebugInfo
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                DebugInfo.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.stackEntries != null && message.hasOwnProperty("stackEntries")) {
                        if (!Array.isArray(message.stackEntries))
                            return "stackEntries: array expected";
                        for (var i = 0; i < message.stackEntries.length; ++i)
                            if (!$util.isString(message.stackEntries[i]))
                                return "stackEntries: string[] expected";
                    }
                    if (message.detail != null && message.hasOwnProperty("detail"))
                        if (!$util.isString(message.detail))
                            return "detail: string expected";
                    return null;
                };
    
                /**
                 * Creates a DebugInfo message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.rpc.DebugInfo
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.rpc.DebugInfo} DebugInfo
                 */
                DebugInfo.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.rpc.DebugInfo)
                        return object;
                    var message = new $root.google.rpc.DebugInfo();
                    if (object.stackEntries) {
                        if (!Array.isArray(object.stackEntries))
                            throw TypeError(".google.rpc.DebugInfo.stackEntries: array expected");
                        message.stackEntries = [];
                        for (var i = 0; i < object.stackEntries.length; ++i)
                            message.stackEntries[i] = String(object.stackEntries[i]);
                    }
                    if (object.detail != null)
                        message.detail = String(object.detail);
                    return message;
                };
    
                /**
                 * Creates a plain object from a DebugInfo message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.rpc.DebugInfo
                 * @static
                 * @param {google.rpc.DebugInfo} message DebugInfo
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                DebugInfo.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.stackEntries = [];
                    if (options.defaults)
                        object.detail = "";
                    if (message.stackEntries && message.stackEntries.length) {
                        object.stackEntries = [];
                        for (var j = 0; j < message.stackEntries.length; ++j)
                            object.stackEntries[j] = message.stackEntries[j];
                    }
                    if (message.detail != null && message.hasOwnProperty("detail"))
                        object.detail = message.detail;
                    return object;
                };
    
                /**
                 * Converts this DebugInfo to JSON.
                 * @function toJSON
                 * @memberof google.rpc.DebugInfo
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                DebugInfo.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return DebugInfo;
            })();
    
            rpc.QuotaFailure = (function() {
    
                /**
                 * Properties of a QuotaFailure.
                 * @memberof google.rpc
                 * @interface IQuotaFailure
                 * @property {Array.<google.rpc.QuotaFailure.IViolation>|null} [violations] QuotaFailure violations
                 */
    
                /**
                 * Constructs a new QuotaFailure.
                 * @memberof google.rpc
                 * @classdesc Represents a QuotaFailure.
                 * @implements IQuotaFailure
                 * @constructor
                 * @param {google.rpc.IQuotaFailure=} [properties] Properties to set
                 */
                function QuotaFailure(properties) {
                    this.violations = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * QuotaFailure violations.
                 * @member {Array.<google.rpc.QuotaFailure.IViolation>} violations
                 * @memberof google.rpc.QuotaFailure
                 * @instance
                 */
                QuotaFailure.prototype.violations = $util.emptyArray;
    
                /**
                 * Creates a new QuotaFailure instance using the specified properties.
                 * @function create
                 * @memberof google.rpc.QuotaFailure
                 * @static
                 * @param {google.rpc.IQuotaFailure=} [properties] Properties to set
                 * @returns {google.rpc.QuotaFailure} QuotaFailure instance
                 */
                QuotaFailure.create = function create(properties) {
                    return new QuotaFailure(properties);
                };
    
                /**
                 * Encodes the specified QuotaFailure message. Does not implicitly {@link google.rpc.QuotaFailure.verify|verify} messages.
                 * @function encode
                 * @memberof google.rpc.QuotaFailure
                 * @static
                 * @param {google.rpc.IQuotaFailure} message QuotaFailure message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                QuotaFailure.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.violations != null && message.violations.length)
                        for (var i = 0; i < message.violations.length; ++i)
                            $root.google.rpc.QuotaFailure.Violation.encode(message.violations[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified QuotaFailure message, length delimited. Does not implicitly {@link google.rpc.QuotaFailure.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.rpc.QuotaFailure
                 * @static
                 * @param {google.rpc.IQuotaFailure} message QuotaFailure message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                QuotaFailure.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a QuotaFailure message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.rpc.QuotaFailure
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.rpc.QuotaFailure} QuotaFailure
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                QuotaFailure.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.rpc.QuotaFailure();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            if (!(message.violations && message.violations.length))
                                message.violations = [];
                            message.violations.push($root.google.rpc.QuotaFailure.Violation.decode(reader, reader.uint32()));
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a QuotaFailure message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.rpc.QuotaFailure
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.rpc.QuotaFailure} QuotaFailure
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                QuotaFailure.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a QuotaFailure message.
                 * @function verify
                 * @memberof google.rpc.QuotaFailure
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                QuotaFailure.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.violations != null && message.hasOwnProperty("violations")) {
                        if (!Array.isArray(message.violations))
                            return "violations: array expected";
                        for (var i = 0; i < message.violations.length; ++i) {
                            var error = $root.google.rpc.QuotaFailure.Violation.verify(message.violations[i]);
                            if (error)
                                return "violations." + error;
                        }
                    }
                    return null;
                };
    
                /**
                 * Creates a QuotaFailure message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.rpc.QuotaFailure
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.rpc.QuotaFailure} QuotaFailure
                 */
                QuotaFailure.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.rpc.QuotaFailure)
                        return object;
                    var message = new $root.google.rpc.QuotaFailure();
                    if (object.violations) {
                        if (!Array.isArray(object.violations))
                            throw TypeError(".google.rpc.QuotaFailure.violations: array expected");
                        message.violations = [];
                        for (var i = 0; i < object.violations.length; ++i) {
                            if (typeof object.violations[i] !== "object")
                                throw TypeError(".google.rpc.QuotaFailure.violations: object expected");
                            message.violations[i] = $root.google.rpc.QuotaFailure.Violation.fromObject(object.violations[i]);
                        }
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from a QuotaFailure message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.rpc.QuotaFailure
                 * @static
                 * @param {google.rpc.QuotaFailure} message QuotaFailure
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                QuotaFailure.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.violations = [];
                    if (message.violations && message.violations.length) {
                        object.violations = [];
                        for (var j = 0; j < message.violations.length; ++j)
                            object.violations[j] = $root.google.rpc.QuotaFailure.Violation.toObject(message.violations[j], options);
                    }
                    return object;
                };
    
                /**
                 * Converts this QuotaFailure to JSON.
                 * @function toJSON
                 * @memberof google.rpc.QuotaFailure
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                QuotaFailure.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                QuotaFailure.Violation = (function() {
    
                    /**
                     * Properties of a Violation.
                     * @memberof google.rpc.QuotaFailure
                     * @interface IViolation
                     * @property {string|null} [subject] Violation subject
                     * @property {string|null} [description] Violation description
                     */
    
                    /**
                     * Constructs a new Violation.
                     * @memberof google.rpc.QuotaFailure
                     * @classdesc Represents a Violation.
                     * @implements IViolation
                     * @constructor
                     * @param {google.rpc.QuotaFailure.IViolation=} [properties] Properties to set
                     */
                    function Violation(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * Violation subject.
                     * @member {string} subject
                     * @memberof google.rpc.QuotaFailure.Violation
                     * @instance
                     */
                    Violation.prototype.subject = "";
    
                    /**
                     * Violation description.
                     * @member {string} description
                     * @memberof google.rpc.QuotaFailure.Violation
                     * @instance
                     */
                    Violation.prototype.description = "";
    
                    /**
                     * Creates a new Violation instance using the specified properties.
                     * @function create
                     * @memberof google.rpc.QuotaFailure.Violation
                     * @static
                     * @param {google.rpc.QuotaFailure.IViolation=} [properties] Properties to set
                     * @returns {google.rpc.QuotaFailure.Violation} Violation instance
                     */
                    Violation.create = function create(properties) {
                        return new Violation(properties);
                    };
    
                    /**
                     * Encodes the specified Violation message. Does not implicitly {@link google.rpc.QuotaFailure.Violation.verify|verify} messages.
                     * @function encode
                     * @memberof google.rpc.QuotaFailure.Violation
                     * @static
                     * @param {google.rpc.QuotaFailure.IViolation} message Violation message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Violation.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.subject != null && Object.hasOwnProperty.call(message, "subject"))
                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.subject);
                        if (message.description != null && Object.hasOwnProperty.call(message, "description"))
                            writer.uint32(/* id 2, wireType 2 =*/18).string(message.description);
                        return writer;
                    };
    
                    /**
                     * Encodes the specified Violation message, length delimited. Does not implicitly {@link google.rpc.QuotaFailure.Violation.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof google.rpc.QuotaFailure.Violation
                     * @static
                     * @param {google.rpc.QuotaFailure.IViolation} message Violation message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Violation.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a Violation message from the specified reader or buffer.
                     * @function decode
                     * @memberof google.rpc.QuotaFailure.Violation
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {google.rpc.QuotaFailure.Violation} Violation
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Violation.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.rpc.QuotaFailure.Violation();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.subject = reader.string();
                                break;
                            case 2:
                                message.description = reader.string();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a Violation message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof google.rpc.QuotaFailure.Violation
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {google.rpc.QuotaFailure.Violation} Violation
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Violation.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a Violation message.
                     * @function verify
                     * @memberof google.rpc.QuotaFailure.Violation
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    Violation.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.subject != null && message.hasOwnProperty("subject"))
                            if (!$util.isString(message.subject))
                                return "subject: string expected";
                        if (message.description != null && message.hasOwnProperty("description"))
                            if (!$util.isString(message.description))
                                return "description: string expected";
                        return null;
                    };
    
                    /**
                     * Creates a Violation message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof google.rpc.QuotaFailure.Violation
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {google.rpc.QuotaFailure.Violation} Violation
                     */
                    Violation.fromObject = function fromObject(object) {
                        if (object instanceof $root.google.rpc.QuotaFailure.Violation)
                            return object;
                        var message = new $root.google.rpc.QuotaFailure.Violation();
                        if (object.subject != null)
                            message.subject = String(object.subject);
                        if (object.description != null)
                            message.description = String(object.description);
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a Violation message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof google.rpc.QuotaFailure.Violation
                     * @static
                     * @param {google.rpc.QuotaFailure.Violation} message Violation
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    Violation.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults) {
                            object.subject = "";
                            object.description = "";
                        }
                        if (message.subject != null && message.hasOwnProperty("subject"))
                            object.subject = message.subject;
                        if (message.description != null && message.hasOwnProperty("description"))
                            object.description = message.description;
                        return object;
                    };
    
                    /**
                     * Converts this Violation to JSON.
                     * @function toJSON
                     * @memberof google.rpc.QuotaFailure.Violation
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    Violation.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    return Violation;
                })();
    
                return QuotaFailure;
            })();
    
            rpc.ErrorInfo = (function() {
    
                /**
                 * Properties of an ErrorInfo.
                 * @memberof google.rpc
                 * @interface IErrorInfo
                 * @property {string|null} [reason] ErrorInfo reason
                 * @property {string|null} [domain] ErrorInfo domain
                 * @property {Object.<string,string>|null} [metadata] ErrorInfo metadata
                 */
    
                /**
                 * Constructs a new ErrorInfo.
                 * @memberof google.rpc
                 * @classdesc Represents an ErrorInfo.
                 * @implements IErrorInfo
                 * @constructor
                 * @param {google.rpc.IErrorInfo=} [properties] Properties to set
                 */
                function ErrorInfo(properties) {
                    this.metadata = {};
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * ErrorInfo reason.
                 * @member {string} reason
                 * @memberof google.rpc.ErrorInfo
                 * @instance
                 */
                ErrorInfo.prototype.reason = "";
    
                /**
                 * ErrorInfo domain.
                 * @member {string} domain
                 * @memberof google.rpc.ErrorInfo
                 * @instance
                 */
                ErrorInfo.prototype.domain = "";
    
                /**
                 * ErrorInfo metadata.
                 * @member {Object.<string,string>} metadata
                 * @memberof google.rpc.ErrorInfo
                 * @instance
                 */
                ErrorInfo.prototype.metadata = $util.emptyObject;
    
                /**
                 * Creates a new ErrorInfo instance using the specified properties.
                 * @function create
                 * @memberof google.rpc.ErrorInfo
                 * @static
                 * @param {google.rpc.IErrorInfo=} [properties] Properties to set
                 * @returns {google.rpc.ErrorInfo} ErrorInfo instance
                 */
                ErrorInfo.create = function create(properties) {
                    return new ErrorInfo(properties);
                };
    
                /**
                 * Encodes the specified ErrorInfo message. Does not implicitly {@link google.rpc.ErrorInfo.verify|verify} messages.
                 * @function encode
                 * @memberof google.rpc.ErrorInfo
                 * @static
                 * @param {google.rpc.IErrorInfo} message ErrorInfo message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                ErrorInfo.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.reason != null && Object.hasOwnProperty.call(message, "reason"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.reason);
                    if (message.domain != null && Object.hasOwnProperty.call(message, "domain"))
                        writer.uint32(/* id 2, wireType 2 =*/18).string(message.domain);
                    if (message.metadata != null && Object.hasOwnProperty.call(message, "metadata"))
                        for (var keys = Object.keys(message.metadata), i = 0; i < keys.length; ++i)
                            writer.uint32(/* id 3, wireType 2 =*/26).fork().uint32(/* id 1, wireType 2 =*/10).string(keys[i]).uint32(/* id 2, wireType 2 =*/18).string(message.metadata[keys[i]]).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified ErrorInfo message, length delimited. Does not implicitly {@link google.rpc.ErrorInfo.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.rpc.ErrorInfo
                 * @static
                 * @param {google.rpc.IErrorInfo} message ErrorInfo message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                ErrorInfo.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes an ErrorInfo message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.rpc.ErrorInfo
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.rpc.ErrorInfo} ErrorInfo
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                ErrorInfo.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.rpc.ErrorInfo(), key, value;
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.reason = reader.string();
                            break;
                        case 2:
                            message.domain = reader.string();
                            break;
                        case 3:
                            if (message.metadata === $util.emptyObject)
                                message.metadata = {};
                            var end2 = reader.uint32() + reader.pos;
                            key = "";
                            value = "";
                            while (reader.pos < end2) {
                                var tag2 = reader.uint32();
                                switch (tag2 >>> 3) {
                                case 1:
                                    key = reader.string();
                                    break;
                                case 2:
                                    value = reader.string();
                                    break;
                                default:
                                    reader.skipType(tag2 & 7);
                                    break;
                                }
                            }
                            message.metadata[key] = value;
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes an ErrorInfo message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.rpc.ErrorInfo
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.rpc.ErrorInfo} ErrorInfo
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                ErrorInfo.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies an ErrorInfo message.
                 * @function verify
                 * @memberof google.rpc.ErrorInfo
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                ErrorInfo.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.reason != null && message.hasOwnProperty("reason"))
                        if (!$util.isString(message.reason))
                            return "reason: string expected";
                    if (message.domain != null && message.hasOwnProperty("domain"))
                        if (!$util.isString(message.domain))
                            return "domain: string expected";
                    if (message.metadata != null && message.hasOwnProperty("metadata")) {
                        if (!$util.isObject(message.metadata))
                            return "metadata: object expected";
                        var key = Object.keys(message.metadata);
                        for (var i = 0; i < key.length; ++i)
                            if (!$util.isString(message.metadata[key[i]]))
                                return "metadata: string{k:string} expected";
                    }
                    return null;
                };
    
                /**
                 * Creates an ErrorInfo message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.rpc.ErrorInfo
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.rpc.ErrorInfo} ErrorInfo
                 */
                ErrorInfo.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.rpc.ErrorInfo)
                        return object;
                    var message = new $root.google.rpc.ErrorInfo();
                    if (object.reason != null)
                        message.reason = String(object.reason);
                    if (object.domain != null)
                        message.domain = String(object.domain);
                    if (object.metadata) {
                        if (typeof object.metadata !== "object")
                            throw TypeError(".google.rpc.ErrorInfo.metadata: object expected");
                        message.metadata = {};
                        for (var keys = Object.keys(object.metadata), i = 0; i < keys.length; ++i)
                            message.metadata[keys[i]] = String(object.metadata[keys[i]]);
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from an ErrorInfo message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.rpc.ErrorInfo
                 * @static
                 * @param {google.rpc.ErrorInfo} message ErrorInfo
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                ErrorInfo.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.objects || options.defaults)
                        object.metadata = {};
                    if (options.defaults) {
                        object.reason = "";
                        object.domain = "";
                    }
                    if (message.reason != null && message.hasOwnProperty("reason"))
                        object.reason = message.reason;
                    if (message.domain != null && message.hasOwnProperty("domain"))
                        object.domain = message.domain;
                    var keys2;
                    if (message.metadata && (keys2 = Object.keys(message.metadata)).length) {
                        object.metadata = {};
                        for (var j = 0; j < keys2.length; ++j)
                            object.metadata[keys2[j]] = message.metadata[keys2[j]];
                    }
                    return object;
                };
    
                /**
                 * Converts this ErrorInfo to JSON.
                 * @function toJSON
                 * @memberof google.rpc.ErrorInfo
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                ErrorInfo.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return ErrorInfo;
            })();
    
            rpc.PreconditionFailure = (function() {
    
                /**
                 * Properties of a PreconditionFailure.
                 * @memberof google.rpc
                 * @interface IPreconditionFailure
                 * @property {Array.<google.rpc.PreconditionFailure.IViolation>|null} [violations] PreconditionFailure violations
                 */
    
                /**
                 * Constructs a new PreconditionFailure.
                 * @memberof google.rpc
                 * @classdesc Represents a PreconditionFailure.
                 * @implements IPreconditionFailure
                 * @constructor
                 * @param {google.rpc.IPreconditionFailure=} [properties] Properties to set
                 */
                function PreconditionFailure(properties) {
                    this.violations = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * PreconditionFailure violations.
                 * @member {Array.<google.rpc.PreconditionFailure.IViolation>} violations
                 * @memberof google.rpc.PreconditionFailure
                 * @instance
                 */
                PreconditionFailure.prototype.violations = $util.emptyArray;
    
                /**
                 * Creates a new PreconditionFailure instance using the specified properties.
                 * @function create
                 * @memberof google.rpc.PreconditionFailure
                 * @static
                 * @param {google.rpc.IPreconditionFailure=} [properties] Properties to set
                 * @returns {google.rpc.PreconditionFailure} PreconditionFailure instance
                 */
                PreconditionFailure.create = function create(properties) {
                    return new PreconditionFailure(properties);
                };
    
                /**
                 * Encodes the specified PreconditionFailure message. Does not implicitly {@link google.rpc.PreconditionFailure.verify|verify} messages.
                 * @function encode
                 * @memberof google.rpc.PreconditionFailure
                 * @static
                 * @param {google.rpc.IPreconditionFailure} message PreconditionFailure message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                PreconditionFailure.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.violations != null && message.violations.length)
                        for (var i = 0; i < message.violations.length; ++i)
                            $root.google.rpc.PreconditionFailure.Violation.encode(message.violations[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified PreconditionFailure message, length delimited. Does not implicitly {@link google.rpc.PreconditionFailure.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.rpc.PreconditionFailure
                 * @static
                 * @param {google.rpc.IPreconditionFailure} message PreconditionFailure message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                PreconditionFailure.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a PreconditionFailure message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.rpc.PreconditionFailure
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.rpc.PreconditionFailure} PreconditionFailure
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                PreconditionFailure.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.rpc.PreconditionFailure();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            if (!(message.violations && message.violations.length))
                                message.violations = [];
                            message.violations.push($root.google.rpc.PreconditionFailure.Violation.decode(reader, reader.uint32()));
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a PreconditionFailure message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.rpc.PreconditionFailure
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.rpc.PreconditionFailure} PreconditionFailure
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                PreconditionFailure.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a PreconditionFailure message.
                 * @function verify
                 * @memberof google.rpc.PreconditionFailure
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                PreconditionFailure.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.violations != null && message.hasOwnProperty("violations")) {
                        if (!Array.isArray(message.violations))
                            return "violations: array expected";
                        for (var i = 0; i < message.violations.length; ++i) {
                            var error = $root.google.rpc.PreconditionFailure.Violation.verify(message.violations[i]);
                            if (error)
                                return "violations." + error;
                        }
                    }
                    return null;
                };
    
                /**
                 * Creates a PreconditionFailure message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.rpc.PreconditionFailure
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.rpc.PreconditionFailure} PreconditionFailure
                 */
                PreconditionFailure.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.rpc.PreconditionFailure)
                        return object;
                    var message = new $root.google.rpc.PreconditionFailure();
                    if (object.violations) {
                        if (!Array.isArray(object.violations))
                            throw TypeError(".google.rpc.PreconditionFailure.violations: array expected");
                        message.violations = [];
                        for (var i = 0; i < object.violations.length; ++i) {
                            if (typeof object.violations[i] !== "object")
                                throw TypeError(".google.rpc.PreconditionFailure.violations: object expected");
                            message.violations[i] = $root.google.rpc.PreconditionFailure.Violation.fromObject(object.violations[i]);
                        }
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from a PreconditionFailure message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.rpc.PreconditionFailure
                 * @static
                 * @param {google.rpc.PreconditionFailure} message PreconditionFailure
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                PreconditionFailure.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.violations = [];
                    if (message.violations && message.violations.length) {
                        object.violations = [];
                        for (var j = 0; j < message.violations.length; ++j)
                            object.violations[j] = $root.google.rpc.PreconditionFailure.Violation.toObject(message.violations[j], options);
                    }
                    return object;
                };
    
                /**
                 * Converts this PreconditionFailure to JSON.
                 * @function toJSON
                 * @memberof google.rpc.PreconditionFailure
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                PreconditionFailure.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                PreconditionFailure.Violation = (function() {
    
                    /**
                     * Properties of a Violation.
                     * @memberof google.rpc.PreconditionFailure
                     * @interface IViolation
                     * @property {string|null} [type] Violation type
                     * @property {string|null} [subject] Violation subject
                     * @property {string|null} [description] Violation description
                     */
    
                    /**
                     * Constructs a new Violation.
                     * @memberof google.rpc.PreconditionFailure
                     * @classdesc Represents a Violation.
                     * @implements IViolation
                     * @constructor
                     * @param {google.rpc.PreconditionFailure.IViolation=} [properties] Properties to set
                     */
                    function Violation(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * Violation type.
                     * @member {string} type
                     * @memberof google.rpc.PreconditionFailure.Violation
                     * @instance
                     */
                    Violation.prototype.type = "";
    
                    /**
                     * Violation subject.
                     * @member {string} subject
                     * @memberof google.rpc.PreconditionFailure.Violation
                     * @instance
                     */
                    Violation.prototype.subject = "";
    
                    /**
                     * Violation description.
                     * @member {string} description
                     * @memberof google.rpc.PreconditionFailure.Violation
                     * @instance
                     */
                    Violation.prototype.description = "";
    
                    /**
                     * Creates a new Violation instance using the specified properties.
                     * @function create
                     * @memberof google.rpc.PreconditionFailure.Violation
                     * @static
                     * @param {google.rpc.PreconditionFailure.IViolation=} [properties] Properties to set
                     * @returns {google.rpc.PreconditionFailure.Violation} Violation instance
                     */
                    Violation.create = function create(properties) {
                        return new Violation(properties);
                    };
    
                    /**
                     * Encodes the specified Violation message. Does not implicitly {@link google.rpc.PreconditionFailure.Violation.verify|verify} messages.
                     * @function encode
                     * @memberof google.rpc.PreconditionFailure.Violation
                     * @static
                     * @param {google.rpc.PreconditionFailure.IViolation} message Violation message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Violation.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.type != null && Object.hasOwnProperty.call(message, "type"))
                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.type);
                        if (message.subject != null && Object.hasOwnProperty.call(message, "subject"))
                            writer.uint32(/* id 2, wireType 2 =*/18).string(message.subject);
                        if (message.description != null && Object.hasOwnProperty.call(message, "description"))
                            writer.uint32(/* id 3, wireType 2 =*/26).string(message.description);
                        return writer;
                    };
    
                    /**
                     * Encodes the specified Violation message, length delimited. Does not implicitly {@link google.rpc.PreconditionFailure.Violation.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof google.rpc.PreconditionFailure.Violation
                     * @static
                     * @param {google.rpc.PreconditionFailure.IViolation} message Violation message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Violation.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a Violation message from the specified reader or buffer.
                     * @function decode
                     * @memberof google.rpc.PreconditionFailure.Violation
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {google.rpc.PreconditionFailure.Violation} Violation
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Violation.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.rpc.PreconditionFailure.Violation();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.type = reader.string();
                                break;
                            case 2:
                                message.subject = reader.string();
                                break;
                            case 3:
                                message.description = reader.string();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a Violation message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof google.rpc.PreconditionFailure.Violation
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {google.rpc.PreconditionFailure.Violation} Violation
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Violation.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a Violation message.
                     * @function verify
                     * @memberof google.rpc.PreconditionFailure.Violation
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    Violation.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.type != null && message.hasOwnProperty("type"))
                            if (!$util.isString(message.type))
                                return "type: string expected";
                        if (message.subject != null && message.hasOwnProperty("subject"))
                            if (!$util.isString(message.subject))
                                return "subject: string expected";
                        if (message.description != null && message.hasOwnProperty("description"))
                            if (!$util.isString(message.description))
                                return "description: string expected";
                        return null;
                    };
    
                    /**
                     * Creates a Violation message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof google.rpc.PreconditionFailure.Violation
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {google.rpc.PreconditionFailure.Violation} Violation
                     */
                    Violation.fromObject = function fromObject(object) {
                        if (object instanceof $root.google.rpc.PreconditionFailure.Violation)
                            return object;
                        var message = new $root.google.rpc.PreconditionFailure.Violation();
                        if (object.type != null)
                            message.type = String(object.type);
                        if (object.subject != null)
                            message.subject = String(object.subject);
                        if (object.description != null)
                            message.description = String(object.description);
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a Violation message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof google.rpc.PreconditionFailure.Violation
                     * @static
                     * @param {google.rpc.PreconditionFailure.Violation} message Violation
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    Violation.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults) {
                            object.type = "";
                            object.subject = "";
                            object.description = "";
                        }
                        if (message.type != null && message.hasOwnProperty("type"))
                            object.type = message.type;
                        if (message.subject != null && message.hasOwnProperty("subject"))
                            object.subject = message.subject;
                        if (message.description != null && message.hasOwnProperty("description"))
                            object.description = message.description;
                        return object;
                    };
    
                    /**
                     * Converts this Violation to JSON.
                     * @function toJSON
                     * @memberof google.rpc.PreconditionFailure.Violation
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    Violation.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    return Violation;
                })();
    
                return PreconditionFailure;
            })();
    
            rpc.BadRequest = (function() {
    
                /**
                 * Properties of a BadRequest.
                 * @memberof google.rpc
                 * @interface IBadRequest
                 * @property {Array.<google.rpc.BadRequest.IFieldViolation>|null} [fieldViolations] BadRequest fieldViolations
                 */
    
                /**
                 * Constructs a new BadRequest.
                 * @memberof google.rpc
                 * @classdesc Represents a BadRequest.
                 * @implements IBadRequest
                 * @constructor
                 * @param {google.rpc.IBadRequest=} [properties] Properties to set
                 */
                function BadRequest(properties) {
                    this.fieldViolations = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * BadRequest fieldViolations.
                 * @member {Array.<google.rpc.BadRequest.IFieldViolation>} fieldViolations
                 * @memberof google.rpc.BadRequest
                 * @instance
                 */
                BadRequest.prototype.fieldViolations = $util.emptyArray;
    
                /**
                 * Creates a new BadRequest instance using the specified properties.
                 * @function create
                 * @memberof google.rpc.BadRequest
                 * @static
                 * @param {google.rpc.IBadRequest=} [properties] Properties to set
                 * @returns {google.rpc.BadRequest} BadRequest instance
                 */
                BadRequest.create = function create(properties) {
                    return new BadRequest(properties);
                };
    
                /**
                 * Encodes the specified BadRequest message. Does not implicitly {@link google.rpc.BadRequest.verify|verify} messages.
                 * @function encode
                 * @memberof google.rpc.BadRequest
                 * @static
                 * @param {google.rpc.IBadRequest} message BadRequest message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                BadRequest.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.fieldViolations != null && message.fieldViolations.length)
                        for (var i = 0; i < message.fieldViolations.length; ++i)
                            $root.google.rpc.BadRequest.FieldViolation.encode(message.fieldViolations[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified BadRequest message, length delimited. Does not implicitly {@link google.rpc.BadRequest.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.rpc.BadRequest
                 * @static
                 * @param {google.rpc.IBadRequest} message BadRequest message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                BadRequest.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a BadRequest message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.rpc.BadRequest
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.rpc.BadRequest} BadRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                BadRequest.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.rpc.BadRequest();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            if (!(message.fieldViolations && message.fieldViolations.length))
                                message.fieldViolations = [];
                            message.fieldViolations.push($root.google.rpc.BadRequest.FieldViolation.decode(reader, reader.uint32()));
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a BadRequest message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.rpc.BadRequest
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.rpc.BadRequest} BadRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                BadRequest.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a BadRequest message.
                 * @function verify
                 * @memberof google.rpc.BadRequest
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                BadRequest.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.fieldViolations != null && message.hasOwnProperty("fieldViolations")) {
                        if (!Array.isArray(message.fieldViolations))
                            return "fieldViolations: array expected";
                        for (var i = 0; i < message.fieldViolations.length; ++i) {
                            var error = $root.google.rpc.BadRequest.FieldViolation.verify(message.fieldViolations[i]);
                            if (error)
                                return "fieldViolations." + error;
                        }
                    }
                    return null;
                };
    
                /**
                 * Creates a BadRequest message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.rpc.BadRequest
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.rpc.BadRequest} BadRequest
                 */
                BadRequest.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.rpc.BadRequest)
                        return object;
                    var message = new $root.google.rpc.BadRequest();
                    if (object.fieldViolations) {
                        if (!Array.isArray(object.fieldViolations))
                            throw TypeError(".google.rpc.BadRequest.fieldViolations: array expected");
                        message.fieldViolations = [];
                        for (var i = 0; i < object.fieldViolations.length; ++i) {
                            if (typeof object.fieldViolations[i] !== "object")
                                throw TypeError(".google.rpc.BadRequest.fieldViolations: object expected");
                            message.fieldViolations[i] = $root.google.rpc.BadRequest.FieldViolation.fromObject(object.fieldViolations[i]);
                        }
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from a BadRequest message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.rpc.BadRequest
                 * @static
                 * @param {google.rpc.BadRequest} message BadRequest
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                BadRequest.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.fieldViolations = [];
                    if (message.fieldViolations && message.fieldViolations.length) {
                        object.fieldViolations = [];
                        for (var j = 0; j < message.fieldViolations.length; ++j)
                            object.fieldViolations[j] = $root.google.rpc.BadRequest.FieldViolation.toObject(message.fieldViolations[j], options);
                    }
                    return object;
                };
    
                /**
                 * Converts this BadRequest to JSON.
                 * @function toJSON
                 * @memberof google.rpc.BadRequest
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                BadRequest.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                BadRequest.FieldViolation = (function() {
    
                    /**
                     * Properties of a FieldViolation.
                     * @memberof google.rpc.BadRequest
                     * @interface IFieldViolation
                     * @property {string|null} [field] FieldViolation field
                     * @property {string|null} [description] FieldViolation description
                     */
    
                    /**
                     * Constructs a new FieldViolation.
                     * @memberof google.rpc.BadRequest
                     * @classdesc Represents a FieldViolation.
                     * @implements IFieldViolation
                     * @constructor
                     * @param {google.rpc.BadRequest.IFieldViolation=} [properties] Properties to set
                     */
                    function FieldViolation(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * FieldViolation field.
                     * @member {string} field
                     * @memberof google.rpc.BadRequest.FieldViolation
                     * @instance
                     */
                    FieldViolation.prototype.field = "";
    
                    /**
                     * FieldViolation description.
                     * @member {string} description
                     * @memberof google.rpc.BadRequest.FieldViolation
                     * @instance
                     */
                    FieldViolation.prototype.description = "";
    
                    /**
                     * Creates a new FieldViolation instance using the specified properties.
                     * @function create
                     * @memberof google.rpc.BadRequest.FieldViolation
                     * @static
                     * @param {google.rpc.BadRequest.IFieldViolation=} [properties] Properties to set
                     * @returns {google.rpc.BadRequest.FieldViolation} FieldViolation instance
                     */
                    FieldViolation.create = function create(properties) {
                        return new FieldViolation(properties);
                    };
    
                    /**
                     * Encodes the specified FieldViolation message. Does not implicitly {@link google.rpc.BadRequest.FieldViolation.verify|verify} messages.
                     * @function encode
                     * @memberof google.rpc.BadRequest.FieldViolation
                     * @static
                     * @param {google.rpc.BadRequest.IFieldViolation} message FieldViolation message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    FieldViolation.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.field != null && Object.hasOwnProperty.call(message, "field"))
                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.field);
                        if (message.description != null && Object.hasOwnProperty.call(message, "description"))
                            writer.uint32(/* id 2, wireType 2 =*/18).string(message.description);
                        return writer;
                    };
    
                    /**
                     * Encodes the specified FieldViolation message, length delimited. Does not implicitly {@link google.rpc.BadRequest.FieldViolation.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof google.rpc.BadRequest.FieldViolation
                     * @static
                     * @param {google.rpc.BadRequest.IFieldViolation} message FieldViolation message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    FieldViolation.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a FieldViolation message from the specified reader or buffer.
                     * @function decode
                     * @memberof google.rpc.BadRequest.FieldViolation
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {google.rpc.BadRequest.FieldViolation} FieldViolation
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    FieldViolation.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.rpc.BadRequest.FieldViolation();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.field = reader.string();
                                break;
                            case 2:
                                message.description = reader.string();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a FieldViolation message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof google.rpc.BadRequest.FieldViolation
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {google.rpc.BadRequest.FieldViolation} FieldViolation
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    FieldViolation.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a FieldViolation message.
                     * @function verify
                     * @memberof google.rpc.BadRequest.FieldViolation
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    FieldViolation.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.field != null && message.hasOwnProperty("field"))
                            if (!$util.isString(message.field))
                                return "field: string expected";
                        if (message.description != null && message.hasOwnProperty("description"))
                            if (!$util.isString(message.description))
                                return "description: string expected";
                        return null;
                    };
    
                    /**
                     * Creates a FieldViolation message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof google.rpc.BadRequest.FieldViolation
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {google.rpc.BadRequest.FieldViolation} FieldViolation
                     */
                    FieldViolation.fromObject = function fromObject(object) {
                        if (object instanceof $root.google.rpc.BadRequest.FieldViolation)
                            return object;
                        var message = new $root.google.rpc.BadRequest.FieldViolation();
                        if (object.field != null)
                            message.field = String(object.field);
                        if (object.description != null)
                            message.description = String(object.description);
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a FieldViolation message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof google.rpc.BadRequest.FieldViolation
                     * @static
                     * @param {google.rpc.BadRequest.FieldViolation} message FieldViolation
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    FieldViolation.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults) {
                            object.field = "";
                            object.description = "";
                        }
                        if (message.field != null && message.hasOwnProperty("field"))
                            object.field = message.field;
                        if (message.description != null && message.hasOwnProperty("description"))
                            object.description = message.description;
                        return object;
                    };
    
                    /**
                     * Converts this FieldViolation to JSON.
                     * @function toJSON
                     * @memberof google.rpc.BadRequest.FieldViolation
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    FieldViolation.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    return FieldViolation;
                })();
    
                return BadRequest;
            })();
    
            rpc.RequestInfo = (function() {
    
                /**
                 * Properties of a RequestInfo.
                 * @memberof google.rpc
                 * @interface IRequestInfo
                 * @property {string|null} [requestId] RequestInfo requestId
                 * @property {string|null} [servingData] RequestInfo servingData
                 */
    
                /**
                 * Constructs a new RequestInfo.
                 * @memberof google.rpc
                 * @classdesc Represents a RequestInfo.
                 * @implements IRequestInfo
                 * @constructor
                 * @param {google.rpc.IRequestInfo=} [properties] Properties to set
                 */
                function RequestInfo(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * RequestInfo requestId.
                 * @member {string} requestId
                 * @memberof google.rpc.RequestInfo
                 * @instance
                 */
                RequestInfo.prototype.requestId = "";
    
                /**
                 * RequestInfo servingData.
                 * @member {string} servingData
                 * @memberof google.rpc.RequestInfo
                 * @instance
                 */
                RequestInfo.prototype.servingData = "";
    
                /**
                 * Creates a new RequestInfo instance using the specified properties.
                 * @function create
                 * @memberof google.rpc.RequestInfo
                 * @static
                 * @param {google.rpc.IRequestInfo=} [properties] Properties to set
                 * @returns {google.rpc.RequestInfo} RequestInfo instance
                 */
                RequestInfo.create = function create(properties) {
                    return new RequestInfo(properties);
                };
    
                /**
                 * Encodes the specified RequestInfo message. Does not implicitly {@link google.rpc.RequestInfo.verify|verify} messages.
                 * @function encode
                 * @memberof google.rpc.RequestInfo
                 * @static
                 * @param {google.rpc.IRequestInfo} message RequestInfo message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                RequestInfo.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.requestId != null && Object.hasOwnProperty.call(message, "requestId"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.requestId);
                    if (message.servingData != null && Object.hasOwnProperty.call(message, "servingData"))
                        writer.uint32(/* id 2, wireType 2 =*/18).string(message.servingData);
                    return writer;
                };
    
                /**
                 * Encodes the specified RequestInfo message, length delimited. Does not implicitly {@link google.rpc.RequestInfo.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.rpc.RequestInfo
                 * @static
                 * @param {google.rpc.IRequestInfo} message RequestInfo message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                RequestInfo.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a RequestInfo message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.rpc.RequestInfo
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.rpc.RequestInfo} RequestInfo
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                RequestInfo.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.rpc.RequestInfo();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.requestId = reader.string();
                            break;
                        case 2:
                            message.servingData = reader.string();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a RequestInfo message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.rpc.RequestInfo
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.rpc.RequestInfo} RequestInfo
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                RequestInfo.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a RequestInfo message.
                 * @function verify
                 * @memberof google.rpc.RequestInfo
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                RequestInfo.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.requestId != null && message.hasOwnProperty("requestId"))
                        if (!$util.isString(message.requestId))
                            return "requestId: string expected";
                    if (message.servingData != null && message.hasOwnProperty("servingData"))
                        if (!$util.isString(message.servingData))
                            return "servingData: string expected";
                    return null;
                };
    
                /**
                 * Creates a RequestInfo message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.rpc.RequestInfo
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.rpc.RequestInfo} RequestInfo
                 */
                RequestInfo.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.rpc.RequestInfo)
                        return object;
                    var message = new $root.google.rpc.RequestInfo();
                    if (object.requestId != null)
                        message.requestId = String(object.requestId);
                    if (object.servingData != null)
                        message.servingData = String(object.servingData);
                    return message;
                };
    
                /**
                 * Creates a plain object from a RequestInfo message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.rpc.RequestInfo
                 * @static
                 * @param {google.rpc.RequestInfo} message RequestInfo
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                RequestInfo.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults) {
                        object.requestId = "";
                        object.servingData = "";
                    }
                    if (message.requestId != null && message.hasOwnProperty("requestId"))
                        object.requestId = message.requestId;
                    if (message.servingData != null && message.hasOwnProperty("servingData"))
                        object.servingData = message.servingData;
                    return object;
                };
    
                /**
                 * Converts this RequestInfo to JSON.
                 * @function toJSON
                 * @memberof google.rpc.RequestInfo
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                RequestInfo.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return RequestInfo;
            })();
    
            rpc.ResourceInfo = (function() {
    
                /**
                 * Properties of a ResourceInfo.
                 * @memberof google.rpc
                 * @interface IResourceInfo
                 * @property {string|null} [resourceType] ResourceInfo resourceType
                 * @property {string|null} [resourceName] ResourceInfo resourceName
                 * @property {string|null} [owner] ResourceInfo owner
                 * @property {string|null} [description] ResourceInfo description
                 */
    
                /**
                 * Constructs a new ResourceInfo.
                 * @memberof google.rpc
                 * @classdesc Represents a ResourceInfo.
                 * @implements IResourceInfo
                 * @constructor
                 * @param {google.rpc.IResourceInfo=} [properties] Properties to set
                 */
                function ResourceInfo(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * ResourceInfo resourceType.
                 * @member {string} resourceType
                 * @memberof google.rpc.ResourceInfo
                 * @instance
                 */
                ResourceInfo.prototype.resourceType = "";
    
                /**
                 * ResourceInfo resourceName.
                 * @member {string} resourceName
                 * @memberof google.rpc.ResourceInfo
                 * @instance
                 */
                ResourceInfo.prototype.resourceName = "";
    
                /**
                 * ResourceInfo owner.
                 * @member {string} owner
                 * @memberof google.rpc.ResourceInfo
                 * @instance
                 */
                ResourceInfo.prototype.owner = "";
    
                /**
                 * ResourceInfo description.
                 * @member {string} description
                 * @memberof google.rpc.ResourceInfo
                 * @instance
                 */
                ResourceInfo.prototype.description = "";
    
                /**
                 * Creates a new ResourceInfo instance using the specified properties.
                 * @function create
                 * @memberof google.rpc.ResourceInfo
                 * @static
                 * @param {google.rpc.IResourceInfo=} [properties] Properties to set
                 * @returns {google.rpc.ResourceInfo} ResourceInfo instance
                 */
                ResourceInfo.create = function create(properties) {
                    return new ResourceInfo(properties);
                };
    
                /**
                 * Encodes the specified ResourceInfo message. Does not implicitly {@link google.rpc.ResourceInfo.verify|verify} messages.
                 * @function encode
                 * @memberof google.rpc.ResourceInfo
                 * @static
                 * @param {google.rpc.IResourceInfo} message ResourceInfo message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                ResourceInfo.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.resourceType != null && Object.hasOwnProperty.call(message, "resourceType"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.resourceType);
                    if (message.resourceName != null && Object.hasOwnProperty.call(message, "resourceName"))
                        writer.uint32(/* id 2, wireType 2 =*/18).string(message.resourceName);
                    if (message.owner != null && Object.hasOwnProperty.call(message, "owner"))
                        writer.uint32(/* id 3, wireType 2 =*/26).string(message.owner);
                    if (message.description != null && Object.hasOwnProperty.call(message, "description"))
                        writer.uint32(/* id 4, wireType 2 =*/34).string(message.description);
                    return writer;
                };
    
                /**
                 * Encodes the specified ResourceInfo message, length delimited. Does not implicitly {@link google.rpc.ResourceInfo.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.rpc.ResourceInfo
                 * @static
                 * @param {google.rpc.IResourceInfo} message ResourceInfo message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                ResourceInfo.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a ResourceInfo message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.rpc.ResourceInfo
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.rpc.ResourceInfo} ResourceInfo
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                ResourceInfo.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.rpc.ResourceInfo();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.resourceType = reader.string();
                            break;
                        case 2:
                            message.resourceName = reader.string();
                            break;
                        case 3:
                            message.owner = reader.string();
                            break;
                        case 4:
                            message.description = reader.string();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a ResourceInfo message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.rpc.ResourceInfo
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.rpc.ResourceInfo} ResourceInfo
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                ResourceInfo.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a ResourceInfo message.
                 * @function verify
                 * @memberof google.rpc.ResourceInfo
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                ResourceInfo.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.resourceType != null && message.hasOwnProperty("resourceType"))
                        if (!$util.isString(message.resourceType))
                            return "resourceType: string expected";
                    if (message.resourceName != null && message.hasOwnProperty("resourceName"))
                        if (!$util.isString(message.resourceName))
                            return "resourceName: string expected";
                    if (message.owner != null && message.hasOwnProperty("owner"))
                        if (!$util.isString(message.owner))
                            return "owner: string expected";
                    if (message.description != null && message.hasOwnProperty("description"))
                        if (!$util.isString(message.description))
                            return "description: string expected";
                    return null;
                };
    
                /**
                 * Creates a ResourceInfo message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.rpc.ResourceInfo
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.rpc.ResourceInfo} ResourceInfo
                 */
                ResourceInfo.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.rpc.ResourceInfo)
                        return object;
                    var message = new $root.google.rpc.ResourceInfo();
                    if (object.resourceType != null)
                        message.resourceType = String(object.resourceType);
                    if (object.resourceName != null)
                        message.resourceName = String(object.resourceName);
                    if (object.owner != null)
                        message.owner = String(object.owner);
                    if (object.description != null)
                        message.description = String(object.description);
                    return message;
                };
    
                /**
                 * Creates a plain object from a ResourceInfo message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.rpc.ResourceInfo
                 * @static
                 * @param {google.rpc.ResourceInfo} message ResourceInfo
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                ResourceInfo.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults) {
                        object.resourceType = "";
                        object.resourceName = "";
                        object.owner = "";
                        object.description = "";
                    }
                    if (message.resourceType != null && message.hasOwnProperty("resourceType"))
                        object.resourceType = message.resourceType;
                    if (message.resourceName != null && message.hasOwnProperty("resourceName"))
                        object.resourceName = message.resourceName;
                    if (message.owner != null && message.hasOwnProperty("owner"))
                        object.owner = message.owner;
                    if (message.description != null && message.hasOwnProperty("description"))
                        object.description = message.description;
                    return object;
                };
    
                /**
                 * Converts this ResourceInfo to JSON.
                 * @function toJSON
                 * @memberof google.rpc.ResourceInfo
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                ResourceInfo.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return ResourceInfo;
            })();
    
            rpc.Help = (function() {
    
                /**
                 * Properties of a Help.
                 * @memberof google.rpc
                 * @interface IHelp
                 * @property {Array.<google.rpc.Help.ILink>|null} [links] Help links
                 */
    
                /**
                 * Constructs a new Help.
                 * @memberof google.rpc
                 * @classdesc Represents a Help.
                 * @implements IHelp
                 * @constructor
                 * @param {google.rpc.IHelp=} [properties] Properties to set
                 */
                function Help(properties) {
                    this.links = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * Help links.
                 * @member {Array.<google.rpc.Help.ILink>} links
                 * @memberof google.rpc.Help
                 * @instance
                 */
                Help.prototype.links = $util.emptyArray;
    
                /**
                 * Creates a new Help instance using the specified properties.
                 * @function create
                 * @memberof google.rpc.Help
                 * @static
                 * @param {google.rpc.IHelp=} [properties] Properties to set
                 * @returns {google.rpc.Help} Help instance
                 */
                Help.create = function create(properties) {
                    return new Help(properties);
                };
    
                /**
                 * Encodes the specified Help message. Does not implicitly {@link google.rpc.Help.verify|verify} messages.
                 * @function encode
                 * @memberof google.rpc.Help
                 * @static
                 * @param {google.rpc.IHelp} message Help message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Help.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.links != null && message.links.length)
                        for (var i = 0; i < message.links.length; ++i)
                            $root.google.rpc.Help.Link.encode(message.links[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified Help message, length delimited. Does not implicitly {@link google.rpc.Help.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.rpc.Help
                 * @static
                 * @param {google.rpc.IHelp} message Help message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Help.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a Help message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.rpc.Help
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.rpc.Help} Help
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Help.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.rpc.Help();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            if (!(message.links && message.links.length))
                                message.links = [];
                            message.links.push($root.google.rpc.Help.Link.decode(reader, reader.uint32()));
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a Help message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.rpc.Help
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.rpc.Help} Help
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Help.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a Help message.
                 * @function verify
                 * @memberof google.rpc.Help
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                Help.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.links != null && message.hasOwnProperty("links")) {
                        if (!Array.isArray(message.links))
                            return "links: array expected";
                        for (var i = 0; i < message.links.length; ++i) {
                            var error = $root.google.rpc.Help.Link.verify(message.links[i]);
                            if (error)
                                return "links." + error;
                        }
                    }
                    return null;
                };
    
                /**
                 * Creates a Help message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.rpc.Help
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.rpc.Help} Help
                 */
                Help.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.rpc.Help)
                        return object;
                    var message = new $root.google.rpc.Help();
                    if (object.links) {
                        if (!Array.isArray(object.links))
                            throw TypeError(".google.rpc.Help.links: array expected");
                        message.links = [];
                        for (var i = 0; i < object.links.length; ++i) {
                            if (typeof object.links[i] !== "object")
                                throw TypeError(".google.rpc.Help.links: object expected");
                            message.links[i] = $root.google.rpc.Help.Link.fromObject(object.links[i]);
                        }
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from a Help message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.rpc.Help
                 * @static
                 * @param {google.rpc.Help} message Help
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                Help.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.links = [];
                    if (message.links && message.links.length) {
                        object.links = [];
                        for (var j = 0; j < message.links.length; ++j)
                            object.links[j] = $root.google.rpc.Help.Link.toObject(message.links[j], options);
                    }
                    return object;
                };
    
                /**
                 * Converts this Help to JSON.
                 * @function toJSON
                 * @memberof google.rpc.Help
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                Help.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                Help.Link = (function() {
    
                    /**
                     * Properties of a Link.
                     * @memberof google.rpc.Help
                     * @interface ILink
                     * @property {string|null} [description] Link description
                     * @property {string|null} [url] Link url
                     */
    
                    /**
                     * Constructs a new Link.
                     * @memberof google.rpc.Help
                     * @classdesc Represents a Link.
                     * @implements ILink
                     * @constructor
                     * @param {google.rpc.Help.ILink=} [properties] Properties to set
                     */
                    function Link(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * Link description.
                     * @member {string} description
                     * @memberof google.rpc.Help.Link
                     * @instance
                     */
                    Link.prototype.description = "";
    
                    /**
                     * Link url.
                     * @member {string} url
                     * @memberof google.rpc.Help.Link
                     * @instance
                     */
                    Link.prototype.url = "";
    
                    /**
                     * Creates a new Link instance using the specified properties.
                     * @function create
                     * @memberof google.rpc.Help.Link
                     * @static
                     * @param {google.rpc.Help.ILink=} [properties] Properties to set
                     * @returns {google.rpc.Help.Link} Link instance
                     */
                    Link.create = function create(properties) {
                        return new Link(properties);
                    };
    
                    /**
                     * Encodes the specified Link message. Does not implicitly {@link google.rpc.Help.Link.verify|verify} messages.
                     * @function encode
                     * @memberof google.rpc.Help.Link
                     * @static
                     * @param {google.rpc.Help.ILink} message Link message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Link.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.description != null && Object.hasOwnProperty.call(message, "description"))
                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.description);
                        if (message.url != null && Object.hasOwnProperty.call(message, "url"))
                            writer.uint32(/* id 2, wireType 2 =*/18).string(message.url);
                        return writer;
                    };
    
                    /**
                     * Encodes the specified Link message, length delimited. Does not implicitly {@link google.rpc.Help.Link.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof google.rpc.Help.Link
                     * @static
                     * @param {google.rpc.Help.ILink} message Link message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Link.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a Link message from the specified reader or buffer.
                     * @function decode
                     * @memberof google.rpc.Help.Link
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {google.rpc.Help.Link} Link
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Link.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.rpc.Help.Link();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.description = reader.string();
                                break;
                            case 2:
                                message.url = reader.string();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a Link message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof google.rpc.Help.Link
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {google.rpc.Help.Link} Link
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Link.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a Link message.
                     * @function verify
                     * @memberof google.rpc.Help.Link
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    Link.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.description != null && message.hasOwnProperty("description"))
                            if (!$util.isString(message.description))
                                return "description: string expected";
                        if (message.url != null && message.hasOwnProperty("url"))
                            if (!$util.isString(message.url))
                                return "url: string expected";
                        return null;
                    };
    
                    /**
                     * Creates a Link message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof google.rpc.Help.Link
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {google.rpc.Help.Link} Link
                     */
                    Link.fromObject = function fromObject(object) {
                        if (object instanceof $root.google.rpc.Help.Link)
                            return object;
                        var message = new $root.google.rpc.Help.Link();
                        if (object.description != null)
                            message.description = String(object.description);
                        if (object.url != null)
                            message.url = String(object.url);
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a Link message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof google.rpc.Help.Link
                     * @static
                     * @param {google.rpc.Help.Link} message Link
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    Link.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults) {
                            object.description = "";
                            object.url = "";
                        }
                        if (message.description != null && message.hasOwnProperty("description"))
                            object.description = message.description;
                        if (message.url != null && message.hasOwnProperty("url"))
                            object.url = message.url;
                        return object;
                    };
    
                    /**
                     * Converts this Link to JSON.
                     * @function toJSON
                     * @memberof google.rpc.Help.Link
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    Link.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    return Link;
                })();
    
                return Help;
            })();
    
            rpc.LocalizedMessage = (function() {
    
                /**
                 * Properties of a LocalizedMessage.
                 * @memberof google.rpc
                 * @interface ILocalizedMessage
                 * @property {string|null} [locale] LocalizedMessage locale
                 * @property {string|null} [message] LocalizedMessage message
                 */
    
                /**
                 * Constructs a new LocalizedMessage.
                 * @memberof google.rpc
                 * @classdesc Represents a LocalizedMessage.
                 * @implements ILocalizedMessage
                 * @constructor
                 * @param {google.rpc.ILocalizedMessage=} [properties] Properties to set
                 */
                function LocalizedMessage(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * LocalizedMessage locale.
                 * @member {string} locale
                 * @memberof google.rpc.LocalizedMessage
                 * @instance
                 */
                LocalizedMessage.prototype.locale = "";
    
                /**
                 * LocalizedMessage message.
                 * @member {string} message
                 * @memberof google.rpc.LocalizedMessage
                 * @instance
                 */
                LocalizedMessage.prototype.message = "";
    
                /**
                 * Creates a new LocalizedMessage instance using the specified properties.
                 * @function create
                 * @memberof google.rpc.LocalizedMessage
                 * @static
                 * @param {google.rpc.ILocalizedMessage=} [properties] Properties to set
                 * @returns {google.rpc.LocalizedMessage} LocalizedMessage instance
                 */
                LocalizedMessage.create = function create(properties) {
                    return new LocalizedMessage(properties);
                };
    
                /**
                 * Encodes the specified LocalizedMessage message. Does not implicitly {@link google.rpc.LocalizedMessage.verify|verify} messages.
                 * @function encode
                 * @memberof google.rpc.LocalizedMessage
                 * @static
                 * @param {google.rpc.ILocalizedMessage} message LocalizedMessage message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                LocalizedMessage.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.locale != null && Object.hasOwnProperty.call(message, "locale"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.locale);
                    if (message.message != null && Object.hasOwnProperty.call(message, "message"))
                        writer.uint32(/* id 2, wireType 2 =*/18).string(message.message);
                    return writer;
                };
    
                /**
                 * Encodes the specified LocalizedMessage message, length delimited. Does not implicitly {@link google.rpc.LocalizedMessage.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.rpc.LocalizedMessage
                 * @static
                 * @param {google.rpc.ILocalizedMessage} message LocalizedMessage message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                LocalizedMessage.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a LocalizedMessage message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.rpc.LocalizedMessage
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.rpc.LocalizedMessage} LocalizedMessage
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                LocalizedMessage.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.rpc.LocalizedMessage();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.locale = reader.string();
                            break;
                        case 2:
                            message.message = reader.string();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a LocalizedMessage message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.rpc.LocalizedMessage
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.rpc.LocalizedMessage} LocalizedMessage
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                LocalizedMessage.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a LocalizedMessage message.
                 * @function verify
                 * @memberof google.rpc.LocalizedMessage
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                LocalizedMessage.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.locale != null && message.hasOwnProperty("locale"))
                        if (!$util.isString(message.locale))
                            return "locale: string expected";
                    if (message.message != null && message.hasOwnProperty("message"))
                        if (!$util.isString(message.message))
                            return "message: string expected";
                    return null;
                };
    
                /**
                 * Creates a LocalizedMessage message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.rpc.LocalizedMessage
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.rpc.LocalizedMessage} LocalizedMessage
                 */
                LocalizedMessage.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.rpc.LocalizedMessage)
                        return object;
                    var message = new $root.google.rpc.LocalizedMessage();
                    if (object.locale != null)
                        message.locale = String(object.locale);
                    if (object.message != null)
                        message.message = String(object.message);
                    return message;
                };
    
                /**
                 * Creates a plain object from a LocalizedMessage message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.rpc.LocalizedMessage
                 * @static
                 * @param {google.rpc.LocalizedMessage} message LocalizedMessage
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                LocalizedMessage.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults) {
                        object.locale = "";
                        object.message = "";
                    }
                    if (message.locale != null && message.hasOwnProperty("locale"))
                        object.locale = message.locale;
                    if (message.message != null && message.hasOwnProperty("message"))
                        object.message = message.message;
                    return object;
                };
    
                /**
                 * Converts this LocalizedMessage to JSON.
                 * @function toJSON
                 * @memberof google.rpc.LocalizedMessage
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                LocalizedMessage.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return LocalizedMessage;
            })();
    
            return rpc;
        })();
    
        return google;
    })();

    return $root;
});
