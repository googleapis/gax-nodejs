// Copyright 2021 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// ** This file is automatically generated by gapic-generator-typescript. **
// ** https://github.com/googleapis/gapic-generator-typescript **
// ** All changes to this file may be overwritten. **

/* global window */
// @ts-ignore
import * as gax from 'google-gax';
// @ts-ignore
import {Callback, CallOptions, ClientOptions, Descriptors, GaxCall, LROperation, PaginationCallback,} from 'google-gax';
// @ts-ignore
import {RequestType} from 'google-gax/build/src/apitypes';
import {PassThrough, Transform} from 'stream';

import * as protos from '../../protos/protos';

import jsonProtos = require('../../protos/protos.json');
/**
 * Client JSON configuration object, loaded from
 * `src/v1beta1/echo_client_config.json`.
 * This file defines retry strategy and timeouts for all API methods in this
 * library.
 */
import * as gapicConfig from './echo_client_config.json';
//@ts-ignore
import {operationsProtos, GoogleError} from 'google-gax';
const version = require('../../package.json').version;

/**
 *  This service is used showcase the four main types of rpcs - unary, server
 *  side streaming, client side streaming, and bidirectional streaming. This
 *  service also exposes methods that explicitly implement server delay, and
 *  paginated calls. Set the 'showcase-trailer' metadata key on any method
 *  to have the values echoed in the response trailers.
 * @class
 * @memberof v1beta1
 */
export class EchoClient {
  private _terminated = false;
  private _opts: ClientOptions;
  private _providedCustomServicePath: boolean;
  private _gaxModule: typeof gax|typeof gax.fallback;
  private _gaxGrpc: gax.GrpcClient|gax.fallback.GrpcClient;
  private _protos: {};
  private _defaults: {[method: string]: gax.CallSettings};
  auth: gax.GoogleAuth;
  descriptors: Descriptors = {
    page: {},
    stream: {},
    longrunning: {},
    batching: {},
  };
  warn: (code: string, message: string, warnType?: string) => void;
  innerApiCalls: {[name: string]: Function};
  pathTemplates: {[name: string]: gax.PathTemplate};
  operationsClient: gax.OperationsClient;
  echoStub?: Promise<{[name: string]: Function}>;

  /**
   * Construct an instance of EchoClient.
   *
   * @param {object} [options] - The configuration object.
   * The options accepted by the constructor are described in detail
   * in [this
   * document](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#creating-the-client-instance).
   * The common options are:
   * @param {object} [options.credentials] - Credentials object.
   * @param {string} [options.credentials.client_email]
   * @param {string} [options.credentials.private_key]
   * @param {string} [options.email] - Account email address. Required when
   *     using a .pem or .p12 keyFilename.
   * @param {string} [options.keyFilename] - Full path to the a .json, .pem, or
   *     .p12 key downloaded from the Google Developers Console. If you provide
   *     a path to a JSON file, the projectId option below is not necessary.
   *     NOTE: .pem and .p12 require you to specify options.email as well.
   * @param {number} [options.port] - The port on which to connect to
   *     the remote host.
   * @param {string} [options.projectId] - The project ID from the Google
   *     Developer's Console, e.g. 'grape-spaceship-123'. We will also check
   *     the environment variable GCLOUD_PROJECT for your project ID. If your
   *     app is running in an environment which supports
   *     {@link
   * https://developers.google.com/identity/protocols/application-default-credentials
   * Application Default Credentials}, your project ID will be detected
   * automatically.
   * @param {string} [options.apiEndpoint] - The domain name of the
   *     API remote host.
   * @param {gax.ClientConfig} [options.clientConfig] - Client configuration
   *     override. Follows the structure of {@link gapicConfig}.
   * @param {boolean} [options.fallback] - Use HTTP fallback mode.
   *     In fallback mode, a special browser-compatible transport implementation
   * is used instead of gRPC transport. In browser context (if the `window`
   * object is defined) the fallback mode is enabled automatically; set
   * `options.fallback` to `false` if you need to override this behavior.
   */
  constructor(opts?: ClientOptions) {
    // Ensure that options include all the required fields.
    const staticMembers = this.constructor as typeof EchoClient;
    const servicePath =
        opts?.servicePath || opts?.apiEndpoint || staticMembers.servicePath;
    this._providedCustomServicePath =
        !!(opts?.servicePath || opts?.apiEndpoint);
    const port = opts?.port || staticMembers.port;
    const clientConfig = opts?.clientConfig ?? {};
    const fallback = opts?.fallback ??
        (typeof window !== 'undefined' && typeof window?.fetch === 'function');
    opts = Object.assign({servicePath, port, clientConfig, fallback}, opts);

    // If scopes are unset in options and we're connecting to a non-default
    // endpoint, set scopes just in case.
    if (servicePath !== staticMembers.servicePath && !('scopes' in opts)) {
      opts['scopes'] = staticMembers.scopes;
    }

    // Choose either gRPC or proto-over-HTTP implementation of google-gax.
    this._gaxModule = opts.fallback ? gax.fallback : gax;

    // Create a `gaxGrpc` object, with any grpc-specific options sent to the
    // client.
    this._gaxGrpc = new this._gaxModule.GrpcClient(opts);

    // Save options to use in initialize() method.
    this._opts = opts;

    // Save the auth object to the client, for use by other methods.
    this.auth = this._gaxGrpc.auth as gax.GoogleAuth;

    // Set useJWTAccessWithScope on the auth object.
    this.auth.useJWTAccessWithScope = true;

    // Set defaultServicePath on the auth object.
    this.auth.defaultServicePath = staticMembers.servicePath;

    // Set the default scopes in auth client if needed.
    if (servicePath === staticMembers.servicePath) {
      this.auth.defaultScopes = staticMembers.scopes;
    }

    // Determine the client header string.
    const clientHeader = [`gax/${this._gaxModule.version}`, `gapic/${version}`];
    if (typeof process !== 'undefined' && 'versions' in process) {
      clientHeader.push(`gl-node/${process.versions.node}`);
    } else {
      clientHeader.push(`gl-web/${this._gaxModule.version}`);
    }
    if (!opts.fallback) {
      clientHeader.push(`grpc/${this._gaxGrpc.grpcVersion}`);
    } else if (opts.fallback === 'rest') {
      clientHeader.push(`rest/${this._gaxGrpc.grpcVersion}`);
    }
    if (opts.libName && opts.libVersion) {
      clientHeader.push(`${opts.libName}/${opts.libVersion}`);
    }
    // Load the applicable protos.
    this._protos = this._gaxGrpc.loadProtoJSON(jsonProtos);

    // This API contains "path templates"; forward-slash-separated
    // identifiers to uniquely identify resources within the API.
    // Create useful helper objects for these.
    this.pathTemplates = {
      blueprintPathTemplate: new this._gaxModule.PathTemplate(
          'sessions/{session}/tests/{test}/blueprints/{blueprint}'),
      roomPathTemplate: new this._gaxModule.PathTemplate('rooms/{room_id}'),
      roomIdBlurbIdPathTemplate:
          new this._gaxModule.PathTemplate('rooms/{room_id}/blurbs/{blurb_id}'),
      sessionPathTemplate:
          new this._gaxModule.PathTemplate('sessions/{session}'),
      testPathTemplate:
          new this._gaxModule.PathTemplate('sessions/{session}/tests/{test}'),
      userPathTemplate: new this._gaxModule.PathTemplate('users/{user_id}'),
      userIdProfileBlurbIdPathTemplate: new this._gaxModule.PathTemplate(
          'user/{user_id}/profile/blurbs/{blurb_id}'),
    };

    // Some of the methods on this service return "paged" results,
    // (e.g. 50 results at a time, with tokens to get subsequent
    // pages). Denote the keys used for pagination and results.
    this.descriptors.page = {
      pagedExpand: new this._gaxModule.PageDescriptor(
          'pageToken', 'nextPageToken', 'responses'),
    };

    // Some of the methods on this service provide streaming responses.
    // Provide descriptors for these.
    this.descriptors.stream = {
      expand:
          new this._gaxModule.StreamDescriptor(gax.StreamType.SERVER_STREAMING),
      collect:
          new this._gaxModule.StreamDescriptor(gax.StreamType.CLIENT_STREAMING),
      chat: new this._gaxModule.StreamDescriptor(gax.StreamType.BIDI_STREAMING),
    };

    const protoFilesRoot = this._gaxModule.protobuf.Root.fromJSON(jsonProtos);

    // This API contains "long-running operations", which return a
    // an Operation object that allows for tracking of the operation,
    // rather than holding a request open.

    this.operationsClient =
        this._gaxModule
            .lro({
              auth: this.auth,
              grpc: 'grpc' in this._gaxGrpc ? this._gaxGrpc.grpc : undefined,
            })
            .operationsClient(opts);
    const waitResponse =
        protoFilesRoot.lookup('.google.showcase.v1beta1.WaitResponse') as
        gax.protobuf.Type;
    const waitMetadata =
        protoFilesRoot.lookup('.google.showcase.v1beta1.WaitMetadata') as
        gax.protobuf.Type;

    this.descriptors.longrunning = {
      wait: new this._gaxModule.LongrunningDescriptor(
          this.operationsClient, waitResponse.decode.bind(waitResponse),
          waitMetadata.decode.bind(waitMetadata)),
    };

    // Put together the default options sent with requests.
    this._defaults = this._gaxGrpc.constructSettings(
        'google.showcase.v1beta1.Echo', gapicConfig as gax.ClientConfig,
        opts.clientConfig || {}, {'x-goog-api-client': clientHeader.join(' ')});

    // Set up a dictionary of "inner API calls"; the core implementation
    // of calling the API is handled in `google-gax`, with this code
    // merely providing the destination and request information.
    this.innerApiCalls = {};

    // Add a warn function to the client constructor so it can be easily tested.
    this.warn = gax.warn;
  }

  /**
   * Initialize the client.
   * Performs asynchronous operations (such as authentication) and prepares the
   * client. This function will be called automatically when any class method is
   * called for the first time, but if you need to initialize it before calling
   * an actual method, feel free to call initialize() directly.
   *
   * You can await on this method if you want to make sure the client is
   * initialized.
   *
   * @returns {Promise} A promise that resolves to an authenticated service
   *     stub.
   */
  initialize() {
    // If the client stub promise is already initialized, return immediately.
    if (this.echoStub) {
      return this.echoStub;
    }

    // Put together the "service stub" for
    // google.showcase.v1beta1.Echo.
    this.echoStub =
        this._gaxGrpc.createStub(
            this._opts.fallback ?
                (this._protos as protobuf.Root)
                    .lookupService(
                        'google.showcase.v1beta1.Echo') :  // eslint-disable-next-line
                                                           // @typescript-eslint/no-explicit-any
                (this._protos as any).google.showcase.v1beta1.Echo,
            this._opts, this._providedCustomServicePath) as
        Promise<{[method: string]: Function}>;

    // Iterate over each of the methods that the service provides
    // and create an API call method for each.
    const echoStubMethods = [
      'echo',
      'expand',
      'collect',
      'chat',
      'pagedExpand',
      'wait',
      'block',
    ];
    for (const methodName of echoStubMethods) {
      const callPromise = this.echoStub.then(
          stub => (...args: Array<{}>) => {
            if (this._terminated) {
              if (methodName in this.descriptors.stream) {
                const stream = new PassThrough();
                setImmediate(() => {
                  stream.emit(
                    'error',
                    new GoogleError('The client has already been closed.')
                  );
                });
                return stream;
              }
              return Promise.reject('The client has already been closed.');
            }
            const func = stub[methodName];
            return func.apply(stub, args);
          },
          (err: Error|null|undefined) => () => {
            throw err;
          });

      const descriptor = this.descriptors.page[methodName] ||
          this.descriptors.stream[methodName] ||
          this.descriptors.longrunning[methodName] || undefined;
      const apiCall = this._gaxModule.createApiCall(
          callPromise, this._defaults[methodName], descriptor);

      this.innerApiCalls[methodName] = apiCall;
    }

    return this.echoStub;
  }

  /**
   * The DNS address for this API service.
   * @returns {string} The DNS address for this service.
   */
  static get servicePath() {
    return 'localhost';
  }

  /**
   * The DNS address for this API service - same as servicePath(),
   * exists for compatibility reasons.
   * @returns {string} The DNS address for this service.
   */
  static get apiEndpoint() {
    return 'localhost';
  }

  /**
   * The port for this API service.
   * @returns {number} The default port for this service.
   */
  static get port() {
    return 7469;
  }

  /**
   * The scopes needed to make gRPC calls for every method defined
   * in this service.
   * @returns {string[]} List of default scopes.
   */
  static get scopes() {
    return [];
  }

  getProjectId(): Promise<string>;
  getProjectId(callback: Callback<string, undefined, undefined>): void;
  /**
   * Return the project ID used by this class.
   * @returns {Promise} A promise that resolves to string containing the project
   *     ID.
   */
  getProjectId(callback?: Callback<string, undefined, undefined>):
      Promise<string>|void {
    if (callback) {
      this.auth.getProjectId(callback);
      return;
    }
    return this.auth.getProjectId();
  }

  // -------------------
  // -- Service calls --
  // -------------------
  /**
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.content
   *   The content to be echoed by the server.
   * @param {google.rpc.Status} request.error
   *   The error to be thrown by the server.
   * @param {object} [options]
   *   Call options. See {@link
   * https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions}
   * for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing
   * [EchoResponse]{@link google.showcase.v1beta1.EchoResponse}. Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1beta1/echo.echo.js</caption>
   * region_tag:localhost_v1beta1_generated_Echo_Echo_async
   */
  echo(
      request?: protos.google.showcase.v1beta1.IEchoRequest,
      options?: CallOptions):
      Promise<[
        protos.google.showcase.v1beta1.IEchoResponse,
        protos.google.showcase.v1beta1.IEchoRequest|undefined, {}|undefined
      ]>;
  echo(
      request: protos.google.showcase.v1beta1.IEchoRequest,
      options: CallOptions,
      callback: Callback<
          protos.google.showcase.v1beta1.IEchoResponse,
          protos.google.showcase.v1beta1.IEchoRequest|null|undefined,
          {}|null|undefined>): void;
  echo(
      request: protos.google.showcase.v1beta1.IEchoRequest,
      callback: Callback<
          protos.google.showcase.v1beta1.IEchoResponse,
          protos.google.showcase.v1beta1.IEchoRequest|null|undefined,
          {}|null|undefined>): void;
  echo(
      request?: protos.google.showcase.v1beta1.IEchoRequest,
      optionsOrCallback?:|CallOptions|Callback<
          protos.google.showcase.v1beta1.IEchoResponse,
          protos.google.showcase.v1beta1.IEchoRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.google.showcase.v1beta1.IEchoResponse,
          protos.google.showcase.v1beta1.IEchoRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.google.showcase.v1beta1.IEchoResponse,
        protos.google.showcase.v1beta1.IEchoRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    this.initialize();
    return this.innerApiCalls.echo(request, options, callback);
  }
  /**
   * This method will block (wait) for the requested amount of time
   * and then return the response or error.
   * This method showcases how a client handles delays or retries.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {google.protobuf.Duration} request.responseDelay
   *   The amount of time to block before returning a response.
   * @param {google.rpc.Status} request.error
   *   The error that will be returned by the server. If this code is specified
   *   to be the OK rpc code, an empty response will be returned.
   * @param {google.showcase.v1beta1.BlockResponse} request.success
   *   The response to be returned that will signify successful method call.
   * @param {object} [options]
   *   Call options. See {@link
   * https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions}
   * for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing
   * [BlockResponse]{@link google.showcase.v1beta1.BlockResponse}. Please see
   * the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1beta1/echo.block.js</caption>
   * region_tag:localhost_v1beta1_generated_Echo_Block_async
   */
  block(
      request?: protos.google.showcase.v1beta1.IBlockRequest,
      options?: CallOptions):
      Promise<[
        protos.google.showcase.v1beta1.IBlockResponse,
        protos.google.showcase.v1beta1.IBlockRequest|undefined, {}|undefined
      ]>;
  block(
      request: protos.google.showcase.v1beta1.IBlockRequest,
      options: CallOptions,
      callback: Callback<
          protos.google.showcase.v1beta1.IBlockResponse,
          protos.google.showcase.v1beta1.IBlockRequest|null|undefined,
          {}|null|undefined>): void;
  block(
      request: protos.google.showcase.v1beta1.IBlockRequest,
      callback: Callback<
          protos.google.showcase.v1beta1.IBlockResponse,
          protos.google.showcase.v1beta1.IBlockRequest|null|undefined,
          {}|null|undefined>): void;
  block(
      request?: protos.google.showcase.v1beta1.IBlockRequest,
      optionsOrCallback?:|CallOptions|Callback<
          protos.google.showcase.v1beta1.IBlockResponse,
          protos.google.showcase.v1beta1.IBlockRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.google.showcase.v1beta1.IBlockResponse,
          protos.google.showcase.v1beta1.IBlockRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.google.showcase.v1beta1.IBlockResponse,
        protos.google.showcase.v1beta1.IBlockRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    this.initialize();
    return this.innerApiCalls.block(request, options, callback);
  }

  /**
   * This method split the given content into words and will pass each word back
   * through the stream. This method showcases server-side streaming rpcs.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.content
   *   The content that will be split into words and returned on the stream.
   * @param {google.rpc.Status} request.error
   *   The error that is thrown after all words are sent on the stream.
   * @param {object} [options]
   *   Call options. See {@link
   * https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions}
   * for more details.
   * @returns {Stream}
   *   An object stream which emits [EchoResponse]{@link
   * google.showcase.v1beta1.EchoResponse} on 'data' event. Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#server-streaming)
   *   for more details and examples.
   * @example
   * <caption>include:samples/generated/v1beta1/echo.expand.js</caption>
   * region_tag:localhost_v1beta1_generated_Echo_Expand_async
   */
  expand(
      request?: protos.google.showcase.v1beta1.IExpandRequest,
      options?: CallOptions): gax.CancellableStream {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    this.initialize();
    return this.innerApiCalls.expand(request, options);
  }

  /**
   * This method will collect the words given to it. When the stream is closed
   * by the client, this method will return the a concatenation of the strings
   * passed to it. This method showcases client-side streaming rpcs.
   *
   * @param {object} [options]
   *   Call options. See {@link
   * https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions}
   * for more details.
   * @returns {Stream} - A writable stream which accepts objects representing
   * [EchoRequest]{@link google.showcase.v1beta1.EchoRequest}.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#client-streaming)
   *   for more details and examples.
   * @example
   * <caption>include:samples/generated/v1beta1/echo.collect.js</caption>
   * region_tag:localhost_v1beta1_generated_Echo_Collect_async
   */
  collect(
      options?: CallOptions,
      callback?: Callback<
          protos.google.showcase.v1beta1.IEchoResponse,
          protos.google.showcase.v1beta1.IEchoRequest|null|undefined,
          {}|null|undefined>): gax.CancellableStream;
  collect(callback?: Callback<
          protos.google.showcase.v1beta1.IEchoResponse,
          protos.google.showcase.v1beta1.IEchoRequest|null|undefined,
          {}|null|undefined>): gax.CancellableStream;
  collect(
      optionsOrCallback?:|CallOptions|Callback<
          protos.google.showcase.v1beta1.IEchoResponse,
          protos.google.showcase.v1beta1.IEchoRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.google.showcase.v1beta1.IEchoResponse,
          protos.google.showcase.v1beta1.IEchoRequest|null|undefined,
          {}|null|undefined>): gax.CancellableStream {
    if (optionsOrCallback instanceof Function && callback === undefined) {
      callback = optionsOrCallback;
      optionsOrCallback = {};
    }
    const options = optionsOrCallback as CallOptions;
    this.initialize();
    return this.innerApiCalls.collect(null, options, callback);
  }

  /**
   * This method, upon receiving a request on the stream, the same content will
   * be passed  back on the stream. This method showcases bidirectional
   * streaming rpcs.
   *
   * @param {object} [options]
   *   Call options. See {@link
   * https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions}
   * for more details.
   * @returns {Stream}
   *   An object stream which is both readable and writable. It accepts objects
   *   representing [EchoRequest]{@link google.showcase.v1beta1.EchoRequest} for
   * write() method, and will emit objects representing [EchoResponse]{@link
   * google.showcase.v1beta1.EchoResponse} on 'data' event asynchronously.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#bi-directional-streaming)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1beta1/echo.chat.js</caption>
   * region_tag:localhost_v1beta1_generated_Echo_Chat_async
   */
  chat(options?: CallOptions): gax.CancellableStream {
    this.initialize();
    return this.innerApiCalls.chat(options);
  }

  /**
   * This method will wait the requested amount of and then return.
   * This method showcases how a client handles a request timing out.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {google.protobuf.Timestamp} request.endTime
   *   The time that this operation will complete.
   * @param {google.protobuf.Duration} request.ttl
   *   The duration of this operation.
   * @param {google.rpc.Status} request.error
   *   The error that will be returned by the server. If this code is specified
   *   to be the OK rpc code, an empty response will be returned.
   * @param {google.showcase.v1beta1.WaitResponse} request.success
   *   The response to be returned on operation completion.
   * @param {object} [options]
   *   Call options. See {@link
   * https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions}
   * for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing
   *   a long running operation. Its `promise()` method returns a promise
   *   you can `await` for.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1beta1/echo.wait.js</caption>
   * region_tag:localhost_v1beta1_generated_Echo_Wait_async
   */
  wait(
      request?: protos.google.showcase.v1beta1.IWaitRequest,
      options?: CallOptions):
      Promise<[
        LROperation<
            protos.google.showcase.v1beta1.IWaitResponse,
            protos.google.showcase.v1beta1.IWaitMetadata>,
        protos.google.longrunning.IOperation|undefined, {}|undefined
      ]>;
  wait(
      request: protos.google.showcase.v1beta1.IWaitRequest,
      options: CallOptions,
      callback: Callback<
          LROperation<
              protos.google.showcase.v1beta1.IWaitResponse,
              protos.google.showcase.v1beta1.IWaitMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>): void;
  wait(
      request: protos.google.showcase.v1beta1.IWaitRequest,
      callback: Callback<
          LROperation<
              protos.google.showcase.v1beta1.IWaitResponse,
              protos.google.showcase.v1beta1.IWaitMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>): void;
  wait(
      request?: protos.google.showcase.v1beta1.IWaitRequest,
      optionsOrCallback?:|CallOptions|Callback<
          LROperation<
              protos.google.showcase.v1beta1.IWaitResponse,
              protos.google.showcase.v1beta1.IWaitMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          LROperation<
              protos.google.showcase.v1beta1.IWaitResponse,
              protos.google.showcase.v1beta1.IWaitMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>):
      Promise<[
        LROperation<
            protos.google.showcase.v1beta1.IWaitResponse,
            protos.google.showcase.v1beta1.IWaitMetadata>,
        protos.google.longrunning.IOperation|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    this.initialize();
    return this.innerApiCalls.wait(request, options, callback);
  }
  /**
   * Check the status of the long running operation returned by `wait()`.
   * @param {String} name
   *   The operation name that will be passed.
   * @returns {Promise} - The promise which resolves to an object.
   *   The decoded operation object has result and metadata field to get
   * information from. Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1beta1/echo.wait.js</caption>
   * region_tag:localhost_v1beta1_generated_Echo_Wait_async
   */
  async checkWaitProgress(name: string): Promise<LROperation<
      protos.google.showcase.v1beta1.WaitResponse,
      protos.google.showcase.v1beta1.WaitMetadata>> {
    const request =
        new operationsProtos.google.longrunning.GetOperationRequest({name});
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new gax.Operation(
        operation, this.descriptors.longrunning.wait,
        gax.createDefaultBackoffSettings());
    return decodeOperation as LROperation<
               protos.google.showcase.v1beta1.WaitResponse,
               protos.google.showcase.v1beta1.WaitMetadata>;
  }
  /**
   * This is similar to the Expand method but instead of returning a stream of
   * expanded words, this method returns a paged list of expanded words.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.content
   *   The string to expand.
   * @param {number} request.pageSize
   *   The amount of words to returned in each page.
   * @param {string} request.pageToken
   *   The position of the page to be returned.
   * @param {object} [options]
   *   Call options. See {@link
   * https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions}
   * for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is Array of [EchoResponse]{@link
   * google.showcase.v1beta1.EchoResponse}. The client library will perform
   * auto-pagination by default: it will call the API as many times as needed
   * and will merge results from all the pages into this array. Note that it can
   * affect your quota. We recommend using `pagedExpandAsync()` method described
   * below for async iteration which you can stop as needed. Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
   *   for more details and examples.
   */
  pagedExpand(
      request?: protos.google.showcase.v1beta1.IPagedExpandRequest,
      options?: CallOptions):
      Promise<[
        protos.google.showcase.v1beta1.IEchoResponse[],
        protos.google.showcase.v1beta1.IPagedExpandRequest|null,
        protos.google.showcase.v1beta1.IPagedExpandResponse
      ]>;
  pagedExpand(
      request: protos.google.showcase.v1beta1.IPagedExpandRequest,
      options: CallOptions,
      callback: PaginationCallback<
          protos.google.showcase.v1beta1.IPagedExpandRequest,
          protos.google.showcase.v1beta1.IPagedExpandResponse|null|undefined,
          protos.google.showcase.v1beta1.IEchoResponse>): void;
  pagedExpand(
      request: protos.google.showcase.v1beta1.IPagedExpandRequest,
      callback: PaginationCallback<
          protos.google.showcase.v1beta1.IPagedExpandRequest,
          protos.google.showcase.v1beta1.IPagedExpandResponse|null|undefined,
          protos.google.showcase.v1beta1.IEchoResponse>): void;
  pagedExpand(
      request?: protos.google.showcase.v1beta1.IPagedExpandRequest,
      optionsOrCallback?:|CallOptions|PaginationCallback<
          protos.google.showcase.v1beta1.IPagedExpandRequest,
          |protos.google.showcase.v1beta1.IPagedExpandResponse|null|undefined,
          protos.google.showcase.v1beta1.IEchoResponse>,
      callback?: PaginationCallback<
          protos.google.showcase.v1beta1.IPagedExpandRequest,
          protos.google.showcase.v1beta1.IPagedExpandResponse|null|undefined,
          protos.google.showcase.v1beta1.IEchoResponse>):
      Promise<[
        protos.google.showcase.v1beta1.IEchoResponse[],
        protos.google.showcase.v1beta1.IPagedExpandRequest|null,
        protos.google.showcase.v1beta1.IPagedExpandResponse
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    this.initialize();
    return this.innerApiCalls.pagedExpand(request, options, callback);
  }

  /**
   * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream
   * object.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.content
   *   The string to expand.
   * @param {number} request.pageSize
   *   The amount of words to returned in each page.
   * @param {string} request.pageToken
   *   The position of the page to be returned.
   * @param {object} [options]
   *   Call options. See {@link
   * https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions}
   * for more details.
   * @returns {Stream}
   *   An object stream which emits an object representing [EchoResponse]{@link
   * google.showcase.v1beta1.EchoResponse} on 'data' event. The client library
   * will perform auto-pagination by default: it will call the API as many times
   * as needed. Note that it can affect your quota. We recommend using
   * `pagedExpandAsync()` method described below for async iteration which you
   * can stop as needed. Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
   *   for more details and examples.
   */
  pagedExpandStream(
      request?: protos.google.showcase.v1beta1.IPagedExpandRequest,
      options?: CallOptions): Transform {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    const defaultCallSettings = this._defaults['pagedExpand'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.pagedExpand.createStream(
        this.innerApiCalls.pagedExpand as gax.GaxCall, request, callSettings);
  }

  /**
   * Equivalent to `pagedExpand`, but returns an iterable object.
   *
   * `for`-`await`-`of` syntax is used with the iterable to get response
   * elements on-demand.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.content
   *   The string to expand.
   * @param {number} request.pageSize
   *   The amount of words to returned in each page.
   * @param {string} request.pageToken
   *   The position of the page to be returned.
   * @param {object} [options]
   *   Call options. See {@link
   * https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions}
   * for more details.
   * @returns {Object}
   *   An iterable Object that allows [async
   * iteration](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols).
   *   When you iterate the returned iterable, each element will be an object
   * representing [EchoResponse]{@link google.showcase.v1beta1.EchoResponse}.
   * The API will be called under the hood as needed, once per the page, so you
   * can stop the iteration when you don't need more results. Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
   *   for more details and examples.
   * @example
   * <caption>include:samples/generated/v1beta1/echo.paged_expand.js</caption>
   * region_tag:localhost_v1beta1_generated_Echo_PagedExpand_async
   */
  pagedExpandAsync(
      request?: protos.google.showcase.v1beta1.IPagedExpandRequest,
      options?: CallOptions):
      AsyncIterable<protos.google.showcase.v1beta1.IEchoResponse> {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    const defaultCallSettings = this._defaults['pagedExpand'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.pagedExpand.asyncIterate(
               this.innerApiCalls['pagedExpand'] as GaxCall,
               request as unknown as RequestType, callSettings) as
        AsyncIterable<protos.google.showcase.v1beta1.IEchoResponse>;
  }
  // --------------------
  // -- Path templates --
  // --------------------

  /**
   * Return a fully-qualified blueprint resource name string.
   *
   * @param {string} session
   * @param {string} test
   * @param {string} blueprint
   * @returns {string} Resource name string.
   */
  blueprintPath(session: string, test: string, blueprint: string) {
    return this.pathTemplates.blueprintPathTemplate.render({
      session: session,
      test: test,
      blueprint: blueprint,
    });
  }

  /**
   * Parse the session from Blueprint resource.
   *
   * @param {string} blueprintName
   *   A fully-qualified path representing Blueprint resource.
   * @returns {string} A string representing the session.
   */
  matchSessionFromBlueprintName(blueprintName: string) {
    return this.pathTemplates.blueprintPathTemplate.match(blueprintName)
        .session;
  }

  /**
   * Parse the test from Blueprint resource.
   *
   * @param {string} blueprintName
   *   A fully-qualified path representing Blueprint resource.
   * @returns {string} A string representing the test.
   */
  matchTestFromBlueprintName(blueprintName: string) {
    return this.pathTemplates.blueprintPathTemplate.match(blueprintName).test;
  }

  /**
   * Parse the blueprint from Blueprint resource.
   *
   * @param {string} blueprintName
   *   A fully-qualified path representing Blueprint resource.
   * @returns {string} A string representing the blueprint.
   */
  matchBlueprintFromBlueprintName(blueprintName: string) {
    return this.pathTemplates.blueprintPathTemplate.match(blueprintName)
        .blueprint;
  }

  /**
   * Return a fully-qualified room resource name string.
   *
   * @param {string} room_id
   * @returns {string} Resource name string.
   */
  roomPath(roomId: string) {
    return this.pathTemplates.roomPathTemplate.render({
      room_id: roomId,
    });
  }

  /**
   * Parse the room_id from Room resource.
   *
   * @param {string} roomName
   *   A fully-qualified path representing Room resource.
   * @returns {string} A string representing the room_id.
   */
  matchRoomIdFromRoomName(roomName: string) {
    return this.pathTemplates.roomPathTemplate.match(roomName).room_id;
  }

  /**
   * Return a fully-qualified roomIdBlurbId resource name string.
   *
   * @param {string} room_id
   * @param {string} blurb_id
   * @returns {string} Resource name string.
   */
  roomIdBlurbIdPath(roomId: string, blurbId: string) {
    return this.pathTemplates.roomIdBlurbIdPathTemplate.render({
      room_id: roomId,
      blurb_id: blurbId,
    });
  }

  /**
   * Parse the room_id from RoomIdBlurbId resource.
   *
   * @param {string} roomIdBlurbIdName
   *   A fully-qualified path representing room_id_blurb_id resource.
   * @returns {string} A string representing the room_id.
   */
  matchRoomIdFromRoomIdBlurbIdName(roomIdBlurbIdName: string) {
    return this.pathTemplates.roomIdBlurbIdPathTemplate.match(roomIdBlurbIdName)
        .room_id;
  }

  /**
   * Parse the blurb_id from RoomIdBlurbId resource.
   *
   * @param {string} roomIdBlurbIdName
   *   A fully-qualified path representing room_id_blurb_id resource.
   * @returns {string} A string representing the blurb_id.
   */
  matchBlurbIdFromRoomIdBlurbIdName(roomIdBlurbIdName: string) {
    return this.pathTemplates.roomIdBlurbIdPathTemplate.match(roomIdBlurbIdName)
        .blurb_id;
  }

  /**
   * Return a fully-qualified session resource name string.
   *
   * @param {string} session
   * @returns {string} Resource name string.
   */
  sessionPath(session: string) {
    return this.pathTemplates.sessionPathTemplate.render({
      session: session,
    });
  }

  /**
   * Parse the session from Session resource.
   *
   * @param {string} sessionName
   *   A fully-qualified path representing Session resource.
   * @returns {string} A string representing the session.
   */
  matchSessionFromSessionName(sessionName: string) {
    return this.pathTemplates.sessionPathTemplate.match(sessionName).session;
  }

  /**
   * Return a fully-qualified test resource name string.
   *
   * @param {string} session
   * @param {string} test
   * @returns {string} Resource name string.
   */
  testPath(session: string, test: string) {
    return this.pathTemplates.testPathTemplate.render({
      session: session,
      test: test,
    });
  }

  /**
   * Parse the session from Test resource.
   *
   * @param {string} testName
   *   A fully-qualified path representing Test resource.
   * @returns {string} A string representing the session.
   */
  matchSessionFromTestName(testName: string) {
    return this.pathTemplates.testPathTemplate.match(testName).session;
  }

  /**
   * Parse the test from Test resource.
   *
   * @param {string} testName
   *   A fully-qualified path representing Test resource.
   * @returns {string} A string representing the test.
   */
  matchTestFromTestName(testName: string) {
    return this.pathTemplates.testPathTemplate.match(testName).test;
  }

  /**
   * Return a fully-qualified user resource name string.
   *
   * @param {string} user_id
   * @returns {string} Resource name string.
   */
  userPath(userId: string) {
    return this.pathTemplates.userPathTemplate.render({
      user_id: userId,
    });
  }

  /**
   * Parse the user_id from User resource.
   *
   * @param {string} userName
   *   A fully-qualified path representing User resource.
   * @returns {string} A string representing the user_id.
   */
  matchUserIdFromUserName(userName: string) {
    return this.pathTemplates.userPathTemplate.match(userName).user_id;
  }

  /**
   * Return a fully-qualified userIdProfileBlurbId resource name string.
   *
   * @param {string} user_id
   * @param {string} blurb_id
   * @returns {string} Resource name string.
   */
  userIdProfileBlurbIdPath(userId: string, blurbId: string) {
    return this.pathTemplates.userIdProfileBlurbIdPathTemplate.render({
      user_id: userId,
      blurb_id: blurbId,
    });
  }

  /**
   * Parse the user_id from UserIdProfileBlurbId resource.
   *
   * @param {string} userIdProfileBlurbIdName
   *   A fully-qualified path representing user_id_profile_blurb_id resource.
   * @returns {string} A string representing the user_id.
   */
  matchUserIdFromUserIdProfileBlurbIdName(userIdProfileBlurbIdName: string) {
    return this.pathTemplates.userIdProfileBlurbIdPathTemplate
        .match(userIdProfileBlurbIdName)
        .user_id;
  }

  /**
   * Parse the blurb_id from UserIdProfileBlurbId resource.
   *
   * @param {string} userIdProfileBlurbIdName
   *   A fully-qualified path representing user_id_profile_blurb_id resource.
   * @returns {string} A string representing the blurb_id.
   */
  matchBlurbIdFromUserIdProfileBlurbIdName(userIdProfileBlurbIdName: string) {
    return this.pathTemplates.userIdProfileBlurbIdPathTemplate
        .match(userIdProfileBlurbIdName)
        .blurb_id;
  }

  /**
   * Terminate the gRPC channel and close the client.
   *
   * The client will no longer be usable and all future behavior is undefined.
   * @returns {Promise} A promise that resolves when the client is closed.
   */
  close(): Promise<void> {
    if (this.echoStub && !this._terminated) {
      return this.echoStub!.then(stub => {
        this._terminated = true;
        stub.close();
        this.operationsClient.close();
      });
    }
    return Promise.resolve();
  }
}
