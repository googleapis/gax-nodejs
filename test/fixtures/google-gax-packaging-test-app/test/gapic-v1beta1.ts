// Copyright 2021 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// ** This file is automatically generated by gapic-generator-typescript. **
// ** https://github.com/googleapis/gapic-generator-typescript **
// ** All changes to this file may be overwritten. **

import * as protos from '../protos/protos';
import * as assert from 'assert';
import * as sinon from 'sinon';
import {SinonStub} from 'sinon';
import {describe, it} from 'mocha';
import * as echoModule from '../src';

import {PassThrough} from 'stream';
//@ts-ignore
import {protobuf, LROperation, operationsProtos} from 'google-gax';

function generateSampleMessage<T extends object>(instance: T) {
  const filledObject = (
    instance.constructor as typeof protobuf.Message
  ).toObject(instance as protobuf.Message<T>, {defaults: true});
  return (instance.constructor as typeof protobuf.Message).fromObject(
    filledObject
  ) as T;
}

function stubSimpleCall<ResponseType>(response?: ResponseType, error?: Error) {
  return error
    ? sinon.stub().rejects(error)
    : sinon.stub().resolves([response]);
}

function stubSimpleCallWithCallback<ResponseType>(
  response?: ResponseType,
  error?: Error
) {
  return error
    ? sinon.stub().callsArgWith(2, error)
    : sinon.stub().callsArgWith(2, null, response);
}

function stubServerStreamingCall<ResponseType>(
  response?: ResponseType,
  error?: Error
) {
  const transformStub = error
    ? sinon.stub().callsArgWith(2, error)
    : sinon.stub().callsArgWith(2, null, response);
  const mockStream = new PassThrough({
    objectMode: true,
    transform: transformStub,
  });
  // write something to the stream to trigger transformStub and send the response back to the client
  setImmediate(() => {
    mockStream.write({});
  });
  setImmediate(() => {
    mockStream.end();
  });
  return sinon.stub().returns(mockStream);
}

function stubBidiStreamingCall<ResponseType>(
  response?: ResponseType,
  error?: Error
) {
  const transformStub = error
    ? sinon.stub().callsArgWith(2, error)
    : sinon.stub().callsArgWith(2, null, response);
  const mockStream = new PassThrough({
    objectMode: true,
    transform: transformStub,
  });
  return sinon.stub().returns(mockStream);
}

function stubClientStreamingCall<ResponseType>(
  response?: ResponseType,
  error?: Error
) {
  if (error) {
    return sinon.stub().callsArgWith(2, error);
  }
  const transformStub = sinon.stub();
  const mockStream = new PassThrough({
    objectMode: true,
    transform: transformStub,
  });
  return sinon.stub().returns(mockStream).callsArgWith(2, null, response);
}

function stubLongRunningCall<ResponseType>(
  response?: ResponseType,
  callError?: Error,
  lroError?: Error
) {
  const innerStub = lroError
    ? sinon.stub().rejects(lroError)
    : sinon.stub().resolves([response]);
  const mockOperation = {
    promise: innerStub,
  };
  return callError
    ? sinon.stub().rejects(callError)
    : sinon.stub().resolves([mockOperation]);
}

function stubLongRunningCallWithCallback<ResponseType>(
  response?: ResponseType,
  callError?: Error,
  lroError?: Error
) {
  const innerStub = lroError
    ? sinon.stub().rejects(lroError)
    : sinon.stub().resolves([response]);
  const mockOperation = {
    promise: innerStub,
  };
  return callError
    ? sinon.stub().callsArgWith(2, callError)
    : sinon.stub().callsArgWith(2, null, mockOperation);
}

function stubPageStreamingCall<ResponseType>(
  responses?: ResponseType[],
  error?: Error
) {
  const pagingStub = sinon.stub();
  if (responses) {
    for (let i = 0; i < responses.length; ++i) {
      pagingStub.onCall(i).callsArgWith(2, null, responses[i]);
    }
  }
  const transformStub = error
    ? sinon.stub().callsArgWith(2, error)
    : pagingStub;
  const mockStream = new PassThrough({
    objectMode: true,
    transform: transformStub,
  });
  // trigger as many responses as needed
  if (responses) {
    for (let i = 0; i < responses.length; ++i) {
      setImmediate(() => {
        mockStream.write({});
      });
    }
    setImmediate(() => {
      mockStream.end();
    });
  } else {
    setImmediate(() => {
      mockStream.write({});
    });
    setImmediate(() => {
      mockStream.end();
    });
  }
  return sinon.stub().returns(mockStream);
}

function stubAsyncIterationCall<ResponseType>(
  responses?: ResponseType[],
  error?: Error
) {
  let counter = 0;
  const asyncIterable = {
    [Symbol.asyncIterator]() {
      return {
        async next() {
          if (error) {
            return Promise.reject(error);
          }
          if (counter >= responses!.length) {
            return Promise.resolve({done: true, value: undefined});
          }
          return Promise.resolve({done: false, value: responses![counter++]});
        },
      };
    },
  };
  return sinon.stub().returns(asyncIterable);
}

describe('v1beta1.EchoClient', () => {
  it('has servicePath', () => {
    const servicePath = echoModule.v1beta1.EchoClient.servicePath;
    assert(servicePath);
  });

  it('has apiEndpoint', () => {
    const apiEndpoint = echoModule.v1beta1.EchoClient.apiEndpoint;
    assert(apiEndpoint);
  });

  it('has port', () => {
    const port = echoModule.v1beta1.EchoClient.port;
    assert(port);
    assert(typeof port === 'number');
  });

  it('should create a client with no option', () => {
    const client = new echoModule.v1beta1.EchoClient();
    assert(client);
  });

  it('should create a client with gRPC fallback', () => {
    const client = new echoModule.v1beta1.EchoClient({
      fallback: true,
    });
    assert(client);
  });

  it('has initialize method and supports deferred initialization', async () => {
    const client = new echoModule.v1beta1.EchoClient({
      credentials: {client_email: 'bogus', private_key: 'bogus'},
      projectId: 'bogus',
    });
    assert.strictEqual(client.echoStub, undefined);
    await client.initialize();
    assert(client.echoStub);
  });

  it('has close method', () => {
    const client = new echoModule.v1beta1.EchoClient({
      credentials: {client_email: 'bogus', private_key: 'bogus'},
      projectId: 'bogus',
    });
    client.close();
  });

  it('has getProjectId method', async () => {
    const fakeProjectId = 'fake-project-id';
    const client = new echoModule.v1beta1.EchoClient({
      credentials: {client_email: 'bogus', private_key: 'bogus'},
      projectId: 'bogus',
    });
    client.auth.getProjectId = sinon.stub().resolves(fakeProjectId);
    const result = await client.getProjectId();
    assert.strictEqual(result, fakeProjectId);
    assert((client.auth.getProjectId as SinonStub).calledWithExactly());
  });

  it('has getProjectId method with callback', async () => {
    const fakeProjectId = 'fake-project-id';
    const client = new echoModule.v1beta1.EchoClient({
      credentials: {client_email: 'bogus', private_key: 'bogus'},
      projectId: 'bogus',
    });
    client.auth.getProjectId = sinon
      .stub()
      .callsArgWith(0, null, fakeProjectId);
    const promise = new Promise((resolve, reject) => {
      client.getProjectId((err?: Error | null, projectId?: string | null) => {
        if (err) {
          reject(err);
        } else {
          resolve(projectId);
        }
      });
    });
    const result = await promise;
    assert.strictEqual(result, fakeProjectId);
  });

  describe('echo', () => {
    it('invokes echo without error', async () => {
      const client = new echoModule.v1beta1.EchoClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.showcase.v1beta1.EchoRequest()
      );
      const expectedOptions = {otherArgs: {headers: {}}};
      const expectedResponse = generateSampleMessage(
        new protos.google.showcase.v1beta1.EchoResponse()
      );
      client.innerApiCalls.echo = stubSimpleCall(expectedResponse);
      const [response] = await client.echo(request);
      assert.deepStrictEqual(response, expectedResponse);
      assert(
        (client.innerApiCalls.echo as SinonStub)
          .getCall(0)
          .calledWith(request, expectedOptions, undefined)
      );
    });

    it('invokes echo without error using callback', async () => {
      const client = new echoModule.v1beta1.EchoClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.showcase.v1beta1.EchoRequest()
      );
      const expectedOptions = {otherArgs: {headers: {}}};
      const expectedResponse = generateSampleMessage(
        new protos.google.showcase.v1beta1.EchoResponse()
      );
      client.innerApiCalls.echo = stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.echo(
          request,
          (
            err?: Error | null,
            result?: protos.google.showcase.v1beta1.IEchoResponse | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      assert(
        (client.innerApiCalls.echo as SinonStub)
          .getCall(0)
          .calledWith(request, expectedOptions /*, callback defined above */)
      );
    });

    it('invokes echo with error', async () => {
      const client = new echoModule.v1beta1.EchoClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.showcase.v1beta1.EchoRequest()
      );
      const expectedOptions = {otherArgs: {headers: {}}};
      const expectedError = new Error('expected');
      client.innerApiCalls.echo = stubSimpleCall(undefined, expectedError);
      await assert.rejects(client.echo(request), expectedError);
      assert(
        (client.innerApiCalls.echo as SinonStub)
          .getCall(0)
          .calledWith(request, expectedOptions, undefined)
      );
    });

    it('invokes echo with closed client', async () => {
      const client = new echoModule.v1beta1.EchoClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.showcase.v1beta1.EchoRequest()
      );
      const expectedError = new Error('The client has already been closed.');
      client.close();
      await assert.rejects(client.echo(request), expectedError);
    });
  });

  describe('block', () => {
    it('invokes block without error', async () => {
      const client = new echoModule.v1beta1.EchoClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.showcase.v1beta1.BlockRequest()
      );
      const expectedOptions = {otherArgs: {headers: {}}};
      const expectedResponse = generateSampleMessage(
        new protos.google.showcase.v1beta1.BlockResponse()
      );
      client.innerApiCalls.block = stubSimpleCall(expectedResponse);
      const [response] = await client.block(request);
      assert.deepStrictEqual(response, expectedResponse);
      assert(
        (client.innerApiCalls.block as SinonStub)
          .getCall(0)
          .calledWith(request, expectedOptions, undefined)
      );
    });

    it('invokes block without error using callback', async () => {
      const client = new echoModule.v1beta1.EchoClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.showcase.v1beta1.BlockRequest()
      );
      const expectedOptions = {otherArgs: {headers: {}}};
      const expectedResponse = generateSampleMessage(
        new protos.google.showcase.v1beta1.BlockResponse()
      );
      client.innerApiCalls.block = stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.block(
          request,
          (
            err?: Error | null,
            result?: protos.google.showcase.v1beta1.IBlockResponse | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      assert(
        (client.innerApiCalls.block as SinonStub)
          .getCall(0)
          .calledWith(request, expectedOptions /*, callback defined above */)
      );
    });

    it('invokes block with error', async () => {
      const client = new echoModule.v1beta1.EchoClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.showcase.v1beta1.BlockRequest()
      );
      const expectedOptions = {otherArgs: {headers: {}}};
      const expectedError = new Error('expected');
      client.innerApiCalls.block = stubSimpleCall(undefined, expectedError);
      await assert.rejects(client.block(request), expectedError);
      assert(
        (client.innerApiCalls.block as SinonStub)
          .getCall(0)
          .calledWith(request, expectedOptions, undefined)
      );
    });
  });

  describe('wait', () => {
    it('invokes wait without error', async () => {
      const client = new echoModule.v1beta1.EchoClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.showcase.v1beta1.WaitRequest()
      );
      const expectedOptions = {otherArgs: {headers: {}}};
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.wait = stubLongRunningCall(expectedResponse);
      const [operation] = await client.wait(request);
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      assert(
        (client.innerApiCalls.wait as SinonStub)
          .getCall(0)
          .calledWith(request, expectedOptions, undefined)
      );
    });

    it('invokes wait without error using callback', async () => {
      const client = new echoModule.v1beta1.EchoClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.showcase.v1beta1.WaitRequest()
      );
      const expectedOptions = {otherArgs: {headers: {}}};
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.wait =
        stubLongRunningCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.wait(
          request,
          (
            err?: Error | null,
            result?: LROperation<
              protos.google.showcase.v1beta1.IWaitResponse,
              protos.google.showcase.v1beta1.IWaitMetadata
            > | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const operation = (await promise) as LROperation<
        protos.google.showcase.v1beta1.IWaitResponse,
        protos.google.showcase.v1beta1.IWaitMetadata
      >;
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      assert(
        (client.innerApiCalls.wait as SinonStub)
          .getCall(0)
          .calledWith(request, expectedOptions /*, callback defined above */)
      );
    });

    it('invokes wait with call error', async () => {
      const client = new echoModule.v1beta1.EchoClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.showcase.v1beta1.WaitRequest()
      );
      const expectedOptions = {otherArgs: {headers: {}}};
      const expectedError = new Error('expected');
      client.innerApiCalls.wait = stubLongRunningCall(undefined, expectedError);
      await assert.rejects(client.wait(request), expectedError);
      assert(
        (client.innerApiCalls.wait as SinonStub)
          .getCall(0)
          .calledWith(request, expectedOptions, undefined)
      );
    });

    it('invokes wait with LRO error', async () => {
      const client = new echoModule.v1beta1.EchoClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.showcase.v1beta1.WaitRequest()
      );
      const expectedOptions = {otherArgs: {headers: {}}};
      const expectedError = new Error('expected');
      client.innerApiCalls.wait = stubLongRunningCall(
        undefined,
        undefined,
        expectedError
      );
      const [operation] = await client.wait(request);
      await assert.rejects(operation.promise(), expectedError);
      assert(
        (client.innerApiCalls.wait as SinonStub)
          .getCall(0)
          .calledWith(request, expectedOptions, undefined)
      );
    });

    it('invokes checkWaitProgress without error', async () => {
      const client = new echoModule.v1beta1.EchoClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const expectedResponse = generateSampleMessage(
        new operationsProtos.google.longrunning.Operation()
      );
      expectedResponse.name = 'test';
      expectedResponse.response = {type_url: 'url', value: Buffer.from('')};
      expectedResponse.metadata = {type_url: 'url', value: Buffer.from('')};

      client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
      const decodedOperation = await client.checkWaitProgress(
        expectedResponse.name
      );
      assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
      assert(decodedOperation.metadata);
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });

    it('invokes checkWaitProgress with error', async () => {
      const client = new echoModule.v1beta1.EchoClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const expectedError = new Error('expected');

      client.operationsClient.getOperation = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.checkWaitProgress(''), expectedError);
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });
  });

  describe('expand', () => {
    it('invokes expand without error', async () => {
      const client = new echoModule.v1beta1.EchoClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.showcase.v1beta1.ExpandRequest()
      );
      const expectedOptions = {otherArgs: {headers: {}}};
      const expectedResponse = generateSampleMessage(
        new protos.google.showcase.v1beta1.EchoResponse()
      );
      client.innerApiCalls.expand = stubServerStreamingCall(expectedResponse);
      const stream = client.expand(request);
      const promise = new Promise((resolve, reject) => {
        stream.on(
          'data',
          (response: protos.google.showcase.v1beta1.EchoResponse) => {
            resolve(response);
          }
        );
        stream.on('error', (err: Error) => {
          reject(err);
        });
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      assert(
        (client.innerApiCalls.expand as SinonStub)
          .getCall(0)
          .calledWith(request, expectedOptions)
      );
    });

    it('invokes expand with error', async () => {
      const client = new echoModule.v1beta1.EchoClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.showcase.v1beta1.ExpandRequest()
      );
      const expectedOptions = {otherArgs: {headers: {}}};
      const expectedError = new Error('expected');
      client.innerApiCalls.expand = stubServerStreamingCall(
        undefined,
        expectedError
      );
      const stream = client.expand(request);
      const promise = new Promise((resolve, reject) => {
        stream.on(
          'data',
          (response: protos.google.showcase.v1beta1.EchoResponse) => {
            resolve(response);
          }
        );
        stream.on('error', (err: Error) => {
          reject(err);
        });
      });
      await assert.rejects(promise, expectedError);
      assert(
        (client.innerApiCalls.expand as SinonStub)
          .getCall(0)
          .calledWith(request, expectedOptions)
      );
    });

    it('invokes expand with closed client', async () => {
      const client = new echoModule.v1beta1.EchoClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.showcase.v1beta1.ExpandRequest()
      );
      const expectedError = new Error('The client has already been closed.');
      client.close();
      const stream = client.expand(request);
      const promise = new Promise((resolve, reject) => {
        stream.on(
          'data',
          (response: protos.google.showcase.v1beta1.EchoResponse) => {
            resolve(response);
          }
        );
        stream.on('error', (err: Error) => {
          reject(err);
        });
      });
      await assert.rejects(promise, expectedError);
    });
  });

  describe('chat', () => {
    it('invokes chat without error', async () => {
      const client = new echoModule.v1beta1.EchoClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.showcase.v1beta1.EchoRequest()
      );
      const expectedResponse = generateSampleMessage(
        new protos.google.showcase.v1beta1.EchoResponse()
      );
      client.innerApiCalls.chat = stubBidiStreamingCall(expectedResponse);
      const stream = client.chat();
      const promise = new Promise((resolve, reject) => {
        stream.on(
          'data',
          (response: protos.google.showcase.v1beta1.EchoResponse) => {
            resolve(response);
          }
        );
        stream.on('error', (err: Error) => {
          reject(err);
        });
        stream.write(request);
        stream.end();
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      assert(
        (client.innerApiCalls.chat as SinonStub)
          .getCall(0)
          .calledWithExactly(undefined)
      );
      assert.deepStrictEqual(
        ((stream as unknown as PassThrough)._transform as SinonStub).getCall(0)
          .args[0],
        request
      );
    });

    it('invokes chat with error', async () => {
      const client = new echoModule.v1beta1.EchoClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.showcase.v1beta1.EchoRequest()
      );
      const expectedError = new Error('expected');
      client.innerApiCalls.chat = stubBidiStreamingCall(
        undefined,
        expectedError
      );
      const stream = client.chat();
      const promise = new Promise((resolve, reject) => {
        stream.on(
          'data',
          (response: protos.google.showcase.v1beta1.EchoResponse) => {
            resolve(response);
          }
        );
        stream.on('error', (err: Error) => {
          reject(err);
        });
        stream.write(request);
        stream.end();
      });
      await assert.rejects(promise, expectedError);
      assert(
        (client.innerApiCalls.chat as SinonStub)
          .getCall(0)
          .calledWithExactly(undefined)
      );
      assert.deepStrictEqual(
        ((stream as unknown as PassThrough)._transform as SinonStub).getCall(0)
          .args[0],
        request
      );
    });
  });

  describe('collect', () => {
    it('invokes collect without error', async () => {
      const client = new echoModule.v1beta1.EchoClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.showcase.v1beta1.EchoRequest()
      );
      const expectedResponse = generateSampleMessage(
        new protos.google.showcase.v1beta1.EchoResponse()
      );
      client.innerApiCalls.collect = stubClientStreamingCall(expectedResponse);
      let stream: PassThrough;
      const promise = new Promise((resolve, reject) => {
        stream = client.collect(
          (
            err?: Error | null,
            result?: protos.google.showcase.v1beta1.IEchoResponse | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        ) as unknown as PassThrough;
        stream.write(request);
        stream.end();
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      assert(
        (client.innerApiCalls.collect as SinonStub)
          .getCall(0)
          .calledWith(null, {} /*, callback defined above */)
      );
      assert.deepStrictEqual(
        (stream!._transform as SinonStub).getCall(0).args[0],
        request
      );
    });

    it('invokes collect with error', async () => {
      const client = new echoModule.v1beta1.EchoClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.showcase.v1beta1.EchoRequest()
      );
      const expectedError = new Error('expected');
      client.innerApiCalls.collect = stubClientStreamingCall(
        undefined,
        expectedError
      );
      let stream: PassThrough;
      const promise = new Promise((resolve, reject) => {
        stream = client.collect(
          (
            err?: Error | null,
            result?: protos.google.showcase.v1beta1.IEchoResponse | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        ) as unknown as PassThrough;
        stream.write(request);
        stream.end();
      });
      await assert.rejects(promise, expectedError);
      assert(
        (client.innerApiCalls.collect as SinonStub)
          .getCall(0)
          .calledWith(null, {} /*, callback defined above */)
      );
    });
  });

  describe('pagedExpand', () => {
    it('invokes pagedExpand without error', async () => {
      const client = new echoModule.v1beta1.EchoClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.showcase.v1beta1.PagedExpandRequest()
      );
      const expectedOptions = {otherArgs: {headers: {}}};
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.showcase.v1beta1.EchoResponse()
        ),
        generateSampleMessage(
          new protos.google.showcase.v1beta1.EchoResponse()
        ),
        generateSampleMessage(
          new protos.google.showcase.v1beta1.EchoResponse()
        ),
      ];
      client.innerApiCalls.pagedExpand = stubSimpleCall(expectedResponse);
      const [response] = await client.pagedExpand(request);
      assert.deepStrictEqual(response, expectedResponse);
      assert(
        (client.innerApiCalls.pagedExpand as SinonStub)
          .getCall(0)
          .calledWith(request, expectedOptions, undefined)
      );
    });

    it('invokes pagedExpand without error using callback', async () => {
      const client = new echoModule.v1beta1.EchoClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.showcase.v1beta1.PagedExpandRequest()
      );
      const expectedOptions = {otherArgs: {headers: {}}};
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.showcase.v1beta1.EchoResponse()
        ),
        generateSampleMessage(
          new protos.google.showcase.v1beta1.EchoResponse()
        ),
        generateSampleMessage(
          new protos.google.showcase.v1beta1.EchoResponse()
        ),
      ];
      client.innerApiCalls.pagedExpand =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.pagedExpand(
          request,
          (
            err?: Error | null,
            result?: protos.google.showcase.v1beta1.IEchoResponse[] | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      assert(
        (client.innerApiCalls.pagedExpand as SinonStub)
          .getCall(0)
          .calledWith(request, expectedOptions /*, callback defined above */)
      );
    });

    it('invokes pagedExpand with error', async () => {
      const client = new echoModule.v1beta1.EchoClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.showcase.v1beta1.PagedExpandRequest()
      );
      const expectedOptions = {otherArgs: {headers: {}}};
      const expectedError = new Error('expected');
      client.innerApiCalls.pagedExpand = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.pagedExpand(request), expectedError);
      assert(
        (client.innerApiCalls.pagedExpand as SinonStub)
          .getCall(0)
          .calledWith(request, expectedOptions, undefined)
      );
    });

    it('invokes pagedExpandStream without error', async () => {
      const client = new echoModule.v1beta1.EchoClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.showcase.v1beta1.PagedExpandRequest()
      );
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.showcase.v1beta1.EchoResponse()
        ),
        generateSampleMessage(
          new protos.google.showcase.v1beta1.EchoResponse()
        ),
        generateSampleMessage(
          new protos.google.showcase.v1beta1.EchoResponse()
        ),
      ];
      client.descriptors.page.pagedExpand.createStream =
        stubPageStreamingCall(expectedResponse);
      const stream = client.pagedExpandStream(request);
      const promise = new Promise((resolve, reject) => {
        const responses: protos.google.showcase.v1beta1.EchoResponse[] = [];
        stream.on(
          'data',
          (response: protos.google.showcase.v1beta1.EchoResponse) => {
            responses.push(response);
          }
        );
        stream.on('end', () => {
          resolve(responses);
        });
        stream.on('error', (err: Error) => {
          reject(err);
        });
      });
      const responses = await promise;
      assert.deepStrictEqual(responses, expectedResponse);
      assert(
        (client.descriptors.page.pagedExpand.createStream as SinonStub)
          .getCall(0)
          .calledWith(client.innerApiCalls.pagedExpand, request)
      );
    });

    it('invokes pagedExpandStream with error', async () => {
      const client = new echoModule.v1beta1.EchoClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.showcase.v1beta1.PagedExpandRequest()
      );
      const expectedError = new Error('expected');
      client.descriptors.page.pagedExpand.createStream = stubPageStreamingCall(
        undefined,
        expectedError
      );
      const stream = client.pagedExpandStream(request);
      const promise = new Promise((resolve, reject) => {
        const responses: protos.google.showcase.v1beta1.EchoResponse[] = [];
        stream.on(
          'data',
          (response: protos.google.showcase.v1beta1.EchoResponse) => {
            responses.push(response);
          }
        );
        stream.on('end', () => {
          resolve(responses);
        });
        stream.on('error', (err: Error) => {
          reject(err);
        });
      });
      await assert.rejects(promise, expectedError);
      assert(
        (client.descriptors.page.pagedExpand.createStream as SinonStub)
          .getCall(0)
          .calledWith(client.innerApiCalls.pagedExpand, request)
      );
    });

    it('uses async iteration with pagedExpand without error', async () => {
      const client = new echoModule.v1beta1.EchoClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.showcase.v1beta1.PagedExpandRequest()
      );
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.showcase.v1beta1.EchoResponse()
        ),
        generateSampleMessage(
          new protos.google.showcase.v1beta1.EchoResponse()
        ),
        generateSampleMessage(
          new protos.google.showcase.v1beta1.EchoResponse()
        ),
      ];
      client.descriptors.page.pagedExpand.asyncIterate =
        stubAsyncIterationCall(expectedResponse);
      const responses: protos.google.showcase.v1beta1.IEchoResponse[] = [];
      const iterable = client.pagedExpandAsync(request);
      for await (const resource of iterable) {
        responses.push(resource!);
      }
      assert.deepStrictEqual(responses, expectedResponse);
      assert.deepStrictEqual(
        (client.descriptors.page.pagedExpand.asyncIterate as SinonStub).getCall(
          0
        ).args[1],
        request
      );
    });

    it('uses async iteration with pagedExpand with error', async () => {
      const client = new echoModule.v1beta1.EchoClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.showcase.v1beta1.PagedExpandRequest()
      );
      const expectedError = new Error('expected');
      client.descriptors.page.pagedExpand.asyncIterate = stubAsyncIterationCall(
        undefined,
        expectedError
      );
      const iterable = client.pagedExpandAsync(request);
      await assert.rejects(async () => {
        const responses: protos.google.showcase.v1beta1.IEchoResponse[] = [];
        for await (const resource of iterable) {
          responses.push(resource!);
        }
      });
      assert.deepStrictEqual(
        (client.descriptors.page.pagedExpand.asyncIterate as SinonStub).getCall(
          0
        ).args[1],
        request
      );
    });
  });

  describe('Path templates', () => {
    describe('blueprint', () => {
      const fakePath = '/rendered/path/blueprint';
      const expectedParameters = {
        session: 'sessionValue',
        test: 'testValue',
        blueprint: 'blueprintValue',
      };
      const client = new echoModule.v1beta1.EchoClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      client.pathTemplates.blueprintPathTemplate.render = sinon
        .stub()
        .returns(fakePath);
      client.pathTemplates.blueprintPathTemplate.match = sinon
        .stub()
        .returns(expectedParameters);

      it('blueprintPath', () => {
        const result = client.blueprintPath(
          'sessionValue',
          'testValue',
          'blueprintValue'
        );
        assert.strictEqual(result, fakePath);
        assert(
          (client.pathTemplates.blueprintPathTemplate.render as SinonStub)
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchSessionFromBlueprintName', () => {
        const result = client.matchSessionFromBlueprintName(fakePath);
        assert.strictEqual(result, 'sessionValue');
        assert(
          (client.pathTemplates.blueprintPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchTestFromBlueprintName', () => {
        const result = client.matchTestFromBlueprintName(fakePath);
        assert.strictEqual(result, 'testValue');
        assert(
          (client.pathTemplates.blueprintPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchBlueprintFromBlueprintName', () => {
        const result = client.matchBlueprintFromBlueprintName(fakePath);
        assert.strictEqual(result, 'blueprintValue');
        assert(
          (client.pathTemplates.blueprintPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });

    describe('room', () => {
      const fakePath = '/rendered/path/room';
      const expectedParameters = {
        room_id: 'roomIdValue',
      };
      const client = new echoModule.v1beta1.EchoClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      client.pathTemplates.roomPathTemplate.render = sinon
        .stub()
        .returns(fakePath);
      client.pathTemplates.roomPathTemplate.match = sinon
        .stub()
        .returns(expectedParameters);

      it('roomPath', () => {
        const result = client.roomPath('roomIdValue');
        assert.strictEqual(result, fakePath);
        assert(
          (client.pathTemplates.roomPathTemplate.render as SinonStub)
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchRoomIdFromRoomName', () => {
        const result = client.matchRoomIdFromRoomName(fakePath);
        assert.strictEqual(result, 'roomIdValue');
        assert(
          (client.pathTemplates.roomPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });

    describe('roomIdBlurbId', () => {
      const fakePath = '/rendered/path/roomIdBlurbId';
      const expectedParameters = {
        room_id: 'roomIdValue',
        blurb_id: 'blurbIdValue',
      };
      const client = new echoModule.v1beta1.EchoClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      client.pathTemplates.roomIdBlurbIdPathTemplate.render = sinon
        .stub()
        .returns(fakePath);
      client.pathTemplates.roomIdBlurbIdPathTemplate.match = sinon
        .stub()
        .returns(expectedParameters);

      it('roomIdBlurbIdPath', () => {
        const result = client.roomIdBlurbIdPath('roomIdValue', 'blurbIdValue');
        assert.strictEqual(result, fakePath);
        assert(
          (client.pathTemplates.roomIdBlurbIdPathTemplate.render as SinonStub)
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchRoomIdFromRoomIdBlurbIdName', () => {
        const result = client.matchRoomIdFromRoomIdBlurbIdName(fakePath);
        assert.strictEqual(result, 'roomIdValue');
        assert(
          (client.pathTemplates.roomIdBlurbIdPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchBlurbIdFromRoomIdBlurbIdName', () => {
        const result = client.matchBlurbIdFromRoomIdBlurbIdName(fakePath);
        assert.strictEqual(result, 'blurbIdValue');
        assert(
          (client.pathTemplates.roomIdBlurbIdPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });

    describe('session', () => {
      const fakePath = '/rendered/path/session';
      const expectedParameters = {
        session: 'sessionValue',
      };
      const client = new echoModule.v1beta1.EchoClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      client.pathTemplates.sessionPathTemplate.render = sinon
        .stub()
        .returns(fakePath);
      client.pathTemplates.sessionPathTemplate.match = sinon
        .stub()
        .returns(expectedParameters);

      it('sessionPath', () => {
        const result = client.sessionPath('sessionValue');
        assert.strictEqual(result, fakePath);
        assert(
          (client.pathTemplates.sessionPathTemplate.render as SinonStub)
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchSessionFromSessionName', () => {
        const result = client.matchSessionFromSessionName(fakePath);
        assert.strictEqual(result, 'sessionValue');
        assert(
          (client.pathTemplates.sessionPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });

    describe('test', () => {
      const fakePath = '/rendered/path/test';
      const expectedParameters = {
        session: 'sessionValue',
        test: 'testValue',
      };
      const client = new echoModule.v1beta1.EchoClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      client.pathTemplates.testPathTemplate.render = sinon
        .stub()
        .returns(fakePath);
      client.pathTemplates.testPathTemplate.match = sinon
        .stub()
        .returns(expectedParameters);

      it('testPath', () => {
        const result = client.testPath('sessionValue', 'testValue');
        assert.strictEqual(result, fakePath);
        assert(
          (client.pathTemplates.testPathTemplate.render as SinonStub)
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchSessionFromTestName', () => {
        const result = client.matchSessionFromTestName(fakePath);
        assert.strictEqual(result, 'sessionValue');
        assert(
          (client.pathTemplates.testPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchTestFromTestName', () => {
        const result = client.matchTestFromTestName(fakePath);
        assert.strictEqual(result, 'testValue');
        assert(
          (client.pathTemplates.testPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });

    describe('user', () => {
      const fakePath = '/rendered/path/user';
      const expectedParameters = {
        user_id: 'userIdValue',
      };
      const client = new echoModule.v1beta1.EchoClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      client.pathTemplates.userPathTemplate.render = sinon
        .stub()
        .returns(fakePath);
      client.pathTemplates.userPathTemplate.match = sinon
        .stub()
        .returns(expectedParameters);

      it('userPath', () => {
        const result = client.userPath('userIdValue');
        assert.strictEqual(result, fakePath);
        assert(
          (client.pathTemplates.userPathTemplate.render as SinonStub)
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchUserIdFromUserName', () => {
        const result = client.matchUserIdFromUserName(fakePath);
        assert.strictEqual(result, 'userIdValue');
        assert(
          (client.pathTemplates.userPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });

    describe('userIdProfileBlurbId', () => {
      const fakePath = '/rendered/path/userIdProfileBlurbId';
      const expectedParameters = {
        user_id: 'userIdValue',
        blurb_id: 'blurbIdValue',
      };
      const client = new echoModule.v1beta1.EchoClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      client.pathTemplates.userIdProfileBlurbIdPathTemplate.render = sinon
        .stub()
        .returns(fakePath);
      client.pathTemplates.userIdProfileBlurbIdPathTemplate.match = sinon
        .stub()
        .returns(expectedParameters);

      it('userIdProfileBlurbIdPath', () => {
        const result = client.userIdProfileBlurbIdPath(
          'userIdValue',
          'blurbIdValue'
        );
        assert.strictEqual(result, fakePath);
        assert(
          (
            client.pathTemplates.userIdProfileBlurbIdPathTemplate
              .render as SinonStub
          )
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchUserIdFromUserIdProfileBlurbIdName', () => {
        const result = client.matchUserIdFromUserIdProfileBlurbIdName(fakePath);
        assert.strictEqual(result, 'userIdValue');
        assert(
          (
            client.pathTemplates.userIdProfileBlurbIdPathTemplate
              .match as SinonStub
          )
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchBlurbIdFromUserIdProfileBlurbIdName', () => {
        const result =
          client.matchBlurbIdFromUserIdProfileBlurbIdName(fakePath);
        assert.strictEqual(result, 'blurbIdValue');
        assert(
          (
            client.pathTemplates.userIdProfileBlurbIdPathTemplate
              .match as SinonStub
          )
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });
  });
});
