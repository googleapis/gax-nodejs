// Copyright 2023 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// ** This file is automatically generated by gapic-generator-typescript. **
// ** https://github.com/googleapis/gapic-generator-typescript **
// ** All changes to this file may be overwritten. **

/* global window */
import type * as gax from 'google-gax';
import type {
  Callback,
  CallOptions,
  Descriptors,
  ClientOptions,
  IamClient,
  IamProtos,
  LocationsClient,
  LocationProtos,
} from 'google-gax';
import {PassThrough} from 'stream';
import * as protos from '../../protos/protos';
import jsonProtos = require('../../protos/protos.json');
/**
 * Client JSON configuration object, loaded from
 * `src/v1beta1/sequence_service_client_config.json`.
 * This file defines retry strategy and timeouts for all API methods in this library.
 */
import * as gapicConfig from './sequence_service_client_config.json';
const version = require('../../../package.json').version;

/**
 * @class
 * @memberof v1beta1
 */
export class SequenceServiceClient {
  private _terminated = false;
  private _opts: ClientOptions;
  private _providedCustomServicePath: boolean;
  private _gaxModule: typeof gax | typeof gax.fallback;
  private _gaxGrpc: gax.GrpcClient | gax.fallback.GrpcClient;
  private _protos: {};
  private _defaults: {[method: string]: gax.CallSettings};
  auth: gax.GoogleAuth;
  descriptors: Descriptors = {
    page: {},
    stream: {},
    longrunning: {},
    batching: {},
  };
  warn: (code: string, message: string, warnType?: string) => void;
  innerApiCalls: {[name: string]: Function};
  iamClient: IamClient;
  locationsClient: LocationsClient;
  pathTemplates: {[name: string]: gax.PathTemplate};
  sequenceServiceStub?: Promise<{[name: string]: Function}>;

  /**
   * Construct an instance of SequenceServiceClient.
   *
   * @param {object} [options] - The configuration object.
   * The options accepted by the constructor are described in detail
   * in [this document](https://github.com/googleapis/gax-nodejs/blob/main/client-libraries.md#creating-the-client-instance).
   * The common options are:
   * @param {object} [options.credentials] - Credentials object.
   * @param {string} [options.credentials.client_email]
   * @param {string} [options.credentials.private_key]
   * @param {string} [options.email] - Account email address. Required when
   *     using a .pem or .p12 keyFilename.
   * @param {string} [options.keyFilename] - Full path to the a .json, .pem, or
   *     .p12 key downloaded from the Google Developers Console. If you provide
   *     a path to a JSON file, the projectId option below is not necessary.
   *     NOTE: .pem and .p12 require you to specify options.email as well.
   * @param {number} [options.port] - The port on which to connect to
   *     the remote host.
   * @param {string} [options.projectId] - The project ID from the Google
   *     Developer's Console, e.g. 'grape-spaceship-123'. We will also check
   *     the environment variable GCLOUD_PROJECT for your project ID. If your
   *     app is running in an environment which supports
   *     {@link https://developers.google.com/identity/protocols/application-default-credentials Application Default Credentials},
   *     your project ID will be detected automatically.
   * @param {string} [options.apiEndpoint] - The domain name of the
   *     API remote host.
   * @param {gax.ClientConfig} [options.clientConfig] - Client configuration override.
   *     Follows the structure of {@link gapicConfig}.
   * @param {boolean | "rest"} [options.fallback] - Use HTTP fallback mode.
   *     Pass "rest" to use HTTP/1.1 REST API instead of gRPC.
   *     For more information, please check the
   *     {@link https://github.com/googleapis/gax-nodejs/blob/main/client-libraries.md#http11-rest-api-mode documentation}.
   * @param {gax} [gaxInstance]: loaded instance of `google-gax`. Useful if you
   *     need to avoid loading the default gRPC version and want to use the fallback
   *     HTTP implementation. Load only fallback version and pass it to the constructor:
   *     ```
   *     const gax = require('google-gax/build/src/fallback'); // avoids loading google-gax with gRPC
   *     const client = new SequenceServiceClient({fallback: 'rest'}, gax);
   *     ```
   */
  constructor(
    opts?: ClientOptions,
    gaxInstance?: typeof gax | typeof gax.fallback
  ) {
    // Ensure that options include all the required fields.
    const staticMembers = this.constructor as typeof SequenceServiceClient;
    const servicePath =
      opts?.servicePath || opts?.apiEndpoint || staticMembers.servicePath;
    this._providedCustomServicePath = !!(
      opts?.servicePath || opts?.apiEndpoint
    );
    const port = opts?.port || staticMembers.port;
    const clientConfig = opts?.clientConfig ?? {};
    const fallback =
      opts?.fallback ??
      (typeof window !== 'undefined' && typeof window?.fetch === 'function');
    opts = Object.assign({servicePath, port, clientConfig, fallback}, opts);

    // If scopes are unset in options and we're connecting to a non-default endpoint, set scopes just in case.
    if (servicePath !== staticMembers.servicePath && !('scopes' in opts)) {
      opts['scopes'] = staticMembers.scopes;
    }

    // Load google-gax module synchronously if needed
    if (!gaxInstance) {
      gaxInstance = require('google-gax') as typeof gax;
    }

    // Choose either gRPC or proto-over-HTTP implementation of google-gax.
    this._gaxModule = opts.fallback ? gaxInstance.fallback : gaxInstance;

    // Create a `gaxGrpc` object, with any grpc-specific options sent to the client.
    this._gaxGrpc = new this._gaxModule.GrpcClient(opts);

    // Save options to use in initialize() method.
    this._opts = opts;

    // Save the auth object to the client, for use by other methods.
    this.auth = this._gaxGrpc.auth as gax.GoogleAuth;

    // Set useJWTAccessWithScope on the auth object.
    this.auth.useJWTAccessWithScope = true;

    // Set defaultServicePath on the auth object.
    this.auth.defaultServicePath = staticMembers.servicePath;

    // Set the default scopes in auth client if needed.
    if (servicePath === staticMembers.servicePath) {
      this.auth.defaultScopes = staticMembers.scopes;
    }
    this.iamClient = new this._gaxModule.IamClient(this._gaxGrpc, opts);

    this.locationsClient = new this._gaxModule.LocationsClient(
      this._gaxGrpc,
      opts
    );

    // Determine the client header string.
    const clientHeader = [`gax/${this._gaxModule.version}`, `gapic/${version}`];
    if (typeof process !== 'undefined' && 'versions' in process) {
      clientHeader.push(`gl-node/${process.versions.node}`);
    } else {
      clientHeader.push(`gl-web/${this._gaxModule.version}`);
    }
    if (!opts.fallback) {
      clientHeader.push(`grpc/${this._gaxGrpc.grpcVersion}`);
    } else if (opts.fallback === 'rest') {
      clientHeader.push(`rest/${this._gaxGrpc.grpcVersion}`);
    }
    if (opts.libName && opts.libVersion) {
      clientHeader.push(`${opts.libName}/${opts.libVersion}`);
    }
    // Load the applicable protos.
    this._protos = this._gaxGrpc.loadProtoJSON(jsonProtos);

    // This API contains "path templates"; forward-slash-separated
    // identifiers to uniquely identify resources within the API.
    // Create useful helper objects for these.
    this.pathTemplates = {
      sequencePathTemplate: new this._gaxModule.PathTemplate(
        'sequences/{sequence}'
      ),
      sequenceReportPathTemplate: new this._gaxModule.PathTemplate(
        'sequences/{sequence}/sequenceReport'
      ),
      streamingSequencePathTemplate: new this._gaxModule.PathTemplate(
        'streamingSequences/{streaming_sequence}'
      ),
      streamingSequenceReportPathTemplate: new this._gaxModule.PathTemplate(
        'streamingSequences/{streaming_sequence}/streamingSequenceReport'
      ),
    };

    // Some of the methods on this service provide streaming responses.
    // Provide descriptors for these.
    this.descriptors.stream = {
      attemptStreamingSequence: new this._gaxModule.StreamDescriptor(
        this._gaxModule.StreamType.SERVER_STREAMING,
        opts.fallback === 'rest',
        this._opts.newRetry
      ),
    };

    // Put together the default options sent with requests.
    this._defaults = this._gaxGrpc.constructSettings(
      'google.showcase.v1beta1.SequenceService',
      gapicConfig as gax.ClientConfig,
      opts.clientConfig || {},
      {'x-goog-api-client': clientHeader.join(' ')}
    );

    // Set up a dictionary of "inner API calls"; the core implementation
    // of calling the API is handled in `google-gax`, with this code
    // merely providing the destination and request information.
    this.innerApiCalls = {};

    // Add a warn function to the client constructor so it can be easily tested.
    this.warn = this._gaxModule.warn;
  }

  /**
   * Initialize the client.
   * Performs asynchronous operations (such as authentication) and prepares the client.
   * This function will be called automatically when any class method is called for the
   * first time, but if you need to initialize it before calling an actual method,
   * feel free to call initialize() directly.
   *
   * You can await on this method if you want to make sure the client is initialized.
   *
   * @returns {Promise} A promise that resolves to an authenticated service stub.
   */
  initialize() {
    // If the client stub promise is already initialized, return immediately.
    if (this.sequenceServiceStub) {
      return this.sequenceServiceStub;
    }

    // Put together the "service stub" for
    // google.showcase.v1beta1.SequenceService.
    this.sequenceServiceStub = this._gaxGrpc.createStub(
      this._opts.fallback
        ? (this._protos as protobuf.Root).lookupService(
            'google.showcase.v1beta1.SequenceService'
          )
        : // eslint-disable-next-line @typescript-eslint/no-explicit-any
          (this._protos as any).google.showcase.v1beta1.SequenceService,
      this._opts,
      this._providedCustomServicePath
    ) as Promise<{[method: string]: Function}>;

    // Iterate over each of the methods that the service provides
    // and create an API call method for each.
    const sequenceServiceStubMethods = [
      'createSequence',
      'createStreamingSequence',
      'getSequenceReport',
      'getStreamingSequenceReport',
      'attemptSequence',
      'attemptStreamingSequence',
    ];
    for (const methodName of sequenceServiceStubMethods) {
      const callPromise = this.sequenceServiceStub.then(
        stub =>
          (...args: Array<{}>) => {
            if (this._terminated) {
              if (methodName in this.descriptors.stream) {
                const stream = new PassThrough();
                setImmediate(() => {
                  stream.emit(
                    'error',
                    new this._gaxModule.GoogleError(
                      'The client has already been closed.'
                    )
                  );
                });
                return stream;
              }
              return Promise.reject('The client has already been closed.');
            }
            const func = stub[methodName];
            return func.apply(stub, args);
          },
        (err: Error | null | undefined) => () => {
          throw err;
        }
      );

      const descriptor = this.descriptors.stream[methodName] || undefined;
      const apiCall = this._gaxModule.createApiCall(
        callPromise,
        this._defaults[methodName],
        descriptor,
        this._opts.fallback
      );

      this.innerApiCalls[methodName] = apiCall;
    }

    return this.sequenceServiceStub;
  }

  /**
   * The DNS address for this API service.
   * @returns {string} The DNS address for this service.
   */
  static get servicePath() {
    return 'localhost';
  }

  /**
   * The DNS address for this API service - same as servicePath(),
   * exists for compatibility reasons.
   * @returns {string} The DNS address for this service.
   */
  static get apiEndpoint() {
    return 'localhost';
  }

  /**
   * The port for this API service.
   * @returns {number} The default port for this service.
   */
  static get port() {
    return 7469;
  }

  /**
   * The scopes needed to make gRPC calls for every method defined
   * in this service.
   * @returns {string[]} List of default scopes.
   */
  static get scopes() {
    return [];
  }

  getProjectId(): Promise<string>;
  getProjectId(callback: Callback<string, undefined, undefined>): void;
  /**
   * Return the project ID used by this class.
   * @returns {Promise} A promise that resolves to string containing the project ID.
   */
  getProjectId(
    callback?: Callback<string, undefined, undefined>
  ): Promise<string> | void {
    if (callback) {
      this.auth.getProjectId(callback);
      return;
    }
    return this.auth.getProjectId();
  }

  // -------------------
  // -- Service calls --
  // -------------------
  /**
   * Creates a sequence.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {google.showcase.v1beta1.Sequence} request.sequence
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing {@link protos.google.showcase.v1beta1.Sequence|Sequence}.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1beta1/sequence_service.create_sequence.js</caption>
   * region_tag:localhost_v1beta1_generated_SequenceService_CreateSequence_async
   */
  createSequence(
    request?: protos.google.showcase.v1beta1.ICreateSequenceRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.showcase.v1beta1.ISequence,
      protos.google.showcase.v1beta1.ICreateSequenceRequest | undefined,
      {} | undefined
    ]
  >;
  createSequence(
    request: protos.google.showcase.v1beta1.ICreateSequenceRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.showcase.v1beta1.ISequence,
      protos.google.showcase.v1beta1.ICreateSequenceRequest | null | undefined,
      {} | null | undefined
    >
  ): void;
  createSequence(
    request: protos.google.showcase.v1beta1.ICreateSequenceRequest,
    callback: Callback<
      protos.google.showcase.v1beta1.ISequence,
      protos.google.showcase.v1beta1.ICreateSequenceRequest | null | undefined,
      {} | null | undefined
    >
  ): void;
  createSequence(
    request?: protos.google.showcase.v1beta1.ICreateSequenceRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.showcase.v1beta1.ISequence,
          | protos.google.showcase.v1beta1.ICreateSequenceRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.showcase.v1beta1.ISequence,
      protos.google.showcase.v1beta1.ICreateSequenceRequest | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.showcase.v1beta1.ISequence,
      protos.google.showcase.v1beta1.ICreateSequenceRequest | undefined,
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    this.initialize();
    return this.innerApiCalls.createSequence(request, options, callback);
  }
  /**
   * Creates a sequence.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {google.showcase.v1beta1.StreamingSequence} request.streamingSequence
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing {@link protos.google.showcase.v1beta1.StreamingSequence|StreamingSequence}.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1beta1/sequence_service.create_streaming_sequence.js</caption>
   * region_tag:localhost_v1beta1_generated_SequenceService_CreateStreamingSequence_async
   */
  createStreamingSequence(
    request?: protos.google.showcase.v1beta1.ICreateStreamingSequenceRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.showcase.v1beta1.IStreamingSequence,
      (
        | protos.google.showcase.v1beta1.ICreateStreamingSequenceRequest
        | undefined
      ),
      {} | undefined
    ]
  >;
  createStreamingSequence(
    request: protos.google.showcase.v1beta1.ICreateStreamingSequenceRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.showcase.v1beta1.IStreamingSequence,
      | protos.google.showcase.v1beta1.ICreateStreamingSequenceRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  createStreamingSequence(
    request: protos.google.showcase.v1beta1.ICreateStreamingSequenceRequest,
    callback: Callback<
      protos.google.showcase.v1beta1.IStreamingSequence,
      | protos.google.showcase.v1beta1.ICreateStreamingSequenceRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  createStreamingSequence(
    request?: protos.google.showcase.v1beta1.ICreateStreamingSequenceRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.showcase.v1beta1.IStreamingSequence,
          | protos.google.showcase.v1beta1.ICreateStreamingSequenceRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.showcase.v1beta1.IStreamingSequence,
      | protos.google.showcase.v1beta1.ICreateStreamingSequenceRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.showcase.v1beta1.IStreamingSequence,
      (
        | protos.google.showcase.v1beta1.ICreateStreamingSequenceRequest
        | undefined
      ),
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    this.initialize();
    return this.innerApiCalls.createStreamingSequence(
      request,
      options,
      callback
    );
  }
  /**
   * Retrieves a sequence.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing {@link protos.google.showcase.v1beta1.SequenceReport|SequenceReport}.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1beta1/sequence_service.get_sequence_report.js</caption>
   * region_tag:localhost_v1beta1_generated_SequenceService_GetSequenceReport_async
   */
  getSequenceReport(
    request?: protos.google.showcase.v1beta1.IGetSequenceReportRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.showcase.v1beta1.ISequenceReport,
      protos.google.showcase.v1beta1.IGetSequenceReportRequest | undefined,
      {} | undefined
    ]
  >;
  getSequenceReport(
    request: protos.google.showcase.v1beta1.IGetSequenceReportRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.showcase.v1beta1.ISequenceReport,
      | protos.google.showcase.v1beta1.IGetSequenceReportRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  getSequenceReport(
    request: protos.google.showcase.v1beta1.IGetSequenceReportRequest,
    callback: Callback<
      protos.google.showcase.v1beta1.ISequenceReport,
      | protos.google.showcase.v1beta1.IGetSequenceReportRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  getSequenceReport(
    request?: protos.google.showcase.v1beta1.IGetSequenceReportRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.showcase.v1beta1.ISequenceReport,
          | protos.google.showcase.v1beta1.IGetSequenceReportRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.showcase.v1beta1.ISequenceReport,
      | protos.google.showcase.v1beta1.IGetSequenceReportRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.showcase.v1beta1.ISequenceReport,
      protos.google.showcase.v1beta1.IGetSequenceReportRequest | undefined,
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        name: request.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.getSequenceReport(request, options, callback);
  }
  /**
   * Retrieves a sequence.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing {@link protos.google.showcase.v1beta1.StreamingSequenceReport|StreamingSequenceReport}.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1beta1/sequence_service.get_streaming_sequence_report.js</caption>
   * region_tag:localhost_v1beta1_generated_SequenceService_GetStreamingSequenceReport_async
   */
  getStreamingSequenceReport(
    request?: protos.google.showcase.v1beta1.IGetStreamingSequenceReportRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.showcase.v1beta1.IStreamingSequenceReport,
      (
        | protos.google.showcase.v1beta1.IGetStreamingSequenceReportRequest
        | undefined
      ),
      {} | undefined
    ]
  >;
  getStreamingSequenceReport(
    request: protos.google.showcase.v1beta1.IGetStreamingSequenceReportRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.showcase.v1beta1.IStreamingSequenceReport,
      | protos.google.showcase.v1beta1.IGetStreamingSequenceReportRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  getStreamingSequenceReport(
    request: protos.google.showcase.v1beta1.IGetStreamingSequenceReportRequest,
    callback: Callback<
      protos.google.showcase.v1beta1.IStreamingSequenceReport,
      | protos.google.showcase.v1beta1.IGetStreamingSequenceReportRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  getStreamingSequenceReport(
    request?: protos.google.showcase.v1beta1.IGetStreamingSequenceReportRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.showcase.v1beta1.IStreamingSequenceReport,
          | protos.google.showcase.v1beta1.IGetStreamingSequenceReportRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.showcase.v1beta1.IStreamingSequenceReport,
      | protos.google.showcase.v1beta1.IGetStreamingSequenceReportRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.showcase.v1beta1.IStreamingSequenceReport,
      (
        | protos.google.showcase.v1beta1.IGetStreamingSequenceReportRequest
        | undefined
      ),
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        name: request.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.getStreamingSequenceReport(
      request,
      options,
      callback
    );
  }
  /**
   * Attempts a sequence.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing {@link protos.google.protobuf.Empty|Empty}.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1beta1/sequence_service.attempt_sequence.js</caption>
   * region_tag:localhost_v1beta1_generated_SequenceService_AttemptSequence_async
   */
  attemptSequence(
    request?: protos.google.showcase.v1beta1.IAttemptSequenceRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.protobuf.IEmpty,
      protos.google.showcase.v1beta1.IAttemptSequenceRequest | undefined,
      {} | undefined
    ]
  >;
  attemptSequence(
    request: protos.google.showcase.v1beta1.IAttemptSequenceRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.protobuf.IEmpty,
      protos.google.showcase.v1beta1.IAttemptSequenceRequest | null | undefined,
      {} | null | undefined
    >
  ): void;
  attemptSequence(
    request: protos.google.showcase.v1beta1.IAttemptSequenceRequest,
    callback: Callback<
      protos.google.protobuf.IEmpty,
      protos.google.showcase.v1beta1.IAttemptSequenceRequest | null | undefined,
      {} | null | undefined
    >
  ): void;
  attemptSequence(
    request?: protos.google.showcase.v1beta1.IAttemptSequenceRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.protobuf.IEmpty,
          | protos.google.showcase.v1beta1.IAttemptSequenceRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.protobuf.IEmpty,
      protos.google.showcase.v1beta1.IAttemptSequenceRequest | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.protobuf.IEmpty,
      protos.google.showcase.v1beta1.IAttemptSequenceRequest | undefined,
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        name: request.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.attemptSequence(request, options, callback);
  }

  /**
   * Attempts a streaming sequence.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   * @param {number} [request.lastFailIndex]
   *   used to send the index of the last failed message
   *   in the string "content" of an AttemptStreamingSequenceResponse
   *   needed for stream resumption logic testing
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Stream}
   *   An object stream which emits {@link protos.google.showcase.v1beta1.AttemptStreamingSequenceResponse|AttemptStreamingSequenceResponse} on 'data' event.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#server-streaming | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1beta1/sequence_service.attempt_streaming_sequence.js</caption>
   * region_tag:localhost_v1beta1_generated_SequenceService_AttemptStreamingSequence_async
   */
  attemptStreamingSequence(
    request?: protos.google.showcase.v1beta1.IAttemptStreamingSequenceRequest,
    options?: CallOptions
  ): gax.CancellableStream {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        name: request.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.attemptStreamingSequence(request, options);
  }

  /**
   * Gets the access control policy for a resource. Returns an empty policy
   * if the resource exists and does not have a policy set.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.resource
   *   REQUIRED: The resource for which the policy is being requested.
   *   See the operation documentation for the appropriate value for this field.
   * @param {Object} [request.options]
   *   OPTIONAL: A `GetPolicyOptions` object for specifying options to
   *   `GetIamPolicy`. This field is only used by Cloud IAM.
   *
   *   This object should have the same structure as {@link google.iam.v1.GetPolicyOptions | GetPolicyOptions}.
   * @param {Object} [options]
   *   Optional parameters. You can override the default settings for this call, e.g, timeout,
   *   retries, paginations, etc. See {@link https://googleapis.github.io/gax-nodejs/interfaces/CallOptions.html | gax.CallOptions} for the details.
   * @param {function(?Error, ?Object)} [callback]
   *   The function which will be called with the result of the API call.
   *
   *   The second parameter to the callback is an object representing {@link google.iam.v1.Policy | Policy}.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing {@link google.iam.v1.Policy | Policy}.
   *   The promise has a method named "cancel" which cancels the ongoing API call.
   */
  getIamPolicy(
    request: IamProtos.google.iam.v1.GetIamPolicyRequest,
    options?:
      | gax.CallOptions
      | Callback<
          IamProtos.google.iam.v1.Policy,
          IamProtos.google.iam.v1.GetIamPolicyRequest | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      IamProtos.google.iam.v1.Policy,
      IamProtos.google.iam.v1.GetIamPolicyRequest | null | undefined,
      {} | null | undefined
    >
  ): Promise<[IamProtos.google.iam.v1.Policy]> {
    return this.iamClient.getIamPolicy(request, options, callback);
  }

  /**
   * Returns permissions that a caller has on the specified resource. If the
   * resource does not exist, this will return an empty set of
   * permissions, not a NOT_FOUND error.
   *
   * Note: This operation is designed to be used for building
   * permission-aware UIs and command-line tools, not for authorization
   * checking. This operation may "fail open" without warning.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.resource
   *   REQUIRED: The resource for which the policy detail is being requested.
   *   See the operation documentation for the appropriate value for this field.
   * @param {string[]} request.permissions
   *   The set of permissions to check for the `resource`. Permissions with
   *   wildcards (such as '*' or 'storage.*') are not allowed. For more
   *   information see {@link https://cloud.google.com/iam/docs/overview#permissions | IAM Overview }.
   * @param {Object} [options]
   *   Optional parameters. You can override the default settings for this call, e.g, timeout,
   *   retries, paginations, etc. See {@link https://googleapis.github.io/gax-nodejs/interfaces/CallOptions.html | gax.CallOptions} for the details.
   * @param {function(?Error, ?Object)} [callback]
   *   The function which will be called with the result of the API call.
   *
   *   The second parameter to the callback is an object representing {@link google.iam.v1.TestIamPermissionsResponse | TestIamPermissionsResponse}.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing {@link google.iam.v1.TestIamPermissionsResponse | TestIamPermissionsResponse}.
   *   The promise has a method named "cancel" which cancels the ongoing API call.
   */
  setIamPolicy(
    request: IamProtos.google.iam.v1.SetIamPolicyRequest,
    options?:
      | gax.CallOptions
      | Callback<
          IamProtos.google.iam.v1.Policy,
          IamProtos.google.iam.v1.SetIamPolicyRequest | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      IamProtos.google.iam.v1.Policy,
      IamProtos.google.iam.v1.SetIamPolicyRequest | null | undefined,
      {} | null | undefined
    >
  ): Promise<[IamProtos.google.iam.v1.Policy]> {
    return this.iamClient.setIamPolicy(request, options, callback);
  }

  /**
   * Returns permissions that a caller has on the specified resource. If the
   * resource does not exist, this will return an empty set of
   * permissions, not a NOT_FOUND error.
   *
   * Note: This operation is designed to be used for building
   * permission-aware UIs and command-line tools, not for authorization
   * checking. This operation may "fail open" without warning.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.resource
   *   REQUIRED: The resource for which the policy detail is being requested.
   *   See the operation documentation for the appropriate value for this field.
   * @param {string[]} request.permissions
   *   The set of permissions to check for the `resource`. Permissions with
   *   wildcards (such as '*' or 'storage.*') are not allowed. For more
   *   information see {@link https://cloud.google.com/iam/docs/overview#permissions | IAM Overview }.
   * @param {Object} [options]
   *   Optional parameters. You can override the default settings for this call, e.g, timeout,
   *   retries, paginations, etc. See {@link https://googleapis.github.io/gax-nodejs/interfaces/CallOptions.html | gax.CallOptions} for the details.
   * @param {function(?Error, ?Object)} [callback]
   *   The function which will be called with the result of the API call.
   *
   *   The second parameter to the callback is an object representing {@link google.iam.v1.TestIamPermissionsResponse | TestIamPermissionsResponse}.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing {@link google.iam.v1.TestIamPermissionsResponse | TestIamPermissionsResponse}.
   *   The promise has a method named "cancel" which cancels the ongoing API call.
   *
   */
  testIamPermissions(
    request: IamProtos.google.iam.v1.TestIamPermissionsRequest,
    options?:
      | gax.CallOptions
      | Callback<
          IamProtos.google.iam.v1.TestIamPermissionsResponse,
          IamProtos.google.iam.v1.TestIamPermissionsRequest | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      IamProtos.google.iam.v1.TestIamPermissionsResponse,
      IamProtos.google.iam.v1.TestIamPermissionsRequest | null | undefined,
      {} | null | undefined
    >
  ): Promise<[IamProtos.google.iam.v1.TestIamPermissionsResponse]> {
    return this.iamClient.testIamPermissions(request, options, callback);
  }

  /**
   * Gets information about a location.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Resource name for the location.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html | CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing {@link google.cloud.location.Location | Location}.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
   *   for more details and examples.
   * @example
   * ```
   * const [response] = await client.getLocation(request);
   * ```
   */
  getLocation(
    request: LocationProtos.google.cloud.location.IGetLocationRequest,
    options?:
      | gax.CallOptions
      | Callback<
          LocationProtos.google.cloud.location.ILocation,
          | LocationProtos.google.cloud.location.IGetLocationRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      LocationProtos.google.cloud.location.ILocation,
      | LocationProtos.google.cloud.location.IGetLocationRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<LocationProtos.google.cloud.location.ILocation> {
    return this.locationsClient.getLocation(request, options, callback);
  }

  /**
   * Lists information about the supported locations for this service. Returns an iterable object.
   *
   * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   The resource that owns the locations collection, if applicable.
   * @param {string} request.filter
   *   The standard list filter.
   * @param {number} request.pageSize
   *   The standard list page size.
   * @param {string} request.pageToken
   *   The standard list page token.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Object}
   *   An iterable Object that allows {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | async iteration }.
   *   When you iterate the returned iterable, each element will be an object representing
   *   {@link google.cloud.location.Location | Location}. The API will be called under the hood as needed, once per the page,
   *   so you can stop the iteration when you don't need more results.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
   *   for more details and examples.
   * @example
   * ```
   * const iterable = client.listLocationsAsync(request);
   * for await (const response of iterable) {
   *   // process response
   * }
   * ```
   */
  listLocationsAsync(
    request: LocationProtos.google.cloud.location.IListLocationsRequest,
    options?: CallOptions
  ): AsyncIterable<LocationProtos.google.cloud.location.ILocation> {
    return this.locationsClient.listLocationsAsync(request, options);
  }

  // --------------------
  // -- Path templates --
  // --------------------

  /**
   * Return a fully-qualified sequence resource name string.
   *
   * @param {string} sequence
   * @returns {string} Resource name string.
   */
  sequencePath(sequence: string) {
    return this.pathTemplates.sequencePathTemplate.render({
      sequence: sequence,
    });
  }

  /**
   * Parse the sequence from Sequence resource.
   *
   * @param {string} sequenceName
   *   A fully-qualified path representing Sequence resource.
   * @returns {string} A string representing the sequence.
   */
  matchSequenceFromSequenceName(sequenceName: string) {
    return this.pathTemplates.sequencePathTemplate.match(sequenceName).sequence;
  }

  /**
   * Return a fully-qualified sequenceReport resource name string.
   *
   * @param {string} sequence
   * @returns {string} Resource name string.
   */
  sequenceReportPath(sequence: string) {
    return this.pathTemplates.sequenceReportPathTemplate.render({
      sequence: sequence,
    });
  }

  /**
   * Parse the sequence from SequenceReport resource.
   *
   * @param {string} sequenceReportName
   *   A fully-qualified path representing SequenceReport resource.
   * @returns {string} A string representing the sequence.
   */
  matchSequenceFromSequenceReportName(sequenceReportName: string) {
    return this.pathTemplates.sequenceReportPathTemplate.match(
      sequenceReportName
    ).sequence;
  }

  /**
   * Return a fully-qualified streamingSequence resource name string.
   *
   * @param {string} streaming_sequence
   * @returns {string} Resource name string.
   */
  streamingSequencePath(streamingSequence: string) {
    return this.pathTemplates.streamingSequencePathTemplate.render({
      streaming_sequence: streamingSequence,
    });
  }

  /**
   * Parse the streaming_sequence from StreamingSequence resource.
   *
   * @param {string} streamingSequenceName
   *   A fully-qualified path representing StreamingSequence resource.
   * @returns {string} A string representing the streaming_sequence.
   */
  matchStreamingSequenceFromStreamingSequenceName(
    streamingSequenceName: string
  ) {
    return this.pathTemplates.streamingSequencePathTemplate.match(
      streamingSequenceName
    ).streaming_sequence;
  }

  /**
   * Return a fully-qualified streamingSequenceReport resource name string.
   *
   * @param {string} streaming_sequence
   * @returns {string} Resource name string.
   */
  streamingSequenceReportPath(streamingSequence: string) {
    return this.pathTemplates.streamingSequenceReportPathTemplate.render({
      streaming_sequence: streamingSequence,
    });
  }

  /**
   * Parse the streaming_sequence from StreamingSequenceReport resource.
   *
   * @param {string} streamingSequenceReportName
   *   A fully-qualified path representing StreamingSequenceReport resource.
   * @returns {string} A string representing the streaming_sequence.
   */
  matchStreamingSequenceFromStreamingSequenceReportName(
    streamingSequenceReportName: string
  ) {
    return this.pathTemplates.streamingSequenceReportPathTemplate.match(
      streamingSequenceReportName
    ).streaming_sequence;
  }

  /**
   * Terminate the gRPC channel and close the client.
   *
   * The client will no longer be usable and all future behavior is undefined.
   * @returns {Promise} A promise that resolves when the client is closed.
   */
  close(): Promise<void> {
    if (this.sequenceServiceStub && !this._terminated) {
      return this.sequenceServiceStub.then(stub => {
        this._terminated = true;
        stub.close();
        this.iamClient.close();
        this.locationsClient.close();
      });
    }
    return Promise.resolve();
  }
}
