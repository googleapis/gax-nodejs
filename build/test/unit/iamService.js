"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
// Copyright 2020 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// ** This file is automatically generated by gapic-generator-typescript. **
// ** https://github.com/googleapis/gapic-generator-typescript **
// ** All changes to this file may be overwritten. **
const protos = require("../../protos/iam_service");
const assert = require("assert");
const sinon = require("sinon");
const mocha_1 = require("mocha");
const iamService_1 = require("../../src/iamService");
const grpc_1 = require("../../src/grpc");
function generateSampleMessage(instance) {
    const filledObject = instance.constructor.toObject(instance, { defaults: true });
    return instance.constructor.fromObject(filledObject);
}
function stubSimpleCall(response, error) {
    return error
        ? sinon.stub().rejects(error)
        : sinon.stub().resolves([response]);
}
function stubSimpleCallWithCallback(response, error) {
    return error
        ? sinon.stub().callsArgWith(2, error)
        : sinon.stub().callsArgWith(2, null, response);
}
(0, mocha_1.describe)('IAM service', () => {
    (0, mocha_1.describe)('getIamPolicy', () => {
        (0, mocha_1.it)('invokes getIamPolicy without error', async () => {
            const grpcClient = new grpc_1.GrpcClient();
            const client = new iamService_1.IamClient(grpcClient, {
                credentials: { client_email: 'bogus', private_key: 'bogus' },
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.iam.v1.GetIamPolicyRequest());
            request.resource = '';
            const expectedHeaderRequestParams = 'resource=';
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.iam.v1.Policy());
            client.innerApiCalls.getIamPolicy = stubSimpleCall(expectedResponse);
            const response = await client.getIamPolicy(request, expectedOptions);
            assert.deepStrictEqual(response, [expectedResponse]);
            assert(client.innerApiCalls.getIamPolicy
                .getCall(0)
                .calledWith(request, expectedOptions, undefined));
        });
        (0, mocha_1.it)('invokes getIamPolicy without error using callback', async () => {
            const grpcClient = new grpc_1.GrpcClient();
            const client = new iamService_1.IamClient(grpcClient, {
                credentials: { client_email: 'bogus', private_key: 'bogus' },
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.iam.v1.GetIamPolicyRequest());
            request.resource = '';
            const expectedHeaderRequestParams = 'resource=';
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.iam.v1.Policy());
            client.innerApiCalls.getIamPolicy =
                stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                client.getIamPolicy(request, expectedOptions, (err, result) => {
                    if (err) {
                        reject(err);
                    }
                    else {
                        resolve(result);
                    }
                });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert(client.innerApiCalls.getIamPolicy
                .getCall(0)
                .calledWith(request, expectedOptions /* callback function above */));
        });
        (0, mocha_1.it)('invokes getIamPolicy with error', async () => {
            const grpcClient = new grpc_1.GrpcClient();
            const client = new iamService_1.IamClient(grpcClient, {
                credentials: { client_email: 'bogus', private_key: 'bogus' },
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.iam.v1.GetIamPolicyRequest());
            request.resource = '';
            const expectedHeaderRequestParams = 'resource=';
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.getIamPolicy = stubSimpleCall(undefined, expectedError);
            await assert.rejects(async () => {
                await client.getIamPolicy(request, expectedOptions);
            }, expectedError);
            assert(client.innerApiCalls.getIamPolicy
                .getCall(0)
                .calledWith(request, expectedOptions, undefined));
        });
    });
    (0, mocha_1.describe)('setIamPolicy', () => {
        (0, mocha_1.it)('invokes setIamPolicy without error', async () => {
            const grpcClient = new grpc_1.GrpcClient();
            const client = new iamService_1.IamClient(grpcClient, {
                credentials: { client_email: 'bogus', private_key: 'bogus' },
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.iam.v1.SetIamPolicyRequest());
            request.resource = '';
            const expectedHeaderRequestParams = 'resource=';
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.iam.v1.Policy());
            client.innerApiCalls.setIamPolicy = stubSimpleCall(expectedResponse);
            const response = await client.setIamPolicy(request, expectedOptions);
            assert.deepStrictEqual(response, [expectedResponse]);
            assert(client.innerApiCalls.setIamPolicy
                .getCall(0)
                .calledWith(request, expectedOptions, undefined));
        });
        (0, mocha_1.it)('invokes setIamPolicy without error using callback', async () => {
            const grpcClient = new grpc_1.GrpcClient();
            const client = new iamService_1.IamClient(grpcClient, {
                credentials: { client_email: 'bogus', private_key: 'bogus' },
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.iam.v1.SetIamPolicyRequest());
            request.resource = '';
            const expectedHeaderRequestParams = 'resource=';
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.iam.v1.Policy());
            client.innerApiCalls.setIamPolicy =
                stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                client.setIamPolicy(request, expectedOptions, (err, result) => {
                    if (err) {
                        reject(err);
                    }
                    else {
                        resolve(result);
                    }
                });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert(client.innerApiCalls.setIamPolicy
                .getCall(0)
                .calledWith(request, expectedOptions /* callback function above */));
        });
        (0, mocha_1.it)('invokes setIamPolicy with error', async () => {
            const grpcClient = new grpc_1.GrpcClient();
            const client = new iamService_1.IamClient(grpcClient, {
                credentials: { client_email: 'bogus', private_key: 'bogus' },
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.iam.v1.SetIamPolicyRequest());
            request.resource = '';
            const expectedHeaderRequestParams = 'resource=';
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.setIamPolicy = stubSimpleCall(undefined, expectedError);
            await assert.rejects(async () => {
                await client.setIamPolicy(request, expectedOptions);
            }, expectedError);
            assert(client.innerApiCalls.setIamPolicy
                .getCall(0)
                .calledWith(request, expectedOptions, undefined));
        });
    });
    (0, mocha_1.describe)('testIamPermissions', () => {
        (0, mocha_1.it)('invokes testIamPermissions without error', async () => {
            const grpcClient = new grpc_1.GrpcClient();
            const client = new iamService_1.IamClient(grpcClient, {
                credentials: { client_email: 'bogus', private_key: 'bogus' },
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.iam.v1.TestIamPermissionsRequest());
            request.resource = '';
            const expectedHeaderRequestParams = 'resource=';
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.iam.v1.TestIamPermissionsResponse());
            client.innerApiCalls.testIamPermissions =
                stubSimpleCall(expectedResponse);
            const response = await client.testIamPermissions(request, expectedOptions);
            assert.deepStrictEqual(response, [expectedResponse]);
            assert(client.innerApiCalls.testIamPermissions
                .getCall(0)
                .calledWith(request, expectedOptions, undefined));
        });
        (0, mocha_1.it)('invokes testIamPermissions without error using callback', async () => {
            const grpcClient = new grpc_1.GrpcClient();
            const client = new iamService_1.IamClient(grpcClient, {
                credentials: { client_email: 'bogus', private_key: 'bogus' },
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.iam.v1.TestIamPermissionsRequest());
            request.resource = '';
            const expectedHeaderRequestParams = 'resource=';
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.iam.v1.TestIamPermissionsResponse());
            client.innerApiCalls.testIamPermissions =
                stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                client.testIamPermissions(request, expectedOptions, (err, result) => {
                    if (err) {
                        reject(err);
                    }
                    else {
                        resolve(result);
                    }
                });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert(client.innerApiCalls.testIamPermissions
                .getCall(0)
                .calledWith(request, expectedOptions /* callback function above */));
        });
        (0, mocha_1.it)('invokes testIamPermissions with error', async () => {
            const grpcClient = new grpc_1.GrpcClient();
            const client = new iamService_1.IamClient(grpcClient, {
                credentials: { client_email: 'bogus', private_key: 'bogus' },
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.iam.v1.TestIamPermissionsRequest());
            request.resource = '';
            const expectedHeaderRequestParams = 'resource=';
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.testIamPermissions = stubSimpleCall(undefined, expectedError);
            await assert.rejects(async () => {
                await client.testIamPermissions(request, expectedOptions);
            }, expectedError);
            assert(client.innerApiCalls.testIamPermissions
                .getCall(0)
                .calledWith(request, expectedOptions, undefined));
        });
    });
});
//# sourceMappingURL=iamService.js.map