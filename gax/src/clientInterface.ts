// Copyright 2020 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// ** This file is automatically generated by gapic-generator-typescript. **
// ** https://github.com/googleapis/gapic-generator-typescript **
// ** All changes to this file may be overwritten. **

import {GrpcClientOptions, ClientStubOptions} from './grpc';
import * as gax from './gax';
import {GoogleAuthOptions} from 'google-auth-library';
import {
  BundleDescriptor,
  LongrunningDescriptor,
  PageDescriptor,
  StreamDescriptor,
} from './descriptor';
import * as longrunning from './longRunningCalls/longrunning';
import * as operationProtos from '../protos/operations';

export interface ClientOptions
  extends GrpcClientOptions,
    GoogleAuthOptions,
    ClientStubOptions {
  /**
   * @deprecated This option is being deprecated because of a potential security risk.
   *
   * This option does not validate the credential configuration. The security
   * risk occurs when a credential configuration is accepted from a source that
   * is not under your control and used without validation on your side.
   *
   * The recommended way to provide credentials is to create an `auth` object
   * using `google-auth-library` and pass it to the client constructor.
   * This will ensure that unexpected credential types with potential for
   * malicious intent are not loaded unintentionally. For example:
   * ```
   * const {GoogleAuth} = require('google-auth-library');
   * const auth = new GoogleAuth({
   *   // Scopes can be specified either as an array or as a single, space-delimited string.
   *   scopes: 'https://www.googleapis.com/auth/cloud-platform'
   * });
   * const client = new MyClient({ auth: auth });
   * ```
   *
   * If you are loading your credential configuration from an untrusted source and have
   * not mitigated the risks (e.g. by validating the configuration yourself), make
   * these changes as soon as possible to prevent security risks to your environment.
   *
   * Regardless of the method used, it is always your responsibility to validate
   * configurations received from external sources.
   *
   * For more details, see https://cloud.google.com/docs/authentication/external/externally-sourced-credentials.
   */
  credentials?: {};
  /**
   * @deprecated This option is being deprecated because of a potential security risk.
   *
   * This option does not validate the credential configuration. The security
   * risk occurs when a credential configuration is accepted from a source that
   * is not under your control and used without validation on your side.
   *
   * The recommended way to provide credentials is to create an `auth` object
   * using `google-auth-library` and pass it to the client constructor.
   * This will ensure that unexpected credential types with potential for
   * malicious intent are not loaded unintentionally. For example:
   * ```
   * const {GoogleAuth} = require('google-auth-library');
   * const auth = new GoogleAuth({
   *   // Scopes can be specified either as an array or as a single, space-delimited string.
   *   scopes: 'https://www.googleapis.com/auth/cloud-platform'
   * });
   * const client = new MyClient({ auth: auth });
   * ```
   *
   * If you are loading your credential configuration from an untrusted source and have
   * not mitigated the risks (e.g. by validating the configuration yourself), make
   * these changes as soon as possible to prevent security risks to your environment.
   *
   * Regardless of the method used, it is always your responsibility to validate
   * configurations received from external sources.
   *
   * For more details, see https://cloud.google.com/docs/authentication/external/externally-sourced-credentials.
   */
  keyFilename?: string;
  libName?: string;
  libVersion?: string;
  clientConfig?: gax.ClientConfig;
  fallback?: boolean | 'rest' | 'proto';
  apiEndpoint?: string;
  gaxServerStreamingRetries?: boolean;
  // We support both camelCase and snake_case for the universe domain.
  // No preference; exception will be thrown if both are set to different values.
  universeDomain?: string;
  universe_domain?: string;
}

export interface Descriptors {
  page: {[name: string]: PageDescriptor};
  stream: {[name: string]: StreamDescriptor};
  longrunning: {[name: string]: LongrunningDescriptor};
  batching?: {[name: string]: BundleDescriptor};
}

export interface Callback<
  ResponseObject,
  NextRequestObject,
  RawResponseObject,
> {
  (
    err: Error | null | undefined,
    value?: ResponseObject | null,
    nextRequest?: NextRequestObject,
    rawResponse?: RawResponseObject,
  ): void;
}

export interface LROperation<ResultType, MetadataType>
  extends longrunning.Operation {
  promise(): Promise<
    [ResultType, MetadataType, operationProtos.google.longrunning.Operation]
  >;
}

export interface PaginationCallback<
  RequestObject,
  ResponseObject,
  ResponseType,
> {
  (
    err: Error | null,
    values?: ResponseType[],
    nextPageRequest?: RequestObject,
    rawResponse?: ResponseObject,
  ): void;
}

export interface PaginationResponse<
  RequestObject,
  ResponseObject,
  ResponseType,
> {
  values?: ResponseType[];
  nextPageRequest?: RequestObject;
  rawResponse?: ResponseObject;
}
