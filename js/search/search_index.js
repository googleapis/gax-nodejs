var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.6","fields":["title","body"],"fieldVectors":[["title/interfaces/APICaller.html",[0,0.167,1,1.795]],["body/interfaces/APICaller.html",[0,0.309,1,3.168,2,0.735,3,0.232,4,0.189,5,0.21,6,4.036,7,1.334,8,5.583,9,0.869,10,5.024,11,5.583,12,1.373,13,2.909,14,5.583,15,2.35,16,2.258,17,3.365,18,1.54,19,1.427,20,0.126,21,1.04,22,0.828,23,3.483,24,4.092,25,0.013,26,3.996,27,3.21,28,1.689,29,1.554,30,1.755,31,0.323,32,1.911,33,4.078,34,4.019,35,0.015,36,4.019,37,4.242,38,1.121,39,5.167,40,1.121,41,0.81,42,0.81,43,2.17,44,0.769,45,1.339,46,3.433,47,3.152,48,1.677,49,1.874,50,5.167,51,3.21,52,4.045,53,0.83,54,1.689,55,5.167,56,2.234,57,3.433,58,5.167,59,2.665,60,3.758,61,3.049,62,5.167,63,2.57,64,0.35,65,2.05,66,1.285,67,3.121,68,1.482,69,0.735,70,3.996,71,3.701,72,4.485,73,0.285,74,0.982,75,1.613,76,0.555,77,4.036,78,0.871,79,0.289,80,0.447,81,4.485,82,0.012,83,0.009]],["title/interfaces/AnyDecoder.html",[0,0.167,84,3.099]],["body/interfaces/AnyDecoder.html",[0,0.252,2,0.851,3,0.269,4,0.218,5,0.243,7,1.543,15,2.184,16,2.098,20,0.146,25,0.011,30,1.431,31,0.243,35,0.015,44,0.61,53,0.833,64,0.353,67,3.187,68,1.619,69,0.851,73,0.286,79,0.269,80,0.517,82,0.013,83,0.011,84,6.213,85,5.189,86,6.098,87,6.098,88,2.813,89,0.68,90,3.493,91,1.866,92,3.493,93,1.855,94,1.228,95,4.201,96,5.031,97,2.973,98,0.07,99,3.299,100,1.136,101,5.343,102,5.343,103,0.548,104,3.971,105,5.189,106,5.189,107,3.713,108,5.189]],["title/interfaces/ApiCallerSettings.html",[0,0.167,52,2.19]],["body/interfaces/ApiCallerSettings.html",[0,0.309,1,3.106,2,0.819,3,0.259,4,0.21,5,0.234,6,4.495,8,4.995,9,0.814,10,4.495,11,4.995,12,1.229,13,2.603,14,4.995,15,2.103,16,2.02,17,3.011,18,1.378,19,1.277,20,0.141,22,0.776,23,2.862,24,3.362,25,0.012,28,1.583,29,1.277,31,0.234,32,1.825,33,3.841,34,3.865,35,0.015,36,3.865,37,4.052,43,1.942,45,1.255,47,3.017,48,1.378,49,1.825,52,4.052,53,0.682,54,1.583,59,2.614,60,3.362,61,2.913,64,0.358,65,2.283,66,1.431,67,3.217,68,1.583,69,0.819,70,4.267,71,4.121,72,4.995,73,0.299,74,1.445,75,2.292,76,0.618,77,4.495,78,0.97,79,0.309,80,0.498,81,4.995,82,0.012,83,0.01,89,0.665]],["title/interfaces/BackoffSettings.html",[0,0.167,109,1.643]],["body/interfaces/BackoffSettings.html",[0,0.248,2,0.594,3,0.093,4,0.076,5,0.25,7,0.534,9,0.836,12,1.197,18,1.256,19,0.926,20,0.162,21,0.848,22,0.763,25,0.004,29,0.459,31,0.25,32,1.753,35,0.015,40,0.833,41,0.357,42,0.726,44,0.34,53,0.394,64,0.093,68,1.412,69,0.474,73,0.287,74,1.4,75,1.304,76,0.726,78,0.561,79,0.339,80,0.603,82,0.006,83,0.004,89,0.404,91,2.315,98,0.039,100,0.794,103,0.438,109,3.193,110,1.028,111,2.608,112,2.372,113,2.608,114,3.41,115,3.3,116,3.3,117,3.145,118,3.3,119,3.3,120,3.464,121,3.464,122,3.047,123,1.28,124,0.895,125,3.001,126,1.082,127,1.082,128,1.082,129,1.577,130,1.77,131,1.082,132,1.014,133,1.655,134,1.028,135,1.438,136,1.255,137,1.805,138,1.078,139,1.409,140,1.028,141,0.856,142,1.028,143,0.645,144,1.082,145,1.406,146,1.082,147,0.698,148,2.504,149,0.691,150,2.646,151,1.514,152,1.741,153,3.332,154,3.105,155,1.889,156,1.377,157,2.38,158,1.028,159,1.56,160,1.641,161,2.807,162,0.869,163,2.504,164,2.372,165,2.504,166,1.913,167,1.082,168,1.805,169,0.671,170,0.962,171,1.075,172,2.537,173,1.082,174,2.792,175,1.082,176,1.256,177,2.184,178,0.554,179,1.377,180,1.384,181,1.082,182,0.621,183,1.266,184,3.145,185,1.839,186,3.047,187,0.787,188,1.355,189,1.355,190,0.755,191,1.748,192,1.526,193,1.728,194,1.741,195,0.652,196,1.082,197,1.028,198,1.741,199,1.741,200,1.741,201,0.98,202,1.082,203,1.082,204,0.495,205,1.377,206,1.655,207,2.38,208,1.655,209,0.873,210,2.997,211,1.082,212,1.082,213,0.98,214,3.047,215,3.057,216,2.576,217,3.3,218,3.362,219,2.534,220,1.77,221,2.861,222,1.004,223,2.787,224,2.787,225,3.362,226,2.134,227,2.077,228,2.548,229,1.644,230,2.93,231,2.32,232,2.194,233,1.082,234,1.439,235,1.655,236,2.548,237,1.406,238,1.981,239,1.655,240,2.077,241,2.077,242,1.655,243,0.671,244,2.267,245,1.439,246,1.377,247,1.082,248,2.608,249,1.354,250,1.978,251,1.741,252,1.741,253,2.164,254,2.239,255,1.741,256,2.504,257,1.805,258,1.741,259,1.741,260,1.494,261,2.267,262,0.787,263,1.08,264,1.741,265,1.741,266,1.741,267,1.741,268,1.082,269,1.266,270,1.741,271,1.978,272,1.082,273,1.082,274,1.082,275,1.082,276,2.267,277,0.98,278,0.534,279,2.932,280,1.292,281,0.906,282,1.292,283,3.3,284,1.082,285,1.741,286,0.935,287,1.655,288,1.655,289,1.577,290,1.216,291,1.082,292,1.266,293,1.655,294,1.082,295,0.82,296,1.439,297,1.082,298,1.028,299,1.082,300,1.082,301,1.655,302,1.082,303,1.028,304,1.741,305,0.755,306,1.216,307,0.797,308,1.741,309,1.082,310,1.741,311,1.028,312,1.655,313,1.741,314,1.741,315,0.608,316,1.741,317,1.741,318,1.028,319,2.184,320,1.741,321,1.082,322,1.741,323,0.98,324,1.741,325,1.028,326,1.123,327,2.184,328,1.233,329,1.208,330,0.98,331,1.32,332,1.082,333,0.726,334,1.082,335,1.082,336,1.082,337,1.082,338,1.082,339,1.082,340,1.082,341,1.082,342,1.028,343,1.589,344,0.909,345,0.827,346,1.082,347,1.082,348,1.082,349,1.082,350,1.082,351,1.082,352,1.082,353,1.082,354,1.082,355,0.98,356,1.082,357,1.082,358,0.787,359,0.495,360,1.028,361,3.047,362,1.028,363,0.935,364,1.028,365,1.577,366,0.98,367,1.082,368,1.082,369,1.082,370,1.028,371,1.028,372,0.98,373,0.892,374,1.028,375,0.459,376,1.988,377,0.569,378,1.082,379,1.082,380,1.082,381,2.787,382,1.655,383,2.077,384,2.077,385,2.077,386,2.077,387,2.077,388,1.082,389,0.621,390,1.082,391,0.927,392,1.082,393,1.082,394,1.351,395,1.082,396,1.082,397,1.082,398,1.082,399,1.082,400,1.082,401,1.741,402,2.047,403,3.076,404,2.239,405,1.216,406,2.184,407,1.702,408,1.839,409,1.466,410,2.184,411,1.981,412,1.082,413,2.504,414,2.077,415,2.787,416,1.494,417,1,418,0.767,419,2.184,420,2.38,421,1.082,422,1.082,423,1.082,424,1.082,425,1.082,426,2.38,427,1.082,428,2.077,429,1.082,430,1.082,431,1.082,432,1.082,433,1.082,434,1.082,435,1.082,436,1.741,437,0.935,438,1.028,439,1.082,440,1.082,441,1.377,442,2.744,443,0.787,444,1.028,445,1.028,446,1.741,447,2.184,448,2.184,449,1.082,450,1.082,451,2.38,452,1.655,453,1.655,454,1.655,455,1.655,456,1.655,457,1.655,458,1.655,459,1.655,460,1.741,461,1.749,462,1.028,463,1.028,464,0.98,465,1.655,466,1.655,467,1.028,468,1.028,469,1.655,470,1.655,471,1.028,472,1.028,473,1.028,474,1.028,475,1.028,476,1.028,477,0.98,478,1.028,479,0.856,480,1.028,481,1.028,482,1.748,483,0.645,484,0.645,485,0.935,486,1.216,487,0.935,488,1.028,489,0.856,490,1.028,491,0.621,492,1.028,493,0.787,494,1.082,495,1.082,496,1.082,497,1.741,498,1.082,499,1.505,500,1.082,501,1.082,502,1.082,503,1.082,504,1.082,505,1.082,506,1.082,507,1.082,508,2.744,509,1.082,510,1.082,511,1.082,512,1.082,513,1.082,514,1.082,515,1.082]],["title/interfaces/Bindings.html",[0,0.167,516,2.636]],["body/interfaces/Bindings.html",[0,0.279,2,0.652,3,0.206,4,0.167,5,0.186,20,0.193,25,0.012,30,1.426,35,0.015,38,0.681,64,0.298,73,0.285,76,0.492,79,0.359,80,0.607,82,0.011,83,0.008,98,0.054,103,0.42,123,1.027,135,1.789,136,1.789,149,0.606,162,1.027,179,3.008,197,0.912,209,0.966,229,1.096,237,1.228,315,1.209,344,0.993,345,1.481,375,1.016,377,0.623,391,1.843,394,0.978,405,1.673,411,1.895,416,1.429,417,1.989,483,1.859,484,1.859,489,1.895,516,5.21,517,2.844,518,3.577,519,4.579,520,3.279,521,4.265,522,3.279,523,3.279,524,3.042,525,3.042,526,4.397,527,4.949,528,4.828,529,3.279,530,3.042,531,2.527,532,3.279,533,3.279,534,1.429,535,4.872,536,3.279,537,3.279,538,3.279,539,3.279,540,3.111,541,3.287,542,4.741,543,3.653,544,4.265,545,4.265,546,3.279,547,3.279,548,3.279,549,3.279,550,5.02,551,3.279,552,2.176,553,4.265,554,4.741,555,5.335,556,4.741,557,5.617,558,4.265,559,4.265,560,4.741,561,2.106,562,3.279,563,3.279,564,4.741,565,4.741,566,3.279,567,3.279,568,5.204,569,4.741,570,2.675,571,3.279,572,4.265,573,2.675,574,3.279,575,3.279,576,3.042,577,3.279,578,3.279,579,4.352,580,5.02,581,3.279,582,3.279,583,3.279,584,3.279,585,3.279,586,3.279,587,3.279,588,3.279,589,3.279,590,3.279,591,3.279,592,3.042,593,1.228,594,2.395,595,3.042,596,5.02,597,3.279,598,3.279]],["title/classes/BundleApiCaller.html",[98,0.046,599,3.099]],["body/classes/BundleApiCaller.html",[1,3.489,3,0.236,4,0.192,5,0.213,7,1.353,12,1.386,18,1.554,20,0.128,21,1.049,22,0.832,23,3.227,24,4.118,25,0.013,26,4.031,27,3.256,28,1.698,29,1.68,30,1.554,31,0.324,32,1.882,33,3.395,34,4.026,35,0.015,36,3.506,38,1.162,40,1.146,41,0.829,42,0.829,43,2.19,44,0.773,45,1.288,46,4.311,48,1.687,49,1.882,51,3.256,52,4.066,53,0.914,54,1.698,56,2.267,57,4.311,60,3.792,61,3.06,63,3.227,64,0.351,66,1.303,68,1.698,69,0.746,73,0.213,79,0.34,80,0.61,82,0.012,83,0.009,89,0.628,98,0.061,100,1.233,103,0.48,184,2.607,185,2.026,323,2.484,391,1.46,418,1.698,599,5.069,600,1.353,601,5.242,602,5.633,603,4.311,604,5.291,605,7.571,606,6.489,607,6.489,608,5.242,609,5.242,610,5.242,611,5.242,612,5.242,613,3.395,614,2.742,615,5.242,616,3.754,617,3.754,618,5.242,619,3.483,620,5.242,621,5.242,622,3.754,623,4.095]],["title/classes/BundleDescriptor.html",[98,0.046,624,1.795]],["body/classes/BundleDescriptor.html",[3,0.216,4,0.175,5,0.195,7,1.584,12,1.31,18,1.858,20,0.117,21,0.992,22,0.805,25,0.009,31,0.307,32,1.192,35,0.015,38,1.121,40,0.912,41,0.659,42,0.766,44,0.489,64,0.331,67,3.122,68,1.644,69,0.682,70,3.811,71,3.433,73,0.195,76,0.859,79,0.276,80,0.586,82,0.011,83,0.009,88,2.755,89,0.594,91,2.227,98,0.079,100,1.166,103,0.62,107,3.811,124,0.852,132,1.105,149,0.562,162,0.743,171,1.323,176,1.469,183,2.335,185,1.915,197,0.928,209,0.974,222,1.011,248,3.051,249,2.004,254,2.242,296,2.653,298,3.051,323,2.272,389,1.44,491,2.143,534,1.915,599,5.285,600,1.238,603,4.076,604,4.076,624,2.775,625,4.794,626,3.051,627,4.062,628,7.955,629,7.955,630,4.969,631,4.076,632,4.794,633,6.135,634,6.135,635,3.051,636,5.325,637,5.325,638,5.325,639,4.394,640,3.936,641,6.135,642,5.325,643,6.135,644,4.076,645,6.135,646,7.541,647,5.325,648,4.792,649,4.076,650,6.135,651,6.135,652,4.394,653,3.731,654,3.936,655,6.135,656,2.907,657,6.135,658,6.135,659,6.135,660,6.135,661,6.135,662,3.386,663,6.135,664,6.135,665,3.386,666,6.135,667,4.794,668,4.794,669,4.794,670,4.794,671,4.794,672,4.794,673,4.794,674,4.794,675,4.794]],["title/classes/BundleExecutor.html",[98,0.046,604,2.636]],["body/classes/BundleExecutor.html",[0,0.157,3,0.168,4,0.136,5,0.152,7,1.812,9,0.765,12,1.109,18,1.68,20,0.166,21,0.839,22,0.793,25,0.007,28,1.487,30,1.623,31,0.318,35,0.015,38,1.108,40,0.887,41,0.641,42,0.641,43,2.288,44,0.53,45,0.682,49,1.291,53,0.904,54,0.86,56,1.614,64,0.324,66,0.928,73,0.211,76,0.773,78,0.875,79,0.335,80,0.587,82,0.009,83,0.007,88,2.181,89,0.502,98,0.044,103,0.547,123,1.138,125,3.45,136,1.56,138,1.34,149,0.547,150,1.822,170,1.501,176,0.894,185,2.014,195,0.878,197,0.956,209,0.925,216,1.897,222,1.026,226,1.752,237,1.001,244,1.769,249,1.541,250,1.769,253,2.348,254,2.682,261,1.769,262,1.421,271,1.769,276,1.769,277,2.46,307,1.243,328,0.875,329,1.501,330,1.769,344,0.98,355,3.325,363,2.348,377,0.923,394,1.666,409,1.31,418,0.86,487,2.348,593,1.392,600,0.964,603,3.449,604,4.285,613,3.547,614,4.105,624,3.506,627,1.953,640,2.06,648,2.916,676,2.916,677,2.716,678,4.506,679,4.506,680,4.663,681,5.039,682,4.506,683,3.478,684,4.506,685,5.599,686,4.506,687,3.225,688,4.506,689,4.506,690,4.506,691,5.18,692,5.18,693,5.18,694,5.18,695,5.18,696,5.18,697,5.191,698,5.885,699,3.733,700,5.191,701,4.506,702,4.506,703,3.718,704,4.506,705,2.46,706,3.733,707,3.733,708,3.733,709,3.733,710,3.733,711,4.506,712,3.733,713,3.225,714,6.773,715,3.733,716,3.733,717,4.506,718,3.718,719,1.938,720,5.18,721,4.055,722,1.122,723,1.08,724,4.274,725,2.916,726,4.055,727,3.241,728,4.662,729,3.241,730,3.241,731,3.241,732,5.599,733,5.18,734,4.506,735,3.241,736,4.506,737,3.241,738,3.241,739,4.506,740,4.506,741,4.506,742,3.241,743,4.055,744,4.506,745,3.241,746,1.953,747,5.18,748,6.372,749,4.506,750,3.241,751,3.241,752,3.241,753,5.885,754,3.241,755,6.092,756,2.48,757,3.241,758,3.241,759,6.249,760,4.506,761,5.885,762,4.506,763,4.506,764,2.319,765,3.241,766,2.181,767,3.241,768,2.674,769,4.506,770,4.506,771,4.506,772,4.506,773,5.18,774,3.241,775,5.18,776,3.241,777,5.18,778,3.241,779,5.18,780,3.241,781,4.506,782,5.599,783,2.674,784,3.241,785,2.48,786,3.241,787,3.241,788,3.241,789,3.241,790,3.241,791,1.769,792,2.149,793,3.241,794,5.18,795,3.241,796,4.506,797,3.241,798,1.26,799,3.241]],["title/interfaces/BundleOptions.html",[0,0.167,125,1.795]],["body/interfaces/BundleOptions.html",[0,0.17,2,0.574,3,0.181,4,0.147,5,0.164,7,1.042,9,0.649,12,0.862,18,1.488,20,0.17,22,0.702,25,0.007,28,1.262,31,0.284,35,0.015,43,2.249,49,1.361,53,0.887,54,0.93,64,0.33,66,1.003,73,0.223,76,0.749,78,0.923,79,0.341,80,0.577,82,0.01,83,0.007,88,2.271,89,0.53,98,0.047,103,0.502,123,1.24,125,3.382,136,1.212,138,1.042,149,0.502,150,1.922,170,1.167,176,0.966,185,1.941,195,0.746,197,0.973,209,0.924,216,1.474,222,1.015,226,1.362,237,1.082,244,3.158,249,1.414,250,3.158,253,2.477,254,2.436,261,3.158,262,1.536,271,3.158,276,3.158,277,1.912,307,0.966,328,0.68,329,1.167,330,1.912,344,0.99,355,3.405,363,1.825,377,0.949,394,1.685,409,1.416,418,0.93,487,1.825,593,1.468,603,2.681,604,3.638,613,3.252,614,4.105,624,3.382,627,2.111,640,2.227,648,3.152,676,3.152,677,2.111,678,3.503,679,3.503,680,4.129,681,4.277,682,3.503,683,3.405,684,3.503,685,4.753,686,3.503,687,2.507,688,3.503,689,3.503,690,3.503,691,3.503,692,3.503,693,3.503,694,3.503,695,3.503,696,3.503,698,4.753,701,3.503,702,3.503,703,2.89,704,3.503,705,1.912,711,3.503,713,2.507,714,6.811,717,3.503,718,2.89,719,1.868,720,4.753,721,3.152,722,1.212,723,1.167,724,4.452,725,3.152,726,4.277,727,3.503,728,4.855,729,3.503,730,3.503,731,3.503,732,5.786,733,5.395,734,4.753,735,3.503,736,4.753,737,3.503,738,3.503,739,4.753,740,4.753,741,4.753,742,3.503,743,4.277,744,4.753,745,3.503,746,2.111,747,5.395,748,6.492,749,4.753,750,3.503,751,3.503,752,3.503,753,6.049,754,3.503,755,6.238,756,2.681,757,3.503,758,3.503,759,6.38,760,4.753,761,6.049,762,4.753,763,4.753,764,2.507,765,3.503,766,2.357,767,3.503,768,2.89,769,4.753,770,4.753,771,4.753,772,4.753,773,5.395,774,3.503,775,5.395,776,3.503,777,5.395,778,3.503,779,5.395,780,3.503,781,4.753,782,5.786,783,2.89,784,3.503,785,2.681,786,3.503,787,3.503,788,3.503,789,3.503,790,3.503,791,1.912,792,2.267,793,3.503,794,5.395,795,3.503,796,4.753,797,3.503,798,1.362,799,3.503]],["title/interfaces/BundlingConfig.html",[0,0.167,381,1.973]],["body/interfaces/BundlingConfig.html",[0,0.25,2,0.6,3,0.094,4,0.077,5,0.251,9,0.838,12,1.204,18,1.264,19,0.935,20,0.166,21,0.854,22,0.766,25,0.004,29,0.465,31,0.215,32,1.758,35,0.015,38,0.311,40,0.785,41,0.361,42,0.361,44,0.343,53,0.399,64,0.094,68,1.419,69,0.479,73,0.288,74,1.404,75,1.315,76,0.729,78,0.567,79,0.34,80,0.605,82,0.006,83,0.004,89,0.408,91,2.32,98,0.039,100,0.801,103,0.442,109,3.189,110,1.042,111,2.398,112,2.181,113,2.398,114,3.387,115,3.063,116,3.063,117,2.804,118,3.063,119,3.063,120,3.313,121,3.313,122,2.626,123,1.279,124,0.882,125,3.013,126,1.096,127,1.096,128,1.096,129,1.594,130,1.78,131,1.096,132,1.017,133,1.673,134,1.042,135,1.449,136,1.266,137,1.822,138,1.088,139,1.422,140,1.042,141,0.868,142,1.042,143,0.654,144,1.096,145,1.416,146,1.096,147,0.707,148,2.523,149,0.692,150,2.651,151,1.521,152,1.76,153,3.34,154,3.111,155,1.906,156,1.392,157,2.398,158,1.042,159,1.57,160,1.65,161,2.819,162,0.874,163,2.523,164,2.388,165,2.523,166,1.923,167,1.096,168,1.822,169,0.68,170,0.973,171,1.081,172,2.549,173,1.096,174,2.807,175,1.096,176,1.264,177,2.204,178,0.562,179,1.392,180,1.395,181,1.096,182,0.63,183,1.28,184,3.16,185,1.849,186,3.063,187,0.798,188,1.367,189,1.367,190,0.766,191,1.762,192,1.54,193,1.744,194,1.76,195,0.657,196,1.096,197,1.03,198,1.76,199,1.76,200,1.76,201,0.993,202,1.096,203,1.096,204,0.502,205,1.392,206,1.673,207,2.398,208,1.673,209,0.881,210,3.011,211,1.096,212,1.096,213,0.993,214,3.063,215,3.069,216,2.584,217,3.313,218,3.374,219,2.55,220,1.78,221,2.874,222,1.006,223,2.804,224,2.804,225,3.374,226,2.144,227,2.095,228,2.562,229,1.65,230,2.946,231,2.334,232,2.202,233,1.096,234,1.455,235,1.673,236,2.562,237,1.416,238,1.996,239,1.673,240,2.095,241,2.095,242,1.673,243,0.68,244,2.285,245,1.455,246,1.392,247,1.096,248,2.626,249,1.363,250,1.996,251,1.76,252,1.76,253,2.181,254,2.25,255,1.76,256,2.523,257,1.822,258,1.76,259,1.76,260,1.506,261,2.285,262,0.798,263,1.092,264,1.76,265,1.76,266,1.76,267,1.76,268,1.096,269,1.28,270,1.76,271,1.996,272,1.096,273,1.096,274,1.096,275,1.096,276,2.285,277,0.993,278,0.541,279,2.95,280,1.299,281,0.912,282,1.299,283,3.313,284,1.096,285,1.76,286,0.948,287,1.673,288,1.673,289,1.594,290,1.229,291,1.096,292,1.28,293,1.673,294,1.096,295,0.831,296,1.455,297,1.096,298,1.042,299,1.096,300,1.096,301,1.673,302,1.096,303,1.042,304,1.76,305,0.766,306,1.229,307,0.805,308,1.76,309,1.096,310,1.76,311,1.042,312,1.673,313,1.76,314,1.76,315,0.614,316,1.76,317,1.76,318,1.042,319,2.204,320,1.76,321,1.096,322,1.76,323,0.993,324,1.76,325,1.042,326,1.135,327,2.204,328,1.236,329,1.219,330,0.993,331,1.334,332,1.096,333,0.736,334,1.096,335,1.096,336,1.096,337,1.096,338,1.096,339,1.096,340,1.096,341,1.096,342,1.042,343,1.604,344,0.912,345,0.836,346,1.096,347,1.096,348,1.096,349,1.096,350,1.096,351,1.096,352,1.096,353,1.096,354,1.096,355,0.993,356,1.096,357,1.096,358,0.798,359,0.502,360,1.042,361,3.063,362,1.042,363,0.948,364,1.042,365,1.594,366,0.993,367,1.096,368,1.096,369,1.096,370,1.042,371,1.042,372,0.993,373,0.902,374,1.042,375,0.465,376,1.999,377,0.574,378,1.096,379,1.096,380,1.096,381,2.946,382,1.673,383,2.804,384,2.804,385,2.804,386,2.804,387,2.804,388,1.096,389,0.63,390,1.096,391,0.937,392,1.096,393,1.096,394,1.357,395,1.096,396,1.096,397,1.096,398,1.096,399,1.096,400,1.096,401,1.76,402,2.06,403,3.089,404,2.25,405,1.229,406,2.204,407,1.714,408,1.849,409,1.479,410,2.204,411,1.996,412,1.096,413,2.523,414,2.095,415,2.804,416,1.506,417,1.011,418,0.775,419,2.204,420,2.398,421,1.096,422,1.096,423,1.096,424,1.096,425,1.096,426,2.398,427,1.096,428,2.095,429,1.096,430,1.096,431,1.096,432,1.096,433,1.096,434,1.096,435,1.096,436,1.76,437,0.948,438,1.042,439,1.096,440,1.096,441,1.392,442,2.763,443,0.798,444,1.042,445,1.042,446,1.76,447,2.204,448,2.204,449,1.096,450,1.096,451,2.398,452,1.673,453,1.673,454,1.673,455,1.673,456,1.673,457,1.673,458,1.673,459,1.673,460,1.76,461,1.76,462,1.042,463,1.042,464,0.993,465,1.673,466,1.673,467,1.042,468,1.042,469,1.673,470,1.673,471,1.042,472,1.042,473,1.042,474,1.042,475,1.042,476,1.042,477,0.993,478,1.042,479,0.868,480,1.042,481,1.042,482,1.762,483,0.654,484,0.654,485,0.948,486,1.229,487,0.948,488,1.042,489,0.868,490,1.042,491,0.63,492,1.042,493,0.798,494,1.096,495,1.096,496,1.096,497,1.76,498,1.096,499,1.521,500,1.096,501,1.096,502,1.096,503,1.096,504,1.096,505,1.096,506,1.096,507,1.096,508,2.763,509,1.096,510,1.096,511,1.096,512,1.096,513,1.096,514,1.096,515,1.096,518,1.637,800,2.096]],["title/interfaces/CallOptions.html",[0,0.167,130,1.192]],["body/interfaces/CallOptions.html",[0,0.247,2,0.59,3,0.092,4,0.075,5,0.249,7,0.529,9,0.834,12,1.191,18,1.249,19,0.92,20,0.162,21,0.844,22,0.761,25,0.004,29,0.454,30,0.79,31,0.283,32,1.749,35,0.015,40,0.776,41,0.355,42,0.816,44,0.337,53,0.391,64,0.092,68,1.407,69,0.47,73,0.286,74,1.423,75,1.629,76,0.724,78,0.556,79,0.338,80,0.601,82,0.006,83,0.004,89,0.401,91,2.311,98,0.039,100,0.788,103,0.436,109,3.199,110,1.018,111,2.366,112,2.152,113,2.366,114,3.37,115,3.036,116,3.036,117,3.135,118,3.036,119,3.036,120,3.29,121,3.29,122,2.595,123,1.276,124,0.888,125,3.217,126,1.071,127,1.071,128,1.071,129,1.564,130,1.834,131,1.071,132,1.012,133,2.063,134,1.018,135,1.429,136,1.246,137,1.793,138,1.071,139,1.399,140,1.018,141,0.847,142,1.018,143,0.639,144,1.071,145,1.399,146,1.071,147,0.691,148,2.489,149,0.69,150,2.676,151,1.509,152,1.727,153,3.368,154,3.143,155,1.876,156,1.366,157,2.366,158,1.018,159,1.553,160,1.842,161,2.963,162,0.865,163,2.489,164,2.36,165,2.489,166,1.906,167,1.071,168,1.793,169,0.664,170,0.955,171,1.071,172,2.739,173,1.071,174,3.066,175,1.071,176,1.249,177,2.17,178,0.549,179,1.366,180,1.376,181,1.071,182,0.615,183,1.256,184,3.353,185,1.906,186,3.29,187,0.779,188,1.346,189,1.346,190,0.748,191,1.738,192,1.515,193,1.717,194,1.727,195,0.648,196,1.071,197,1.027,198,1.727,199,1.727,200,1.727,201,0.97,202,1.071,203,1.071,204,0.49,205,1.366,206,1.642,207,2.366,208,1.642,209,0.883,210,2.987,211,1.071,212,1.071,213,0.97,214,3.036,215,3.049,216,2.57,217,3.29,218,3.353,219,2.523,220,1.763,221,2.851,222,1.003,223,2.774,224,2.774,225,3.353,226,2.127,227,2.063,228,2.537,229,1.64,230,2.918,231,2.309,232,2.223,233,1.071,234,1.427,235,1.642,236,2.537,237,1.399,238,1.969,239,1.642,240,2.063,241,2.063,242,1.642,243,1.071,244,2.254,245,1.427,246,1.366,247,1.071,248,2.595,249,1.347,250,1.965,251,1.727,252,1.727,253,2.152,254,2.231,255,1.727,256,2.489,257,1.793,258,1.727,259,1.727,260,1.485,261,2.254,262,0.779,263,1.071,264,1.727,265,1.727,266,1.727,267,1.727,268,1.071,269,1.256,270,1.727,271,1.965,272,1.071,273,1.071,274,1.071,275,1.071,276,2.254,277,0.97,278,0.529,279,3.298,280,1.286,281,0.902,282,1.286,283,3.456,284,1.071,285,1.727,286,0.926,287,1.642,288,1.642,289,1.564,290,1.206,291,1.071,292,1.256,293,1.642,294,1.071,295,0.812,296,1.427,297,1.071,298,1.018,299,1.071,300,1.071,301,1.642,302,1.071,303,1.018,304,1.727,305,0.748,306,1.206,307,0.79,308,1.727,309,1.071,310,1.727,311,1.018,312,1.642,313,1.727,314,1.727,315,0.603,316,1.727,317,1.727,318,1.018,319,2.17,320,1.727,321,1.071,322,1.727,323,0.97,324,1.727,325,1.018,326,1.114,327,2.17,328,1.23,329,1.2,330,0.97,331,1.31,332,1.071,333,0.719,334,1.071,335,1.071,336,1.071,337,1.071,338,1.071,339,1.071,340,1.071,341,1.071,342,1.018,343,1.578,344,0.908,345,0.821,346,1.071,347,1.071,348,1.071,349,1.071,350,1.071,351,1.071,352,1.071,353,1.071,354,1.071,355,0.97,356,1.071,357,1.071,358,0.779,359,0.49,360,1.018,361,3.036,362,1.018,363,0.926,364,1.018,365,1.564,366,0.97,367,1.071,368,1.071,369,1.071,370,1.018,371,1.018,372,0.97,373,0.885,374,1.018,375,0.454,376,1.98,377,0.565,378,1.071,379,1.071,380,1.071,381,2.774,382,1.642,383,2.063,384,2.063,385,2.063,386,2.063,387,2.063,388,1.071,389,0.615,390,1.071,391,0.919,392,1.071,393,1.071,394,1.346,395,1.071,396,1.071,397,1.071,398,1.071,399,1.071,400,1.071,401,1.727,402,2.038,403,3.066,404,2.231,405,1.206,406,2.17,407,1.693,408,1.832,409,1.456,410,2.17,411,1.969,412,1.071,413,2.489,414,2.063,415,2.774,416,1.485,417,0.992,418,0.761,419,2.17,420,2.366,421,1.071,422,1.071,423,1.071,424,1.071,425,1.071,426,2.366,427,1.071,428,2.063,429,1.071,430,1.071,431,1.071,432,1.071,433,1.071,434,1.071,435,1.071,436,1.727,437,0.926,438,1.018,439,1.071,440,1.071,441,1.366,442,2.73,443,0.779,444,1.018,445,1.018,446,1.727,447,2.17,448,2.17,449,1.071,450,1.071,451,2.366,452,1.642,453,1.642,454,1.642,455,1.642,456,1.642,457,1.642,458,1.642,459,1.642,460,1.727,461,1.742,462,1.018,463,1.018,464,0.97,465,1.642,466,1.642,467,1.018,468,1.018,469,1.642,470,1.642,471,1.018,472,1.018,473,1.018,474,1.018,475,1.018,476,1.018,477,0.97,478,1.018,479,0.847,480,1.018,481,1.018,482,1.738,483,0.639,484,0.639,485,0.926,486,1.206,487,0.926,488,1.018,489,0.847,490,1.018,491,0.615,492,1.018,493,0.779,494,1.071,495,1.071,496,1.071,497,1.727,498,1.071,499,1.493,500,1.071,501,1.071,502,1.071,503,1.071,504,1.071,505,1.071,506,1.071,507,1.071,508,2.73,509,1.071,510,1.071,511,1.071,512,1.071,513,1.071,514,1.071,515,1.071]],["title/classes/CallSettings.html",[68,0.915,98,0.046]],["body/classes/CallSettings.html",[0,0.246,2,0.466,3,0.091,4,0.074,5,0.248,7,0.845,9,0.832,12,1.186,18,1.243,19,0.914,20,0.161,21,0.945,22,0.759,25,0.004,29,0.45,30,0.485,31,0.282,32,1.782,35,0.015,38,1.016,40,0.904,41,0.508,42,0.777,44,0.53,53,0.388,56,1.416,64,0.091,68,1.55,69,0.466,73,0.286,74,1.413,75,1.477,76,0.722,78,0.552,79,0.338,80,0.608,82,0.006,83,0.004,89,0.399,91,2.307,98,0.038,100,0.783,103,0.476,109,3.186,110,1.008,111,2.353,112,2.14,113,2.353,114,3.363,115,3.025,116,3.025,117,2.762,118,3.025,119,3.025,120,3.281,121,3.281,122,2.582,123,1.273,124,0.889,125,3.135,126,1.061,127,1.061,128,1.061,129,1.552,130,2.02,131,1.061,132,1.01,133,1.629,134,1.008,135,1.421,136,1.421,137,2.046,138,1.064,139,1.39,140,1.008,141,0.839,142,1.008,143,0.633,144,1.061,145,1.392,146,1.061,147,0.684,148,2.475,149,0.7,150,2.662,151,1.504,152,1.713,153,3.342,154,3.125,155,1.863,156,1.356,157,2.353,158,1.008,159,1.546,160,1.749,161,2.907,162,0.861,163,2.475,164,2.348,165,2.475,166,1.899,167,1.061,168,1.782,169,0.658,170,0.947,171,1.067,172,2.671,173,1.061,174,2.977,175,1.061,176,1.243,177,2.155,178,0.544,179,1.356,180,1.368,181,1.061,182,0.609,183,1.246,184,3.281,185,1.824,186,3.208,187,0.771,188,1.337,189,1.337,190,0.741,191,1.728,192,1.505,193,1.705,194,1.713,195,0.644,196,1.061,197,1.026,198,1.713,199,1.713,200,1.713,201,0.96,202,1.061,203,1.061,204,0.485,205,1.356,206,1.629,207,2.353,208,1.629,209,0.876,210,2.977,211,1.061,212,1.061,213,0.96,214,3.025,215,3.041,216,2.564,217,3.281,218,3.344,219,2.512,220,1.756,221,2.841,222,1.002,223,2.762,224,2.762,225,3.344,226,2.12,227,2.049,228,2.527,229,1.636,230,2.906,231,2.299,232,2.182,233,1.061,234,1.416,235,1.629,236,2.527,237,1.392,238,1.958,239,1.629,240,2.049,241,2.049,242,1.629,243,0.658,244,2.241,245,1.416,246,1.356,247,1.061,248,2.582,249,1.341,250,1.952,251,1.713,252,1.713,253,2.14,254,2.222,255,1.713,256,2.475,257,1.782,258,1.713,259,1.713,260,1.477,261,2.241,262,0.771,263,1.063,264,1.713,265,1.713,266,1.713,267,1.713,268,1.061,269,1.246,270,1.713,271,1.952,272,1.061,273,1.061,274,1.061,275,1.061,276,2.241,277,0.96,278,0.523,279,3.182,280,1.28,281,0.898,282,1.28,283,3.399,284,1.713,285,1.713,286,0.917,287,1.629,288,1.629,289,1.552,290,1.196,291,1.061,292,1.246,293,1.629,294,1.061,295,0.804,296,1.416,297,1.061,298,1.008,299,1.061,300,1.061,301,1.629,302,1.061,303,1.008,304,1.713,305,0.741,306,1.196,307,0.784,308,1.713,309,1.713,310,1.713,311,1.008,312,1.629,313,1.713,314,1.713,315,0.598,316,1.713,317,1.713,318,1.008,319,2.155,320,1.713,321,1.061,322,1.713,323,0.96,324,1.713,325,1.008,326,1.105,327,2.716,328,1.237,329,1.502,330,1.552,331,1.634,332,2.475,333,1.149,334,1.713,335,1.061,336,1.061,337,1.061,338,1.061,339,1.061,340,1.061,341,1.061,342,1.008,343,1.568,344,0.906,345,0.814,346,1.061,347,1.061,348,1.061,349,1.061,350,1.061,351,1.061,352,1.061,353,1.061,354,1.061,355,0.96,356,1.061,357,1.061,358,0.771,359,0.485,360,1.008,361,3.025,362,1.008,363,0.917,364,1.008,365,1.552,366,0.96,367,1.061,368,1.061,369,1.061,370,1.008,371,1.008,372,0.96,373,0.878,374,1.008,375,0.45,376,1.972,377,0.561,378,1.061,379,1.061,380,1.061,381,2.762,382,1.629,383,2.049,384,2.049,385,2.049,386,2.049,387,2.049,388,1.061,389,0.609,390,1.061,391,0.912,392,1.061,393,1.061,394,1.341,395,1.061,396,1.061,397,1.061,398,1.061,399,1.061,400,1.061,401,1.713,402,2.029,403,3.057,404,2.222,405,1.196,406,2.155,407,1.685,408,1.824,409,1.446,410,2.155,411,1.958,412,1.061,413,2.475,414,2.049,415,2.762,416,1.477,417,0.984,418,0.755,419,2.155,420,2.353,421,1.061,422,1.061,423,1.061,424,1.061,425,1.061,426,2.353,427,1.061,428,2.049,429,1.061,430,1.061,431,1.061,432,1.061,433,1.061,434,1.061,435,1.061,436,1.713,437,0.917,438,1.008,439,1.061,440,1.061,441,1.356,442,2.716,443,0.771,444,1.008,445,1.008,446,1.713,447,2.155,448,2.155,449,1.061,450,1.061,451,2.353,452,1.629,453,1.629,454,1.629,455,1.629,456,1.629,457,1.629,458,1.629,459,1.629,460,1.713,461,1.734,462,1.008,463,1.008,464,0.96,465,1.629,466,1.629,467,1.008,468,1.008,469,1.629,470,1.629,471,1.008,472,1.008,473,1.008,474,1.008,475,1.008,476,1.008,477,0.96,478,1.008,479,0.839,480,1.008,481,1.008,482,1.728,483,0.633,484,0.633,485,0.917,486,1.196,487,0.917,488,1.008,489,0.839,490,1.008,491,0.609,492,1.008,493,0.771,494,1.061,495,1.061,496,1.061,497,1.713,498,1.061,499,1.481,500,1.061,501,1.061,502,1.061,503,1.061,504,1.061,505,1.061,506,1.061,507,1.061,508,2.716,509,1.061,510,1.061,511,1.061,512,1.061,513,1.061,514,1.061,515,1.061,600,0.523,801,3.275,802,2.027,803,2.027,804,2.027,805,2.027,806,2.027,807,2.027,808,2.027,809,2.027,810,2.027,811,2.027,812,2.027]],["title/interfaces/CancellablePromise.html",[0,0.167,59,1.51]],["body/interfaces/CancellablePromise.html",[0,0.216,2,0.731,3,0.231,4,0.188,5,0.209,9,0.892,12,1.491,20,0.125,21,1.036,22,0.826,25,0.012,28,1.61,29,1.421,33,2.686,34,2.553,35,0.015,36,3.473,38,0.952,41,0.552,44,0.524,45,1.375,48,1.534,49,1.736,53,0.923,54,1.734,59,2.783,63,2.553,64,0.314,65,2.037,66,1.276,73,0.284,74,1.495,75,1.603,76,0.786,78,0.865,79,0.288,80,0.604,82,0.012,83,0.009,91,1.603,98,0.075,100,0.976,103,0.64,124,0.724,132,0.731,149,0.587,160,1.43,162,0.796,170,1.853,171,1.225,178,1.377,188,1.666,189,1.666,197,0.952,222,0.668,237,1.718,280,1.477,281,1.182,282,1.477,315,1.17,326,1.732,344,0.796,377,0.872,391,1.43,418,1.183,719,2.261,722,1.543,723,1.485,766,3,791,2.433,813,4.01,814,2.098,815,5.134,816,2.898,817,3.035,818,3.035,819,3.035,820,4.01,821,2.834,822,3,823,3.189,824,3.189,825,3.98,826,4.01,827,5.004,828,5.878,829,2.22,830,5.455,831,4.01,832,4.01,833,4.01,834,4.01,835,4.01,836,4.01,837,3.352,838,4.01,839,4.01,840,4.01,841,4.01,842,3.677,843,3.411,844,2.22,845,4.01,846,3.411,847,3.411,848,3.411,849,2.438,850,4.01,851,4.01,852,4.01,853,4.01,854,4.01]],["title/interfaces/ClientConfig.html",[0,0.167,461,1.239]],["body/interfaces/ClientConfig.html",[0,0.25,2,0.806,3,0.095,4,0.077,5,0.252,9,0.84,12,1.209,18,1.27,19,0.94,20,0.163,21,0.858,22,0.768,25,0.004,29,0.469,30,0.811,31,0.173,32,1.762,35,0.015,40,0.788,41,0.364,42,0.521,44,0.346,53,0.402,64,0.095,68,1.424,69,0.482,73,0.289,74,1.406,75,1.323,76,0.731,78,0.571,79,0.34,80,0.606,82,0.006,83,0.004,89,0.41,91,2.324,98,0.04,100,0.805,103,0.444,109,3.192,110,1.051,111,2.411,112,2.192,113,2.411,114,3.393,115,3.072,116,3.072,117,2.815,118,3.072,119,3.072,120,3.321,121,3.321,122,2.638,123,1.274,124,0.883,125,3.02,126,1.106,127,1.106,128,1.106,129,1.605,130,1.786,131,1.106,132,1.019,133,1.685,134,1.051,135,1.456,136,1.273,137,1.833,138,1.094,139,1.43,140,1.051,141,0.875,142,1.051,143,0.66,144,1.106,145,1.422,146,1.106,147,0.713,148,2.536,149,0.693,150,2.655,151,1.526,152,1.772,153,3.345,154,3.115,155,1.917,156,1.402,157,2.411,158,1.051,159,1.576,160,1.655,161,2.827,162,0.878,163,2.536,164,2.399,165,2.536,166,1.929,167,1.106,168,1.833,169,0.686,170,0.98,171,1.084,172,2.557,173,1.106,174,2.817,175,1.106,176,1.27,177,2.217,178,0.567,179,1.402,180,1.402,181,1.106,182,0.635,183,1.289,184,3.169,185,1.856,186,3.072,187,0.805,188,1.375,189,1.375,190,0.772,191,1.771,192,1.549,193,1.754,194,1.772,195,0.66,196,1.106,197,1.031,198,1.772,199,1.772,200,1.772,201,1.002,202,1.106,203,1.106,204,0.506,205,1.402,206,1.685,207,2.411,208,1.685,209,0.877,210,3.019,211,1.106,212,1.106,213,1.002,214,3.072,215,3.076,216,2.589,217,3.321,218,3.382,219,2.56,220,1.786,221,2.882,222,1.007,223,2.815,224,2.815,225,3.382,226,2.15,227,2.108,228,2.571,229,1.654,230,2.956,231,2.343,232,2.207,233,1.106,234,1.465,235,1.685,236,2.571,237,1.422,238,2.006,239,1.685,240,2.108,241,2.108,242,1.685,243,0.686,244,2.297,245,1.465,246,1.402,247,1.106,248,2.638,249,1.369,250,2.008,251,1.772,252,1.772,253,2.192,254,2.257,255,1.772,256,2.536,257,1.833,258,1.772,259,1.772,260,1.513,261,2.297,262,0.805,263,1.099,264,1.772,265,1.772,266,1.772,267,1.772,268,1.106,269,1.289,270,1.772,271,2.008,272,1.106,273,1.106,274,1.106,275,1.106,276,2.297,277,1.002,278,0.546,279,2.961,280,1.305,281,0.915,282,1.305,283,3.321,284,1.106,285,1.772,286,0.956,287,1.685,288,1.685,289,1.605,290,1.238,291,1.106,292,1.289,293,1.685,294,1.106,295,0.839,296,1.465,297,1.106,298,1.051,299,1.106,300,1.106,301,1.685,302,1.106,303,1.051,304,1.772,305,0.772,306,1.238,307,0.811,308,1.772,309,1.106,310,1.772,311,1.051,312,1.685,313,1.772,314,1.772,315,0.619,316,1.772,317,1.772,318,1.051,319,2.217,320,1.772,321,1.106,322,1.772,323,1.002,324,1.772,325,1.051,326,1.143,327,2.217,328,1.238,329,1.226,330,1.002,331,1.344,332,1.106,333,0.742,334,1.106,335,1.106,336,1.106,337,1.106,338,1.106,339,1.106,340,1.106,341,1.106,342,1.051,343,1.613,344,0.913,345,0.842,346,1.106,347,1.106,348,1.106,349,1.106,350,1.106,351,1.106,352,1.106,353,1.106,354,1.106,355,1.002,356,1.106,357,1.106,358,0.805,359,0.506,360,1.051,361,3.072,362,1.051,363,0.956,364,1.051,365,1.605,366,1.002,367,1.106,368,1.106,369,1.106,370,1.051,371,1.051,372,1.002,373,0.908,374,1.051,375,0.469,376,2.006,377,0.577,378,1.106,379,1.106,380,1.106,381,2.815,382,1.685,383,2.108,384,2.108,385,2.108,386,2.108,387,2.108,388,1.106,389,0.635,390,1.106,391,0.943,392,1.106,393,1.106,394,1.361,395,1.106,396,1.106,397,1.106,398,1.106,399,1.106,400,1.106,401,1.772,402,2.068,403,3.097,404,2.257,405,1.238,406,2.217,407,1.721,408,1.856,409,1.488,410,2.217,411,2.006,412,1.106,413,2.536,414,2.108,415,2.815,416,1.513,417,1.018,418,0.781,419,2.217,420,2.411,421,1.106,422,1.106,423,1.106,424,1.106,425,1.106,426,2.411,427,1.106,428,2.108,429,1.106,430,1.106,431,1.106,432,1.106,433,1.106,434,1.106,435,1.106,436,1.772,437,0.956,438,1.051,439,1.106,440,1.106,441,1.402,442,2.775,443,0.805,444,1.051,445,1.051,446,1.772,447,2.217,448,2.217,449,1.106,450,1.106,451,2.411,452,1.685,453,1.685,454,1.685,455,1.685,456,1.685,457,1.685,458,1.685,459,1.685,460,1.772,461,1.856,462,1.051,463,1.051,464,1.002,465,1.685,466,1.685,467,1.051,468,1.051,469,1.685,470,1.685,471,1.051,472,1.051,473,1.051,474,1.051,475,1.051,476,1.051,477,1.002,478,1.051,479,0.875,480,1.051,481,1.051,482,1.771,483,0.66,484,0.66,485,0.956,486,1.238,487,0.956,488,1.051,489,0.875,490,1.051,491,0.635,492,1.051,493,0.805,494,1.106,495,1.106,496,1.106,497,1.772,498,1.106,499,1.532,500,1.106,501,1.106,502,1.106,503,1.106,504,1.106,505,1.106,506,1.106,507,1.106,508,2.775,509,1.106,510,1.106,511,1.106,512,1.106,513,1.106,514,1.106,515,1.106]],["title/classes/ClientStub.html",[98,0.046,855,2.19]],["body/classes/ClientStub.html",[0,0.259,3,0.216,4,0.122,5,0.25,9,0.396,18,0.8,20,0.082,25,0.009,31,0.136,35,0.015,38,0.497,40,0.835,41,0.727,42,0.516,45,0.61,64,0.332,68,0.77,69,0.683,73,0.291,74,1.356,75,1.499,76,0.818,79,0.358,80,0.629,82,0.009,83,0.006,88,2.052,93,1.807,94,1.64,98,0.076,100,0.635,103,0.596,123,0.744,124,0.377,132,0.926,135,1.004,136,1.004,138,1.679,139,1.128,145,1.506,147,1.128,149,0.697,151,1.47,159,1.564,162,0.744,169,1.558,178,1.506,180,1.388,188,1.084,189,1.084,191,1.221,192,1.221,195,0.455,197,1.029,209,0.946,229,1.708,243,1.084,249,0.863,269,1.272,280,1.295,281,0.908,282,1.295,292,1.272,305,1.221,306,1.221,307,1.345,315,1.026,326,1.62,328,1.292,329,1.625,343,1.272,344,0.986,345,1.527,358,1.827,359,1.345,373,1.646,375,1.246,376,1.62,377,0.455,389,1.442,391,1.71,394,0.714,402,2.052,404,2.052,407,1.084,408,1.043,416,1.043,417,1.004,443,1.272,461,1.754,482,2.052,483,1.043,484,1.499,486,2.052,493,2.654,518,2.61,534,1.043,540,2.436,552,2.052,561,1.688,593,1.287,600,0.863,624,1.512,626,1.662,635,2.387,653,1.748,654,1.844,656,1.584,662,1.844,665,2.649,722,1.442,723,1.388,814,1.688,844,1.445,855,3.1,856,1.748,857,3.342,858,1.953,859,2.939,860,2.939,861,2.805,862,2.794,863,2.805,864,3.142,865,2.542,866,3.587,867,2.805,868,2.649,869,2.511,870,2.649,871,1.748,872,1.844,873,1.584,874,2.649,875,2.649,876,1.953,877,2.649,878,1.584,879,1.953,880,2.805,881,2.649,882,1.844,883,1.844,884,1.844,885,3.906,886,1.844,887,1.844,888,2.649,889,3.1,890,2.387,891,1.953,892,1.953,893,2.662,894,1.662,895,2.387,896,2.171,897,3.587,898,1.953,899,1.953,900,1.584,901,1.953,902,1.512,903,3.282,904,1.512,905,1.953,906,3.849,907,1.953,908,2.805,909,1.953,910,2.805,911,2.275,912,2.649,913,1.844,914,1.953,915,1.662,916,1.953,917,3.282,918,2.805,919,1.953,920,1.953,921,1.953,922,1.953,923,1.953,924,1.662,925,1.221,926,1.844,927,1.844,928,2.511,929,1.953,930,2.511,931,1.844,932,1.445,933,1.584,934,1.953,935,1.953,936,1.953,937,1.662,938,1.953,939,2.794,940,1.662,941,2.805,942,1.953,943,2.805,944,1.953,945,1.953,946,2.387,947,1.953,948,1.953,949,1.953,950,3.1,951,4.245,952,2.805,953,1.953,954,1.953,955,1.953,956,1.953,957,1.953,958,1.953,959,1.953,960,3.389,961,2.805,962,1.953,963,1.953,964,1.953,965,2.805,966,1.953,967,1.953,968,1.953,969,1.953,970,1.953,971,1.844,972,1.953,973,2.805,974,1.953,975,1.953,976,1.953,977,1.953,978,1.953,979,1.953,980,1.953,981,3.282,982,1.953,983,1.953,984,1.953,985,1.953,986,2.805,987,1.953,988,1.953,989,1.953,990,2.805,991,2.229,992,1.953,993,2.805,994,2.805,995,1.953,996,2.805,997,1.953,998,1.953,999,1.383,1000,3.282,1001,1.953,1002,1.953,1003,1.844,1004,2.541,1005,1.953,1006,1.584,1007,1.662,1008,1.953,1009,1.953,1010,1.953,1011,1.953,1012,1.953,1013,1.272,1014,1.326,1015,1.953,1016,1.953,1017,1.844,1018,1.953,1019,2.387,1020,1.662,1021,1.953,1022,1.383,1023,1.953,1024,3.589,1025,1.953,1026,1.953,1027,2.511,1028,2.805,1029,1.326,1030,2.805,1031,1.953,1032,1.953,1033,1.326,1034,1.953,1035,1.512,1036,1.953,1037,1.953,1038,2.805,1039,1.953,1040,2.649,1041,1.953,1042,1.953,1043,1.953,1044,1.953,1045,1.953,1046,1.953,1047,1.748,1048,1.953,1049,1.844,1050,1.953,1051,1.953,1052,1.844,1053,1.953,1054,1.844,1055,1.221,1056,1.953,1057,1.953,1058,1.953,1059,1.953,1060,1.953,1061,1.953,1062,1.953,1063,1.953,1064,1.383,1065,1.953,1066,4.407,1067,3.282,1068,2.805,1069,2.805,1070,1.953,1071,1.584,1072,1.953,1073,1.953,1074,2.805,1075,1.953,1076,1.953,1077,1.953,1078,2.805,1079,1.953,1080,1.953,1081,1.953,1082,1.953]],["title/interfaces/ClientStubOptions.html",[0,0.167,893,1.88]],["body/interfaces/ClientStubOptions.html",[0,0.258,2,0.472,3,0.215,4,0.121,5,0.249,9,0.393,18,0.793,20,0.117,25,0.009,31,0.249,35,0.015,40,0.831,41,0.696,42,0.657,45,0.605,64,0.331,68,0.764,69,0.679,73,0.29,74,1.353,75,1.49,76,0.809,79,0.357,80,0.628,82,0.009,83,0.006,88,2.043,89,0.462,93,1.803,94,1.638,98,0.076,100,0.63,103,0.594,123,0.949,124,0.374,132,0.923,135,0.996,136,0.996,138,1.674,139,1.118,145,1.499,147,1.118,149,0.696,151,1.464,159,1.557,162,0.74,169,1.548,178,1.499,180,1.38,188,1.076,189,1.076,191,1.211,192,1.211,195,0.451,197,1.028,209,0.948,229,1.704,243,1.076,249,0.856,269,1.261,280,1.289,281,0.904,282,1.289,292,1.261,305,1.211,306,1.211,307,1.339,315,1.021,326,1.61,328,1.29,329,1.617,343,1.261,344,0.985,345,1.521,358,1.816,359,1.339,373,1.64,375,1.241,376,1.61,377,0.451,389,1.434,391,1.703,394,0.708,402,2.043,404,2.043,407,1.076,408,1.035,416,1.035,417,0.996,443,1.261,461,1.746,482,2.043,483,1.035,484,1.49,486,2.043,493,2.648,534,1.035,540,2.427,552,2.043,561,1.68,593,1.279,624,1.499,626,1.648,635,2.373,653,1.734,654,1.829,656,1.57,662,1.829,665,2.634,722,1.434,723,1.38,814,1.68,844,1.433,855,2.634,856,1.734,858,1.936,859,2.925,860,2.925,861,2.788,862,2.781,863,2.788,864,3.136,865,2.532,866,3.574,867,2.788,868,2.634,869,2.497,870,2.634,871,1.734,872,1.829,873,1.57,874,2.634,875,2.634,876,1.936,877,2.634,878,1.57,879,1.936,880,2.788,881,2.634,882,1.829,883,1.829,884,1.829,885,3.899,886,1.829,887,1.829,888,2.634,889,3.086,890,2.373,891,1.936,892,1.936,893,2.898,894,3.042,895,3.224,896,2.158,897,4.065,898,1.936,899,1.936,900,1.57,901,1.936,902,1.499,903,3.267,904,1.499,905,1.936,906,3.84,907,1.936,908,2.788,909,1.936,910,2.788,911,2.261,912,2.634,913,1.829,914,1.936,915,1.648,916,1.936,917,3.267,918,2.788,919,1.936,920,1.936,921,1.936,922,1.936,923,1.936,924,1.648,925,1.211,926,1.829,927,1.829,928,2.497,929,1.936,930,2.497,931,1.829,932,1.433,933,1.57,934,1.936,935,1.936,936,1.936,937,1.648,938,1.936,939,2.781,940,1.648,941,2.788,942,1.936,943,2.788,944,1.936,945,1.936,946,2.373,947,1.936,948,1.936,949,1.936,950,3.086,951,4.237,952,2.788,953,1.936,954,1.936,955,1.936,956,1.936,957,1.936,958,1.936,959,1.936,960,3.376,961,2.788,962,1.936,963,1.936,964,1.936,965,2.788,966,1.936,967,1.936,968,1.936,969,1.936,970,1.936,971,1.829,972,1.936,973,2.788,974,1.936,975,1.936,976,1.936,977,1.936,978,1.936,979,1.936,980,1.936,981,3.267,982,1.936,983,1.936,984,1.936,985,1.936,986,2.788,987,1.936,988,1.936,989,1.936,990,2.788,991,2.218,992,1.936,993,2.788,994,2.788,995,1.936,996,2.788,997,1.936,998,1.936,999,1.372,1000,3.267,1001,1.936,1002,1.936,1003,1.829,1004,2.529,1005,1.936,1006,1.57,1007,1.648,1008,1.936,1009,1.936,1010,1.936,1011,1.936,1012,1.936,1013,1.261,1014,1.315,1015,1.936,1016,1.936,1017,1.829,1018,1.936,1019,2.373,1020,1.648,1021,1.936,1022,1.372,1023,1.936,1024,3.577,1025,1.936,1026,1.936,1027,2.497,1028,2.788,1029,1.315,1030,2.788,1031,1.936,1032,1.936,1033,1.315,1034,1.936,1035,1.499,1036,1.936,1037,1.936,1038,2.788,1039,1.936,1040,2.634,1041,1.936,1042,1.936,1043,1.936,1044,1.936,1045,1.936,1046,1.936,1047,1.734,1048,1.936,1049,1.829,1050,1.936,1051,1.936,1052,1.829,1053,1.936,1054,1.829,1055,1.211,1056,1.936,1057,1.936,1058,1.936,1059,1.936,1060,1.936,1061,1.936,1062,1.936,1063,1.936,1064,1.372,1065,1.936,1066,4.4,1067,3.267,1068,2.788,1069,2.788,1070,1.936,1071,1.57,1072,1.936,1073,1.936,1074,2.788,1075,1.936,1076,1.936,1077,1.936,1078,2.788,1079,1.936,1080,1.936,1081,1.936,1082,1.936]],["title/interfaces/Descriptor.html",[0,0.167,67,1.643]],["body/interfaces/Descriptor.html",[0,0.262,1,3.525,2,0.884,3,0.279,4,0.227,5,0.253,20,0.152,21,1.162,25,0.011,31,0.253,32,1.545,35,0.015,38,0.924,40,0.924,41,0.668,42,0.668,44,0.634,64,0.323,67,2.974,68,1.797,69,0.884,73,0.323,82,0.013,83,0.011,99,3.966,107,4.464,290,2.27,624,2.81,631,4.774,1083,6.214,1084,6.214,1085,6.214,1086,6.214,1087,4.45,1088,6.214,1089,6.214]],["title/interfaces/Duplexify.html",[0,0.167,1090,2.318]],["body/interfaces/Duplexify.html",[0,0.275,2,0.832,3,0.2,4,0.163,5,0.181,9,0.822,19,1.297,20,0.109,21,0.945,22,0.502,25,0.008,28,1.347,29,1.448,31,0.318,35,0.015,37,3.226,38,0.869,40,0.869,41,0.628,42,0.628,43,2.203,44,0.666,45,1.266,47,2.75,53,0.822,54,1.598,64,0.263,66,1.106,73,0.293,76,0.478,78,1.213,79,0.293,80,0.385,82,0.011,83,0.008,88,1.626,89,0.566,93,1.623,94,1.424,98,0.052,100,0.846,103,0.408,123,0.69,124,0.894,145,1.567,149,0.536,151,1.563,160,2.058,162,1.199,170,1.287,171,1.264,182,1.337,190,1.626,195,0.606,197,0.937,204,1.935,222,0.937,226,1.501,243,1.444,257,1.924,260,1.825,307,1.065,315,1.192,328,1.1,333,1.562,344,0.919,359,1.065,377,0.889,418,1.347,479,1.842,491,1.337,531,2.456,534,1.389,561,1.337,644,2.956,687,2.764,719,1.337,792,2.42,814,2.083,878,2.108,896,2.012,904,2.012,925,1.626,933,2.108,1029,2.59,1055,1.626,1090,4.466,1091,2.764,1092,3.093,1093,4.965,1094,5.845,1095,5.845,1096,4.186,1097,5.668,1098,4.449,1099,4.186,1100,5.668,1101,4.449,1102,4.675,1103,2.136,1104,3.631,1105,2.956,1106,2.956,1107,2.956,1108,2.599,1109,4.606,1110,3.187,1111,4.186,1112,4.05,1113,4.186,1114,1.924,1115,2.956,1116,2.956,1117,2.764,1118,3.187,1119,2.956,1120,2.764,1121,3.187,1122,3.187,1123,3.187,1124,3.187,1125,3.187,1126,3.187,1127,4.186,1128,3.883,1129,3.883,1130,4.606,1131,4.675,1132,4.965,1133,5.157,1134,4.675,1135,3.187,1136,2.764,1137,3.187,1138,3.187,1139,3.187,1140,3.187,1141,3.187,1142,3.187,1143,2.956,1144,3.187,1145,2.213,1146,3.814,1147,2.456,1148,3.187,1149,4.186,1150,3.187,1151,3.187,1152,3.187,1153,3.187,1154,3.187,1155,3.187,1156,3.187,1157,3.187,1158,2.213,1159,3.187,1160,3.187,1161,2.328,1162,3.187,1163,3.187,1164,3.187,1165,3.187,1166,3.187,1167,4.186,1168,4.186,1169,3.187,1170,4.186,1171,2.956,1172,3.187]],["title/interfaces/DuplexifyConstructor.html",[0,0.167,1104,2.465]],["body/interfaces/DuplexifyConstructor.html",[0,0.274,2,0.83,3,0.199,4,0.162,5,0.18,9,0.82,19,1.293,20,0.108,21,0.943,22,0.5,25,0.008,28,1.343,29,1.445,31,0.311,35,0.015,37,3.217,38,0.658,40,0.658,41,0.476,42,0.476,43,2.198,44,0.665,45,1.065,47,2.746,53,0.82,54,1.595,56,2.817,64,0.262,66,1.101,73,0.293,76,0.476,78,1.268,79,0.293,80,0.383,82,0.01,83,0.008,88,1.619,89,0.564,90,2.588,91,1.383,92,2.588,93,1.619,94,1.422,98,0.052,100,0.842,103,0.406,123,0.687,124,0.902,145,1.563,149,0.534,151,1.559,160,1.927,162,1.198,170,1.281,171,1.262,182,1.331,190,1.619,195,0.603,197,0.936,204,1.934,222,0.936,226,1.495,243,1.438,257,1.916,260,1.82,307,1.061,315,1.19,328,1.244,333,1.555,344,0.918,359,1.061,377,0.887,418,1.343,479,1.834,491,1.331,531,2.445,534,1.383,561,1.331,644,2.943,687,2.752,719,1.331,792,2.413,814,1.957,878,2.099,896,2.004,904,2.004,925,1.619,933,2.099,1029,2.584,1055,2.38,1090,4.513,1091,2.752,1092,2.762,1093,3.173,1096,3.173,1097,5.746,1099,3.173,1100,5.723,1102,4.665,1103,2.13,1104,4.046,1105,2.943,1106,2.943,1107,2.943,1108,2.588,1109,4.999,1110,3.173,1111,4.174,1112,4.043,1113,4.174,1114,1.916,1115,2.943,1116,2.943,1117,2.752,1118,3.173,1119,2.943,1120,2.752,1121,3.173,1122,3.173,1123,3.173,1124,3.173,1125,3.173,1126,3.173,1127,4.174,1128,3.872,1129,3.872,1130,4.598,1131,4.665,1132,4.957,1133,5.15,1134,4.665,1135,3.173,1136,2.752,1137,3.173,1138,3.173,1139,3.173,1140,3.173,1141,3.173,1142,3.173,1143,2.943,1144,3.173,1145,2.203,1146,3.806,1147,2.445,1148,3.173,1149,4.174,1150,3.173,1151,3.173,1152,3.173,1153,3.173,1154,3.173,1155,3.173,1156,3.173,1157,3.173,1158,2.203,1159,3.173,1160,3.173,1161,2.318,1162,3.173,1163,3.173,1164,3.173,1165,3.173,1166,3.173,1167,4.174,1168,4.174,1169,3.173,1170,4.174,1171,2.943,1172,3.173,1173,4.43,1174,4.43]],["title/interfaces/DuplexifyOptions.html",[0,0.167,1109,2.636]],["body/interfaces/DuplexifyOptions.html",[0,0.278,2,0.845,3,0.205,4,0.167,5,0.186,9,0.83,19,1.318,20,0.111,22,0.515,25,0.008,28,1.369,29,1.465,31,0.316,35,0.015,37,3.278,42,0.752,43,2.229,44,0.465,45,1.085,47,2.776,53,0.83,54,1.613,64,0.267,66,1.133,73,0.295,76,0.49,78,0.768,79,0.297,80,0.395,82,0.011,83,0.008,88,1.666,89,0.575,93,1.642,94,1.438,98,0.053,100,0.866,103,0.418,123,0.707,124,0.868,145,1.592,149,0.544,151,1.581,160,2.139,162,1.205,170,1.318,171,1.273,182,2.103,190,1.666,195,0.621,197,0.945,204,1.94,222,0.945,226,1.538,243,1.479,257,1.971,260,1.854,307,1.091,315,1.206,328,1.113,333,1.6,344,0.925,359,1.091,377,0.899,418,1.369,479,1.887,491,1.37,531,2.516,534,1.423,561,1.37,644,3.029,687,2.832,719,1.37,792,2.458,814,2.103,878,2.16,896,2.062,904,2.062,925,1.666,933,2.16,1029,2.62,1055,1.666,1090,4.427,1091,2.832,1092,2.814,1093,3.265,1096,3.265,1097,5.563,1099,3.265,1100,5.563,1102,5.012,1103,2.17,1104,3.689,1105,3.029,1106,3.029,1107,3.029,1108,2.663,1109,4.821,1110,5.012,1111,4.253,1112,4.088,1113,4.253,1114,1.971,1115,3.029,1116,3.029,1117,2.832,1118,3.265,1119,3.029,1120,2.832,1121,3.265,1122,3.265,1123,3.265,1124,3.265,1125,3.265,1126,3.265,1127,4.253,1128,3.945,1129,3.945,1130,4.649,1131,4.731,1132,5.012,1133,5.197,1134,4.731,1135,3.265,1136,2.832,1137,3.265,1138,3.265,1139,3.265,1140,3.265,1141,3.265,1142,3.265,1143,3.029,1144,3.265,1145,2.267,1146,3.859,1147,2.516,1148,3.265,1149,4.253,1150,3.265,1151,3.265,1152,3.265,1153,3.265,1154,3.265,1155,3.265,1156,3.265,1157,3.265,1158,2.267,1159,3.265,1160,3.265,1161,2.385,1162,3.265,1163,3.265,1164,3.265,1165,3.265,1166,3.265,1167,4.253,1168,4.253,1169,3.265,1170,4.253,1171,3.029,1172,3.265]],["title/interfaces/GRPCCallOtherArgs.html",[0,0.167,1175,2.19]],["body/interfaces/GRPCCallOtherArgs.html",[0,0.325,2,0.698,3,0.22,4,0.179,5,0.2,12,1.585,13,2.218,15,1.792,16,1.722,17,2.566,19,1.088,20,0.152,22,0.772,25,0.009,28,1.13,29,1.683,30,1.722,31,0.334,35,0.015,38,0.729,42,0.773,45,1.137,47,2.713,48,1.174,49,1.7,53,0.899,54,1.776,59,2.602,61,1.946,64,0.334,65,2.469,69,0.973,73,0.334,74,0.932,76,0.669,78,1.049,79,0.307,82,0.011,83,0.009,89,0.602,93,1.788,94,1.405,124,0.772,130,2.315,132,0.698,143,1.531,149,0.627,166,1.531,171,1.2,176,1.174,195,0.668,204,1.49,209,0.738,220,1.474,222,0.638,232,2.02,278,1.266,281,1.007,328,1.314,677,3.257,705,2.949,719,1.87,746,2.566,798,1.655,816,3.093,817,3.24,818,3.24,819,3.24,829,2.121,849,1.867,991,2.945,999,2.03,1013,1.867,1014,1.946,1022,2.977,1033,1.946,1092,3.517,1103,2.816,1175,3.435,1176,2.707,1177,2.369,1178,2.865,1179,2.865,1180,2.439,1181,2.566,1182,2.865,1183,2.865,1184,3.435,1185,2.566,1186,2.218,1187,2.218,1188,2.865,1189,2.865,1190,2.865,1191,2.865,1192,2.324,1193,2.865,1194,2.865,1195,3.637,1196,2.566,1197,3.578,1198,3.257,1199,3.257,1200,3.257,1201,2.566,1202,3.637,1203,3.435,1204,2.439,1205,2.707,1206,2.03,1207,2.566,1208,2.566]],["title/interfaces/GRPCCallResult.html",[0,0.167,1103,1.45]],["body/interfaces/GRPCCallResult.html",[0,0.326,2,0.708,3,0.224,4,0.182,5,0.203,12,1.592,13,2.25,15,1.818,16,1.746,17,2.603,19,1.104,20,0.154,21,1.016,22,0.777,25,0.009,28,1.147,29,1.689,31,0.327,35,0.015,38,0.934,44,0.508,45,1.257,47,2.731,48,1.191,49,1.711,53,0.903,54,1.782,59,2.62,61,1.974,64,0.335,65,2.492,69,0.98,73,0.334,74,0.946,78,1.058,79,0.309,82,0.011,83,0.009,93,1.798,94,1.414,124,0.777,130,2.323,132,0.708,143,1.553,149,0.631,166,1.553,171,1.208,176,1.191,195,0.677,204,1.504,209,0.745,220,1.495,222,0.648,232,2.038,278,1.285,281,1.016,328,1.256,677,3.286,705,2.976,719,2.24,746,2.603,798,1.679,816,3.113,817,3.262,818,3.262,819,3.262,829,2.151,849,1.893,991,2.492,999,2.06,1013,1.893,1014,1.974,1022,2.06,1033,1.974,1092,3.533,1103,2.858,1175,2.746,1176,2.746,1177,2.39,1178,2.907,1179,2.907,1180,2.474,1181,2.603,1182,2.907,1183,2.907,1184,3.467,1185,2.603,1186,2.25,1187,2.25,1188,2.907,1189,2.907,1190,2.907,1191,2.907,1192,2.357,1193,2.907,1194,2.907,1195,3.67,1196,2.603,1197,3.601,1198,3.286,1199,3.286,1200,3.286,1201,2.603,1202,3.67,1203,3.467,1204,2.474,1205,2.746,1206,2.06,1207,2.603,1208,2.603,1209,4.975]],["title/interfaces/GaxCall.html",[0,0.167,1206,1.643]],["body/interfaces/GaxCall.html",[0,0.325,2,0.705,3,0.223,4,0.181,5,0.202,12,1.59,13,2.241,15,1.81,16,1.739,17,2.592,19,1.099,20,0.153,22,0.776,25,0.009,28,1.142,29,1.714,30,1.186,31,0.329,35,0.015,38,0.736,44,0.506,45,1.144,47,2.726,48,1.186,49,1.708,53,0.916,54,1.801,59,2.615,61,1.966,64,0.335,65,2.485,69,0.978,73,0.334,74,0.942,78,1.056,79,0.309,82,0.011,83,0.009,89,0.606,90,2.895,91,1.547,92,2.895,93,1.795,94,1.412,124,0.776,130,2.37,132,0.705,143,1.547,149,0.629,166,1.547,171,1.206,176,1.186,195,0.675,204,1.5,209,0.743,220,1.489,222,0.645,232,2.033,278,1.279,281,1.013,328,1.255,677,3.278,705,2.968,719,1.882,746,2.592,798,1.672,816,3.107,817,3.255,818,3.255,819,3.255,829,2.143,849,1.886,991,2.485,999,2.051,1013,1.886,1014,1.966,1022,2.051,1033,1.966,1092,3.528,1103,2.822,1175,2.735,1176,2.735,1177,2.384,1178,2.895,1179,2.895,1180,2.464,1181,2.592,1182,2.895,1183,2.895,1184,3.458,1185,2.592,1186,2.241,1187,2.241,1188,2.895,1189,2.895,1190,2.895,1191,2.895,1192,2.348,1193,2.895,1194,2.895,1195,3.66,1196,2.592,1197,3.594,1198,3.278,1199,3.278,1200,3.278,1201,2.592,1202,3.66,1203,3.792,1204,2.464,1205,2.735,1206,2.593,1207,2.592,1208,2.592]],["title/interfaces/GaxCallPromise.html",[0,0.167,1204,1.973]],["body/interfaces/GaxCallPromise.html",[0,0.325,2,0.705,3,0.223,4,0.181,5,0.202,12,1.59,13,2.241,15,1.81,16,1.739,17,2.592,19,1.099,20,0.153,22,0.776,25,0.009,28,1.142,29,1.714,30,1.186,31,0.329,35,0.015,38,0.736,44,0.506,45,1.144,47,2.726,48,1.186,49,1.708,53,0.916,54,1.801,59,2.747,61,1.966,64,0.335,65,2.485,69,0.978,73,0.334,74,0.942,78,1.056,79,0.309,82,0.011,83,0.009,89,0.606,90,2.895,91,1.547,92,2.895,93,1.795,94,1.412,124,0.776,130,2.37,132,0.705,143,1.547,149,0.629,166,1.547,171,1.206,176,1.186,195,0.675,204,1.5,209,0.743,220,1.489,222,0.645,232,2.033,278,1.279,281,1.013,328,1.255,677,3.278,705,2.968,719,1.882,746,2.592,798,1.672,816,3.107,817,3.255,818,3.255,819,3.255,829,2.143,849,1.886,991,2.485,999,2.051,1013,1.886,1014,1.966,1022,2.051,1033,1.966,1092,3.528,1103,2.822,1175,2.735,1176,2.735,1177,2.384,1178,2.895,1179,2.895,1180,2.464,1181,2.592,1182,2.895,1183,2.895,1184,3.458,1185,2.592,1186,2.241,1187,2.241,1188,2.895,1189,2.895,1190,2.895,1191,2.895,1192,2.348,1193,2.895,1194,2.895,1195,3.66,1196,2.592,1197,3.594,1198,3.278,1199,3.278,1200,3.278,1201,2.592,1202,3.66,1203,3.458,1204,3.116,1205,2.735,1206,2.051,1207,2.592,1208,2.592]],["title/interfaces/GaxCallStream.html",[0,0.167,1205,2.19]],["body/interfaces/GaxCallStream.html",[0,0.325,2,0.705,3,0.223,4,0.181,5,0.202,12,1.59,13,2.241,15,1.81,16,1.739,17,2.592,19,1.099,20,0.153,22,0.776,25,0.009,28,1.142,29,1.714,30,1.186,31,0.329,35,0.015,38,0.736,44,0.506,45,1.144,47,2.864,48,1.186,49,1.708,53,0.916,54,1.801,59,2.615,61,1.966,64,0.335,65,2.485,69,0.978,73,0.334,74,0.942,78,1.056,79,0.309,82,0.011,83,0.009,89,0.606,90,2.895,91,1.547,92,2.895,93,1.795,94,1.412,124,0.776,130,2.37,132,0.705,143,1.547,149,0.629,166,1.547,171,1.206,176,1.186,195,0.675,204,1.5,209,0.743,220,1.489,222,0.645,232,2.033,278,1.279,281,1.013,328,1.255,677,3.278,705,2.968,719,1.882,746,2.592,798,1.672,816,3.107,817,3.255,818,3.255,819,3.255,829,2.143,849,1.886,991,2.485,999,2.051,1013,1.886,1014,1.966,1022,2.051,1033,1.966,1092,3.528,1103,2.822,1175,2.735,1176,2.735,1177,2.384,1178,2.895,1179,2.895,1180,2.464,1181,2.592,1182,2.895,1183,2.895,1184,3.458,1185,2.592,1186,2.241,1187,2.241,1188,2.895,1189,2.895,1190,2.895,1191,2.895,1192,2.348,1193,2.895,1194,2.895,1195,3.66,1196,2.592,1197,3.594,1198,3.278,1199,3.278,1200,3.278,1201,2.592,1202,3.66,1203,3.458,1204,2.464,1205,3.458,1206,2.051,1207,2.592,1208,2.592]],["title/interfaces/GetOperationCallback.html",[0,0.167,1210,3.099]],["body/interfaces/GetOperationCallback.html",[0,0.15,2,0.508,3,0.161,4,0.131,5,0.205,9,0.691,13,1.615,15,1.839,16,1.254,20,0.087,22,0.658,23,1.776,25,0.014,30,1.205,31,0.205,32,1.251,35,0.015,41,0.717,44,0.595,45,1.156,48,1.515,49,1.658,53,0.897,59,2.218,64,0.326,65,1.417,66,0.888,69,0.508,73,0.237,74,1.438,76,0.68,79,0.354,80,0.639,82,0.009,83,0.006,89,0.487,90,2.086,91,1.115,92,2.086,93,1.98,94,0.734,95,2.633,97,2.503,98,0.042,99,4.277,101,3.604,102,3.604,103,0.534,109,3.186,112,2.635,123,0.554,124,0.803,130,2.329,132,0.949,138,1.299,143,1.115,149,0.461,150,1.254,151,1.205,154,2.412,159,1.401,160,1.401,162,0.78,170,1.033,171,1.248,178,1.349,187,2.538,190,1.305,195,0.793,197,1.002,201,1.692,209,0.597,213,1.692,215,2.635,219,1.615,220,1.073,221,1.615,222,0.465,226,1.698,229,0.855,234,1.544,237,2.128,245,1.544,263,1.159,278,1.504,280,1.343,281,0.942,282,1.343,315,0.919,344,0.969,373,0.958,377,0.685,394,1.075,418,1.458,491,1.073,552,1.305,573,2.086,593,0.958,626,1.776,703,2.558,718,2.558,719,1.073,722,1.073,723,1.033,756,3.343,766,3.696,768,2.558,783,2.558,791,2.384,792,2.761,814,1.073,821,2.777,837,2.633,843,3.343,844,2.176,846,2.373,847,3.343,848,3.343,849,2.847,890,2.503,902,1.615,1013,1.359,1027,1.868,1035,2.276,1064,1.478,1071,1.692,1136,3.62,1177,3.111,1186,1.615,1187,1.615,1201,1.868,1204,2.503,1207,3.049,1208,2.633,1210,5.554,1211,2.79,1212,4.368,1213,4.552,1214,3.1,1215,3.1,1216,3.1,1217,3.1,1218,3.1,1219,3.931,1220,3.1,1221,5.058,1222,3.931,1223,3.931,1224,3.604,1225,3.931,1226,4.552,1227,5.058,1228,5.492,1229,3.1,1230,2.79,1231,4.368,1232,4.368,1233,3.1,1234,3.1,1235,4.368,1236,3.1,1237,3.1,1238,3.1,1239,3.1,1240,4.904,1241,4.368,1242,3.343,1243,3.1,1244,2.79,1245,3.1,1246,3.931,1247,3.1,1248,3.1,1249,3.1,1250,2.218,1251,3.1,1252,3.1,1253,3.1,1254,3.1,1255,3.1,1256,3.1,1257,4.368,1258,3.1,1259,4.368,1260,3.1,1261,4.368,1262,3.1,1263,3.1,1264,3.1,1265,2.373,1266,4.552,1267,3.1,1268,3.1,1269,3.1,1270,3.1,1271,4.368,1272,3.343,1273,4.368,1274,5.058,1275,3.1,1276,3.1,1277,3.1,1278,3.1,1279,3.1,1280,3.1,1281,3.1,1282,4.368,1283,3.1,1284,3.1,1285,3.1,1286,4.368,1287,3.1,1288,3.1,1289,3.1,1290,3.1,1291,3.1,1292,3.1,1293,3.1,1294,3.1,1295,3.1,1296,3.1,1297,3.1,1298,3.1,1299,3.1,1300,3.1,1301,4.552,1302,2.373,1303,3.1,1304,3.1,1305,3.1,1306,3.1,1307,3.1,1308,3.1,1309,3.1,1310,3.931,1311,4.368,1312,3.1,1313,4.368,1314,3.1,1315,3.1,1316,3.1,1317,4.368,1318,4.368,1319,5.492,1320,3.1,1321,3.1,1322,3.1,1323,3.1,1324,3.1,1325,3.1,1326,3.1,1327,2.558,1328,3.1,1329,3.1,1330,5.789,1331,3.1,1332,3.1,1333,3.1,1334,3.1,1335,3.1,1336,3.604,1337,2.79,1338,2.218,1339,3.1,1340,3.1,1341,2.79,1342,2.79,1343,3.1,1344,3.1,1345,3.1,1346,3.1,1347,3.1,1348,3.1,1349,3.1,1350,2.79]],["title/classes/GoogleError.html",[49,0.987,98,0.046]],["body/classes/GoogleError.html",[3,0.282,4,0.229,5,0.255,20,0.153,25,0.011,31,0.294,35,0.014,38,1.073,42,0.84,49,1.795,64,0.282,73,0.255,82,0.013,83,0.011,89,0.699,98,0.073,209,0.856,237,1.936,263,2.468,418,1.753,600,1.618,722,1.883,723,1.813,814,2.17,925,2.779,1351,6.268,1352,6.268,1353,6.268]],["title/classes/GoogleProtoFilesRoot.html",[98,0.046,881,2.19]],["body/classes/GoogleProtoFilesRoot.html",[0,0.256,3,0.212,4,0.119,5,0.247,9,0.387,18,0.782,20,0.115,21,0.764,25,0.009,31,0.247,35,0.015,38,0.824,40,0.999,41,0.762,42,0.693,44,0.482,45,0.597,64,0.33,68,0.753,69,0.672,73,0.289,74,1.348,75,1.475,76,0.807,79,0.357,80,0.626,82,0.009,83,0.006,88,2.027,93,1.797,94,1.636,98,0.075,100,0.621,103,0.616,123,0.733,124,0.369,132,0.917,135,0.982,136,0.982,138,1.664,139,1.103,145,1.487,147,1.103,149,0.695,151,1.455,159,1.545,162,0.733,169,1.533,178,1.487,180,1.366,188,1.06,189,1.06,191,1.194,192,1.194,195,0.445,197,1.026,209,0.958,229,1.698,243,1.06,249,0.844,269,1.244,280,1.279,281,0.897,282,1.279,292,1.244,305,1.194,306,1.194,307,1.328,315,1.013,326,1.594,328,1.287,329,1.604,343,1.244,344,0.983,345,1.511,358,1.798,359,1.328,373,1.629,375,1.231,376,1.594,377,0.445,389,1.419,391,1.692,394,0.698,402,2.027,404,2.027,407,1.06,408,1.02,416,1.02,417,0.982,443,1.244,461,1.732,482,2.027,483,1.02,484,1.475,486,2.027,493,2.636,534,1.02,540,2.411,552,2.027,561,1.667,593,1.629,600,0.844,624,1.478,626,1.625,635,2.349,653,1.71,654,1.804,656,1.548,662,1.804,665,2.607,722,1.419,723,1.366,814,1.667,837,1.71,844,1.413,855,2.607,856,1.71,858,1.909,859,2.902,860,2.902,861,2.76,862,2.759,863,2.76,864,3.125,865,2.516,866,3.55,867,2.76,868,2.607,869,2.471,870,2.607,871,1.71,872,1.804,873,1.548,874,2.607,875,2.607,876,1.909,877,2.607,878,1.548,879,1.909,880,2.76,881,3.062,882,1.804,883,1.804,884,1.804,885,3.888,886,1.804,887,1.804,888,2.607,889,3.062,890,2.349,891,1.909,892,1.909,893,2.628,894,1.625,895,2.349,896,2.136,897,3.55,898,1.909,899,1.909,900,1.548,901,1.909,902,1.478,903,3.241,904,1.478,905,1.909,906,3.823,907,1.909,908,2.76,909,1.909,910,2.76,911,2.238,912,2.607,913,1.804,914,1.909,915,1.625,916,1.909,917,3.241,918,2.76,919,1.909,920,1.909,921,1.909,922,1.909,923,1.909,924,1.625,925,1.194,926,1.804,927,1.804,928,2.471,929,1.909,930,2.471,931,1.804,932,1.413,933,1.548,934,1.909,935,1.909,936,1.909,937,1.625,938,1.909,939,2.759,940,1.625,941,2.76,942,1.909,943,2.76,944,1.909,945,1.909,946,2.349,947,1.909,948,1.909,949,1.909,950,3.062,951,4.222,952,2.76,953,1.909,954,1.909,955,1.909,956,1.909,957,1.909,958,1.909,959,1.909,960,3.354,961,2.76,962,1.909,963,1.909,964,1.909,965,2.76,966,1.909,967,1.909,968,1.909,969,1.909,970,1.909,971,1.804,972,1.909,973,2.76,974,1.909,975,1.909,976,1.909,977,1.909,978,1.909,979,1.909,980,1.909,981,3.766,982,1.909,983,1.909,984,1.909,985,1.909,986,2.76,987,1.909,988,1.909,989,1.909,990,2.76,991,2.201,992,1.909,993,2.76,994,2.76,995,1.909,996,2.76,997,1.909,998,1.909,999,1.353,1000,3.241,1001,1.909,1002,1.909,1003,1.804,1004,2.509,1005,1.909,1006,1.548,1007,1.625,1008,1.909,1009,1.909,1010,1.909,1011,1.909,1012,1.909,1013,1.244,1014,1.297,1015,1.909,1016,1.909,1017,1.804,1018,1.909,1019,2.349,1020,1.625,1021,1.909,1022,1.353,1023,1.909,1024,3.558,1025,1.909,1026,1.909,1027,2.471,1028,2.76,1029,1.297,1030,2.76,1031,1.909,1032,1.909,1033,1.297,1034,1.909,1035,1.478,1036,1.909,1037,1.909,1038,2.76,1039,1.909,1040,2.607,1041,1.909,1042,1.909,1043,1.909,1044,1.909,1045,1.909,1046,1.909,1047,1.71,1048,1.909,1049,1.804,1050,1.909,1051,1.909,1052,1.804,1053,1.909,1054,1.804,1055,1.194,1056,1.909,1057,1.909,1058,1.909,1059,1.909,1060,2.76,1061,1.909,1062,1.909,1063,1.909,1064,1.353,1065,2.76,1066,4.522,1067,3.766,1068,2.76,1069,2.76,1070,1.909,1071,1.548,1072,1.909,1073,1.909,1074,2.76,1075,1.909,1076,1.909,1077,2.76,1078,2.76,1079,1.909,1080,1.909,1081,1.909,1082,1.909,1354,4.723,1355,4.723,1356,3.268,1357,3.268,1358,3.268]],["title/classes/GrpcClient.html",[98,0.046,900,1.88]],["body/classes/GrpcClient.html",[0,0.24,3,0.193,4,0.105,5,0.27,7,1.715,9,0.339,18,0.685,20,0.105,21,0.693,25,0.009,30,1.026,31,0.309,35,0.015,38,1.099,40,1.118,41,0.814,42,0.794,44,0.697,45,0.523,64,0.32,68,0.988,69,0.61,73,0.278,74,1.372,75,1.603,76,0.82,79,0.353,80,0.604,82,0.008,83,0.005,88,2.341,89,0.415,93,1.736,94,1.663,98,0.078,100,0.544,103,0.64,123,0.664,124,0.323,132,0.869,135,0.86,136,1.287,138,1.763,139,0.966,145,1.529,147,0.966,149,0.69,151,1.534,159,1.43,162,0.664,169,1.39,178,1.377,180,1.239,188,0.929,189,0.929,191,1.046,192,1.046,195,0.583,197,1.009,209,0.956,229,1.703,243,0.929,249,1.106,269,1.631,280,1.184,281,0.83,282,1.184,292,1.631,305,1.565,306,1.565,307,1.461,315,0.938,326,1.446,328,1.322,329,1.649,343,1.089,344,0.968,345,1.417,358,1.631,359,1.365,373,1.529,375,1.422,376,1.446,377,0.39,389,1.287,391,1.588,394,0.611,402,2.427,404,2.341,407,0.929,408,1.338,416,1.338,417,1.287,443,1.631,461,1.906,482,2.083,483,0.894,484,1.603,486,2.231,493,2.528,534,1.338,540,2.542,552,2.083,561,1.543,593,1.149,600,0.739,624,1.938,626,1.423,635,2.131,653,2.242,654,2.365,656,1.356,662,1.58,665,3.147,722,1.287,723,1.239,814,1.543,844,1.238,855,2.365,856,1.497,858,1.672,859,2.687,860,2.687,861,2.503,862,2.835,863,2.503,864,3.254,865,2.652,866,3.99,867,3,868,2.365,869,2.242,870,2.365,871,1.497,872,1.58,873,1.356,874,2.834,875,2.365,876,1.672,877,2.365,878,1.356,879,1.672,880,3,881,2.365,882,1.58,883,1.58,884,1.58,885,3.992,886,1.58,887,1.58,888,3.147,889,3.147,890,2.131,891,1.672,892,1.672,893,3.147,894,1.423,895,2.131,896,1.938,897,3.331,898,1.672,899,1.672,900,2.03,901,3,902,1.938,903,3.567,904,1.938,905,2.503,906,3.925,907,2.503,908,2.503,909,1.672,910,2.503,911,2.03,912,2.834,913,1.58,914,2.503,915,1.423,916,1.672,917,3,918,2.503,919,1.672,920,1.672,921,1.672,922,1.672,923,1.672,924,1.423,925,1.046,926,1.58,927,1.58,928,2.687,929,1.672,930,2.242,931,1.58,932,1.238,933,1.356,934,1.672,935,1.672,936,2.503,937,2.131,938,2.503,939,2.554,940,1.423,941,3,942,2.503,943,3.743,944,2.503,945,1.672,946,2.131,947,1.672,948,1.672,949,1.672,950,3.536,951,4.429,952,3,953,2.503,954,3,955,1.672,956,1.672,957,1.672,958,2.503,959,2.503,960,3.536,961,3.331,962,2.503,963,2.503,964,2.503,965,3.331,966,2.503,967,2.503,968,2.503,969,1.672,970,1.672,971,1.58,972,1.672,973,2.503,974,1.672,975,1.672,976,1.672,977,1.672,978,1.672,979,1.672,980,1.672,981,3.881,982,2.503,983,1.672,984,1.672,985,1.672,986,2.503,987,1.672,988,2.503,989,1.672,990,2.503,991,2.542,992,1.672,993,2.503,994,2.503,995,1.672,996,2.503,997,1.672,998,1.672,999,1.774,1000,3.331,1001,1.672,1002,1.672,1003,1.58,1004,2.323,1005,1.672,1006,1.356,1007,1.423,1008,1.672,1009,1.672,1010,1.672,1011,1.672,1012,1.672,1013,1.631,1014,1.7,1015,2.503,1016,2.503,1017,2.365,1018,2.503,1019,3.186,1020,1.423,1021,1.672,1022,2.126,1023,1.672,1024,3.77,1025,3.331,1026,2.503,1027,2.687,1028,2.503,1029,1.136,1030,2.503,1031,1.672,1032,1.672,1033,1.136,1034,2.503,1035,1.938,1036,2.503,1037,1.672,1038,2.503,1039,1.672,1040,2.365,1041,1.672,1042,1.672,1043,1.672,1044,1.672,1045,1.672,1046,2.503,1047,2.242,1048,2.503,1049,2.365,1050,2.503,1051,1.672,1052,2.365,1053,2.503,1054,1.58,1055,1.565,1056,1.672,1057,1.672,1058,1.672,1059,1.672,1060,1.672,1061,1.672,1062,1.672,1063,1.672,1064,1.185,1065,1.672,1066,4.273,1067,3,1068,2.503,1069,2.503,1070,1.672,1071,1.356,1072,1.672,1073,1.672,1074,2.503,1075,1.672,1076,1.672,1077,1.672,1078,2.503,1079,1.672,1080,1.672,1081,1.672,1082,1.672,1359,4.285,1360,4.285,1361,3.719,1362,4.285,1363,4.285,1364,4.285,1365,2.862,1366,2.862,1367,2.862,1368,2.862,1369,2.862,1370,2.485,1371,2.862,1372,2.862,1373,2.862,1374,2.862,1375,2.862,1376,2.862]],["title/interfaces/GrpcClientOptions.html",[0,0.167,888,2.19]],["body/interfaces/GrpcClientOptions.html",[0,0.257,2,0.47,3,0.214,4,0.121,5,0.249,9,0.392,18,0.791,20,0.116,25,0.009,31,0.249,35,0.015,40,0.829,41,0.695,42,0.764,45,0.603,64,0.331,68,0.761,69,0.677,73,0.29,74,1.415,75,1.906,76,0.809,79,0.357,80,0.627,82,0.009,83,0.006,88,2.039,89,0.461,93,1.801,94,1.65,98,0.076,100,0.628,103,0.593,123,0.738,124,0.373,132,0.921,135,0.992,136,0.992,138,1.671,139,1.114,145,1.496,147,1.114,149,0.696,151,1.462,159,1.554,162,0.738,169,1.544,178,1.496,180,1.377,188,1.072,189,1.072,191,1.207,192,1.207,195,0.45,197,1.027,209,0.942,229,1.703,243,1.072,249,0.853,269,1.257,280,1.286,281,0.902,282,1.286,292,1.257,305,1.207,306,1.207,307,1.336,315,1.019,326,1.606,328,1.29,329,1.614,343,1.257,344,0.985,345,1.518,358,1.811,359,1.336,373,1.637,375,1.238,376,1.606,377,0.45,389,1.43,391,1.7,394,0.705,402,2.039,404,2.039,407,1.072,408,1.031,416,1.031,417,0.992,443,1.257,461,1.742,482,2.039,483,1.031,484,1.486,486,2.039,493,2.645,534,1.031,540,2.423,552,2.039,561,1.677,593,1.276,624,1.494,626,1.642,635,2.367,653,1.728,654,1.823,656,1.565,662,1.823,665,2.627,722,1.43,723,1.377,814,1.835,844,1.428,855,2.627,856,1.728,858,1.929,859,2.919,860,2.919,861,2.781,862,3.219,863,3.26,864,3.255,865,2.528,866,3.568,867,2.781,868,2.627,869,2.49,870,2.627,871,1.728,872,1.823,873,1.565,874,2.627,875,2.627,876,1.929,877,2.627,878,1.565,879,1.929,880,2.781,881,2.627,882,1.823,883,1.823,884,1.823,885,3.896,886,1.823,887,1.823,888,3.08,889,3.572,890,2.367,891,1.929,892,1.929,893,2.644,894,1.642,895,2.367,896,2.153,897,3.568,898,1.929,899,1.929,900,1.565,901,1.929,902,1.494,903,3.26,904,1.494,905,1.929,906,3.835,907,1.929,908,2.781,909,1.929,910,2.781,911,2.255,912,2.627,913,1.823,914,1.929,915,1.642,916,1.929,917,3.26,918,2.781,919,1.929,920,1.929,921,1.929,922,1.929,923,1.929,924,1.642,925,1.207,926,1.823,927,1.823,928,2.49,929,1.929,930,2.49,931,1.823,932,1.428,933,1.565,934,1.929,935,1.929,936,1.929,937,1.642,938,1.929,939,2.775,940,1.642,941,2.781,942,1.929,943,2.781,944,1.929,945,1.929,946,2.367,947,1.929,948,1.929,949,1.929,950,3.08,951,4.233,952,2.781,953,1.929,954,1.929,955,1.929,956,1.929,957,1.929,958,1.929,959,1.929,960,3.37,961,2.781,962,1.929,963,1.929,964,1.929,965,2.781,966,1.929,967,1.929,968,1.929,969,1.929,970,1.929,971,1.823,972,1.929,973,2.781,974,1.929,975,1.929,976,1.929,977,1.929,978,1.929,979,1.929,980,1.929,981,3.26,982,1.929,983,1.929,984,1.929,985,1.929,986,2.781,987,1.929,988,1.929,989,1.929,990,2.781,991,2.214,992,1.929,993,2.781,994,2.781,995,1.929,996,2.781,997,1.929,998,1.929,999,1.367,1000,3.26,1001,1.929,1002,1.929,1003,1.823,1004,2.524,1005,1.929,1006,1.565,1007,1.642,1008,1.929,1009,1.929,1010,1.929,1011,1.929,1012,1.929,1013,1.257,1014,1.31,1015,1.929,1016,1.929,1017,1.823,1018,1.929,1019,2.367,1020,1.642,1021,1.929,1022,1.367,1023,1.929,1024,3.572,1025,1.929,1026,1.929,1027,2.49,1028,2.781,1029,1.31,1030,2.781,1031,1.929,1032,1.929,1033,1.31,1034,1.929,1035,1.494,1036,1.929,1037,1.929,1038,2.781,1039,1.929,1040,2.627,1041,1.929,1042,1.929,1043,1.929,1044,1.929,1045,1.929,1046,1.929,1047,1.728,1048,1.929,1049,1.823,1050,1.929,1051,1.929,1052,1.823,1053,1.929,1054,1.823,1055,1.207,1056,1.929,1057,1.929,1058,1.929,1059,1.929,1060,1.929,1061,1.929,1062,1.929,1063,1.929,1064,1.367,1065,1.929,1066,4.397,1067,3.26,1068,2.781,1069,2.781,1070,1.929,1071,1.565,1072,1.929,1073,1.929,1074,2.781,1075,1.929,1076,1.929,1077,1.929,1078,2.781,1079,1.929,1080,1.929,1081,1.929,1082,1.929]],["title/classes/LongRunningDescriptor.html",[98,0.046,99,2.19]],["body/classes/LongRunningDescriptor.html",[0,0.242,3,0.258,4,0.21,5,0.234,7,1.482,15,2.506,16,2.407,20,0.14,21,1.109,25,0.01,31,0.316,32,1.427,35,0.015,38,1.154,40,1.019,41,0.737,42,0.737,44,0.586,53,0.681,64,0.349,67,3.263,68,1.751,69,0.817,73,0.279,79,0.258,80,0.497,82,0.012,83,0.01,84,6.372,85,4.983,86,4.983,87,4.983,88,2.506,89,0.664,93,1.705,94,1.18,95,4.296,96,4.912,97,3.411,98,0.067,99,3.785,100,1.303,101,5.706,102,5.706,103,0.628,104,3.814,105,4.983,106,4.983,107,4.261,108,4.983,600,1.482,631,4.557,1377,5.741,1378,6.858,1379,5.741,1380,5.741,1381,5.741]],["title/classes/LongrunningApiCaller.html",[96,2.842,98,0.046]],["body/classes/LongrunningApiCaller.html",[1,3.253,3,0.22,4,0.179,5,0.2,7,1.266,9,0.738,15,2.274,16,2.185,20,0.12,21,1.007,22,0.812,23,3.096,24,3.995,25,0.012,26,3.867,27,3.047,28,1.711,29,1.71,30,1.49,31,0.321,32,1.939,33,3.884,34,3.991,35,0.015,36,3.401,38,1.145,40,1.127,41,0.815,42,0.815,43,2.427,44,0.758,45,1.249,46,4.135,48,1.777,49,1.886,51,3.047,52,3.97,53,0.914,54,1.711,56,2.121,57,4.135,60,3.637,61,3.009,63,3.096,64,0.346,66,1.219,68,1.13,69,0.698,73,0.2,78,1.049,79,0.346,80,0.592,82,0.011,83,0.009,89,0.602,95,3.257,96,4.458,98,0.057,99,4.494,100,1.183,103,0.57,109,3.14,124,0.812,130,2.23,132,1.024,186,2.439,187,2.737,197,0.638,325,2.439,344,0.774,365,2.324,366,2.949,375,1.381,377,0.848,600,1.266,616,3.513,617,3.513,622,3.513,623,3.831,842,4.458,849,2.737,1114,2.692,1177,3.019,1224,4.458,1230,4.862,1265,3.258,1266,3.831,1382,4.904,1383,6.224,1384,6.224,1385,4.458,1386,5.403,1387,6.224,1388,4.904,1389,4.904,1390,4.904,1391,4.904,1392,4.904,1393,4.904,1394,4.904,1395,4.904]],["title/interfaces/Metadata.html",[0,0.167,93,0.987]],["body/interfaces/Metadata.html",[0,0.257,2,0.471,3,0.214,4,0.121,5,0.249,9,0.392,18,0.792,20,0.116,25,0.009,31,0.264,35,0.015,40,0.83,41,0.696,42,0.512,45,0.604,64,0.331,68,0.763,69,0.678,73,0.29,74,1.352,75,1.488,76,0.841,79,0.357,80,0.627,82,0.009,83,0.006,88,2.041,89,0.461,93,1.829,94,1.638,98,0.076,100,0.629,103,0.593,123,0.739,124,0.374,132,0.922,135,0.994,136,0.994,138,1.672,139,1.116,145,1.498,147,1.116,149,0.696,151,1.463,159,1.879,162,0.739,169,1.546,178,1.498,180,1.378,188,1.074,189,1.074,191,1.209,192,1.209,195,0.451,197,1.028,209,0.942,229,1.784,243,1.074,249,0.854,269,1.259,280,1.287,281,0.903,282,1.287,292,1.259,305,1.209,306,1.209,307,1.337,315,1.02,326,1.608,328,1.29,329,1.616,343,1.259,344,0.985,345,1.519,358,1.814,359,1.337,373,1.639,375,1.239,376,1.608,377,0.451,389,1.432,391,1.702,394,0.706,402,2.041,404,2.041,407,1.074,408,1.033,416,1.033,417,0.994,443,1.259,461,1.744,482,2.041,483,1.033,484,1.488,486,2.041,493,2.646,534,1.033,540,2.425,552,2.041,561,1.678,593,1.278,624,1.496,626,1.645,635,2.37,653,1.731,654,1.826,656,1.568,662,1.826,665,2.63,722,1.432,723,1.378,814,1.678,844,1.431,855,2.63,856,1.731,858,1.933,859,2.922,860,2.922,861,2.784,862,2.778,863,2.784,864,3.134,865,2.53,866,3.571,867,2.784,868,2.63,869,2.493,870,2.63,871,1.731,872,1.826,873,1.568,874,2.63,875,2.63,876,1.933,877,2.63,878,1.568,879,1.933,880,2.784,881,2.63,882,1.826,883,1.826,884,1.826,885,3.898,886,1.826,887,1.826,888,2.63,889,3.083,890,3.039,891,1.933,892,3.571,893,2.647,894,1.645,895,2.37,896,2.155,897,3.571,898,1.933,899,1.933,900,1.568,901,1.933,902,1.496,903,3.263,904,1.496,905,1.933,906,3.837,907,1.933,908,2.784,909,1.933,910,2.784,911,2.258,912,2.63,913,1.826,914,1.933,915,1.645,916,1.933,917,3.263,918,2.784,919,1.933,920,1.933,921,1.933,922,1.933,923,1.933,924,1.645,925,1.209,926,1.826,927,1.826,928,2.493,929,1.933,930,2.493,931,1.826,932,1.431,933,1.568,934,1.933,935,1.933,936,1.933,937,1.645,938,1.933,939,2.778,940,1.645,941,2.784,942,1.933,943,2.784,944,1.933,945,1.933,946,2.37,947,1.933,948,1.933,949,1.933,950,3.083,951,4.235,952,2.784,953,1.933,954,1.933,955,1.933,956,1.933,957,1.933,958,1.933,959,1.933,960,3.373,961,2.784,962,1.933,963,1.933,964,1.933,965,2.784,966,1.933,967,1.933,968,1.933,969,1.933,970,1.933,971,1.826,972,1.933,973,2.784,974,1.933,975,1.933,976,1.933,977,1.933,978,1.933,979,1.933,980,1.933,981,3.263,982,1.933,983,1.933,984,1.933,985,1.933,986,2.784,987,1.933,988,1.933,989,1.933,990,2.784,991,2.216,992,1.933,993,2.784,994,2.784,995,1.933,996,2.784,997,1.933,998,1.933,999,1.37,1000,3.263,1001,1.933,1002,1.933,1003,1.826,1004,2.526,1005,1.933,1006,1.568,1007,1.645,1008,1.933,1009,1.933,1010,1.933,1011,1.933,1012,1.933,1013,1.259,1014,1.313,1015,1.933,1016,1.933,1017,1.826,1018,1.933,1019,2.37,1020,1.645,1021,1.933,1022,1.37,1023,1.933,1024,3.575,1025,1.933,1026,1.933,1027,2.493,1028,2.784,1029,1.313,1030,2.784,1031,1.933,1032,1.933,1033,1.313,1034,1.933,1035,1.496,1036,1.933,1037,1.933,1038,2.784,1039,1.933,1040,2.63,1041,1.933,1042,1.933,1043,1.933,1044,1.933,1045,1.933,1046,1.933,1047,1.731,1048,1.933,1049,1.826,1050,1.933,1051,1.933,1052,1.826,1053,1.933,1054,1.826,1055,1.209,1056,1.933,1057,1.933,1058,1.933,1059,1.933,1060,1.933,1061,1.933,1062,1.933,1063,1.933,1064,1.37,1065,1.933,1066,4.399,1067,3.263,1068,2.784,1069,2.784,1070,1.933,1071,1.568,1072,1.933,1073,1.933,1074,2.784,1075,1.933,1076,1.933,1077,1.933,1078,2.784,1079,1.933,1080,1.933,1081,1.933,1082,1.933]],["title/interfaces/MetadataValue.html",[0,0.167,890,1.973]],["body/interfaces/MetadataValue.html",[0,0.258,2,0.475,3,0.216,4,0.122,5,0.25,9,0.395,18,0.799,20,0.117,25,0.009,31,0.195,35,0.015,40,0.834,41,0.698,42,0.515,45,0.609,64,0.331,68,0.769,69,0.682,73,0.29,74,1.355,75,1.497,76,0.824,79,0.358,80,0.629,82,0.009,83,0.006,88,2.05,89,0.464,93,1.806,94,1.639,98,0.076,100,0.634,103,0.595,123,0.743,124,0.377,132,0.925,135,1.002,136,1.002,138,1.678,139,1.126,145,1.505,147,1.126,149,0.697,151,1.469,159,1.563,162,0.743,169,1.556,178,1.505,180,1.387,188,1.082,189,1.082,191,1.219,192,1.219,195,0.454,197,1.029,209,0.943,229,1.707,243,1.082,249,0.861,269,1.27,280,1.293,281,0.907,282,1.293,292,1.27,305,1.219,306,1.219,307,1.343,315,1.025,326,1.618,328,1.292,329,1.623,343,1.27,344,0.986,345,1.525,358,1.824,359,1.343,373,1.645,375,1.245,376,1.618,377,0.454,389,1.44,391,1.708,394,0.712,402,2.05,404,2.05,407,1.082,408,1.041,416,1.041,417,1.002,443,1.27,461,1.752,482,2.05,483,1.041,484,1.497,486,2.05,493,2.653,534,1.041,540,2.434,552,2.05,561,1.686,593,1.285,624,1.509,626,1.659,635,2.384,653,1.745,654,1.841,656,1.581,662,1.841,665,2.646,722,1.44,723,1.387,814,1.686,844,1.442,855,2.646,856,1.745,858,1.949,859,2.936,860,2.936,861,2.801,862,2.791,863,2.801,864,3.141,865,2.539,866,3.584,867,2.801,868,2.646,869,2.508,870,2.646,871,1.745,872,1.841,873,1.581,874,2.646,875,2.646,876,1.949,877,2.646,878,1.581,879,1.949,880,2.801,881,2.646,882,1.841,883,1.841,884,1.841,885,3.905,886,1.841,887,1.841,888,2.646,889,3.097,890,2.791,891,3.584,892,1.949,893,2.659,894,1.659,895,2.384,896,2.168,897,3.584,898,1.949,899,1.949,900,1.581,901,1.949,902,1.509,903,3.279,904,1.509,905,1.949,906,3.847,907,1.949,908,2.801,909,1.949,910,2.801,911,2.272,912,2.646,913,1.841,914,1.949,915,1.659,916,1.949,917,3.279,918,2.801,919,1.949,920,1.949,921,1.949,922,1.949,923,1.949,924,1.659,925,1.219,926,1.841,927,1.841,928,2.508,929,1.949,930,2.508,931,1.841,932,1.442,933,1.581,934,1.949,935,1.949,936,1.949,937,1.659,938,1.949,939,2.791,940,1.659,941,2.801,942,1.949,943,2.801,944,1.949,945,1.949,946,2.384,947,1.949,948,1.949,949,1.949,950,3.097,951,4.244,952,2.801,953,1.949,954,1.949,955,1.949,956,1.949,957,1.949,958,1.949,959,1.949,960,3.386,961,2.801,962,1.949,963,1.949,964,1.949,965,2.801,966,1.949,967,1.949,968,1.949,969,1.949,970,1.949,971,1.841,972,1.949,973,2.801,974,1.949,975,1.949,976,1.949,977,1.949,978,1.949,979,1.949,980,1.949,981,3.279,982,1.949,983,1.949,984,1.949,985,1.949,986,2.801,987,1.949,988,1.949,989,1.949,990,2.801,991,2.226,992,1.949,993,2.801,994,2.801,995,1.949,996,2.801,997,1.949,998,1.949,999,1.381,1000,3.279,1001,1.949,1002,1.949,1003,1.841,1004,2.538,1005,1.949,1006,1.581,1007,1.659,1008,1.949,1009,1.949,1010,1.949,1011,1.949,1012,1.949,1013,1.27,1014,1.323,1015,1.949,1016,1.949,1017,1.841,1018,1.949,1019,2.384,1020,1.659,1021,1.949,1022,1.381,1023,1.949,1024,3.586,1025,1.949,1026,1.949,1027,2.508,1028,2.801,1029,1.323,1030,2.801,1031,1.949,1032,1.949,1033,1.323,1034,1.949,1035,1.509,1036,1.949,1037,1.949,1038,2.801,1039,1.949,1040,2.646,1041,1.949,1042,1.949,1043,1.949,1044,1.949,1045,1.949,1046,1.949,1047,1.745,1048,1.949,1049,1.841,1050,1.949,1051,1.949,1052,1.841,1053,1.949,1054,1.841,1055,1.219,1056,1.949,1057,1.949,1058,1.949,1059,1.949,1060,1.949,1061,1.949,1062,1.949,1063,1.949,1064,1.381,1065,1.949,1066,4.406,1067,3.279,1068,2.801,1069,2.801,1070,1.949,1071,1.581,1072,1.949,1073,1.949,1074,2.801,1075,1.949,1076,1.949,1077,1.949,1078,2.801,1079,1.949,1080,1.949,1081,1.949,1082,1.949]],["title/interfaces/MethodConfig.html",[0,0.167,403,1.88]],["body/interfaces/MethodConfig.html",[0,0.25,2,0.601,3,0.094,4,0.077,5,0.251,9,0.839,12,1.205,18,1.266,19,0.937,20,0.163,21,0.855,22,0.767,25,0.004,29,0.466,31,0.197,32,1.759,35,0.015,40,0.786,41,0.362,42,0.606,44,0.344,53,0.4,64,0.094,68,1.421,69,0.48,73,0.288,74,1.404,75,1.318,76,0.729,78,0.568,79,0.34,80,0.605,82,0.006,83,0.004,89,0.409,91,2.321,98,0.039,100,0.802,103,0.443,109,3.19,110,1.045,111,2.402,112,2.185,113,2.402,114,3.389,115,3.066,116,3.066,117,2.807,118,3.066,119,3.066,120,3.315,121,3.315,122,2.63,123,1.275,124,0.883,125,3.015,126,1.099,127,1.099,128,1.099,129,1.597,130,1.782,131,1.099,132,1.018,133,1.676,134,1.045,135,1.451,136,1.268,137,1.825,138,1.09,139,1.424,140,1.045,141,0.87,142,1.045,143,0.656,144,1.099,145,1.418,146,1.099,147,0.709,148,2.527,149,0.692,150,2.652,151,1.522,152,1.764,153,3.342,154,3.112,155,1.909,156,1.395,157,2.402,158,1.045,159,1.572,160,1.651,161,2.821,162,0.875,163,2.527,164,2.392,165,2.527,166,1.924,167,1.099,168,1.825,169,0.682,170,0.975,171,1.082,172,2.552,173,1.099,174,2.81,175,1.099,176,1.266,177,2.208,178,0.563,179,1.395,180,1.397,181,1.099,182,0.631,183,1.283,184,3.163,185,2.037,186,3.066,187,0.8,188,1.37,189,1.37,190,0.768,191,1.765,192,1.542,193,1.747,194,1.764,195,0.658,196,1.099,197,1.03,198,1.764,199,1.764,200,1.764,201,0.996,202,1.099,203,1.099,204,0.503,205,1.395,206,1.676,207,2.402,208,1.676,209,0.896,210,3.013,211,1.099,212,1.099,213,0.996,214,3.066,215,3.071,216,2.586,217,3.315,218,3.377,219,2.553,220,1.782,221,2.876,222,1.006,223,2.807,224,2.807,225,3.377,226,2.146,227,2.099,228,2.564,229,1.651,230,2.949,231,2.337,232,2.203,233,1.099,234,1.458,235,1.676,236,2.564,237,1.418,238,1.999,239,1.676,240,2.099,241,2.099,242,1.676,243,0.682,244,2.289,245,1.458,246,1.395,247,1.099,248,2.63,249,1.365,250,2,251,1.764,252,1.764,253,2.185,254,2.252,255,1.764,256,2.527,257,1.825,258,1.764,259,1.764,260,1.508,261,2.289,262,0.8,263,1.094,264,1.764,265,1.764,266,1.764,267,1.764,268,1.099,269,1.283,270,1.764,271,2,272,1.099,273,1.099,274,1.099,275,1.099,276,2.289,277,0.996,278,0.543,279,2.953,280,1.301,281,0.913,282,1.301,283,3.315,284,1.099,285,1.764,286,0.95,287,1.676,288,1.676,289,1.597,290,1.232,291,1.099,292,1.283,293,1.676,294,1.099,295,0.834,296,1.458,297,1.099,298,1.045,299,1.099,300,1.099,301,1.676,302,1.099,303,1.045,304,1.764,305,0.768,306,1.232,307,0.807,308,1.764,309,1.099,310,1.764,311,1.045,312,1.676,313,1.764,314,1.764,315,0.616,316,1.764,317,1.764,318,1.045,319,2.208,320,1.764,321,1.099,322,1.764,323,0.996,324,1.764,325,1.045,326,1.137,327,2.208,328,1.236,329,1.221,330,0.996,331,1.337,332,1.099,333,0.738,334,1.099,335,1.099,336,1.099,337,1.099,338,1.099,339,1.099,340,1.099,341,1.099,342,1.045,343,1.606,344,0.912,345,0.838,346,1.099,347,1.099,348,1.099,349,1.099,350,1.099,351,1.099,352,1.099,353,1.099,354,1.099,355,0.996,356,1.099,357,1.099,358,0.8,359,0.503,360,1.045,361,3.066,362,1.045,363,0.95,364,1.045,365,1.597,366,0.996,367,1.099,368,1.099,369,1.099,370,1.045,371,1.045,372,0.996,373,0.904,374,1.045,375,0.466,376,2.001,377,0.575,378,1.099,379,1.099,380,1.099,381,3.066,382,1.676,383,2.099,384,2.099,385,2.099,386,2.099,387,2.099,388,1.099,389,0.631,390,1.099,391,0.939,392,1.099,393,1.099,394,1.358,395,1.099,396,1.099,397,1.099,398,1.099,399,1.099,400,1.099,401,1.764,402,2.062,403,3.159,404,2.252,405,1.232,406,2.208,407,1.716,408,1.851,409,1.482,410,2.208,411,1.999,412,1.099,413,2.527,414,2.099,415,2.807,416,1.508,417,1.013,418,0.777,419,2.208,420,2.949,421,1.099,422,1.099,423,1.099,424,1.099,425,1.099,426,2.949,427,1.099,428,2.099,429,1.099,430,1.099,431,1.099,432,1.099,433,1.099,434,1.099,435,1.099,436,1.764,437,0.95,438,1.045,439,1.099,440,1.099,441,1.395,442,2.766,443,0.8,444,1.045,445,1.045,446,1.764,447,2.208,448,2.208,449,1.099,450,1.099,451,2.402,452,1.676,453,1.676,454,1.676,455,1.676,456,1.676,457,1.676,458,1.676,459,1.676,460,2.766,461,1.762,462,1.045,463,1.045,464,0.996,465,1.676,466,1.676,467,1.045,468,1.045,469,1.676,470,1.676,471,1.045,472,1.045,473,1.045,474,1.045,475,1.045,476,1.045,477,0.996,478,1.045,479,0.87,480,1.045,481,1.045,482,1.765,483,0.656,484,0.656,485,0.95,486,1.232,487,0.95,488,1.045,489,0.87,490,1.045,491,0.631,492,1.045,493,0.8,494,1.099,495,1.099,496,1.099,497,1.764,498,1.099,499,1.525,500,1.099,501,1.099,502,1.099,503,1.099,504,1.099,505,1.099,506,1.099,507,1.099,508,2.766,509,1.099,510,1.099,511,1.099,512,1.099,513,1.099,514,1.099,515,1.099]],["title/classes/NormalApiCaller.html",[70,2.465,98,0.046]],["body/classes/NormalApiCaller.html",[1,3.382,3,0.246,4,0.2,5,0.223,7,1.413,9,0.79,20,0.134,21,1.209,22,0.844,23,3.314,24,4.197,25,0.013,26,4.139,27,3.399,28,1.723,29,1.659,30,1.79,31,0.327,32,1.905,33,4.01,34,4.048,35,0.015,36,3.573,38,1.139,40,1.139,41,0.823,42,0.823,43,2.248,44,0.782,45,1.366,46,4.427,48,1.72,49,1.905,51,3.399,52,4.126,53,0.886,54,1.723,56,2.366,57,4.427,60,3.893,61,3.092,63,3.314,64,0.336,66,1.36,70,4.139,73,0.223,79,0.336,80,0.577,82,0.012,83,0.01,98,0.064,100,1.266,375,1.478,600,1.413,616,3.919,617,3.919,622,3.919,623,4.274,1196,3.486,1385,4.772,1396,5.472,1397,6.663,1398,5.472,1399,5.472,1400,5.472,1401,5.472,1402,5.472,1403,4.75]],["title/classes/OngoingCall.html",[36,1.973,98,0.046]],["body/classes/OngoingCall.html",[0,0.203,3,0.217,4,0.176,5,0.197,7,1.591,9,0.931,12,1.613,20,0.118,21,0.996,22,0.887,25,0.012,28,1.703,29,1.586,31,0.301,33,2.525,34,2.4,35,0.015,36,3.674,38,1.141,40,0.916,41,0.729,42,0.812,44,0.629,45,1.38,48,1.475,49,1.687,53,0.949,54,1.792,56,2.087,59,2.583,63,3.064,64,0.305,65,1.915,66,1.2,73,0.276,74,1.492,75,1.507,76,0.825,78,0.813,79,0.277,80,0.587,82,0.011,83,0.009,89,0.596,91,1.507,98,0.072,100,0.917,103,0.655,124,0.696,132,0.877,149,0.622,160,1.716,162,0.748,170,1.963,171,1.191,178,1.652,188,1.566,189,1.566,197,0.931,222,0.802,237,1.652,280,1.42,281,1.156,282,1.42,315,1.125,326,1.628,344,0.766,377,0.839,391,1.344,418,1.112,600,1.246,719,2.219,722,1.45,723,1.396,766,2.82,791,2.919,813,3.77,814,1.851,816,2.787,817,2.919,818,3.388,819,2.919,820,5.301,821,3.746,822,3.599,823,3.827,824,3.827,825,4.216,826,4.812,827,4.812,828,5.77,829,2.664,830,5.301,831,3.77,832,3.77,833,3.77,834,4.812,835,4.812,836,3.77,837,3.223,838,3.77,839,3.77,840,3.77,841,3.77,842,3.456,843,3.206,844,2.087,845,3.77,846,3.206,847,3.206,848,3.206,849,2.345,850,3.77,851,3.77,852,3.77,853,3.77,854,3.77,1404,6.161,1405,4.826,1406,4.826,1407,4.826,1408,4.826]],["title/classes/OngoingCallPromise.html",[34,1.973,98,0.046]],["body/classes/OngoingCallPromise.html",[0,0.201,3,0.215,4,0.174,5,0.194,7,1.579,9,0.908,12,1.52,20,0.117,21,0.989,22,0.885,25,0.012,28,1.697,29,1.58,31,0.307,33,2.497,34,3.042,35,0.015,36,3.896,38,1.153,40,0.909,41,0.725,42,0.809,44,0.624,45,1.376,48,1.464,49,1.678,53,0.929,54,1.736,59,2.71,63,3.042,64,0.303,65,1.893,66,1.186,73,0.275,74,1.533,75,2.108,76,0.823,78,0.804,79,0.275,80,0.584,82,0.011,83,0.009,89,0.592,91,1.49,98,0.072,100,1.162,103,0.674,124,0.691,132,0.871,149,0.619,160,1.703,162,0.74,170,1.769,171,1.185,178,1.64,188,1.985,189,1.985,197,0.927,222,0.796,237,1.64,280,1.41,281,1.151,282,1.41,315,1.117,326,1.61,344,0.76,377,0.833,391,1.329,418,1.1,600,1.232,719,2.212,722,1.434,723,1.38,766,2.788,791,2.898,813,3.727,814,2.028,816,2.767,817,2.898,818,3.374,819,2.898,820,5.273,821,3.726,822,2.788,823,2.964,824,2.964,825,4.194,826,3.727,827,4.778,828,5.75,829,2.645,830,5.273,831,3.727,832,3.727,833,3.727,834,4.778,835,4.778,836,3.727,837,3.2,838,3.727,839,3.727,840,4.778,841,4.778,842,4.381,843,4.064,844,2.063,845,4.778,846,3.17,847,3.17,848,3.17,849,2.328,850,3.727,851,3.727,852,3.727,853,3.727,854,3.727,1409,6.117,1410,7.361,1411,4.772,1412,4.772,1413,4.772,1414,4.772,1415,4.772]],["title/classes/Operation.html",[98,0.046,1177,1.51]],["body/classes/Operation.html",[0,0.128,3,0.136,4,0.111,5,0.182,7,0.783,9,0.776,13,1.372,15,1.941,16,1.064,20,0.074,21,0.723,22,0.706,23,1.508,25,0.014,30,1.071,31,0.317,32,1.321,35,0.015,38,1.17,40,0.872,41,0.786,42,0.822,44,0.755,45,1.269,48,1.272,49,1.627,53,0.907,56,2.298,59,2.232,64,0.312,65,1.203,66,0.754,69,0.432,73,0.216,74,1.496,76,0.63,79,0.346,80,0.614,82,0.008,83,0.005,89,0.433,93,1.975,94,0.623,95,2.34,97,2.643,98,0.035,99,4.328,101,3.203,102,3.203,103,0.537,109,3.233,112,2.829,123,0.694,124,0.801,130,2.347,132,0.963,138,1.372,143,1.396,149,0.41,150,1.064,151,1.272,154,2.2,159,1.245,160,1.633,162,0.694,170,1.294,171,1.266,178,1.573,187,2.699,190,1.108,195,0.852,197,0.973,201,1.437,209,0.63,213,1.437,215,2.403,219,2.023,220,1.344,221,2.023,222,0.582,226,1.793,229,0.726,234,1.311,237,2.117,245,1.934,263,1.451,278,1.69,280,1.225,281,0.859,282,1.225,315,0.817,344,0.945,373,1.199,377,0.609,394,0.955,418,1.56,491,0.911,552,1.634,573,2.613,593,1.199,600,0.783,626,2.224,703,3.203,718,2.172,719,1.762,722,0.911,723,0.877,756,2.971,766,3.427,768,2.172,783,2.172,791,2.779,792,2.709,814,1.344,821,3.237,837,2.34,843,2.971,844,1.934,846,2.015,847,2.971,848,2.971,849,2.784,890,2.224,902,2.023,1013,1.702,1027,2.34,1035,2.653,1064,1.851,1071,1.437,1136,3.885,1177,3.136,1186,2.023,1187,2.023,1201,2.34,1204,2.224,1207,2.78,1208,2.34,1210,5.781,1211,2.369,1212,4.612,1213,4.151,1214,4.612,1215,4.612,1216,4.612,1217,4.612,1218,4.612,1219,4.581,1220,3.882,1221,5.091,1222,4.151,1223,4.151,1224,3.806,1225,4.151,1226,4.886,1227,4.612,1228,5.091,1229,2.632,1230,2.369,1231,3.882,1232,3.882,1233,2.632,1234,2.632,1235,3.882,1236,3.882,1237,3.882,1238,3.882,1239,3.882,1240,5.011,1241,5.091,1242,3.897,1243,3.882,1244,3.494,1245,3.882,1246,4.581,1247,3.882,1248,3.882,1249,3.882,1250,2.778,1251,3.882,1252,5.091,1253,2.632,1254,2.632,1255,2.632,1256,3.882,1257,3.882,1258,2.632,1259,3.882,1260,2.632,1261,3.882,1262,3.882,1263,3.882,1264,3.882,1265,2.971,1266,4.886,1267,3.882,1268,2.632,1269,2.632,1270,3.882,1271,5.091,1272,4.792,1273,5.091,1274,4.612,1275,2.632,1276,2.632,1277,2.632,1278,2.632,1279,2.632,1280,2.632,1281,2.632,1282,3.882,1283,2.632,1284,2.632,1285,2.632,1286,3.882,1287,2.632,1288,2.632,1289,2.632,1290,3.882,1291,2.632,1292,2.632,1293,2.632,1294,2.632,1295,2.632,1296,2.632,1297,2.632,1298,2.632,1299,2.632,1300,2.632,1301,4.581,1302,2.971,1303,3.882,1304,3.882,1305,3.882,1306,3.882,1307,3.882,1308,3.882,1309,5.091,1310,3.494,1311,3.882,1312,2.632,1313,3.882,1314,2.632,1315,2.632,1316,2.632,1317,3.882,1318,3.882,1319,5.091,1320,2.632,1321,2.632,1322,2.632,1323,2.632,1324,2.632,1325,2.632,1326,2.632,1327,2.172,1328,2.632,1329,2.632,1330,5.429,1331,2.632,1332,2.632,1333,2.632,1334,2.632,1335,2.632,1336,3.203,1337,2.369,1338,1.884,1339,2.632,1340,2.632,1341,2.369,1342,2.369,1343,2.632,1344,2.632,1345,2.632,1346,2.632,1347,2.632,1348,2.632,1349,2.632,1350,2.369,1416,4.472,1417,3.032,1418,4.472,1419,3.032,1420,3.032,1421,3.032,1422,3.032,1423,3.032,1424,3.032,1425,3.032,1426,3.032,1427,3.032,1428,3.032,1429,3.032,1430,3.032,1431,3.032,1432,3.032,1433,3.032,1434,3.032,1435,3.032,1436,3.032,1437,3.032,1438,3.032]],["title/classes/OperationsClient.html",[95,2.076,98,0.046]],["body/classes/OperationsClient.html",[0,0.228,3,0.099,4,0.081,5,0.09,7,1.489,9,0.935,12,0.749,15,2.513,16,2.325,19,1.102,20,0.054,21,0.876,22,0.876,25,0.013,30,1.381,31,0.28,32,1.681,35,0.015,38,1.005,40,1.1,41,0.818,42,0.795,44,0.75,45,0.907,48,0.839,53,0.939,56,2.148,64,0.282,66,0.549,67,0.914,69,0.621,73,0.221,74,1.432,76,0.76,78,0.837,79,0.33,80,0.43,82,0.006,83,0.004,89,0.339,94,0.896,95,3.382,97,3.294,98,0.063,103,0.321,104,1.467,123,0.938,124,0.249,132,0.621,137,2.974,138,1.62,139,0.745,141,2.056,143,1.692,145,1.918,147,1.183,149,0.731,150,2.325,151,1.784,155,1.586,156,2.056,159,0.615,161,2.495,162,0.77,164,2.247,166,2.068,168,2.148,169,1.138,170,1.87,171,1.279,172,0.914,176,1.297,178,1.332,180,1.916,182,1.053,183,1.334,187,1.334,193,2.89,195,1.015,197,1.009,204,1.297,205,2.056,209,0.815,216,1.281,220,1.628,222,1.015,228,2.148,229,1.189,231,1.451,232,2.036,236,2.864,238,1.451,260,1.095,263,1.138,278,1.745,280,0.808,281,0.933,282,0.808,286,1.586,290,1.281,295,0.876,328,1.364,329,0.638,344,0.997,359,1.189,373,1.733,376,2.235,377,0.676,405,2.293,407,1.138,408,0.689,437,1.586,461,1.095,499,0.998,534,1.362,540,1.391,541,1.218,543,2.742,552,0.807,561,1.053,570,2.049,593,1.937,594,1.155,600,0.57,619,1.467,639,2.511,649,3.3,652,2.511,680,2.329,683,2.067,713,2.178,719,1.99,764,2.178,785,2.329,791,2.733,792,1.805,798,1.183,821,1.935,822,2.049,823,3.898,824,2.178,825,3.086,829,2.495,837,1.834,849,1.334,862,2.169,864,2.343,865,0.914,873,1.046,893,1.661,894,1.098,895,1.744,900,2.733,902,0.998,911,2.354,915,1.098,932,1.516,937,2.869,939,1.098,940,1.098,946,3.294,1006,1.046,1007,1.098,1019,1.098,1020,1.098,1029,2.489,1035,2.838,1064,1.451,1108,2.049,1114,2.148,1145,2.869,1146,2.049,1147,1.218,1161,2.835,1177,2.968,1180,1.098,1186,1.586,1187,0.998,1192,1.661,1206,2.243,1213,4.233,1240,2.329,1242,2.329,1250,2.178,1272,2.898,1302,2.329,1338,4.115,1439,1.581,1440,2.739,1441,2.739,1442,3.558,1443,2.739,1444,5.123,1445,2.329,1446,2.739,1447,2.511,1448,2.739,1449,2.739,1450,2.739,1451,2.739,1452,2.739,1453,2.742,1454,3.88,1455,2.739,1456,2.739,1457,2.511,1458,3.407,1459,3.407,1460,4.902,1461,4.494,1462,3.506,1463,2.739,1464,3.407,1465,4.132,1466,2.208,1467,3.407,1468,2.208,1469,2.739,1470,2.208,1471,1.935,1472,2.739,1473,2.739,1474,2.739,1475,2.739,1476,2.739,1477,2.739,1478,4.506,1479,3.88,1480,2.739,1481,2.739,1482,2.739,1483,2.739,1484,3.407,1485,2.739,1486,2.739,1487,2.739,1488,2.739,1489,2.739,1490,5.174,1491,5.174,1492,4.401,1493,5.419,1494,5.174,1495,2.739,1496,6.048,1497,4.506,1498,2.739,1499,2.208,1500,2.739,1501,2.739,1502,2.739,1503,2.739,1504,2.208,1505,2.739,1506,2.511,1507,2.739,1508,2.739,1509,2.739,1510,2.739,1511,2.739,1512,2.208,1513,3.407,1514,3.88,1515,4.724,1516,2.208,1517,2.208,1518,2.739,1519,2.208,1520,2.739,1521,4.902,1522,2.739,1523,2.178,1524,2.739,1525,2.739,1526,2.739,1527,4.57,1528,2.739,1529,2.739,1530,3.88,1531,2.739,1532,2.739,1533,2.739,1534,2.739,1535,2.739,1536,2.739,1537,2.739,1538,3.407,1539,2.208,1540,2.739,1541,2.511,1542,2.739,1543,2.739,1544,2.739,1545,2.739,1546,2.208,1547,3.506,1548,2.739,1549,2.208,1550,2.739,1551,2.511,1552,1.724,1553,3.124,1554,2.511,1555,1.581,1556,2.511,1557,1.581,1558,1.581,1559,2.511,1560,1.467,1561,2.511,1562,1.581,1563,1.581,1564,1.581,1565,1.581,1566,1.581,1567,1.581,1568,1.724,1569,1.724,1570,1.724,1571,1.724,1572,1.724,1573,1.724,1574,1.467,1575,1.724,1576,1.724,1577,1.724,1578,1.724,1579,2.739,1580,1.724,1581,1.724,1582,1.724,1583,1.724,1584,1.724,1585,2.739,1586,1.724,1587,1.724,1588,1.724,1589,1.724,1590,1.724,1591,1.724,1592,1.724,1593,1.724,1594,1.724,1595,1.724,1596,1.724,1597,1.724,1598,1.724,1599,1.724,1600,1.724,1601,4.233,1602,4.233,1603,4.233,1604,4.233,1605,3.88,1606,4.506,1607,4.506,1608,2.742,1609,1.724,1610,2.739,1611,2.739,1612,2.739,1613,2.739,1614,2.739,1615,2.739,1616,1.724,1617,2.739,1618,2.739,1619,1.724,1620,1.724,1621,1.724,1622,1.724,1623,1.724,1624,1.724,1625,1.218,1626,1.724,1627,1.724,1628,1.581,1629,1.581,1630,2.739,1631,1.724,1632,1.724,1633,1.724,1634,1.724,1635,2.511,1636,1.724,1637,1.724,1638,2.739,1639,2.739,1640,1.724,1641,1.724,1642,1.724,1643,1.724,1644,1.724,1645,1.724,1646,1.724,1647,1.724]],["title/classes/OperationsClientBuilder.html",[98,0.046,1628,2.842]],["body/classes/OperationsClientBuilder.html",[0,0.211,3,0.124,4,0.101,5,0.112,9,0.918,12,0.888,15,2.307,16,2.107,19,1.24,20,0.067,21,0.673,22,0.851,25,0.012,31,0.169,32,1.57,35,0.015,38,0.745,40,0.974,41,0.779,42,0.704,44,0.613,45,0.76,48,0.659,53,0.932,64,0.303,66,0.684,67,1.139,69,0.714,73,0.244,74,1.408,76,0.757,78,0.942,79,0.341,80,0.52,82,0.007,83,0.005,89,0.403,94,1.031,95,3.684,97,3.26,98,0.065,103,0.381,104,1.829,123,1.017,124,0.311,132,0.592,137,2.73,138,1.55,139,0.929,141,1.722,143,1.566,145,1.852,147,0.929,149,0.731,150,2.107,151,1.736,155,1.882,156,1.722,159,0.766,161,2.417,162,0.778,164,1.882,166,2.198,168,2.417,169,0.893,170,1.736,171,1.272,172,1.139,176,1.201,178,1.345,180,1.736,182,0.827,183,1.583,187,1.047,193,2.613,195,0.974,197,1.034,204,1.201,205,2.314,209,0.86,216,1.006,220,1.507,222,0.987,228,2.417,229,1.201,231,1.139,232,2.049,236,2.596,238,1.139,260,1.299,263,0.893,278,1.693,280,0.959,281,1.021,282,0.959,286,1.245,290,1.52,295,1.092,328,1.365,329,0.796,344,0.99,359,1.201,373,1.609,376,2.376,377,0.761,405,2.193,407,1.35,408,0.859,437,1.245,461,1.299,499,1.245,534,1.299,540,1.65,541,1.519,543,2.296,552,1.006,561,0.827,570,1.608,593,1.888,594,1.44,600,0.711,619,1.829,639,1.971,649,3.332,652,1.971,680,1.829,683,1.971,713,1.71,719,1.897,764,1.71,785,2.764,791,2.649,792,1.722,798,0.929,821,1.519,822,1.608,823,3.473,824,1.71,825,2.584,829,2.417,837,2.177,849,1.047,862,2.069,864,2.169,865,1.139,873,1.304,893,1.971,894,1.369,895,2.069,900,2.991,902,1.245,911,1.971,915,1.369,932,1.799,937,3.14,939,1.369,940,1.369,946,2.985,1006,1.304,1007,1.369,1019,1.369,1020,1.369,1029,2.218,1035,2.528,1064,1.139,1108,1.608,1114,1.799,1145,2.494,1146,1.608,1147,1.519,1161,3.14,1177,2.903,1180,1.369,1186,1.882,1187,1.245,1192,1.304,1206,2.485,1240,1.829,1242,1.829,1250,1.71,1272,1.829,1302,1.829,1338,3.729,1439,1.971,1440,2.15,1441,2.15,1442,2.98,1443,2.15,1444,5.043,1445,1.829,1446,2.15,1447,1.971,1448,2.15,1449,2.15,1450,2.15,1451,2.15,1452,2.15,1453,2.768,1454,3.25,1455,2.15,1456,2.15,1457,1.971,1458,2.15,1459,2.15,1460,2.15,1461,4.003,1463,3.25,1464,2.15,1465,4.003,1467,3.918,1469,2.15,1471,1.519,1472,2.15,1473,2.15,1474,2.15,1475,2.15,1476,2.15,1477,2.15,1478,3.918,1479,3.25,1480,2.15,1481,2.15,1482,2.15,1483,2.15,1484,3.25,1485,2.15,1486,2.15,1487,2.15,1488,2.15,1489,2.15,1490,4.689,1491,4.689,1492,3.988,1494,4.689,1495,2.15,1497,4.366,1498,2.15,1500,2.15,1501,2.15,1502,2.15,1503,2.15,1505,2.15,1506,1.971,1507,2.15,1508,2.15,1509,2.15,1510,2.15,1511,2.15,1513,3.25,1514,3.25,1515,3.918,1518,2.15,1520,2.15,1521,4.689,1522,2.15,1523,1.71,1524,2.15,1525,2.15,1526,2.15,1527,4.484,1528,2.15,1529,2.15,1530,3.25,1531,2.15,1532,2.15,1533,2.15,1534,2.15,1535,2.15,1536,2.15,1537,2.15,1538,2.15,1540,2.15,1541,1.971,1542,2.15,1543,2.15,1544,2.15,1545,2.15,1548,2.15,1550,2.15,1551,1.971,1552,2.15,1553,3.592,1554,2.98,1555,1.971,1556,2.98,1557,1.971,1558,1.971,1559,2.98,1560,1.829,1561,2.98,1562,1.971,1563,1.971,1564,1.971,1565,1.971,1566,1.971,1567,1.971,1568,2.15,1569,2.15,1570,2.15,1571,2.15,1572,2.15,1573,2.15,1574,1.829,1575,2.15,1576,2.15,1577,2.15,1578,2.15,1579,3.25,1580,2.15,1581,2.15,1582,2.15,1583,2.15,1584,2.15,1585,3.25,1586,2.15,1587,2.15,1588,2.15,1589,2.15,1590,2.15,1591,2.15,1592,2.15,1593,2.15,1594,2.15,1595,2.15,1596,2.15,1597,2.15,1598,2.15,1599,2.15,1600,2.15,1601,4.689,1602,4.689,1603,4.689,1604,4.689,1605,4.366,1606,4.931,1607,4.931,1608,3.085,1609,2.15,1610,3.25,1611,3.25,1612,3.25,1613,3.25,1614,3.25,1615,3.25,1616,2.15,1617,3.25,1618,3.25,1619,2.15,1620,2.15,1621,2.15,1622,2.15,1623,2.15,1624,2.15,1625,1.519,1626,2.15,1627,2.15,1628,2.98,1629,2.98,1630,3.25,1631,2.15,1632,2.15,1633,2.15,1634,2.15,1635,2.98,1636,2.15,1637,2.15,1638,3.25,1639,3.25,1640,2.15,1641,2.15,1642,2.15,1643,2.15,1644,2.15,1645,2.15,1646,2.15,1647,2.15,1648,4.16]],["title/interfaces/OperationsClientOptions.html",[0,0.167,1465,2.842]],["body/interfaces/OperationsClientOptions.html",[0,0.211,2,0.391,3,0.124,4,0.101,5,0.112,9,0.918,12,0.888,15,2.306,16,2.106,19,1.24,20,0.067,21,0.672,22,0.85,25,0.012,31,0.204,32,1.569,35,0.015,38,0.409,40,0.938,41,0.769,42,0.756,44,0.612,45,0.759,48,0.658,53,0.932,64,0.303,66,0.684,67,1.138,69,0.713,73,0.244,74,1.408,76,0.742,78,0.942,79,0.341,80,0.484,82,0.007,83,0.005,89,0.402,94,1.03,95,3.531,97,3.139,98,0.065,103,0.252,104,1.827,123,1.016,124,0.311,132,0.592,137,2.729,138,1.549,139,0.928,141,1.721,143,1.565,145,1.852,147,0.928,149,0.731,150,2.106,151,1.712,155,1.881,156,1.721,159,0.766,161,2.416,162,0.777,164,1.881,166,2.198,168,2.416,169,0.892,170,1.735,171,1.272,172,1.138,176,1.2,178,1.344,180,1.735,182,0.826,183,1.582,187,1.047,193,2.613,195,0.974,197,1.034,204,1.2,205,2.313,209,0.893,216,1.005,220,1.506,222,0.987,228,2.416,229,1.2,231,1.138,232,2.048,236,2.595,238,1.138,260,1.298,263,0.892,278,1.692,280,0.958,281,1.021,282,0.958,286,1.244,290,1.519,295,1.091,328,1.365,329,0.795,344,0.989,359,1.2,373,1.609,376,2.376,377,0.761,405,2.192,407,1.349,408,0.859,437,1.244,461,1.873,499,1.244,534,1.298,540,1.65,541,1.518,543,2.295,552,1.005,561,0.826,570,1.607,593,1.888,594,1.439,619,1.827,639,1.97,649,3.33,652,1.97,680,1.827,683,1.97,713,1.708,719,1.896,764,1.708,785,2.762,791,2.648,792,1.721,798,0.928,821,1.518,822,1.607,823,3.471,824,1.708,825,2.583,829,2.416,837,2.175,849,1.047,862,2.068,864,2.168,865,1.138,873,1.303,893,1.97,894,1.368,895,2.068,900,2.648,902,1.244,911,1.97,915,1.368,932,1.798,937,3.139,939,1.368,940,1.368,946,2.984,1006,1.303,1007,1.368,1019,2.493,1020,1.368,1029,2.217,1035,2.527,1064,1.138,1108,1.607,1114,1.798,1145,2.493,1146,1.607,1147,1.518,1161,3.139,1177,2.903,1180,1.368,1186,1.881,1187,1.244,1192,1.303,1206,2.484,1240,1.827,1242,1.827,1250,1.708,1272,1.827,1302,1.827,1338,3.728,1439,1.97,1440,2.148,1441,2.148,1442,2.978,1443,2.148,1444,5.042,1445,1.827,1446,2.148,1447,1.97,1448,2.148,1449,2.148,1450,2.148,1451,2.148,1452,2.148,1453,2.767,1454,3.248,1455,2.148,1456,2.148,1457,1.97,1458,2.148,1459,2.148,1460,2.148,1461,4.002,1463,2.148,1464,2.148,1465,4.298,1467,3.248,1469,2.148,1471,1.518,1472,2.148,1473,2.148,1474,2.148,1475,2.148,1476,2.148,1477,2.148,1478,3.916,1479,3.248,1480,2.148,1481,2.148,1482,2.148,1483,2.148,1484,3.248,1485,2.148,1486,2.148,1487,2.148,1488,2.148,1489,2.148,1490,4.687,1491,4.687,1492,3.986,1494,4.687,1495,2.148,1497,4.365,1498,2.148,1500,2.148,1501,2.148,1502,2.148,1503,2.148,1505,2.148,1506,1.97,1507,2.148,1508,2.148,1509,2.148,1510,2.148,1511,2.148,1513,3.248,1514,3.248,1515,3.916,1518,2.148,1520,2.148,1521,4.687,1522,2.148,1523,1.708,1524,2.148,1525,2.148,1526,2.148,1527,4.483,1528,2.148,1529,2.148,1530,3.248,1531,2.148,1532,2.148,1533,2.148,1534,2.148,1535,2.148,1536,2.148,1537,2.148,1538,2.148,1540,2.148,1541,1.97,1542,2.148,1543,2.148,1544,2.148,1545,2.148,1548,2.148,1550,2.148,1551,1.97,1552,2.148,1553,3.59,1554,2.978,1555,1.97,1556,2.978,1557,1.97,1558,1.97,1559,2.978,1560,1.827,1561,2.978,1562,1.97,1563,1.97,1564,1.97,1565,1.97,1566,1.97,1567,1.97,1568,4.365,1569,4.365,1570,2.148,1571,2.148,1572,2.148,1573,2.148,1574,1.827,1575,2.148,1576,2.148,1577,2.148,1578,2.148,1579,3.248,1580,2.148,1581,2.148,1582,2.148,1583,2.148,1584,2.148,1585,3.248,1586,2.148,1587,2.148,1588,2.148,1589,2.148,1590,2.148,1591,2.148,1592,2.148,1593,2.148,1594,2.148,1595,2.148,1596,2.148,1597,2.148,1598,2.148,1599,2.148,1600,2.148,1601,4.687,1602,4.687,1603,4.687,1604,4.687,1605,4.365,1606,4.93,1607,4.93,1608,3.084,1609,2.148,1610,3.248,1611,3.248,1612,3.248,1613,3.248,1614,3.248,1615,3.248,1616,2.148,1617,3.248,1618,3.248,1619,2.148,1620,2.148,1621,2.148,1622,2.148,1623,2.148,1624,2.148,1625,1.518,1626,2.148,1627,2.148,1628,1.97,1629,1.97,1630,3.248,1631,2.148,1632,2.148,1633,2.148,1634,2.148,1635,2.978,1636,2.148,1637,2.148,1638,3.248,1639,3.248,1640,2.148,1641,2.148,1642,2.148,1643,2.148,1644,2.148,1645,2.148,1646,2.148,1647,2.148]],["title/classes/PageDescriptor.html",[98,0.046,290,1.45]],["body/classes/PageDescriptor.html",[1,3.325,3,0.234,4,0.19,5,0.212,7,1.346,20,0.127,21,1.189,25,0.009,30,1.548,31,0.324,32,1.296,35,0.015,38,1.161,40,1.045,41,0.755,42,0.812,43,2.182,44,0.66,48,1.548,53,0.618,64,0.355,66,1.296,67,3.189,68,1.8,69,0.742,70,4.017,71,3.733,73,0.212,76,0.56,79,0.33,80,0.654,82,0.012,83,0.009,89,0.626,98,0.061,100,1.229,103,0.592,107,4.017,124,0.589,149,0.592,161,2.254,162,1.003,174,3.064,204,1.844,209,0.973,222,0.915,237,1.397,281,0.843,289,2.469,290,2.363,315,1.181,328,1.316,342,2.592,344,0.804,375,1.435,394,1.381,534,2.019,561,1.566,600,1.346,631,4.296,743,4.071,792,2.677,1145,3.216,1185,3.383,1206,3.043,1265,3.462,1444,4.631,1527,3.462,1551,4.631,1574,3.462,1649,5.212,1650,7.03,1651,7.703,1652,7.809,1653,7.809,1654,7.03,1655,5.212,1656,6.466,1657,5.212,1658,5.212,1659,5.212,1660,5.212,1661,5.212,1662,7.03,1663,5.212,1664,5.613,1665,5.212,1666,5.051,1667,5.212,1668,5.212,1669,5.212,1670,5.212,1671,5.212,1672,4.367,1673,4.524,1674,5.212]],["title/classes/PagedApiCaller.html",[98,0.046,1666,3.099]],["body/classes/PagedApiCaller.html",[1,3.231,3,0.217,4,0.176,5,0.196,7,1.244,9,0.729,19,1.585,20,0.15,21,0.995,22,0.834,23,3.06,24,3.595,25,0.012,26,3.822,27,2.992,28,1.647,29,1.703,30,1.473,31,0.32,32,1.776,33,3.862,34,3.671,35,0.015,36,3.553,38,1.141,40,1.122,41,0.811,42,0.811,43,2.076,44,0.783,45,1.124,46,3.2,48,1.767,49,1.776,51,3.822,52,3.943,53,0.93,54,1.74,56,2.083,57,3.2,60,3.595,61,2.995,63,3.06,64,0.345,66,1.53,69,0.685,73,0.196,76,0.728,78,0.812,79,0.353,80,0.587,82,0.011,83,0.009,89,0.596,93,1.53,98,0.056,100,1.169,103,0.564,124,0.695,130,2.147,166,2.231,168,2.661,171,1.296,172,2.807,174,2.282,195,0.656,197,0.627,204,1.473,209,0.571,216,1.76,222,0.801,237,1.291,245,2.083,281,0.779,289,2.282,290,2.95,296,2.661,301,3.06,318,2.395,328,1.037,344,0.938,375,1.365,377,0.838,394,1.028,561,1.447,593,1.291,600,1.244,616,3.449,617,3.449,622,3.449,649,4.088,756,4.088,816,3.067,1071,2.282,1143,3.2,1185,3.219,1197,3.219,1206,1.994,1265,4.505,1385,4.407,1386,5.341,1403,4.181,1527,4.747,1574,3.2,1666,4.806,1675,4.816,1676,6.153,1677,6.153,1678,4.816,1679,4.816,1680,4.816,1681,4.816,1682,4.816,1683,4.816,1684,4.816,1685,4.816,1686,4.816,1687,4.816,1688,4.816,1689,4.816,1690,4.816,1691,4.816,1692,4.816,1693,6.153,1694,4.816,1695,4.816,1696,4.816,1697,4.816,1698,4.816]],["title/interfaces/ParseResult.html",[0,0.167,526,2.636]],["body/interfaces/ParseResult.html",[0,0.278,2,0.647,3,0.204,4,0.166,5,0.185,20,0.193,25,0.012,30,1.419,31,0.241,35,0.015,64,0.297,73,0.285,76,0.489,79,0.359,80,0.605,82,0.011,83,0.008,89,0.574,98,0.053,103,0.417,123,1.124,135,1.781,136,1.781,149,0.604,162,1.023,179,3.179,197,0.91,209,0.96,229,1.089,237,1.219,315,1.205,344,0.992,345,1.474,375,1.009,377,0.619,391,1.837,394,0.971,405,1.661,411,1.882,416,1.42,417,1.982,483,1.851,484,1.851,489,1.882,516,5.158,517,2.825,520,3.257,521,4.246,522,3.257,523,3.257,524,3.021,525,3.021,526,4.645,527,5.158,528,5.031,529,3.257,530,3.021,531,2.51,532,3.257,533,3.257,534,1.42,535,4.866,536,3.257,537,3.257,538,3.257,539,3.257,540,3.108,541,3.272,542,4.725,543,3.641,544,4.246,545,4.246,546,3.257,547,3.257,548,3.257,549,3.257,550,5.007,551,3.257,552,2.166,553,4.246,554,4.725,555,5.325,556,4.725,557,5.61,558,4.246,559,4.246,560,4.725,561,2.1,562,3.257,563,3.257,564,4.725,565,4.725,566,3.257,567,3.257,568,5.193,569,4.725,570,2.657,571,3.257,572,4.246,573,2.657,574,3.257,575,3.257,576,3.021,577,3.257,578,3.257,579,4.344,580,5.007,581,3.257,582,3.257,583,3.257,584,3.257,585,3.257,586,3.257,587,3.257,588,3.257,589,3.257,590,3.257,591,3.257,592,3.021,593,1.219,594,2.379,595,3.021,596,5.007,597,3.257,598,3.257]],["title/classes/PathTemplate.html",[98,0.046,530,2.636]],["body/classes/PathTemplate.html",[0,0.27,3,0.193,4,0.157,5,0.175,7,1.655,20,0.191,21,0.923,25,0.012,30,1.366,31,0.261,35,0.015,38,1.087,40,0.953,41,0.689,42,0.689,44,0.654,64,0.288,73,0.278,76,0.461,79,0.356,80,0.592,82,0.01,83,0.008,98,0.05,103,0.523,123,0.994,135,1.927,136,2.053,149,0.587,162,0.994,179,3.091,197,0.89,209,0.971,229,1.027,237,1.151,315,1.171,344,0.997,345,1.419,375,0.952,377,0.584,391,1.785,394,0.916,405,1.568,411,1.776,416,1.782,417,2.198,483,2.134,484,2.134,489,2.362,516,5.286,517,2.666,520,3.073,521,4.087,522,3.073,523,3.073,524,2.851,525,2.851,526,4.26,527,5.038,528,4.727,529,3.073,530,3.791,531,2.368,532,3.073,533,3.073,534,1.782,535,4.984,536,4.087,537,3.073,538,3.073,539,4.087,540,3.183,541,3.772,542,5.096,543,4.038,544,4.087,545,4.087,546,3.073,547,4.087,548,3.073,549,3.073,550,4.895,551,3.073,552,2.085,553,4.087,554,4.592,555,5.24,556,4.592,557,5.553,558,4.087,559,4.087,560,4.592,561,2.053,562,3.073,563,3.073,564,4.592,565,4.592,566,3.073,567,3.073,568,5.096,569,4.592,570,3.746,571,3.073,572,4.895,573,3.334,574,4.087,575,4.087,576,2.851,577,3.073,578,4.087,579,4.274,580,4.895,581,3.073,582,3.073,583,3.073,584,3.073,585,3.073,586,3.073,587,3.073,588,3.073,589,3.073,590,4.895,591,3.073,592,2.851,593,1.151,594,2.245,595,2.851,596,4.895,597,3.073,598,3.073,600,1.108,1699,5.707,1700,5.707,1701,4.291,1702,4.291,1703,4.291,1704,4.291,1705,4.291,1706,4.291,1707,4.291,1708,4.291]],["title/interfaces/RequestType.html",[0,0.167,818,1.88]],["body/interfaces/RequestType.html",[0,0.326,2,0.713,3,0.225,4,0.183,5,0.204,12,1.596,13,2.267,15,1.832,16,1.76,17,2.623,19,1.112,20,0.123,22,0.78,25,0.009,28,1.155,29,1.693,31,0.328,35,0.015,38,0.745,45,1.153,47,2.74,48,1.2,49,1.717,53,0.904,54,1.785,59,2.629,61,1.989,64,0.336,65,2.504,69,0.983,73,0.334,74,0.953,78,1.063,79,0.311,82,0.011,83,0.009,93,1.803,94,1.419,124,0.78,130,2.327,132,0.713,143,1.565,149,0.633,166,1.565,171,1.212,176,1.2,195,0.683,204,1.511,209,0.748,220,1.506,222,0.653,232,2.048,278,1.294,281,1.021,328,1.259,677,3.302,705,2.99,719,1.896,746,2.623,798,1.692,816,3.124,817,3.273,818,3.435,819,3.273,829,2.168,849,1.908,991,2.504,999,2.075,1013,1.908,1014,1.989,1022,2.075,1033,1.989,1092,3.541,1103,2.829,1175,2.767,1176,2.767,1177,2.402,1178,2.929,1179,2.929,1180,2.493,1181,2.623,1182,2.929,1183,2.929,1184,3.483,1185,2.623,1186,2.267,1187,2.267,1188,2.929,1189,2.929,1190,2.929,1191,2.929,1192,2.375,1193,2.929,1194,2.929,1195,3.687,1196,2.623,1197,3.614,1198,3.302,1199,3.302,1200,3.302,1201,2.623,1202,3.687,1203,3.483,1204,2.493,1205,2.767,1206,2.075,1207,2.623,1208,2.623]],["title/classes/RetryOptions.html",[98,0.046,153,1.795]],["body/classes/RetryOptions.html",[0,0.248,2,0.471,3,0.092,4,0.075,5,0.249,7,0.531,9,0.866,12,1.255,18,1.338,19,1.16,20,0.162,21,0.846,22,0.795,25,0.004,29,0.735,31,0.169,32,1.787,35,0.015,38,0.618,40,0.831,41,0.447,42,0.512,44,0.338,53,0.493,64,0.092,68,1.409,69,0.679,73,0.287,74,1.399,75,1.298,76,0.725,78,0.558,79,0.339,80,0.602,82,0.006,83,0.004,89,0.403,91,2.313,98,0.039,100,0.79,103,0.479,109,3.242,110,1.022,111,2.372,112,2.157,113,2.372,114,3.373,115,3.041,116,3.041,117,2.779,118,3.041,119,3.041,120,3.294,121,3.294,122,2.6,123,1.274,124,0.88,125,2.996,126,1.075,127,1.732,128,1.732,129,2.26,130,1.837,131,1.732,132,1.023,133,2.068,134,1.647,135,1.571,136,1.433,137,2.062,138,1.231,139,1.609,140,1.647,141,1.371,142,1.647,143,1.034,144,1.732,145,1.498,146,1.732,147,1.117,148,2.495,149,0.69,150,2.643,151,1.511,152,1.732,153,3.35,154,3.102,155,1.881,156,1.371,157,2.372,158,1.022,159,1.556,160,1.637,161,2.864,162,0.948,163,2.495,164,2.528,165,2.495,166,2.023,167,1.075,168,1.798,169,0.667,170,1.203,171,1.162,172,2.531,173,1.075,174,2.785,175,1.075,176,1.252,177,2.176,178,0.551,179,1.371,180,1.379,181,1.075,182,0.618,183,1.26,184,3.223,185,1.909,186,3.041,187,0.782,188,1.349,189,1.349,190,0.751,191,1.742,192,1.519,193,1.974,194,2.495,195,0.761,196,1.732,197,1.031,198,2.495,199,2.495,200,2.495,201,1.569,202,1.732,203,1.732,204,0.793,205,1.371,206,1.647,207,2.372,208,1.647,209,0.873,210,3.198,211,1.732,212,1.075,213,0.974,214,3.041,215,3.052,216,2.573,217,3.294,218,3.356,219,2.528,220,1.766,221,2.855,222,1.003,223,2.779,224,2.779,225,3.356,226,2.13,227,2.068,228,2.541,229,1.642,230,2.923,231,2.313,232,2.19,233,1.075,234,1.432,235,1.647,236,2.541,237,1.402,238,1.974,239,1.647,240,2.068,241,2.068,242,1.647,243,0.667,244,2.26,245,1.432,246,1.371,247,1.075,248,2.6,249,1.35,250,1.97,251,1.732,252,1.732,253,2.157,254,2.234,255,1.732,256,2.495,257,1.798,258,1.732,259,1.732,260,1.489,261,2.26,262,0.782,263,1.075,264,1.732,265,1.732,266,1.732,267,1.732,268,1.075,269,1.26,270,1.732,271,1.97,272,1.075,273,1.075,274,1.075,275,1.075,276,2.26,277,0.974,278,0.531,279,2.924,280,1.288,281,0.904,282,1.288,283,3.294,284,1.075,285,1.732,286,0.93,287,1.647,288,1.647,289,1.569,290,1.21,291,1.075,292,1.26,293,1.647,294,1.075,295,0.815,296,1.432,297,1.075,298,1.022,299,1.075,300,1.075,301,1.647,302,1.075,303,1.022,304,1.732,305,0.751,306,1.21,307,0.793,308,1.732,309,1.075,310,1.732,311,1.022,312,1.647,313,1.732,314,1.732,315,0.605,316,1.732,317,1.732,318,1.022,319,2.176,320,1.732,321,1.075,322,1.732,323,0.974,324,1.732,325,1.022,326,1.117,327,2.176,328,1.231,329,1.203,330,0.974,331,1.314,332,1.075,333,0.721,334,1.075,335,1.075,336,1.075,337,1.075,338,1.075,339,1.075,340,1.075,341,1.075,342,1.022,343,1.583,344,0.908,345,0.823,346,1.075,347,1.075,348,1.075,349,1.075,350,1.075,351,1.075,352,1.075,353,1.075,354,1.075,355,0.974,356,1.075,357,1.075,358,0.782,359,0.492,360,1.022,361,3.041,362,1.022,363,0.93,364,1.022,365,1.569,366,0.974,367,1.075,368,1.075,369,1.075,370,1.022,371,1.022,372,0.974,373,0.888,374,1.022,375,0.456,376,1.983,377,0.566,378,1.075,379,1.075,380,1.075,381,2.779,382,1.647,383,2.068,384,2.068,385,2.068,386,2.068,387,2.068,388,1.075,389,0.618,390,1.075,391,0.922,392,1.075,393,1.075,394,1.348,395,1.075,396,1.075,397,1.075,398,1.075,399,1.075,400,1.075,401,1.732,402,2.042,403,3.07,404,2.234,405,1.21,406,2.176,407,1.697,408,1.835,409,1.46,410,2.176,411,1.974,412,1.075,413,2.495,414,2.068,415,2.779,416,1.489,417,0.995,418,0.763,419,2.176,420,2.372,421,1.075,422,1.075,423,1.075,424,1.075,425,1.075,426,2.372,427,1.075,428,2.068,429,1.075,430,1.075,431,1.075,432,1.075,433,1.075,434,1.075,435,1.075,436,1.732,437,0.93,438,1.022,439,1.075,440,1.075,441,1.371,442,2.736,443,0.782,444,1.022,445,1.022,446,1.732,447,2.176,448,2.176,449,1.075,450,1.075,451,2.372,452,1.647,453,1.647,454,1.647,455,1.647,456,1.647,457,1.647,458,1.647,459,1.647,460,1.732,461,1.745,462,1.022,463,1.022,464,0.974,465,1.647,466,1.647,467,1.022,468,1.022,469,1.647,470,1.647,471,1.022,472,1.022,473,1.022,474,1.022,475,1.022,476,1.022,477,0.974,478,1.022,479,0.851,480,1.022,481,1.022,482,1.742,483,0.642,484,0.642,485,0.93,486,1.21,487,0.93,488,1.022,489,0.851,490,1.022,491,0.618,492,1.022,493,0.782,494,1.075,495,1.075,496,1.075,497,1.732,498,1.075,499,1.498,500,1.075,501,1.075,502,1.075,503,1.075,504,1.075,505,1.075,506,1.075,507,1.075,508,2.736,509,1.075,510,1.075,511,1.075,512,1.075,513,1.075,514,1.075,515,1.075,600,0.531,1709,3.311,1710,2.055]],["title/interfaces/RetryParamsConfig.html",[0,0.167,428,1.973]],["body/interfaces/RetryParamsConfig.html",[0,0.249,2,0.599,3,0.094,4,0.076,5,0.251,9,0.838,12,1.203,18,1.263,19,0.933,20,0.163,21,0.853,22,0.766,25,0.004,29,0.464,31,0.241,32,1.757,35,0.015,40,0.784,41,0.361,42,0.361,44,0.343,53,0.398,64,0.094,68,1.418,69,0.478,73,0.288,74,1.403,75,1.313,76,0.728,78,0.566,79,0.339,80,0.604,82,0.006,83,0.004,89,0.407,91,2.319,98,0.039,100,0.8,103,0.441,109,3.188,110,1.04,111,2.395,112,2.178,113,2.395,114,3.385,115,3.06,116,3.06,117,2.801,118,3.06,119,3.06,120,3.311,121,3.311,122,2.623,123,1.28,124,0.882,125,3.011,126,1.094,127,1.094,128,1.094,129,1.591,130,1.778,131,1.094,132,1.017,133,1.67,134,1.04,135,1.447,136,1.264,137,1.819,138,1.086,139,1.42,140,1.04,141,0.866,142,1.04,143,0.653,144,1.094,145,1.414,146,1.094,147,0.706,148,2.52,149,0.692,150,2.65,151,1.52,152,1.757,153,3.339,154,3.11,155,1.903,156,1.39,157,2.395,158,1.04,159,1.568,160,1.648,161,2.817,162,0.873,163,2.52,164,2.386,165,2.52,166,1.921,167,1.094,168,1.819,169,0.678,170,0.971,171,1.08,172,2.547,173,1.094,174,2.804,175,1.094,176,1.263,177,2.201,178,0.561,179,1.39,180,1.393,181,1.094,182,0.628,183,1.278,184,3.157,185,1.848,186,3.06,187,0.796,188,1.365,189,1.365,190,0.764,191,1.76,192,1.537,193,1.741,194,1.757,195,0.656,196,1.094,197,1.029,198,1.757,199,1.757,200,1.757,201,0.991,202,1.094,203,1.094,204,0.501,205,1.39,206,1.67,207,2.395,208,1.67,209,0.875,210,3.008,211,1.094,212,1.094,213,0.991,214,3.06,215,3.067,216,2.583,217,3.311,218,3.372,219,2.547,220,1.778,221,2.871,222,1.006,223,2.801,224,2.801,225,3.372,226,2.142,227,2.092,228,2.559,229,1.649,230,2.943,231,2.331,232,2.2,233,1.094,234,1.452,235,1.67,236,2.559,237,1.414,238,1.994,239,1.67,240,2.092,241,2.092,242,1.67,243,0.678,244,2.282,245,1.452,246,1.39,247,1.094,248,2.623,249,1.362,250,1.993,251,1.757,252,1.757,253,2.178,254,2.248,255,1.757,256,2.52,257,1.819,258,1.757,259,1.757,260,1.504,261,2.282,262,0.796,263,1.09,264,1.757,265,1.757,266,1.757,267,1.757,268,1.094,269,1.278,270,1.757,271,1.993,272,1.094,273,1.094,274,1.094,275,1.094,276,2.282,277,0.991,278,0.54,279,2.947,280,1.298,281,0.911,282,1.298,283,3.311,284,1.094,285,1.757,286,0.946,287,1.67,288,1.67,289,1.591,290,1.227,291,1.094,292,1.278,293,1.67,294,1.094,295,0.829,296,1.452,297,1.094,298,1.04,299,1.094,300,1.094,301,1.67,302,1.094,303,1.04,304,1.757,305,0.764,306,1.227,307,0.804,308,1.757,309,1.094,310,1.757,311,1.04,312,1.67,313,1.757,314,1.757,315,0.613,316,1.757,317,1.757,318,1.04,319,2.201,320,1.757,321,1.094,322,1.757,323,0.991,324,1.757,325,1.04,326,1.133,327,2.201,328,1.235,329,1.217,330,0.991,331,1.332,332,1.094,333,0.734,334,1.094,335,1.094,336,1.094,337,1.094,338,1.094,339,1.094,340,1.094,341,1.094,342,1.04,343,1.601,344,0.911,345,0.835,346,1.094,347,1.094,348,1.094,349,1.094,350,1.094,351,1.094,352,1.094,353,1.094,354,1.094,355,0.991,356,1.094,357,1.094,358,0.796,359,0.501,360,1.04,361,3.06,362,1.04,363,0.946,364,1.04,365,1.591,366,0.991,367,1.094,368,1.094,369,1.094,370,1.04,371,1.04,372,0.991,373,0.9,374,1.04,375,0.464,376,1.997,377,0.573,378,1.094,379,1.094,380,1.094,381,2.801,382,1.67,383,2.092,384,2.092,385,2.092,386,2.092,387,2.092,388,1.094,389,0.628,390,1.094,391,0.935,392,1.094,393,1.094,394,1.356,395,1.094,396,1.094,397,1.094,398,1.094,399,1.094,400,1.094,401,1.757,402,2.058,403,3.087,404,2.248,405,1.227,406,2.201,407,1.712,408,1.848,409,1.477,410,2.201,411,1.994,412,1.094,413,2.52,414,2.092,415,2.801,416,1.504,417,1.009,418,0.774,419,2.201,420,2.395,421,1.094,422,1.094,423,1.094,424,1.094,425,1.094,426,2.395,427,1.094,428,2.395,429,1.094,430,1.094,431,1.094,432,1.094,433,1.094,434,1.094,435,1.094,436,1.757,437,0.946,438,1.04,439,1.094,440,1.094,441,1.39,442,2.76,443,0.796,444,1.04,445,1.04,446,1.757,447,2.201,448,2.201,449,1.094,450,1.094,451,2.395,452,1.67,453,2.623,454,2.623,455,2.623,456,2.623,457,2.623,458,2.623,459,2.623,460,1.757,461,1.758,462,1.04,463,1.04,464,0.991,465,1.67,466,1.67,467,1.04,468,1.04,469,1.67,470,1.67,471,1.04,472,1.04,473,1.04,474,1.04,475,1.04,476,1.04,477,0.991,478,1.04,479,0.866,480,1.04,481,1.04,482,1.76,483,0.653,484,0.653,485,0.946,486,1.227,487,0.946,488,1.04,489,0.866,490,1.04,491,0.628,492,1.04,493,0.796,494,1.094,495,1.094,496,1.094,497,1.757,498,1.094,499,1.519,500,1.094,501,1.094,502,1.094,503,1.094,504,1.094,505,1.094,506,1.094,507,1.094,508,2.76,509,1.094,510,1.094,511,1.094,512,1.094,513,1.094,514,1.094,515,1.094]],["title/interfaces/Segment.html",[0,0.167,528,2.636]],["body/interfaces/Segment.html",[0,0.278,2,0.647,3,0.204,4,0.166,5,0.185,20,0.193,25,0.012,30,1.736,31,0.241,35,0.015,64,0.297,73,0.285,76,0.489,79,0.359,80,0.605,82,0.011,83,0.008,89,0.574,98,0.053,103,0.417,123,1.124,135,1.781,136,1.781,149,0.604,162,1.023,179,3.001,197,0.91,209,0.965,229,1.089,237,1.219,315,1.205,344,0.992,345,1.474,375,1.009,377,0.619,391,1.837,394,0.971,405,1.661,411,1.882,416,1.42,417,1.982,483,1.851,484,1.851,489,1.882,516,5.158,517,2.825,520,3.257,521,4.246,522,3.257,523,3.257,524,3.021,525,3.021,526,4.383,527,4.94,528,4.94,529,5.007,530,3.021,531,2.51,532,3.257,533,3.257,534,1.42,535,4.866,536,3.257,537,3.257,538,3.257,539,3.257,540,3.108,541,3.272,542,4.725,543,3.641,544,4.246,545,4.246,546,3.257,547,3.257,548,3.257,549,3.257,550,5.007,551,3.257,552,2.166,553,4.246,554,4.725,555,5.325,556,4.725,557,5.61,558,4.246,559,4.246,560,4.725,561,2.1,562,3.257,563,3.257,564,4.725,565,4.725,566,3.257,567,3.257,568,5.193,569,4.725,570,2.657,571,3.257,572,4.246,573,2.657,574,3.257,575,3.257,576,3.021,577,3.257,578,3.257,579,4.344,580,5.007,581,3.257,582,3.257,583,3.257,584,3.257,585,3.257,586,3.257,587,3.257,588,3.257,589,3.257,590,3.257,591,3.257,592,3.021,593,1.219,594,2.379,595,3.021,596,5.007,597,3.257,598,3.257]],["title/interfaces/ServiceConfig.html",[0,0.167,451,1.973]],["body/interfaces/ServiceConfig.html",[0,0.25,2,0.601,3,0.095,4,0.077,5,0.251,9,0.839,12,1.206,18,1.267,19,0.937,20,0.163,21,0.997,22,0.767,25,0.004,29,0.467,30,1.352,31,0.259,32,1.76,35,0.015,40,0.786,41,0.363,42,0.363,44,0.344,53,0.4,64,0.095,68,1.422,69,0.48,73,0.288,74,1.405,75,1.319,76,0.73,78,0.569,79,0.34,80,0.605,82,0.006,83,0.004,89,0.409,91,2.322,98,0.04,100,0.803,103,0.443,109,3.19,110,1.046,111,2.404,112,2.186,113,2.404,114,3.39,115,3.067,116,3.067,117,2.809,118,3.067,119,3.067,120,3.317,121,3.317,122,2.632,123,1.274,124,0.883,125,3.016,126,1.101,127,1.101,128,1.101,129,1.599,130,1.783,131,1.101,132,1.018,133,1.678,134,1.046,135,1.452,136,1.269,137,1.827,138,1.091,139,1.426,140,1.046,141,0.871,142,1.046,143,0.657,144,1.101,145,1.419,146,1.101,147,0.71,148,2.529,149,0.692,150,2.653,151,1.523,152,1.766,153,3.343,154,3.113,155,1.911,156,1.397,157,2.404,158,1.046,159,1.573,160,1.652,161,2.823,162,0.876,163,2.529,164,2.393,165,2.529,166,1.925,167,1.101,168,1.827,169,0.683,170,0.976,171,1.082,172,2.553,173,1.101,174,2.812,175,1.101,176,1.267,177,2.21,178,0.564,179,1.397,180,1.398,181,1.101,182,0.632,183,1.284,184,3.164,185,1.852,186,3.067,187,0.801,188,1.371,189,1.371,190,0.769,191,1.766,192,1.544,193,1.749,194,1.766,195,0.658,196,1.101,197,1.03,198,1.766,199,1.766,200,1.766,201,0.997,202,1.101,203,1.101,204,0.504,205,1.397,206,1.678,207,2.404,208,1.678,209,0.876,210,3.015,211,1.101,212,1.101,213,0.997,214,3.067,215,3.072,216,2.586,217,3.317,218,3.378,219,2.555,220,1.783,221,2.878,222,1.006,223,2.809,224,2.809,225,3.378,226,2.147,227,2.101,228,2.566,229,1.652,230,2.951,231,2.338,232,2.204,233,1.101,234,1.459,235,1.678,236,2.566,237,1.419,238,2.001,239,1.678,240,2.101,241,2.101,242,1.678,243,0.683,244,2.29,245,1.459,246,1.397,247,1.101,248,2.632,249,1.366,250,2.002,251,1.766,252,1.766,253,2.186,254,2.253,255,1.766,256,2.529,257,1.827,258,1.766,259,1.766,260,1.509,261,2.29,262,0.801,263,1.095,264,1.766,265,1.766,266,1.766,267,1.766,268,1.101,269,1.284,270,1.766,271,2.002,272,1.101,273,1.101,274,1.101,275,1.101,276,2.29,277,0.997,278,0.543,279,2.955,280,1.302,281,0.913,282,1.302,283,3.317,284,1.101,285,1.766,286,0.952,287,1.678,288,1.678,289,1.599,290,1.233,291,1.101,292,1.284,293,1.678,294,1.101,295,0.835,296,1.459,297,1.101,298,1.046,299,1.101,300,1.101,301,1.678,302,1.101,303,1.046,304,1.766,305,0.769,306,1.233,307,0.808,308,1.766,309,1.101,310,1.766,311,1.046,312,1.678,313,1.766,314,1.766,315,0.616,316,1.766,317,1.766,318,1.046,319,2.21,320,1.766,321,1.101,322,1.766,323,0.997,324,1.766,325,1.046,326,1.139,327,2.21,328,1.237,329,1.222,330,0.997,331,1.339,332,1.101,333,0.739,334,1.101,335,1.101,336,1.101,337,1.101,338,1.101,339,1.101,340,1.101,341,1.101,342,1.046,343,1.608,344,0.912,345,0.839,346,1.101,347,1.101,348,1.101,349,1.101,350,1.101,351,1.101,352,1.101,353,1.101,354,1.101,355,0.997,356,1.101,357,1.101,358,0.801,359,0.504,360,1.046,361,3.067,362,1.046,363,0.952,364,1.046,365,1.599,366,0.997,367,1.101,368,1.101,369,1.101,370,1.046,371,1.046,372,0.997,373,0.905,374,1.046,375,0.467,376,2.002,377,0.575,378,1.101,379,1.101,380,1.101,381,2.809,382,1.678,383,2.101,384,2.101,385,2.101,386,2.101,387,2.101,388,1.101,389,0.632,390,1.101,391,0.94,392,1.101,393,1.101,394,1.359,395,1.101,396,1.101,397,1.101,398,1.101,399,1.101,400,1.101,401,1.766,402,2.064,403,3.093,404,2.253,405,1.233,406,2.21,407,1.717,408,1.852,409,1.483,410,2.21,411,2.001,412,1.101,413,2.529,414,2.809,415,2.809,416,1.509,417,1.014,418,0.778,419,2.21,420,2.404,421,1.101,422,1.101,423,1.101,424,1.101,425,1.101,426,2.404,427,1.101,428,2.101,429,1.101,430,1.101,431,1.101,432,1.101,433,1.101,434,1.101,435,1.101,436,1.766,437,0.952,438,1.046,439,1.101,440,1.101,441,1.397,442,2.768,443,0.801,444,1.046,445,1.046,446,1.766,447,2.21,448,2.21,449,1.101,450,1.101,451,2.632,452,2.632,453,1.678,454,1.678,455,1.678,456,1.678,457,1.678,458,1.678,459,1.678,460,1.766,461,1.763,462,1.046,463,1.046,464,0.997,465,1.678,466,1.678,467,1.046,468,1.046,469,1.678,470,1.678,471,1.046,472,1.046,473,1.046,474,1.046,475,1.046,476,1.046,477,0.997,478,1.046,479,0.871,480,1.046,481,1.046,482,1.766,483,0.657,484,0.657,485,0.952,486,1.233,487,0.952,488,1.046,489,0.871,490,1.046,491,0.632,492,1.046,493,0.801,494,1.101,495,1.101,496,1.101,497,1.766,498,1.101,499,1.526,500,1.101,501,1.101,502,1.101,503,1.101,504,1.101,505,1.101,506,1.101,507,1.101,508,2.768,509,1.101,510,1.101,511,1.101,512,1.101,513,1.101,514,1.101,515,1.101]],["title/interfaces/SimpleCallbackFunction.html",[0,0.167,28,0.915]],["body/interfaces/SimpleCallbackFunction.html",[0,0.326,2,0.707,3,0.223,4,0.181,5,0.202,12,1.591,13,2.246,15,1.814,16,1.743,17,2.598,19,1.102,20,0.153,22,0.777,25,0.009,28,1.446,29,1.714,31,0.327,35,0.015,38,0.738,44,0.507,45,1.146,47,2.728,48,1.189,49,1.71,53,0.916,54,1.802,59,2.617,61,1.97,64,0.335,65,2.489,69,0.979,73,0.334,74,0.944,78,1.057,79,0.309,82,0.011,83,0.009,89,0.607,90,2.901,91,1.55,92,2.901,93,1.796,94,1.413,124,0.777,130,2.322,132,0.707,143,1.55,149,0.63,166,1.55,171,1.207,176,1.189,195,0.676,204,1.502,209,0.744,220,1.492,222,0.646,232,2.036,278,1.282,281,1.014,328,1.255,677,3.282,705,2.972,719,1.885,746,2.598,798,1.675,816,3.11,817,3.259,818,3.423,819,3.259,829,2.147,849,1.89,991,2.489,999,2.055,1013,1.89,1014,1.97,1022,2.055,1033,1.97,1092,3.53,1103,2.856,1175,2.74,1176,2.74,1177,2.387,1178,2.901,1179,2.901,1180,2.469,1181,2.598,1182,2.901,1183,2.901,1184,3.462,1185,2.598,1186,2.246,1187,2.246,1188,2.901,1189,2.901,1190,2.901,1191,2.901,1192,2.353,1193,2.901,1194,2.901,1195,3.665,1196,2.598,1197,3.598,1198,3.282,1199,3.282,1200,3.282,1201,2.598,1202,3.665,1203,3.462,1204,2.469,1205,2.74,1206,2.055,1207,2.598,1208,2.598]],["title/classes/StreamDescriptor.html",[98,0.046,1087,2.842]],["body/classes/StreamDescriptor.html",[1,3.459,3,0.263,4,0.214,5,0.238,7,1.512,9,0.694,12,1.482,19,1.732,20,0.143,21,1.196,22,0.661,25,0.011,31,0.322,32,1.456,35,0.015,38,1.099,40,1.032,41,0.746,42,0.746,44,0.708,64,0.351,67,3.277,68,1.763,69,0.834,73,0.238,79,0.312,80,0.507,82,0.012,83,0.011,89,0.672,94,1.426,98,0.069,100,1.319,103,0.537,107,4.312,114,3.289,124,0.661,204,1.402,287,2.913,600,1.512,631,4.611,792,2.424,896,2.649,1049,3.233,1087,4.971,1112,4.709,1130,3.891,1145,2.913,1310,4.575,1711,5.857,1712,6.941,1713,6.941,1714,5.857,1715,5.422,1716,5.857,1717,5.084,1718,5.857,1719,5.857,1720,5.857]],["title/classes/StreamProxy.html",[37,2.19,98,0.046]],["body/classes/StreamProxy.html",[0,0.27,2,0.611,3,0.193,4,0.157,5,0.175,7,1.656,9,0.899,19,1.423,20,0.105,21,0.923,22,0.645,25,0.008,28,1.576,29,1.624,30,1.367,31,0.329,35,0.015,37,3.773,38,1.088,40,0.953,41,0.689,42,0.765,43,2.401,44,0.698,45,1.3,47,2.823,53,0.885,54,1.687,64,0.257,66,1.067,73,0.29,76,0.613,78,0.723,79,0.288,80,0.372,82,0.01,83,0.008,88,1.569,89,0.553,93,1.595,94,1.503,98,0.05,100,1.085,103,0.523,123,0.666,124,0.857,145,1.531,149,0.523,151,1.535,160,1.903,162,1.191,170,1.651,171,1.249,182,1.29,190,1.569,195,0.777,197,0.926,204,1.967,222,0.972,226,1.449,243,1.393,257,1.857,260,1.782,307,1.367,315,1.172,328,1.081,333,1.507,344,0.909,359,1.028,377,0.873,418,1.316,479,1.777,491,1.29,531,2.37,534,1.34,561,1.29,600,1.109,644,3.793,687,2.667,719,2.054,792,2.363,814,2.054,878,2.034,896,1.942,904,1.942,925,1.569,933,2.034,1029,2.545,1055,1.569,1090,4.431,1091,2.667,1092,2.705,1093,3.075,1096,3.075,1097,5.499,1099,3.075,1100,5.499,1102,4.594,1103,2.343,1104,3.546,1105,2.852,1106,2.852,1107,2.852,1108,2.508,1109,4.541,1110,3.075,1111,4.089,1112,4.363,1113,4.089,1114,1.857,1115,2.852,1116,2.852,1117,2.667,1118,3.075,1119,2.852,1120,2.667,1121,3.075,1122,3.075,1123,4.089,1124,4.089,1125,4.089,1126,3.075,1127,4.089,1128,3.793,1129,3.793,1130,4.541,1131,4.594,1132,4.896,1133,5.097,1134,4.594,1135,4.089,1136,3.546,1137,4.089,1138,4.089,1139,3.075,1140,3.075,1141,3.075,1142,3.075,1143,2.852,1144,3.075,1145,2.135,1146,3.747,1147,2.37,1148,3.075,1149,4.089,1150,3.075,1151,3.075,1152,3.075,1153,3.075,1154,3.075,1155,3.075,1156,3.075,1157,3.075,1158,2.135,1159,3.075,1160,3.075,1161,2.246,1162,3.075,1163,4.089,1164,4.089,1165,3.075,1166,3.075,1167,4.089,1168,4.089,1169,3.075,1170,4.089,1171,2.852,1172,3.075,1721,5.709,1722,5.709,1723,5.709,1724,4.293,1725,4.293,1726,4.293,1727,4.293]],["title/classes/StreamingApiCaller.html",[98,0.046,1715,3.099]],["body/classes/StreamingApiCaller.html",[1,3.293,3,0.228,4,0.185,5,0.207,7,1.31,9,0.754,19,1.541,20,0.124,21,1.177,22,0.784,23,3.162,24,3.715,25,0.013,26,3.95,27,3.151,28,1.678,29,1.723,30,1.743,31,0.328,32,1.81,35,0.015,37,4.223,38,1.154,40,1.137,41,0.822,42,0.822,43,2.145,44,0.765,45,1.161,47,3.08,48,1.743,51,3.95,52,4.019,53,0.907,54,1.728,60,3.715,61,3.035,63,3.729,64,0.337,66,1.261,67,3.25,73,0.207,79,0.356,80,0.439,82,0.011,83,0.009,89,0.615,93,1.81,94,1.306,98,0.059,100,1.208,103,0.583,180,1.467,195,0.866,197,0.66,204,1.859,237,1.862,296,2.749,328,1.289,377,0.691,600,1.31,724,4.554,725,3.963,1087,5.623,1112,2.964,1128,3.37,1129,3.37,1171,3.37,1198,2.654,1199,2.654,1200,2.654,1336,4.974,1385,4.554,1673,4.403,1715,4.967,1728,5.073,1729,6.358,1730,6.358,1731,5.073,1732,6.358,1733,5.073,1734,5.073,1735,6.358,1736,5.073,1737,5.073,1738,5.073,1739,5.073,1740,5.073,1741,6.358,1742,5.073,1743,5.073,1744,5.073,1745,5.073,1746,5.073,1747,5.073]],["title/interfaces/SubResponseInfo.html",[0,0.167,1748,2.465]],["body/interfaces/SubResponseInfo.html",[0,0.295,2,0.65,3,0.205,4,0.217,5,0.186,9,0.705,18,1.094,20,0.162,22,0.516,25,0.013,28,1.524,31,0.269,35,0.015,41,0.711,42,0.753,43,2.231,44,0.466,48,1.094,49,1.479,53,0.705,54,1.371,64,0.297,66,1.136,73,0.303,76,0.711,78,1.114,79,0.352,82,0.011,83,0.008,89,0.576,98,0.053,103,0.545,123,1.232,124,0.885,132,0.65,149,0.712,160,1.273,162,0.709,171,1.044,176,1.677,182,2.105,185,1.427,195,0.622,197,1.012,209,0.942,222,0.595,246,1.892,249,2.006,254,1.67,260,1.427,262,1.739,263,1.483,278,1.18,280,1.371,281,0.962,282,1.371,307,1.094,315,0.835,331,1.813,333,2.321,344,0.568,345,1.136,375,1.014,377,0.81,389,1.373,394,1.551,409,1.604,418,1.053,441,1.892,491,1.373,593,1.225,613,3.112,614,3.46,627,3.46,630,4.108,640,2.522,683,2.818,722,1.373,723,1.322,798,1.542,814,1.373,1004,2.991,1055,2.809,1103,2.173,1114,1.976,1158,2.273,1453,2.522,1471,2.522,1608,2.522,1625,2.522,1748,4.936,1749,3.036,1750,4.825,1751,4.108,1752,3.695,1753,3.952,1754,3.036,1755,3.036,1756,3.036,1757,2.839,1758,3.952,1759,4.654,1760,3.036,1761,3.952,1762,4.654,1763,3.036,1764,3.036,1765,3.036,1766,3.036,1767,3.036,1768,3.036,1769,3.036,1770,3.036,1771,3.952,1772,3.952,1773,3.036,1774,3.036,1775,3.036,1776,3.036,1777,3.952,1778,3.036,1779,3.036,1780,3.036,1781,3.952,1782,3.036,1783,3.036,1784,3.036,1785,3.036,1786,3.036,1787,3.036,1788,3.036,1789,3.036,1790,3.036,1791,3.036,1792,2.839,1793,2.839,1794,4.654,1795,3.036,1796,3.036,1797,3.036,1798,3.036,1799,3.036,1800,3.036,1801,3.036,1802,3.036,1803,3.036,1804,3.952,1805,3.036,1806,3.036,1807,3.036,1808,3.036,1809,3.952,1810,4.393,1811,3.036]],["title/classes/Task.html",[98,0.046,614,2.076]],["body/classes/Task.html",[0,0.282,3,0.183,4,0.201,5,0.165,7,1.61,9,0.854,18,1.316,20,0.152,21,0.889,22,0.755,25,0.013,28,1.659,30,1.493,31,0.318,35,0.015,38,1.16,40,0.927,41,0.805,42,0.791,43,2.255,44,0.764,45,0.742,48,0.972,49,1.367,53,0.854,54,1.267,56,1.756,64,0.28,66,1.009,73,0.293,76,0.718,78,1.051,79,0.345,80,0.351,82,0.01,83,0.007,89,0.532,98,0.048,103,0.571,123,1.225,124,0.887,132,0.783,149,0.703,156,1.681,160,1.531,162,0.63,171,1.094,176,1.891,179,2.581,182,1.22,183,2.373,185,1.268,195,0.749,197,0.988,209,0.952,222,0.716,234,1.756,246,1.681,249,1.934,254,2.009,260,1.717,262,2.373,263,1.317,278,1.048,280,1.267,281,0.889,282,1.267,307,1.316,315,0.742,331,1.611,333,2.189,344,0.505,345,1.009,375,0.901,377,0.749,389,1.22,394,1.491,409,1.425,418,0.936,441,2.276,444,2.019,491,1.22,552,1.483,593,1.089,600,1.048,613,3.496,614,3.971,627,3.654,630,4.338,640,2.241,653,3.262,683,2.954,713,2.522,719,1.652,722,1.22,723,1.174,764,2.522,791,1.924,798,1.37,814,1.22,924,3.324,1004,2.82,1054,2.241,1055,2.736,1103,2.278,1114,1.756,1158,2.019,1453,2.241,1471,2.241,1608,2.241,1625,2.241,1748,4.811,1749,2.697,1750,3.653,1751,4.338,1752,3.873,1753,3.653,1754,2.697,1755,2.697,1756,2.697,1757,2.522,1758,3.653,1759,4.44,1760,2.697,1761,3.653,1762,4.44,1763,2.697,1764,2.697,1765,2.697,1766,2.697,1767,2.697,1768,2.697,1769,2.697,1770,2.697,1771,3.653,1772,3.653,1773,2.697,1774,2.697,1775,2.697,1776,2.697,1777,3.653,1778,2.697,1779,2.697,1780,2.697,1781,3.653,1782,2.697,1783,2.697,1784,4.142,1785,4.142,1786,4.142,1787,4.142,1788,4.142,1789,4.142,1790,3.653,1791,3.653,1792,3.416,1793,3.416,1794,4.891,1795,4.142,1796,2.697,1797,2.697,1798,2.697,1799,2.697,1800,2.697,1801,4.44,1802,2.697,1803,2.697,1804,3.653,1805,2.697,1806,2.697,1807,2.697,1808,2.697,1809,3.653,1810,4.142,1811,2.697,1812,4.773,1813,6.235,1814,4.06,1815,5.499,1816,4.06,1817,4.06,1818,4.06,1819,4.06,1820,4.06,1821,4.06,1822,4.06,1823,5.499,1824,3.524,1825,4.06,1826,4.06,1827,4.06,1828,4.06,1829,4.06,1830,4.06,1831,4.06,1832,4.06,1833,4.06]],["title/interfaces/TaskCallback.html",[0,0.167,613,2.076]],["body/interfaces/TaskCallback.html",[0,0.296,2,0.656,3,0.207,4,0.219,5,0.188,9,0.709,18,1.104,20,0.162,22,0.521,25,0.013,28,1.531,31,0.188,35,0.015,41,0.714,42,0.643,43,2.241,44,0.471,48,1.104,49,1.487,53,0.709,54,1.531,64,0.299,66,1.146,73,0.304,76,0.714,78,1.119,79,0.353,82,0.011,83,0.008,89,0.579,98,0.054,103,0.548,123,1.194,124,0.887,132,0.656,149,0.713,160,1.284,162,0.715,171,1.05,176,1.683,182,1.385,185,1.439,195,0.628,197,1.013,209,0.943,222,0.6,246,1.909,249,1.927,254,1.685,260,1.439,262,1.755,263,1.496,278,1.19,280,1.379,281,0.967,282,1.379,307,1.104,315,0.842,331,1.829,333,2.331,344,0.573,345,1.146,375,1.023,377,0.815,389,1.385,394,1.555,409,1.618,418,1.063,441,1.909,491,1.385,593,1.236,613,3.475,614,3.475,627,3.475,630,4.126,640,2.545,683,3.451,722,1.385,723,1.334,798,1.556,814,1.798,1004,3.004,1055,2.814,1103,2.186,1114,1.994,1158,2.293,1453,2.545,1471,2.545,1608,2.545,1625,2.545,1748,4.912,1749,3.063,1750,3.975,1751,4.126,1752,3.717,1753,3.975,1754,3.063,1755,3.063,1756,3.063,1757,2.864,1758,3.975,1759,4.669,1760,3.063,1761,3.975,1762,4.669,1763,3.063,1764,3.063,1765,3.063,1766,3.063,1767,3.063,1768,3.063,1769,3.063,1770,3.063,1771,3.975,1772,3.975,1773,3.063,1774,3.063,1775,3.063,1776,3.063,1777,3.975,1778,3.063,1779,3.063,1780,3.063,1781,3.975,1782,3.063,1783,3.063,1784,3.063,1785,3.063,1786,3.063,1787,3.063,1788,3.063,1789,3.063,1790,3.063,1791,3.063,1792,2.864,1793,2.864,1794,4.669,1795,3.063,1796,3.063,1797,3.063,1798,3.063,1799,3.063,1800,3.063,1801,3.063,1802,3.063,1803,3.063,1804,3.975,1805,3.063,1806,3.063,1807,3.063,1808,3.063,1809,3.975,1810,4.412,1811,3.063]],["title/interfaces/TaskData.html",[0,0.167,1752,2.465]],["body/interfaces/TaskData.html",[0,0.295,2,0.648,3,0.205,4,0.217,5,0.185,9,0.704,18,1.091,20,0.161,22,0.515,25,0.013,28,1.522,31,0.285,35,0.015,41,0.709,42,0.638,43,2.228,44,0.465,48,1.091,49,1.476,53,0.86,54,1.368,64,0.297,66,1.133,73,0.303,76,0.709,78,1.113,79,0.352,82,0.011,83,0.008,89,0.575,98,0.053,103,0.544,123,1.215,124,0.885,132,0.648,149,0.712,160,1.839,162,0.707,171,1.042,176,1.814,182,1.369,185,1.422,195,0.62,197,1.011,209,0.929,222,0.593,246,1.886,249,1.921,254,1.665,260,1.422,262,2.663,263,1.478,278,1.176,280,1.368,281,0.96,282,1.368,307,1.091,315,0.832,331,1.807,333,2.318,344,0.566,345,1.133,375,1.011,377,0.808,389,1.369,394,1.549,409,1.599,418,1.05,441,1.886,491,1.369,593,1.221,613,3.66,614,3.455,627,3.455,630,4.102,640,2.514,683,2.813,722,1.369,723,1.318,798,1.537,814,1.369,1004,2.986,1055,2.807,1103,2.169,1114,1.97,1158,2.266,1453,2.514,1471,2.514,1608,2.514,1625,3.861,1748,4.903,1749,3.027,1750,3.944,1751,4.507,1752,4.102,1753,3.944,1754,3.027,1755,3.027,1756,3.027,1757,2.83,1758,3.944,1759,4.648,1760,3.027,1761,3.944,1762,4.648,1763,3.027,1764,3.027,1765,3.027,1766,3.027,1767,3.027,1768,3.027,1769,3.027,1770,3.027,1771,3.944,1772,3.944,1773,3.027,1774,3.027,1775,3.027,1776,3.027,1777,3.944,1778,3.027,1779,3.027,1780,3.027,1781,3.944,1782,3.027,1783,3.027,1784,3.027,1785,3.027,1786,3.027,1787,3.027,1788,3.027,1789,3.027,1790,3.027,1791,3.027,1792,2.83,1793,2.83,1794,4.648,1795,3.027,1796,3.027,1797,3.027,1798,3.027,1799,3.027,1800,3.027,1801,3.027,1802,3.027,1803,3.027,1804,3.944,1805,3.027,1806,3.027,1807,3.027,1808,3.027,1809,3.944,1810,4.387,1811,3.027]],["title/interfaces/TaskElement.html",[0,0.167,1751,2.465]],["body/interfaces/TaskElement.html",[0,0.297,2,0.662,3,0.209,4,0.22,5,0.189,9,0.713,18,1.114,20,0.147,22,0.525,25,0.013,28,1.537,35,0.015,41,0.717,43,2.251,44,0.475,48,1.114,49,1.496,53,0.713,54,1.387,64,0.3,66,1.157,73,0.305,76,0.717,78,1.124,79,0.353,82,0.011,83,0.008,98,0.054,103,0.551,123,1.197,124,0.888,132,0.662,149,0.714,160,1.295,162,0.721,171,1.056,176,1.688,182,1.398,185,1.452,195,0.634,197,1.015,209,0.932,222,0.606,246,1.926,249,1.932,254,1.7,260,1.452,262,1.771,263,1.51,278,1.201,280,1.387,281,0.973,282,1.387,307,1.114,315,0.85,331,1.846,333,2.341,344,0.578,345,1.157,375,1.032,377,0.819,389,1.398,394,1.56,409,1.633,418,1.072,441,1.926,491,1.398,593,1.247,613,3.148,614,3.49,627,3.49,630,4.143,640,2.568,683,2.851,722,1.398,723,1.346,798,1.57,814,1.398,1004,3.017,1055,2.819,1103,2.199,1114,2.012,1158,2.314,1453,2.568,1471,2.568,1608,2.568,1625,2.568,1748,4.919,1749,3.091,1750,3.998,1751,4.381,1752,3.738,1753,3.998,1754,3.091,1755,3.091,1756,3.091,1757,2.89,1758,3.998,1759,4.685,1760,3.091,1761,3.998,1762,4.685,1763,3.091,1764,3.091,1765,3.091,1766,3.091,1767,3.091,1768,3.091,1769,3.091,1770,3.091,1771,3.998,1772,3.998,1773,3.091,1774,3.091,1775,3.091,1776,3.091,1777,3.998,1778,3.091,1779,3.091,1780,3.091,1781,3.998,1782,3.091,1783,3.091,1784,3.091,1785,3.091,1786,3.091,1787,3.091,1788,3.091,1789,3.091,1790,3.091,1791,3.091,1792,2.89,1793,2.89,1794,4.685,1795,3.091,1796,3.091,1797,3.091,1798,3.091,1799,3.091,1800,3.091,1801,3.091,1802,3.091,1803,3.091,1804,3.998,1805,3.091,1806,3.091,1807,3.091,1808,3.091,1809,3.998,1810,4.431,1811,3.091]],["title/changelog.html",[1672,2.059,1834,2.374,1835,2.877]],["body/changelog.html",[9,0.583,22,0.555,23,1.719,25,0.006,31,0.2,35,0.014,42,0.371,68,0.797,69,0.7,73,0.2,79,0.155,80,0.57,82,0.009,83,0.006,93,0.859,94,1.573,97,1.719,123,0.536,129,1.638,132,0.492,133,1.719,138,0.893,141,1.431,150,1.213,151,0.828,153,1.564,154,1.431,158,1.719,169,1.857,176,0.828,180,1,182,1.478,185,1.079,190,1.263,193,1.431,205,1.431,210,1.638,216,1.263,231,1.431,238,1.431,249,1.27,253,1.564,303,1.719,305,1.263,311,1.719,328,0.829,344,0.43,345,0.859,359,1.686,372,3.52,373,2.035,403,1.638,408,2.287,418,0.797,445,1.719,477,2.712,535,3.055,541,1.908,573,2.873,576,2.297,594,1.809,602,6.114,619,2.297,627,1.809,635,3.101,656,1.638,722,1.979,723,2.119,844,1.495,859,3.262,860,3.262,864,2.126,865,2.036,869,1.809,871,3.447,885,3.582,906,2.714,911,1.638,912,1.908,924,3.276,925,2.278,932,2.126,960,2.714,1003,4.149,1006,1.638,1017,2.714,1033,1.951,1040,1.908,1047,1.809,1064,1.431,1071,2.712,1145,3.101,1147,1.908,1158,2.847,1181,1.809,1184,3.159,1196,1.809,1327,2.476,1336,2.476,1341,2.7,1342,2.7,1447,4.1,1492,2.297,1506,3.522,1560,2.297,1629,3.522,1635,5.522,1757,2.147,1792,2.147,1793,2.147,1812,3.001,1835,3.001,1836,5.146,1837,3.457,1838,3.457,1839,7.516,1840,3.457,1841,3.457,1842,3.457,1843,5.724,1844,4.918,1845,8.265,1846,8.155,1847,4.269,1848,3.457,1849,3.457,1850,4.918,1851,3.457,1852,3.457,1853,7.325,1854,5.724,1855,4.918,1856,4.918,1857,4.918,1858,3.457,1859,6.588,1860,4.918,1861,3.457,1862,4.918,1863,6.837,1864,3.457,1865,3.457,1866,3.457,1867,5.724,1868,7.429,1869,3.457,1870,3.457,1871,3.457,1872,5.724,1873,3.001,1874,3.457,1875,3.457,1876,3.457,1877,5.943,1878,3.457,1879,3.457,1880,5.321,1881,7.803,1882,3.457,1883,3.457,1884,6.911,1885,3.457,1886,3.457,1887,3.457,1888,6.235,1889,3.457,1890,3.457,1891,7.591,1892,4.269,1893,3.457,1894,5.724,1895,3.457,1896,3.457,1897,6.588,1898,4.918,1899,3.457,1900,5.724,1901,6.837,1902,3.457,1903,3.457,1904,3.457,1905,4.918,1906,3.457,1907,3.457,1908,4.918,1909,5.724,1910,3.457,1911,3.457,1912,4.918,1913,5.724,1914,4.918,1915,3.457,1916,7.962,1917,3.457,1918,3.457,1919,3.001,1920,3.457,1921,3.457,1922,3.457,1923,3.457,1924,3.457,1925,2.7,1926,3.457,1927,3.457,1928,3.457,1929,3.457,1930,3.457,1931,7.044,1932,3.457,1933,3.457,1934,3.457,1935,3.457,1936,5.724,1937,6.846,1938,3.457,1939,5.943,1940,3.457,1941,3.457,1942,6.235,1943,3.457,1944,7.429,1945,3.001,1946,3.457,1947,3.457,1948,3.457,1949,3.457,1950,3.457,1951,3.457,1952,3.457,1953,3.457,1954,3.457,1955,3.457,1956,3.457,1957,3.457,1958,4.87,1959,6.114,1960,4.269,1961,3.457,1962,5.724,1963,3.457,1964,3.457,1965,3.457,1966,3.457,1967,5.724,1968,3.457,1969,3.457,1970,3.457,1971,3.457,1972,3.457,1973,3.457,1974,3.457,1975,3.457,1976,3.457,1977,3.457,1978,4.918,1979,3.457,1980,3.457,1981,3.457,1982,3.457,1983,3.457,1984,3.457,1985,3.457,1986,3.001,1987,5.724,1988,3.457,1989,4.918,1990,3.457,1991,3.457,1992,3.457,1993,3.457,1994,3.457,1995,3.001,1996,3.001,1997,3.457,1998,3.457,1999,3.457,2000,3.457,2001,3.457,2002,3.457,2003,3.457,2004,3.457,2005,3.522,2006,3.457,2007,3.457,2008,3.457,2009,3.457,2010,5.724,2011,3.457,2012,3.457,2013,6.588,2014,3.457,2015,5.724,2016,3.457,2017,4.918,2018,3.457,2019,6.588,2020,4.918,2021,3.457,2022,3.457,2023,3.001,2024,3.457,2025,3.457,2026,5.724,2027,3.457,2028,3.457,2029,6.235,2030,3.457,2031,3.457,2032,4.269,2033,3.457,2034,3.457,2035,3.457,2036,3.457,2037,4.918,2038,3.457,2039,3.457,2040,3.457,2041,5.724,2042,3.457,2043,3.457,2044,3.457,2045,3.457,2046,3.457,2047,3.457,2048,3.457,2049,3.457,2050,3.457,2051,3.457,2052,2.7,2053,3.457,2054,3.457,2055,3.457,2056,3.457,2057,3.001,2058,3.457,2059,3.457,2060,3.457,2061,3.457,2062,3.457,2063,3.457,2064,3.457,2065,5.724,2066,3.457,2067,3.457,2068,3.457,2069,3.457,2070,3.457,2071,3.457,2072,3.457,2073,3.457,2074,3.457,2075,3.457,2076,3.457,2077,3.457,2078,3.457,2079,3.001,2080,3.457,2081,3.457,2082,3.457,2083,3.457,2084,5.724,2085,3.457,2086,3.457,2087,4.918,2088,3.457,2089,3.457,2090,3.457,2091,3.457,2092,3.457,2093,3.457,2094,3.457,2095,3.457,2096,3.457,2097,3.457,2098,3.457,2099,2.476,2100,4.918,2101,3.457,2102,3.457,2103,3.457,2104,3.457,2105,3.457,2106,3.457,2107,3.457,2108,3.457,2109,3.457,2110,4.918,2111,3.457,2112,6.588,2113,3.457,2114,3.457,2115,3.457,2116,3.457,2117,3.457,2118,3.457,2119,3.457,2120,3.457,2121,3.457,2122,3.457,2123,4.918,2124,3.457,2125,3.457,2126,3.001,2127,3.457,2128,3.457,2129,3.457,2130,5.412,2131,4.918,2132,3.457,2133,3.457,2134,3.457,2135,3.457,2136,3.457,2137,3.457,2138,3.457,2139,4.918,2140,3.457,2141,3.457,2142,3.457,2143,3.457,2144,3.457,2145,3.457,2146,3.457,2147,3.457,2148,3.457,2149,3.457,2150,3.457,2151,3.457,2152,3.457,2153,3.457,2154,3.457,2155,3.457,2156,3.457,2157,3.457,2158,3.457,2159,3.457,2160,3.457,2161,3.457,2162,3.457,2163,3.457,2164,3.457,2165,3.457,2166,3.457,2167,3.457,2168,3.457,2169,3.457,2170,3.457,2171,3.457,2172,3.457,2173,3.457,2174,3.457,2175,3.457,2176,4.918,2177,3.457,2178,3.457,2179,3.457,2180,3.457,2181,3.457,2182,3.457,2183,3.457,2184,3.457,2185,3.457,2186,3.457,2187,3.457,2188,3.457,2189,3.457,2190,3.457,2191,3.457,2192,3.457,2193,3.457,2194,3.457,2195,3.457]],["title/contributing.html",[1672,2.059,1834,2.374,2005,2.374]],["body/contributing.html",[4,0.21,16,2.407,25,0.01,35,0.012,79,0.258,82,0.012,83,0.01,91,1.792,142,3.411,145,1.539,159,1.599,222,0.747,226,1.937,245,2.482,438,2.855,485,3.102,579,3.354,656,2.72,865,2.376,924,3.411,925,2.88,928,3.003,930,3.588,971,3.168,1014,2.278,1161,3.003,1219,4.484,1244,4.484,1327,4.112,1442,4.112,1445,3.814,1457,4.112,1717,5.953,1836,5.729,1863,5.953,1880,4.112,1884,5.953,1901,5.953,1919,6.367,1939,6.596,1960,4.983,1986,5.953,1995,4.983,1996,4.983,2005,5.253,2032,5.953,2052,5.357,2079,4.983,2130,5.953,2196,5.741,2197,7.766,2198,7.334,2199,5.741,2200,5.741,2201,5.935,2202,6.858,2203,5.741,2204,5.741,2205,5.741,2206,5.741,2207,5.741,2208,5.741,2209,5.741,2210,5.741,2211,5.741,2212,5.741,2213,5.741,2214,7.334,2215,6.858,2216,6.858,2217,7.598,2218,5.741,2219,5.741,2220,5.741,2221,5.741,2222,6.858,2223,7.598,2224,5.741,2225,5.741,2226,5.741,2227,5.741,2228,6.858,2229,5.741,2230,6.858,2231,5.741,2232,6.858,2233,5.741,2234,4.983,2235,5.741,2236,5.741,2237,5.741,2238,5.741,2239,5.741,2240,5.741,2241,5.741,2242,5.741,2243,6.858,2244,5.741,2245,5.741,2246,5.741,2247,5.741,2248,5.741]],["title/dependencies.html",[1880,3.418,1925,2.589]],["body/dependencies.html",[25,0.011,35,0.015,82,0.013,83,0.011,154,2.604,204,1.506,222,0.819,359,1.506,722,1.89,723,1.819,859,3.291,860,3.291,864,2.72,865,2.604,868,3.471,869,3.291,871,3.291,1090,3.675,1664,5.459,1847,6.281,1880,4.505,1892,5.459,2249,6.289,2250,7.236,2251,6.289,2252,6.289,2253,6.289,2254,6.289,2255,6.289,2256,6.289,2257,6.289]],["title/miscellaneous/enumerations.html",[2258,1.829,2259,4.142]],["body/miscellaneous/enumerations.html",[19,1.418,20,0.156,25,0.012,31,0.26,35,0.014,82,0.013,83,0.012,94,1.313,229,1.835,561,1.92,1091,3.969,1112,4.266,1115,4.245,1116,4.245,1117,3.969,1119,4.245,1120,3.969,2258,3.526,2259,5.546,2260,5.546]],["title/miscellaneous/functions.html",[705,2.261,2258,1.829]],["body/miscellaneous/functions.html",[1,1.817,2,0.572,5,0.253,6,3.138,7,1.929,9,0.825,12,0.858,18,0.962,20,0.098,21,0.65,22,0.865,25,0.01,32,1.922,35,0.015,40,1.172,41,0.847,42,0.837,44,0.762,56,2.877,63,3.084,67,2.88,68,0.926,74,1.395,76,0.666,77,4.264,80,0.537,82,0.01,83,0.007,88,1.995,93,0.999,94,0.825,97,1.998,99,3.013,100,0.763,103,0.368,109,2.971,110,1.998,111,3.084,112,3.009,113,3.084,114,3.589,115,2.715,116,3.309,117,2.715,118,3.309,119,3.309,120,3.569,121,3.569,122,2.715,123,0.623,130,1.863,132,1.128,135,1.207,137,1.737,138,1.41,140,1.998,149,0.568,150,2.622,151,1.593,153,2.469,154,2.26,157,1.998,160,1.119,171,0.705,178,1.077,180,1.794,183,1.529,185,1.254,187,1.529,188,1.304,189,1.304,190,1.468,191,1.468,192,1.468,193,1.663,195,0.947,205,1.663,206,1.998,207,2.715,208,1.998,209,0.789,210,1.903,214,3.46,215,3.379,216,2.767,217,3.651,218,3.715,219,3.009,220,1.999,221,3.246,222,1.036,223,3.309,224,3.309,225,3.715,226,2.521,227,2.715,228,3.009,229,1.666,230,3.46,231,2.754,232,2.382,234,1.737,235,1.998,236,1.737,237,1.663,238,2.26,239,1.998,240,2.715,241,2.715,242,1.998,249,1.41,283,2.715,288,1.998,295,2.64,296,1.737,306,1.468,307,0.962,312,1.998,328,0.92,329,1.162,331,1.594,345,0.999,359,1.307,360,1.998,361,3.084,362,1.998,363,1.817,364,2.715,365,2.587,366,2.938,370,1.998,371,1.998,372,1.903,373,1.077,374,2.715,375,0.891,382,1.998,383,1.998,384,1.998,385,1.998,386,1.998,387,1.998,402,1.995,404,2.431,405,1.995,407,1.304,408,1.704,409,1.41,411,2.26,414,1.998,415,2.715,416,1.704,417,1.64,418,0.926,420,2.715,426,2.715,452,1.998,453,1.998,454,1.998,455,1.998,456,1.998,457,1.998,458,1.998,459,1.998,461,1.936,462,1.998,463,1.998,464,1.903,465,2.715,466,2.715,467,1.998,468,1.998,469,2.715,470,2.715,471,1.998,472,1.998,473,1.998,474,1.998,475,1.998,476,1.998,477,1.903,478,1.998,479,1.663,480,1.998,481,1.998,482,1.468,483,1.254,484,1.254,485,1.817,486,1.995,487,2.469,488,1.998,489,1.663,490,1.998,491,1.863,492,1.998,517,2.495,527,4.42,535,2.495,540,1.594,592,2.669,593,1.464,594,2.102,595,2.669,635,1.998,636,3.487,637,3.487,638,3.487,642,3.487,647,3.487,676,3.138,683,1.903,705,1.903,721,3.138,724,3.91,726,4.264,728,4.844,822,2.347,864,1.737,925,1.468,950,2.217,991,2.46,1024,3.013,1052,2.217,1055,1.995,1177,2.794,1206,1.663,1211,3.138,1222,3.138,1223,3.138,1224,2.877,1225,3.138,1226,3.138,1301,3.138,1350,3.138,1370,3.487,1523,2.495,1553,3.91,1824,3.487,1945,4.739,2258,2.217,2261,4.017,2262,6.958,2263,4.017,2264,4.017,2265,5.459,2266,3.487,2267,5.459,2268,4.017,2269,6.201,2270,4.017,2271,3.487,2272,4.017,2273,4.017,2274,3.487,2275,4.017,2276,4.017,2277,5.459,2278,4.017,2279,4.017,2280,4.017,2281,4.017,2282,4.017,2283,4.017,2284,7.177,2285,4.017,2286,4.017,2287,4.017,2288,4.017,2289,4.017,2290,5.459,2291,3.487,2292,4.017,2293,4.017,2294,5.459,2295,4.017,2296,4.017,2297,4.017,2298,4.017,2299,4.017,2300,4.017,2301,4.017,2302,4.017,2303,4.017,2304,4.017,2305,4.017,2306,4.017,2307,4.017,2308,4.017,2309,4.017,2310,3.487,2311,4.017,2312,3.487,2313,4.017]],["title/index.html",[20,0.081,1672,2.059,1834,2.374]],["body/index.html",[9,0.935,10,4.495,19,1.277,25,0.01,35,0.014,69,1.045,80,0.498,82,0.012,83,0.01,94,1.638,98,0.067,103,0.527,141,2.382,145,1.842,151,1.758,159,1.602,166,1.797,185,1.797,222,0.749,295,2.283,329,1.664,344,0.854,359,1.86,373,2.039,409,2.411,579,3.362,600,1.486,603,4.563,656,3.682,681,4.495,723,1.986,798,1.942,865,3.217,904,2.603,925,2.683,926,3.176,927,3.176,928,3.011,930,3.841,931,3.791,932,2.488,1029,2.283,1047,3.011,1064,2.382,1161,3.011,1181,3.011,1246,4.495,1250,4.561,1337,5.365,1338,3.575,1445,3.823,1492,3.823,1523,3.575,1541,4.919,1672,3.575,1836,4.495,1873,4.995,1877,4.995,1925,4.495,1958,5.365,1959,4.995,2005,4.919,2052,4.495,2099,4.919,2201,5.365,2314,6.868,2315,5.754,2316,5.754,2317,5.754,2318,5.754,2319,5.754,2320,5.754,2321,5.754,2322,5.754,2323,5.754,2324,5.754,2325,5.754,2326,5.754,2327,5.754,2328,5.754,2329,5.754,2330,5.754,2331,5.754,2332,5.754,2333,5.754,2334,5.754,2335,5.754,2336,5.754,2337,6.868,2338,5.754,2339,5.754,2340,5.754,2341,5.754,2342,5.754,2343,5.754,2344,5.754]],["title/license.html",[1672,2.059,1834,2.374,2201,2.589]],["body/license.html",[4,0.253,13,2.645,25,0.011,35,0.014,41,0.628,82,0.012,83,0.011,129,2.771,132,0.832,134,2.908,135,2.221,156,2.421,183,2.639,293,2.908,359,1.66,373,1.982,417,1.757,464,2.771,485,3.136,534,1.826,579,3.416,792,2.421,798,1.973,913,3.227,925,2.137,1192,3.503,1523,3.632,1958,4.568,2057,5.076,2126,5.076,2234,5.076,2291,5.076,2345,7.804,2346,5.847,2347,6.934,2348,5.847,2349,5.847,2350,5.847,2351,6.934,2352,5.847,2353,6.934,2354,5.847,2355,5.847,2356,7.392,2357,5.847,2358,6.934,2359,5.847,2360,6.934,2361,6.934,2362,5.847,2363,5.847,2364,5.847,2365,5.847,2366,7.392,2367,5.847,2368,5.847,2369,5.847,2370,5.847,2371,7.392,2372,5.847,2373,5.847,2374,5.847,2375,5.847,2376,6.934,2377,6.934,2378,7.392,2379,6.934,2380,5.847,2381,5.847,2382,5.847,2383,5.847,2384,5.847,2385,5.847,2386,5.847,2387,5.847,2388,5.847,2389,5.847,2390,5.847,2391,5.847,2392,5.847,2393,5.847,2394,5.847,2395,5.847,2396,5.847,2397,5.847,2398,5.847,2399,5.847,2400,6.934,2401,5.847,2402,5.847,2403,5.847,2404,5.847,2405,5.847,2406,5.847,2407,5.847,2408,5.847]],["title/modules.html",[2099,3.877]],["body/modules.html",[25,0.012,35,0.013,82,0.013,83,0.012,2099,4.663]],["title/overview.html",[2409,4.699]],["body/overview.html",[2,0.923,25,0.012,35,0.013,82,0.013,83,0.012,600,1.675,2023,5.631,2409,5.631,2410,6.487]],["title/miscellaneous/typealiases.html",[2258,1.829,2411,4.772]],["body/miscellaneous/typealiases.html",[20,0.149,25,0.011,30,1.801,31,0.316,35,0.015,47,2.985,54,1.639,59,2.323,61,2.821,65,2.821,76,0.848,82,0.013,83,0.011,124,0.803,816,3.216,817,3.37,819,3.566,856,3.193,889,3.925,1176,3.369,1177,2.323,1197,3.937,1198,3.937,1199,3.937,1200,3.937,1203,3.925,2258,3.369,2412,6.104,2413,8.245,2414,5.298]],["title/miscellaneous/variables.html",[2258,1.829,2415,4.142]],["body/miscellaneous/variables.html",[12,1.175,20,0.134,21,0.89,25,0.01,31,0.329,35,0.015,38,0.818,80,0.579,82,0.012,83,0.01,94,1.13,97,2.736,123,1.162,138,1.42,149,0.504,159,1.532,172,2.277,180,2.394,209,0.888,222,0.716,229,1.982,290,2.01,295,2.182,517,3.417,524,4.441,525,3.655,543,3.689,561,2.008,856,2.878,870,3.036,872,3.689,873,2.606,874,3.036,875,3.689,877,3.689,882,3.036,883,3.036,884,3.036,885,2.878,886,3.036,887,3.036,932,3.239,1090,3.905,1091,3.417,1104,3.417,1105,3.655,1106,4.441,1107,3.655,1117,3.417,1120,3.417,1361,5.802,1439,3.94,1461,3.94,1554,4.787,1555,3.94,1556,4.787,1557,3.94,1558,4.787,1559,4.787,1560,3.655,1561,4.787,1562,3.94,1563,4.787,1564,3.94,1565,3.94,1566,3.94,1567,4.787,2258,3.036,2260,5.802,2266,4.775,2271,5.802,2274,4.775,2310,4.775,2312,4.775,2414,6.251,2415,4.775,2416,7.898,2417,7.201,2418,6.684,2419,6.684,2420,6.684,2421,5.501,2422,5.501]]],"invertedIndex":[["",{"_index":35,"title":{},"body":{"interfaces/APICaller.html":{},"interfaces/AnyDecoder.html":{},"interfaces/ApiCallerSettings.html":{},"interfaces/BackoffSettings.html":{},"interfaces/Bindings.html":{},"classes/BundleApiCaller.html":{},"classes/BundleDescriptor.html":{},"classes/BundleExecutor.html":{},"interfaces/BundleOptions.html":{},"interfaces/BundlingConfig.html":{},"interfaces/CallOptions.html":{},"classes/CallSettings.html":{},"interfaces/CancellablePromise.html":{},"interfaces/ClientConfig.html":{},"classes/ClientStub.html":{},"interfaces/ClientStubOptions.html":{},"interfaces/Descriptor.html":{},"interfaces/Duplexify.html":{},"interfaces/DuplexifyConstructor.html":{},"interfaces/DuplexifyOptions.html":{},"interfaces/GRPCCallOtherArgs.html":{},"interfaces/GRPCCallResult.html":{},"interfaces/GaxCall.html":{},"interfaces/GaxCallPromise.html":{},"interfaces/GaxCallStream.html":{},"interfaces/GetOperationCallback.html":{},"classes/GoogleError.html":{},"classes/GoogleProtoFilesRoot.html":{},"classes/GrpcClient.html":{},"interfaces/GrpcClientOptions.html":{},"classes/LongRunningDescriptor.html":{},"classes/LongrunningApiCaller.html":{},"interfaces/Metadata.html":{},"interfaces/MetadataValue.html":{},"interfaces/MethodConfig.html":{},"classes/NormalApiCaller.html":{},"classes/OngoingCall.html":{},"classes/OngoingCallPromise.html":{},"classes/Operation.html":{},"classes/OperationsClient.html":{},"classes/OperationsClientBuilder.html":{},"interfaces/OperationsClientOptions.html":{},"classes/PageDescriptor.html":{},"classes/PagedApiCaller.html":{},"interfaces/ParseResult.html":{},"classes/PathTemplate.html":{},"interfaces/RequestType.html":{},"classes/RetryOptions.html":{},"interfaces/RetryParamsConfig.html":{},"interfaces/Segment.html":{},"interfaces/ServiceConfig.html":{},"interfaces/SimpleCallbackFunction.html":{},"classes/StreamDescriptor.html":{},"classes/StreamProxy.html":{},"classes/StreamingApiCaller.html":{},"interfaces/SubResponseInfo.html":{},"classes/Task.html":{},"interfaces/TaskCallback.html":{},"interfaces/TaskData.html":{},"interfaces/TaskElement.html":{},"changelog.html":{},"contributing.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":394,"title":{},"body":{"interfaces/BackoffSettings.html":{},"interfaces/Bindings.html":{},"classes/BundleExecutor.html":{},"interfaces/BundleOptions.html":{},"interfaces/BundlingConfig.html":{},"interfaces/CallOptions.html":{},"classes/CallSettings.html":{},"interfaces/ClientConfig.html":{},"classes/ClientStub.html":{},"interfaces/ClientStubOptions.html":{},"interfaces/GetOperationCallback.html":{},"classes/GoogleProtoFilesRoot.html":{},"classes/GrpcClient.html":{},"interfaces/GrpcClientOptions.html":{},"interfaces/Metadata.html":{},"interfaces/MetadataValue.html":{},"interfaces/MethodConfig.html":{},"classes/Operation.html":{},"classes/PageDescriptor.html":{},"classes/PagedApiCaller.html":{},"interfaces/ParseResult.html":{},"classes/PathTemplate.html":{},"classes/RetryOptions.html":{},"interfaces/RetryParamsConfig.html":{},"interfaces/Segment.html":{},"interfaces/ServiceConfig.html":{},"interfaces/SubResponseInfo.html":{},"classes/Task.html":{},"interfaces/TaskCallback.html":{},"interfaces/TaskData.html":{},"interfaces/TaskElement.html":{}}}],["0.1.4",{"_index":2251,"title":{},"body":{"dependencies.html":{}}}],["0.17.0",{"_index":2148,"title":{},"body":{"changelog.html":{}}}],["0.18.0",{"_index":2102,"title":{},"body":{"changelog.html":{}}}],["0.19.0",{"_index":1927,"title":{},"body":{"changelog.html":{}}}],["0.3.0",{"_index":2110,"title":{},"body":{"changelog.html":{}}}],["0.4.0",{"_index":1847,"title":{},"body":{"changelog.html":{},"dependencies.html":{}}}],["0.5.0",{"_index":1892,"title":{},"body":{"changelog.html":{},"dependencies.html":{}}}],["0.8.0",{"_index":2174,"title":{},"body":{"changelog.html":{}}}],["0.9.0",{"_index":2042,"title":{},"body":{"changelog.html":{}}}],["01",{"_index":2015,"title":{},"body":{"changelog.html":{}}}],["01:16",{"_index":1968,"title":{},"body":{"changelog.html":{}}}],["02",{"_index":1942,"title":{},"body":{"changelog.html":{}}}],["03",{"_index":1908,"title":{},"body":{"changelog.html":{}}}],["03236f4",{"_index":1852,"title":{},"body":{"changelog.html":{}}}],["04",{"_index":1865,"title":{},"body":{"changelog.html":{}}}],["05",{"_index":1840,"title":{},"body":{"changelog.html":{}}}],["08",{"_index":1984,"title":{},"body":{"changelog.html":{}}}],["08:49",{"_index":2024,"title":{},"body":{"changelog.html":{}}}],["09",{"_index":1841,"title":{},"body":{"changelog.html":{}}}],["1",{"_index":561,"title":{},"body":{"interfaces/Bindings.html":{},"classes/ClientStub.html":{},"interfaces/ClientStubOptions.html":{},"interfaces/Duplexify.html":{},"interfaces/DuplexifyConstructor.html":{},"interfaces/DuplexifyOptions.html":{},"classes/GoogleProtoFilesRoot.html":{},"classes/GrpcClient.html":{},"interfaces/GrpcClientOptions.html":{},"interfaces/Metadata.html":{},"interfaces/MetadataValue.html":{},"classes/OperationsClient.html":{},"classes/OperationsClientBuilder.html":{},"interfaces/OperationsClientOptions.html":{},"classes/PageDescriptor.html":{},"classes/PagedApiCaller.html":{},"interfaces/ParseResult.html":{},"classes/PathTemplate.html":{},"interfaces/Segment.html":{},"classes/StreamProxy.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["1.0.0",{"_index":1838,"title":{},"body":{"changelog.html":{}}}],["1.15.1",{"_index":2108,"title":{},"body":{"changelog.html":{}}}],["1.2",{"_index":471,"title":{},"body":{"interfaces/BackoffSettings.html":{},"interfaces/BundlingConfig.html":{},"interfaces/CallOptions.html":{},"classes/CallSettings.html":{},"interfaces/ClientConfig.html":{},"interfaces/MethodConfig.html":{},"classes/RetryOptions.html":{},"interfaces/RetryParamsConfig.html":{},"interfaces/ServiceConfig.html":{},"miscellaneous/functions.html":{}}}],["1.20.0",{"_index":1886,"title":{},"body":{"changelog.html":{}}}],["1.3",{"_index":368,"title":{},"body":{"interfaces/BackoffSettings.html":{},"interfaces/BundlingConfig.html":{},"interfaces/CallOptions.html":{},"classes/CallSettings.html":{},"interfaces/ClientConfig.html":{},"interfaces/MethodConfig.html":{},"classes/RetryOptions.html":{},"interfaces/RetryParamsConfig.html":{},"interfaces/ServiceConfig.html":{}}}],["1.5",{"_index":473,"title":{},"body":{"interfaces/BackoffSettings.html":{},"interfaces/BundlingConfig.html":{},"interfaces/CallOptions.html":{},"classes/CallSettings.html":{},"interfaces/ClientConfig.html":{},"interfaces/MethodConfig.html":{},"classes/RetryOptions.html":{},"interfaces/RetryParamsConfig.html":{},"interfaces/ServiceConfig.html":{},"miscellaneous/functions.html":{}}}],["10",{"_index":2094,"title":{},"body":{"changelog.html":{}}}],["100",{"_index":470,"title":{},"body":{"interfaces/BackoffSettings.html":{},"interfaces/BundlingConfig.html":{},"interfaces/CallOptions.html":{},"classes/CallSettings.html":{},"interfaces/ClientConfig.html":{},"interfaces/MethodConfig.html":{},"classes/RetryOptions.html":{},"interfaces/RetryParamsConfig.html":{},"interfaces/ServiceConfig.html":{},"miscellaneous/functions.html":{}}}],["1000",{"_index":312,"title":{},"body":{"interfaces/BackoffSettings.html":{},"interfaces/BundlingConfig.html":{},"interfaces/CallOptions.html":{},"classes/CallSettings.html":{},"interfaces/ClientConfig.html":{},"interfaces/MethodConfig.html":{},"classes/RetryOptions.html":{},"interfaces/RetryParamsConfig.html":{},"interfaces/ServiceConfig.html":{},"miscellaneous/functions.html":{}}}],["100000",{"_index":481,"title":{},"body":{"interfaces/BackoffSettings.html":{},"interfaces/BundlingConfig.html":{},"interfaces/CallOptions.html":{},"classes/CallSettings.html":{},"interfaces/ClientConfig.html":{},"interfaces/MethodConfig.html":{},"classes/RetryOptions.html":{},"interfaces/RetryParamsConfig.html":{},"interfaces/ServiceConfig.html":{},"miscellaneous/functions.html":{}}}],["100ms",{"_index":2101,"title":{},"body":{"changelog.html":{}}}],["11",{"_index":2029,"title":{},"body":{"changelog.html":{}}}],["11:27",{"_index":2095,"title":{},"body":{"changelog.html":{}}}],["12",{"_index":1967,"title":{},"body":{"changelog.html":{}}}],["12:08",{"_index":1949,"title":{},"body":{"changelog.html":{}}}],["13:32",{"_index":2030,"title":{},"body":{"changelog.html":{}}}],["14:01",{"_index":1923,"title":{},"body":{"changelog.html":{}}}],["15",{"_index":1922,"title":{},"body":{"changelog.html":{}}}],["15:05",{"_index":2090,"title":{},"body":{"changelog.html":{}}}],["16:56",{"_index":2085,"title":{},"body":{"changelog.html":{}}}],["17:51",{"_index":1943,"title":{},"body":{"changelog.html":{}}}],["18:01",{"_index":1985,"title":{},"body":{"changelog.html":{}}}],["2",{"_index":1117,"title":{},"body":{"interfaces/Duplexify.html":{},"interfaces/DuplexifyConstructor.html":{},"interfaces/DuplexifyOptions.html":{},"classes/StreamProxy.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["200",{"_index":479,"title":{},"body":{"interfaces/BackoffSettings.html":{},"interfaces/BundlingConfig.html":{},"interfaces/CallOptions.html":{},"classes/CallSettings.html":{},"interfaces/ClientConfig.html":{},"interfaces/Duplexify.html":{},"interfaces/DuplexifyConstructor.html":{},"interfaces/DuplexifyOptions.html":{},"interfaces/MethodConfig.html":{},"classes/RetryOptions.html":{},"interfaces/RetryParamsConfig.html":{},"interfaces/ServiceConfig.html":{},"classes/StreamProxy.html":{},"miscellaneous/functions.html":{}}}],["2000",{"_index":472,"title":{},"body":{"interfaces/BackoffSettings.html":{},"interfaces/BundlingConfig.html":{},"interfaces/CallOptions.html":{},"classes/CallSettings.html":{},"interfaces/ClientConfig.html":{},"interfaces/MethodConfig.html":{},"classes/RetryOptions.html":{},"interfaces/RetryParamsConfig.html":{},"interfaces/ServiceConfig.html":{},"miscellaneous/functions.html":{}}}],["2016",{"_index":2346,"title":{},"body":{"license.html":{}}}],["2018",{"_index":2084,"title":{},"body":{"changelog.html":{}}}],["2019",{"_index":1839,"title":{},"body":{"changelog.html":{}}}],["20:45",{"_index":1866,"title":{},"body":{"changelog.html":{}}}],["21:27",{"_index":1910,"title":{},"body":{"changelog.html":{}}}],["229",{"_index":2171,"title":{},"body":{"changelog.html":{}}}],["23:31",{"_index":2016,"title":{},"body":{"changelog.html":{}}}],["24",{"_index":2023,"title":{},"body":{"changelog.html":{},"overview.html":{}}}],["254",{"_index":2195,"title":{},"body":{"changelog.html":{}}}],["255",{"_index":2178,"title":{},"body":{"changelog.html":{}}}],["257",{"_index":2181,"title":{},"body":{"changelog.html":{}}}],["258",{"_index":2189,"title":{},"body":{"changelog.html":{}}}],["259",{"_index":2193,"title":{},"body":{"changelog.html":{}}}],["259141029",{"_index":1151,"title":{},"body":{"interfaces/Duplexify.html":{},"interfaces/DuplexifyConstructor.html":{},"interfaces/DuplexifyOptions.html":{},"classes/StreamProxy.html":{}}}],["26",{"_index":1948,"title":{},"body":{"changelog.html":{}}}],["260",{"_index":2191,"title":{},"body":{"changelog.html":{}}}],["262",{"_index":2170,"title":{},"body":{"changelog.html":{}}}],["264",{"_index":2187,"title":{},"body":{"changelog.html":{}}}],["266",{"_index":2175,"title":{},"body":{"changelog.html":{}}}],["269",{"_index":2173,"title":{},"body":{"changelog.html":{}}}],["274",{"_index":2184,"title":{},"body":{"changelog.html":{}}}],["275",{"_index":2172,"title":{},"body":{"changelog.html":{}}}],["28",{"_index":1909,"title":{},"body":{"changelog.html":{}}}],["3",{"_index":1120,"title":{},"body":{"interfaces/Duplexify.html":{},"interfaces/DuplexifyConstructor.html":{},"interfaces/DuplexifyOptions.html":{},"classes/StreamProxy.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["3.1.0",{"_index":2153,"title":{},"body":{"changelog.html":{}}}],["3.2.0",{"_index":2039,"title":{},"body":{"changelog.html":{}}}],["3.4.0",{"_index":1898,"title":{},"body":{"changelog.html":{}}}],["3.6.0",{"_index":2249,"title":{},"body":{"dependencies.html":{}}}],["30",{"_index":311,"title":{},"body":{"interfaces/BackoffSettings.html":{},"interfaces/BundlingConfig.html":{},"interfaces/CallOptions.html":{},"classes/CallSettings.html":{},"interfaces/ClientConfig.html":{},"interfaces/MethodConfig.html":{},"classes/RetryOptions.html":{},"interfaces/RetryParamsConfig.html":{},"interfaces/ServiceConfig.html":{},"changelog.html":{}}}],["30000",{"_index":474,"title":{},"body":{"interfaces/BackoffSettings.html":{},"interfaces/BundlingConfig.html":{},"interfaces/CallOptions.html":{},"classes/CallSettings.html":{},"interfaces/ClientConfig.html":{},"interfaces/MethodConfig.html":{},"classes/RetryOptions.html":{},"interfaces/RetryParamsConfig.html":{},"interfaces/ServiceConfig.html":{},"miscellaneous/functions.html":{}}}],["303",{"_index":2166,"title":{},"body":{"changelog.html":{}}}],["304",{"_index":2164,"title":{},"body":{"changelog.html":{}}}],["306",{"_index":2162,"title":{},"body":{"changelog.html":{}}}],["307",{"_index":2161,"title":{},"body":{"changelog.html":{}}}],["308",{"_index":2111,"title":{},"body":{"changelog.html":{}}}],["309",{"_index":2159,"title":{},"body":{"changelog.html":{}}}],["312",{"_index":2155,"title":{},"body":{"changelog.html":{}}}],["313",{"_index":2154,"title":{},"body":{"changelog.html":{}}}],["315",{"_index":2152,"title":{},"body":{"changelog.html":{}}}],["316",{"_index":2109,"title":{},"body":{"changelog.html":{}}}],["317",{"_index":2149,"title":{},"body":{"changelog.html":{}}}],["319",{"_index":2151,"title":{},"body":{"changelog.html":{}}}],["320",{"_index":2147,"title":{},"body":{"changelog.html":{}}}],["323",{"_index":2145,"title":{},"body":{"changelog.html":{}}}],["324",{"_index":2144,"title":{},"body":{"changelog.html":{}}}],["325",{"_index":2142,"title":{},"body":{"changelog.html":{}}}],["326",{"_index":2138,"title":{},"body":{"changelog.html":{}}}],["327",{"_index":2136,"title":{},"body":{"changelog.html":{}}}],["328",{"_index":2092,"title":{},"body":{"changelog.html":{}}}],["329",{"_index":2134,"title":{},"body":{"changelog.html":{}}}],["333",{"_index":2132,"title":{},"body":{"changelog.html":{}}}],["334",{"_index":2129,"title":{},"body":{"changelog.html":{}}}],["337",{"_index":2128,"title":{},"body":{"changelog.html":{}}}],["339",{"_index":2122,"title":{},"body":{"changelog.html":{}}}],["340",{"_index":2114,"title":{},"body":{"changelog.html":{}}}],["342",{"_index":2127,"title":{},"body":{"changelog.html":{}}}],["343",{"_index":2107,"title":{},"body":{"changelog.html":{}}}],["344",{"_index":2124,"title":{},"body":{"changelog.html":{}}}],["345",{"_index":2119,"title":{},"body":{"changelog.html":{}}}],["346",{"_index":2105,"title":{},"body":{"changelog.html":{}}}],["347",{"_index":2117,"title":{},"body":{"changelog.html":{}}}],["348",{"_index":2103,"title":{},"body":{"changelog.html":{}}}],["352",{"_index":2088,"title":{},"body":{"changelog.html":{}}}],["353",{"_index":2086,"title":{},"body":{"changelog.html":{}}}],["355",{"_index":2043,"title":{},"body":{"changelog.html":{}}}],["359",{"_index":2081,"title":{},"body":{"changelog.html":{}}}],["36",{"_index":2410,"title":{},"body":{"overview.html":{}}}],["360",{"_index":2035,"title":{},"body":{"changelog.html":{}}}],["361",{"_index":2077,"title":{},"body":{"changelog.html":{}}}],["362",{"_index":2078,"title":{},"body":{"changelog.html":{}}}],["364",{"_index":2040,"title":{},"body":{"changelog.html":{}}}],["366",{"_index":2074,"title":{},"body":{"changelog.html":{}}}],["367",{"_index":2073,"title":{},"body":{"changelog.html":{}}}],["372",{"_index":2070,"title":{},"body":{"changelog.html":{}}}],["374",{"_index":2068,"title":{},"body":{"changelog.html":{}}}],["375",{"_index":2066,"title":{},"body":{"changelog.html":{}}}],["378",{"_index":2063,"title":{},"body":{"changelog.html":{}}}],["379",{"_index":2061,"title":{},"body":{"changelog.html":{}}}],["380",{"_index":2058,"title":{},"body":{"changelog.html":{}}}],["381",{"_index":2055,"title":{},"body":{"changelog.html":{}}}],["383",{"_index":2051,"title":{},"body":{"changelog.html":{}}}],["384",{"_index":2050,"title":{},"body":{"changelog.html":{}}}],["385",{"_index":2038,"title":{},"body":{"changelog.html":{}}}],["386",{"_index":2034,"title":{},"body":{"changelog.html":{}}}],["387",{"_index":2045,"title":{},"body":{"changelog.html":{}}}],["390",{"_index":2031,"title":{},"body":{"changelog.html":{}}}],["394",{"_index":2027,"title":{},"body":{"changelog.html":{}}}],["395",{"_index":2025,"title":{},"body":{"changelog.html":{}}}],["396",{"_index":2018,"title":{},"body":{"changelog.html":{}}}],["399",{"_index":2021,"title":{},"body":{"changelog.html":{}}}],["39;&#39",{"_index":1496,"title":{},"body":{"classes/OperationsClient.html":{}}}],["4.0.0",{"_index":2250,"title":{},"body":{"dependencies.html":{}}}],["4.5.2",{"_index":2255,"title":{},"body":{"dependencies.html":{}}}],["4.6.0",{"_index":2253,"title":{},"body":{"dependencies.html":{}}}],["4.x",{"_index":2168,"title":{},"body":{"changelog.html":{}}}],["40",{"_index":478,"title":{},"body":{"interfaces/BackoffSettings.html":{},"interfaces/BundlingConfig.html":{},"interfaces/CallOptions.html":{},"classes/CallSettings.html":{},"interfaces/ClientConfig.html":{},"interfaces/MethodConfig.html":{},"classes/RetryOptions.html":{},"interfaces/RetryParamsConfig.html":{},"interfaces/ServiceConfig.html":{},"miscellaneous/functions.html":{}}}],["400",{"_index":1989,"title":{},"body":{"changelog.html":{}}}],["404",{"_index":2009,"title":{},"body":{"changelog.html":{}}}],["407",{"_index":2004,"title":{},"body":{"changelog.html":{}}}],["409",{"_index":2008,"title":{},"body":{"changelog.html":{}}}],["410",{"_index":2002,"title":{},"body":{"changelog.html":{}}}],["413",{"_index":2000,"title":{},"body":{"changelog.html":{}}}],["414",{"_index":2006,"title":{},"body":{"changelog.html":{}}}],["417",{"_index":2012,"title":{},"body":{"changelog.html":{}}}],["418",{"_index":2011,"title":{},"body":{"changelog.html":{}}}],["420",{"_index":1979,"title":{},"body":{"changelog.html":{}}}],["421",{"_index":1977,"title":{},"body":{"changelog.html":{}}}],["422",{"_index":1954,"title":{},"body":{"changelog.html":{}}}],["423",{"_index":1982,"title":{},"body":{"changelog.html":{}}}],["424",{"_index":1969,"title":{},"body":{"changelog.html":{}}}],["425",{"_index":1980,"title":{},"body":{"changelog.html":{}}}],["426",{"_index":1972,"title":{},"body":{"changelog.html":{}}}],["428",{"_index":1965,"title":{},"body":{"changelog.html":{}}}],["429",{"_index":1963,"title":{},"body":{"changelog.html":{}}}],["430",{"_index":1957,"title":{},"body":{"changelog.html":{}}}],["433",{"_index":1956,"title":{},"body":{"changelog.html":{}}}],["434",{"_index":1951,"title":{},"body":{"changelog.html":{}}}],["436",{"_index":1946,"title":{},"body":{"changelog.html":{}}}],["440",{"_index":1938,"title":{},"body":{"changelog.html":{}}}],["441",{"_index":1926,"title":{},"body":{"changelog.html":{}}}],["442",{"_index":1930,"title":{},"body":{"changelog.html":{}}}],["443",{"_index":1560,"title":{},"body":{"classes/OperationsClient.html":{},"classes/OperationsClientBuilder.html":{},"interfaces/OperationsClientOptions.html":{},"changelog.html":{},"miscellaneous/variables.html":{}}}],["444",{"_index":1934,"title":{},"body":{"changelog.html":{}}}],["449",{"_index":1920,"title":{},"body":{"changelog.html":{}}}],["45000",{"_index":475,"title":{},"body":{"interfaces/BackoffSettings.html":{},"interfaces/BundlingConfig.html":{},"interfaces/CallOptions.html":{},"classes/CallSettings.html":{},"interfaces/ClientConfig.html":{},"interfaces/MethodConfig.html":{},"classes/RetryOptions.html":{},"interfaces/RetryParamsConfig.html":{},"interfaces/ServiceConfig.html":{},"miscellaneous/functions.html":{}}}],["451",{"_index":1940,"title":{},"body":{"changelog.html":{}}}],["453",{"_index":1918,"title":{},"body":{"changelog.html":{}}}],["458",{"_index":1915,"title":{},"body":{"changelog.html":{}}}],["459",{"_index":1911,"title":{},"body":{"changelog.html":{}}}],["463",{"_index":1906,"title":{},"body":{"changelog.html":{}}}],["464",{"_index":1896,"title":{},"body":{"changelog.html":{}}}],["466",{"_index":1893,"title":{},"body":{"changelog.html":{}}}],["467",{"_index":1871,"title":{},"body":{"changelog.html":{}}}],["468",{"_index":1890,"title":{},"body":{"changelog.html":{}}}],["470",{"_index":1879,"title":{},"body":{"changelog.html":{}}}],["471",{"_index":1902,"title":{},"body":{"changelog.html":{}}}],["474",{"_index":1887,"title":{},"body":{"changelog.html":{}}}],["475",{"_index":1883,"title":{},"body":{"changelog.html":{}}}],["476",{"_index":1904,"title":{},"body":{"changelog.html":{}}}],["477",{"_index":1875,"title":{},"body":{"changelog.html":{}}}],["483",{"_index":1857,"title":{},"body":{"changelog.html":{}}}],["484",{"_index":1860,"title":{},"body":{"changelog.html":{}}}],["487",{"_index":1848,"title":{},"body":{"changelog.html":{}}}],["493",{"_index":1851,"title":{},"body":{"changelog.html":{}}}],["6.0.0",{"_index":2257,"title":{},"body":{"dependencies.html":{}}}],["6.1.0",{"_index":1895,"title":{},"body":{"changelog.html":{}}}],["6.8.8",{"_index":2256,"title":{},"body":{"dependencies.html":{}}}],["60000",{"_index":369,"title":{},"body":{"interfaces/BackoffSettings.html":{},"interfaces/BundlingConfig.html":{},"interfaces/CallOptions.html":{},"classes/CallSettings.html":{},"interfaces/ClientConfig.html":{},"interfaces/MethodConfig.html":{},"classes/RetryOptions.html":{},"interfaces/RetryParamsConfig.html":{},"interfaces/ServiceConfig.html":{}}}],["728678a",{"_index":1858,"title":{},"body":{"changelog.html":{}}}],["8.0.0",{"_index":2180,"title":{},"body":{"changelog.html":{}}}],["8.10.0",{"_index":1856,"title":{},"body":{"changelog.html":{}}}],["8.13.0",{"_index":920,"title":{},"body":{"classes/ClientStub.html":{},"interfaces/ClientStubOptions.html":{},"classes/GoogleProtoFilesRoot.html":{},"classes/GrpcClient.html":{},"interfaces/GrpcClientOptions.html":{},"interfaces/Metadata.html":{},"interfaces/MetadataValue.html":{}}}],["9.x",{"_index":2169,"title":{},"body":{"changelog.html":{}}}],["90000",{"_index":480,"title":{},"body":{"interfaces/BackoffSettings.html":{},"interfaces/BundlingConfig.html":{},"interfaces/CallOptions.html":{},"classes/CallSettings.html":{},"interfaces/ClientConfig.html":{},"interfaces/MethodConfig.html":{},"classes/RetryOptions.html":{},"interfaces/RetryParamsConfig.html":{},"interfaces/ServiceConfig.html":{},"miscellaneous/functions.html":{}}}],["981b1ed",{"_index":1849,"title":{},"body":{"changelog.html":{}}}],["_apicall",{"_index":1784,"title":{},"body":{"interfaces/SubResponseInfo.html":{},"classes/Task.html":{},"interfaces/TaskCallback.html":{},"interfaces/TaskData.html":{},"interfaces/TaskElement.html":{}}}],["_bundledfield",{"_index":1786,"title":{},"body":{"interfaces/SubResponseInfo.html":{},"classes/Task.html":{},"interfaces/TaskCallback.html":{},"interfaces/TaskData.html":{},"interfaces/TaskElement.html":{}}}],["_callback",{"_index":1121,"title":{},"body":{"interfaces/Duplexify.html":{},"interfaces/DuplexifyConstructor.html":{},"interfaces/DuplexifyOptions.html":{},"classes/StreamProxy.html":{}}}],["_calloptions",{"_index":1217,"title":{},"body":{"interfaces/GetOperationCallback.html":{},"classes/Operation.html":{}}}],["_cancel(id",{"_index":793,"title":{},"body":{"classes/BundleExecutor.html":{},"interfaces/BundleOptions.html":{}}}],["_canceloperation",{"_index":1572,"title":{},"body":{"classes/OperationsClient.html":{},"classes/OperationsClientBuilder.html":{},"interfaces/OperationsClientOptions.html":{}}}],["_data",{"_index":1788,"title":{},"body":{"interfaces/SubResponseInfo.html":{},"classes/Task.html":{},"interfaces/TaskCallback.html":{},"interfaces/TaskData.html":{},"interfaces/TaskElement.html":{}}}],["_deleteoperation",{"_index":1573,"title":{},"body":{"classes/OperationsClient.html":{},"classes/OperationsClientBuilder.html":{},"interfaces/OperationsClientOptions.html":{}}}],["_descriptor",{"_index":691,"title":{},"body":{"classes/BundleExecutor.html":{},"interfaces/BundleOptions.html":{}}}],["_findincludepath",{"_index":1354,"title":{},"body":{"classes/GoogleProtoFilesRoot.html":{}}}],["_findincludepath(originpath",{"_index":1077,"title":{},"body":{"classes/ClientStub.html":{},"interfaces/ClientStubOptions.html":{},"classes/GoogleProtoFilesRoot.html":{},"classes/GrpcClient.html":{},"interfaces/GrpcClientOptions.html":{},"interfaces/Metadata.html":{},"interfaces/MetadataValue.html":{}}}],["_getcredentials",{"_index":1359,"title":{},"body":{"classes/GrpcClient.html":{}}}],["_getcredentials(opts",{"_index":944,"title":{},"body":{"classes/ClientStub.html":{},"interfaces/ClientStubOptions.html":{},"classes/GoogleProtoFilesRoot.html":{},"classes/GrpcClient.html":{},"interfaces/GrpcClientOptions.html":{},"interfaces/Metadata.html":{},"interfaces/MetadataValue.html":{}}}],["_getoperation",{"_index":1570,"title":{},"body":{"classes/OperationsClient.html":{},"classes/OperationsClientBuilder.html":{},"interfaces/OperationsClientOptions.html":{}}}],["_invocationid",{"_index":692,"title":{},"body":{"classes/BundleExecutor.html":{},"interfaces/BundleOptions.html":{}}}],["_invocations",{"_index":693,"title":{},"body":{"classes/BundleExecutor.html":{},"interfaces/BundleOptions.html":{}}}],["_iscancelcalled",{"_index":1122,"title":{},"body":{"interfaces/Duplexify.html":{},"interfaces/DuplexifyConstructor.html":{},"interfaces/DuplexifyOptions.html":{},"classes/StreamProxy.html":{}}}],["_listenforevents",{"_index":1252,"title":{},"body":{"interfaces/GetOperationCallback.html":{},"classes/Operation.html":{}}}],["_listoperations",{"_index":1571,"title":{},"body":{"classes/OperationsClient.html":{},"classes/OperationsClientBuilder.html":{},"interfaces/OperationsClientOptions.html":{}}}],["_maybecleartimeout(bundleid",{"_index":788,"title":{},"body":{"classes/BundleExecutor.html":{},"interfaces/BundleOptions.html":{}}}],["_options",{"_index":694,"title":{},"body":{"classes/BundleExecutor.html":{},"interfaces/BundleOptions.html":{}}}],["_request",{"_index":1785,"title":{},"body":{"interfaces/SubResponseInfo.html":{},"classes/Task.html":{},"interfaces/TaskCallback.html":{},"interfaces/TaskData.html":{},"interfaces/TaskElement.html":{}}}],["_resolvefile",{"_index":1360,"title":{},"body":{"classes/GrpcClient.html":{}}}],["_resolvefile(protopath",{"_index":982,"title":{},"body":{"classes/ClientStub.html":{},"interfaces/ClientStubOptions.html":{},"classes/GoogleProtoFilesRoot.html":{},"classes/GrpcClient.html":{},"interfaces/GrpcClientOptions.html":{},"interfaces/Metadata.html":{},"interfaces/MetadataValue.html":{}}}],["_runnow",{"_index":697,"title":{},"body":{"classes/BundleExecutor.html":{}}}],["_runnow(bundleid",{"_index":711,"title":{},"body":{"classes/BundleExecutor.html":{},"interfaces/BundleOptions.html":{}}}],["_subresponsefield",{"_index":1787,"title":{},"body":{"interfaces/SubResponseInfo.html":{},"classes/Task.html":{},"interfaces/TaskCallback.html":{},"interfaces/TaskData.html":{},"interfaces/TaskElement.html":{}}}],["_tasks",{"_index":695,"title":{},"body":{"classes/BundleExecutor.html":{},"interfaces/BundleOptions.html":{}}}],["_timers",{"_index":696,"title":{},"body":{"classes/BundleExecutor.html":{},"interfaces/BundleOptions.html":{}}}],["_unpackresponse",{"_index":1416,"title":{},"body":{"classes/Operation.html":{}}}],["_unpackresponse(op",{"_index":1290,"title":{},"body":{"interfaces/GetOperationCallback.html":{},"classes/Operation.html":{}}}],["_wrapoperation",{"_index":1395,"title":{},"body":{"classes/LongrunningApiCaller.html":{}}}],["a/b",{"_index":1002,"title":{},"body":{"classes/ClientStub.html":{},"interfaces/ClientStubOptions.html":{},"classes/GoogleProtoFilesRoot.html":{},"classes/GrpcClient.html":{},"interfaces/GrpcClientOptions.html":{},"interfaces/Metadata.html":{},"interfaces/MetadataValue.html":{}}}],["above",{"_index":485,"title":{},"body":{"interfaces/BackoffSettings.html":{},"interfaces/BundlingConfig.html":{},"interfaces/CallOptions.html":{},"classes/CallSettings.html":{},"interfaces/ClientConfig.html":{},"interfaces/MethodConfig.html":{},"classes/RetryOptions.html":{},"interfaces/RetryParamsConfig.html":{},"interfaces/ServiceConfig.html":{},"contributing.html":{},"miscellaneous/functions.html":{},"license.html":{}}}],["abtests",{"_index":999,"title":{},"body":{"classes/ClientStub.html":{},"interfaces/ClientStubOptions.html":{},"interfaces/GRPCCallOtherArgs.html":{},"interfaces/GRPCCallResult.html":{},"interfaces/GaxCall.html":{},"interfaces/GaxCallPromise.html":{},"interfaces/GaxCallStream.html":{},"classes/GoogleProtoFilesRoot.html":{},"classes/GrpcClient.html":{},"interfaces/GrpcClientOptions.html":{},"interfaces/Metadata.html":{},"interfaces/MetadataValue.html":{},"interfaces/RequestType.html":{},"interfaces/SimpleCallbackFunction.html":{}}}],["accept",{"_index":142,"title":{},"body":{"interfaces/BackoffSettings.html":{},"interfaces/BundlingConfig.html":{},"interfaces/CallOptions.html":{},"classes/CallSettings.html":{},"interfaces/ClientConfig.html":{},"interfaces/MethodConfig.html":{},"classes/RetryOptions.html":{},"interfaces/RetryParamsConfig.html":{},"interfaces/ServiceConfig.html":{},"contributing.html":{}}}],["accepted",{"_index":2237,"title":{},"body":{"contributing.html":{}}}],["access",{"_index":1457,"title":{},"body":{"classes/OperationsClient.html":{},"classes/OperationsClientBuilder.html":{},"interfaces/OperationsClientOptions.html":{},"contributing.html":{}}}],["accessors",{"_index":1700,"title":{},"body":{"classes/PathTemplate.html":{}}}],["active",{"_index":1247,"title":{},"body":{"interfaces/GetOperationCallback.html":{},"classes/Operation.html":{}}}],["actual",{"_index":1795,"title":{},"body":{"interfaces/SubResponseInfo.html":{},"classes/Task.html":{},"interfaces/TaskCallback.html":{},"interfaces/TaskData.html":{},"interfaces/TaskElement.html":{}}}],["actually",{"_index":664,"title":{},"body":{"classes/BundleDescriptor.html":{}}}],["add",{"_index":1931,"title":{},"body":{"changelog.html":{}}}],["added",{"_index":257,"title":{},"body":{"interfaces/BackoffSettings.html":{},"interfaces/BundlingConfig.html":{},"interfaces/CallOptions.html":{},"classes/CallSettings.html":{},"interfaces/ClientConfig.html":{},"interfaces/Duplexify.html":{},"interfaces/DuplexifyConstructor.html":{},"interfaces/DuplexifyOptions.html":{},"interfaces/MethodConfig.html":{},"classes/RetryOptions.html":{},"interfaces/RetryParamsConfig.html":{},"interfaces/ServiceConfig.html":{},"classes/StreamProxy.html":{}}}],["adding",{"_index":255,"title":{},"body":{"interfaces/BackoffSettings.html":{},"interfaces/BundlingConfig.html":{},"interfaces/CallOptions.html":{},"classes/CallSettings.html":{},"interfaces/ClientConfig.html":{},"interfaces/MethodConfig.html":{},"classes/RetryOptions.html":{},"interfaces/RetryParamsConfig.html":{},"interfaces/ServiceConfig.html":{}}}],["additional",{"_index":305,"title":{},"body":{"interfaces/BackoffSettings.html":{},"interfaces/BundlingConfig.html":{},"interfaces/CallOptions.html":{},"classes/CallSettings.html":{},"interfaces/ClientConfig.html":{},"classes/ClientStub.html":{},"interfaces/ClientStubOptions.html":{},"classes/GoogleProtoFilesRoot.html":{},"classes/GrpcClient.html":{},"interfaces/GrpcClientOptions.html":{},"interfaces/Metadata.html":{},"interfaces/MetadataValue.html":{},"interfaces/MethodConfig.html":{},"classes/RetryOptions.html":{},"interfaces/RetryParamsConfig.html":{},"interfaces/ServiceConfig.html":{},"changelog.html":{}}}],["adheres",{"_index":2244,"title":{},"body":{"contributing.html":{}}}],["advised",{"_index":2406,"title":{},"body":{"license.html":{}}}],["affect",{"_index":1615,"title":{},"body":{"classes/OperationsClient.html":{},"classes/OperationsClientBuilder.html":{},"interfaces/OperationsClientOptions.html":{}}}],["aggregated",{"_index":643,"title":{},"body":{"classes/BundleDescriptor.html":{}}}],["agreement",{"_index":2216,"title":{},"body":{"contributing.html":{}}}],["agreements",{"_index":2202,"title":{},"body":{"contributing.html":{}}}],["aids",{"_index":2315,"title":{},"body":{"index.html":{}}}],["algorithm",{"_index":113,"title":{},"body":{"interfaces/BackoffSettings.html":{},"interfaces/BundlingConfig.html":{},"interfaces/CallOptions.html":{},"classes/CallSettings.html":{},"interfaces/ClientConfig.html":{},"interfaces/MethodConfig.html":{},"classes/RetryOptions.html":{},"interfaces/RetryParamsConfig.html":{},"interfaces/ServiceConfig.html":{},"miscellaneous/functions.html":{}}}],["aliases",{"_index":2412,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["all_scopes",{"_index":1567,"title":{},"body":{"classes/OperationsClient.html":{},"classes/OperationsClientBuilder.html":{},"interfaces/OperationsClientOptions.html":{},"miscellaneous/variables.html":{}}}],["allcancelled",{"_index":1810,"title":{},"body":{"interfaces/SubResponseInfo.html":{},"classes/Task.html":{},"interfaces/TaskCallback.html":{},"interfaces/TaskData.html":{},"interfaces/TaskElement.html":{}}}],["allow",{"_index":2225,"title":{},"body":{"contributing.html":{}}}],["allows",{"_index":639,"title":{},"body":{"classes/BundleDescriptor.html":{},"classes/OperationsClient.html":{},"classes/OperationsClientBuilder.html":{},"interfaces/OperationsClientOptions.html":{}}}],["allresources",{"_index":1697,"title":{},"body":{"classes/PagedApiCaller.html":{}}}],["already",{"_index":2239,"title":{},"body":{"contributing.html":{}}}],["always",{"_index":1181,"title":{},"body":{"interfaces/GRPCCallOtherArgs.html":{},"interfaces/GRPCCallResult.html":{},"interfaces/GaxCall.html":{},"interfaces/GaxCallPromise.html":{},"interfaces/GaxCallStream.html":{},"interfaces/RequestType.html":{},"interfaces/SimpleCallbackFunction.html":{},"changelog.html":{},"index.html":{}}}],["amount",{"_index":277,"title":{},"body":{"interfaces/BackoffSettings.html":{},"classes/BundleExecutor.html":{},"interfaces/BundleOptions.html":{},"interfaces/BundlingConfig.html":{},"interfaces/CallOptions.html":{},"classes/CallSettings.html":{},"interfaces/ClientConfig.html":{},"interfaces/MethodConfig.html":{},"classes/RetryOptions.html":{},"interfaces/RetryParamsConfig.html":{},"interfaces/ServiceConfig.html":{}}}],["and/or",{"_index":2363,"title":{},"body":{"license.html":{}}}],["another",{"_index":1446,"title":{},"body":{"classes/OperationsClient.html":{},"classes/OperationsClientBuilder.html":{},"interfaces/OperationsClientOptions.html":{}}}],["anydecoder",{"_index":84,"title":{"interfaces/AnyDecoder.html":{}},"body":{"interfaces/AnyDecoder.html":{},"classes/LongRunningDescriptor.html":{}}}],["anymore",{"_index":2054,"title":{},"body":{"changelog.html":{}}}],["api",{"_index":9,"title":{},"body":{"interfaces/APICaller.html":{},"interfaces/ApiCallerSettings.html":{},"interfaces/BackoffSettings.html":{},"classes/BundleExecutor.html":{},"interfaces/BundleOptions.html":{},"interfaces/BundlingConfig.html":{},"interfaces/CallOptions.html":{},"classes/CallSettings.html":{},"interfaces/CancellablePromise.html":{},"interfaces/ClientConfig.html":{},"classes/ClientStub.html":{},"interfaces/ClientStubOptions.html":{},"interfaces/Duplexify.html":{},"interfaces/DuplexifyConstructor.html":{},"interfaces/DuplexifyOptions.html":{},"interfaces/GetOperationCallback.html":{},"classes/GoogleProtoFilesRoot.html":{},"classes/GrpcClient.html":{},"interfaces/GrpcClientOptions.html":{},"classes/LongrunningApiCaller.html":{},"interfaces/Metadata.html":{},"interfaces/MetadataValue.html":{},"interfaces/MethodConfig.html":{},"classes/NormalApiCaller.html":{},"classes/OngoingCall.html":{},"classes/OngoingCallPromise.html":{},"classes/Operation.html":{},"classes/OperationsClient.html":{},"classes/OperationsClientBuilder.html":{},"interfaces/OperationsClientOptions.html":{},"classes/PagedApiCaller.html":{},"classes/RetryOptions.html":{},"interfaces/RetryParamsConfig.html":{},"interfaces/ServiceConfig.html":{},"classes/StreamDescriptor.html":{},"classes/StreamProxy.html":{},"classes/StreamingApiCaller.html":{},"interfaces/SubResponseInfo.html":{},"classes/Task.html":{},"interfaces/TaskCallback.html":{},"interfaces/TaskData.html":{},"interfaces/TaskElement.html":{},"changelog.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["api.bundlingmethod",{"_index":196,"title":{},"body":{"interfaces/BackoffSettings.html":{},"interfaces/BundlingConfig.html":{},"interfaces/CallOptions.html":{},"classes/CallSettings.html":{},"interfaces/ClientConfig.html":{},"interfaces/MethodConfig.html":{},"classes/RetryOptions.html":{},"interfaces/RetryParamsConfig.html":{},"interfaces/ServiceConfig.html":{}}}],["api.pagestreamingmethod",{"_index":202,"title":{},"body":{"interfaces/BackoffSettings.html":{},"interfaces/BundlingConfig.html":{},"interfaces/CallOptions.html":{},"classes/CallSettings.html":{},"interfaces/ClientConfig.html":{},"interfaces/MethodConfig.html":{},"classes/RetryOptions.html":{},"interfaces/RetryParamsConfig.html":{},"interfaces/ServiceConfig.html":{}}}],["apicall",{"_index":43,"title":{},"body":{"interfaces/APICaller.html":{},"interfaces/ApiCallerSettings.html":{},"classes/BundleApiCaller.html":{},"classes/BundleExecutor.html":{},"interfaces/BundleOptions.html":{},"interfaces/Duplexify.html":{},"interfaces/DuplexifyConstructor.html":{},"interfaces/DuplexifyOptions.html":{},"classes/LongrunningApiCaller.html":{},"classes/NormalApiCaller.html":{},"classes/PageDescriptor.html":{},"classes/PagedApiCaller.html":{},"classes/StreamProxy.html":{},"classes/StreamingApiCaller.html":{},"interfaces/SubResponseInfo.html":{},"classes/Task.html":{},"interfaces/TaskCallback.html":{},"interfaces/TaskData.html":{},"interfaces/TaskElement.html":{}}}],["apicall(argument",{"_index":1167,"title":{},"body":{"interfaces/Duplexify.html":{},"interfaces/DuplexifyConstructor.html":{},"interfaces/DuplexifyOptions.html":{},"classes/StreamProxy.html":{}}}],["apicall(request",{"_index":743,"title":{},"body":{"classes/BundleExecutor.html":{},"interfaces/BundleOptions.html":{},"classes/PageDescriptor.html":{}}}],["apicallback",{"_index":54,"title":{},"body":{"interfaces/APICaller.html":{},"interfaces/ApiCallerSettings.html":{},"classes/BundleApiCaller.html":{},"classes/BundleExecutor.html":{},"interfaces/BundleOptions.html":{},"interfaces/CancellablePromise.html":{},"interfaces/Duplexify.html":{},"interfaces/DuplexifyConstructor.html":{},"interfaces/DuplexifyOptions.html":{},"interfaces/GRPCCallOtherArgs.html":{},"interfaces/GRPCCallResult.html":{},"interfaces/GaxCall.html":{},"interfaces/GaxCallPromise.html":{},"interfaces/GaxCallStream.html":{},"classes/LongrunningApiCaller.html":{},"classes/NormalApiCaller.html":{},"classes/OngoingCall.html":{},"classes/OngoingCallPromise.html":{},"classes/PagedApiCaller.html":{},"interfaces/RequestType.html":{},"interfaces/SimpleCallbackFunction.html":{},"classes/StreamProxy.html":{},"classes/StreamingApiCaller.html":{},"interfaces/SubResponseInfo.html":{},"classes/Task.html":{},"interfaces/TaskCallback.html":{},"interfaces/TaskData.html":{},"interfaces/TaskElement.html":{},"miscellaneous/typealiases.html":{}}}],["apicaller",{"_index":1,"title":{"interfaces/APICaller.html":{}},"body":{"interfaces/APICaller.html":{},"interfaces/ApiCallerSettings.html":{},"classes/BundleApiCaller.html":{},"interfaces/Descriptor.html":{},"classes/LongrunningApiCaller.html":{},"classes/NormalApiCaller.html":{},"classes/PageDescriptor.html":{},"classes/PagedApiCaller.html":{},"classes/StreamDescriptor.html":{},"classes/StreamingApiCaller.html":{},"miscellaneous/functions.html":{}}}],["apicallersettings",{"_index":52,"title":{"interfaces/ApiCallerSettings.html":{}},"body":{"interfaces/APICaller.html":{},"interfaces/ApiCallerSettings.html":{},"classes/BundleApiCaller.html":{},"classes/LongrunningApiCaller.html":{},"classes/NormalApiCaller.html":{},"classes/PagedApiCaller.html":{},"classes/StreamingApiCaller.html":{}}}],["apiclient",{"_index":2337,"title":{},"body":{"index.html":{}}}],["apis",{"_index":1337,"title":{},"body":{"interfaces/GetOperationCallback.html":{},"classes/Operation.html":{},"index.html":{}}}],["apitypes",{"_index":66,"title":{},"body":{"interfaces/APICaller.html":{},"interfaces/ApiCallerSettings.html":{},"classes/BundleApiCaller.html":{},"classes/BundleExecutor.html":{},"interfaces/BundleOptions.html":{},"interfaces/CancellablePromise.html":{},"interfaces/Duplexify.html":{},"interfaces/DuplexifyConstructor.html":{},"interfaces/DuplexifyOptions.html":{},"interfaces/GetOperationCallback.html":{},"classes/LongrunningApiCaller.html":{},"classes/NormalApiCaller.html":{},"classes/OngoingCall.html":{},"classes/OngoingCallPromise.html":{},"classes/Operation.html":{},"classes/OperationsClient.html":{},"classes/OperationsClientBuilder.html":{},"interfaces/OperationsClientOptions.html":{},"classes/PageDescriptor.html":{},"classes/PagedApiCaller.html":{},"classes/StreamProxy.html":{},"classes/StreamingApiCaller.html":{},"interfaces/SubResponseInfo.html":{},"classes/Task.html":{},"interfaces/TaskCallback.html":{},"interfaces/TaskData.html":{},"interfaces/TaskElement.html":{}}}],["appends",{"_index":1828,"title":{},"body":{"classes/Task.html":{}}}],["application",{"_index":2319,"title":{},"body":{"index.html":{}}}],["applied",{"_index":273,"title":{},"body":{"interfaces/BackoffSettings.html":{},"interfaces/BundlingConfig.html":{},"interfaces/CallOptions.html":{},"classes/CallSettings.html":{},"interfaces/ClientConfig.html":{},"interfaces/MethodConfig.html":{},"classes/RetryOptions.html":{},"interfaces/RetryParamsConfig.html":{},"interfaces/ServiceConfig.html":{}}}],["appropriate",{"_index":2228,"title":{},"body":{"contributing.html":{}}}],["approximated",{"_index":265,"title":{},"body":{"interfaces/BackoffSettings.html":{},"interfaces/BundlingConfig.html":{},"interfaces/CallOptions.html":{},"classes/CallSettings.html":{},"interfaces/ClientConfig.html":{},"interfaces/MethodConfig.html":{},"classes/RetryOptions.html":{},"interfaces/RetryParamsConfig.html":{},"interfaces/ServiceConfig.html":{}}}],["approximates",{"_index":970,"title":{},"body":{"classes/ClientStub.html":{},"interfaces/ClientStubOptions.html":{},"classes/GoogleProtoFilesRoot.html":{},"classes/GrpcClient.html":{},"interfaces/GrpcClientOptions.html":{},"interfaces/Metadata.html":{},"interfaces/MetadataValue.html":{}}}],["approximation",{"_index":270,"title":{},"body":{"interfaces/BackoffSettings.html":{},"interfaces/BundlingConfig.html":{},"interfaces/CallOptions.html":{},"classes/CallSettings.html":{},"interfaces/ClientConfig.html":{},"interfaces/MethodConfig.html":{},"classes/RetryOptions.html":{},"interfaces/RetryParamsConfig.html":{},"interfaces/ServiceConfig.html":{}}}],["apps",{"_index":2207,"title":{},"body":{"contributing.html":{}}}],["appveyor",{"_index":2160,"title":{},"body":{"changelog.html":{}}}],["aram",{"_index":1598,"title":{},"body":{"classes/OperationsClient.html":{},"classes/OperationsClientBuilder.html":{},"interfaces/OperationsClientOptions.html":{}}}],["arg",{"_index":131,"title":{},"body":{"interfaces/BackoffSettings.html":{},"interfaces/BundlingConfig.html":{},"interfaces/CallOptions.html":{},"classes/CallSettings.html":{},"interfaces/ClientConfig.html":{},"interfaces/MethodConfig.html":{},"classes/RetryOptions.html":{},"interfaces/RetryParamsConfig.html":{},"interfaces/ServiceConfig.html":{}}}],["args",{"_index":837,"title":{},"body":{"interfaces/CancellablePromise.html":{},"interfaces/GetOperationCallback.html":{},"classes/GoogleProtoFilesRoot.html":{},"classes/OngoingCall.html":{},"classes/OngoingCallPromise.html":{},"classes/Operation.html":{},"classes/OperationsClient.html":{},"classes/OperationsClientBuilder.html":{},"interfaces/OperationsClientOptions.html":{}}}],["argument",{"_index":29,"title":{},"body":{"interfaces/APICaller.html":{},"interfaces/ApiCallerSettings.html":{},"interfaces/BackoffSettings.html":{},"classes/BundleApiCaller.html":{},"interfaces/BundlingConfig.html":{},"interfaces/CallOptions.html":{},"classes/CallSettings.html":{},"interfaces/CancellablePromise.html":{},"interfaces/ClientConfig.html":{},"interfaces/Duplexify.html":{},"interfaces/DuplexifyConstructor.html":{},"interfaces/DuplexifyOptions.html":{},"interfaces/GRPCCallOtherArgs.html":{},"interfaces/GRPCCallResult.html":{},"interfaces/GaxCall.html":{},"interfaces/GaxCallPromise.html":{},"interfaces/GaxCallStream.html":{},"classes/LongrunningApiCaller.html":{},"interfaces/MethodConfig.html":{},"classes/NormalApiCaller.html":{},"classes/OngoingCall.html":{},"classes/OngoingCallPromise.html":{},"classes/PagedApiCaller.html":{},"interfaces/RequestType.html":{},"classes/RetryOptions.html":{},"interfaces/RetryParamsConfig.html":{},"interfaces/ServiceConfig.html":{},"interfaces/SimpleCallbackFunction.html":{},"classes/StreamProxy.html":{},"classes/StreamingApiCaller.html":{}}}],["argument[this.pagedescriptor.requestpagesizefield",{"_index":1694,"title":{},"body":{"classes/PagedApiCaller.html":{}}}],["argument[this.pagedescriptor.requestpagetokenfield",{"_index":1692,"title":{},"body":{"classes/PagedApiCaller.html":{}}}],["arguments",{"_index":306,"title":{},"body":{"interfaces/BackoffSettings.html":{},"interfaces/BundlingConfig.html":{},"interfaces/CallOptions.html":{},"classes/CallSettings.html":{},"interfaces/ClientConfig.html":{},"classes/ClientStub.html":{},"interfaces/ClientStubOptions.html":{},"classes/GoogleProtoFilesRoot.html":{},"classes/GrpcClient.html":{},"interfaces/GrpcClientOptions.html":{},"interfaces/Metadata.html":{},"interfaces/MetadataValue.html":{},"interfaces/MethodConfig.html":{},"classes/RetryOptions.html":{},"interfaces/RetryParamsConfig.html":{},"interfaces/ServiceConfig.html":{},"miscellaneous/functions.html":{}}}],["arising",{"_index":2404,"title":{},"body":{"license.html":{}}}],["array",{"_index":593,"title":{},"body":{"interfaces/Bindings.html":{},"classes/BundleExecutor.html":{},"interfaces/BundleOptions.html":{},"classes/ClientStub.html":{},"interfaces/ClientStubOptions.html":{},"interfaces/GetOperationCallback.html":{},"classes/GoogleProtoFilesRoot.html":{},"classes/GrpcClient.html":{},"interfaces/GrpcClientOptions.html":{},"interfaces/Metadata.html":{},"interfaces/MetadataValue.html":{},"classes/Operation.html":{},"classes/OperationsClient.html":{},"classes/OperationsClientBuilder.html":{},"interfaces/OperationsClientOptions.html":{},"classes/PagedApiCaller.html":{},"interfaces/ParseResult.html":{},"classes/PathTemplate.html":{},"interfaces/Segment.html":{},"interfaces/SubResponseInfo.html":{},"classes/Task.html":{},"interfaces/TaskCallback.html":{},"interfaces/TaskData.html":{},"interfaces/TaskElement.html":{},"miscellaneous/functions.html":{}}}],["array.isarray(obj",{"_index":1767,"title":{},"body":{"interfaces/SubResponseInfo.html":{},"classes/Task.html":{},"interfaces/TaskCallback.html":{},"interfaces/TaskData.html":{},"interfaces/TaskElement.html":{}}}],["array.isarray(obj[key",{"_index":1776,"title":{},"body":{"interfaces/SubResponseInfo.html":{},"classes/Task.html":{},"interfaces/TaskCallback.html":{},"interfaces/TaskData.html":{},"interfaces/TaskElement.html":{}}}],["array.isarray(value",{"_index":993,"title":{},"body":{"classes/ClientStub.html":{},"interfaces/ClientStubOptions.html":{},"classes/GoogleProtoFilesRoot.html":{},"classes/GrpcClient.html":{},"interfaces/GrpcClientOptions.html":{},"interfaces/Metadata.html":{},"interfaces/MetadataValue.html":{}}}],["array.prototype.push.apply(out",{"_index":584,"title":{},"body":{"interfaces/Bindings.html":{},"interfaces/ParseResult.html":{},"classes/PathTemplate.html":{},"interfaces/Segment.html":{}}}],["arraybuffer",{"_index":1772,"title":{},"body":{"interfaces/SubResponseInfo.html":{},"classes/Task.html":{},"interfaces/TaskCallback.html":{},"interfaces/TaskData.html":{},"interfaces/TaskElement.html":{}}}],["arraybuffer).slice(0",{"_index":1774,"title":{},"body":{"interfaces/SubResponseInfo.html":{},"classes/Task.html":{},"interfaces/TaskCallback.html":{},"interfaces/TaskData.html":{},"interfaces/TaskElement.html":{}}}],["asks",{"_index":936,"title":{},"body":{"classes/ClientStub.html":{},"interfaces/ClientStubOptions.html":{},"classes/GoogleProtoFilesRoot.html":{},"classes/GrpcClient.html":{},"interfaces/GrpcClientOptions.html":{},"interfaces/Metadata.html":{},"interfaces/MetadataValue.html":{}}}],["assumes",{"_index":1049,"title":{},"body":{"classes/ClientStub.html":{},"interfaces/ClientStubOptions.html":{},"classes/GoogleProtoFilesRoot.html":{},"classes/GrpcClient.html":{},"interfaces/GrpcClientOptions.html":{},"interfaces/Metadata.html":{},"interfaces/MetadataValue.html":{},"classes/StreamDescriptor.html":{}}}],["async",{"_index":943,"title":{},"body":{"classes/ClientStub.html":{},"interfaces/ClientStubOptions.html":{},"classes/GoogleProtoFilesRoot.html":{},"classes/GrpcClient.html":{},"interfaces/GrpcClientOptions.html":{},"interfaces/Metadata.html":{},"interfaces/MetadataValue.html":{}}}],["asynchronism",{"_index":2292,"title":{},"body":{"miscellaneous/functions.html":{}}}],["asynchronous",{"_index":1472,"title":{},"body":{"classes/OperationsClient.html":{},"classes/OperationsClientBuilder.html":{},"interfaces/OperationsClientOptions.html":{}}}],["asynchronously",{"_index":824,"title":{},"body":{"interfaces/CancellablePromise.html":{},"classes/OngoingCall.html":{},"classes/OngoingCallPromise.html":{},"classes/OperationsClient.html":{},"classes/OperationsClientBuilder.html":{},"interfaces/OperationsClientOptions.html":{}}}],["attempted",{"_index":362,"title":{},"body":{"interfaces/BackoffSettings.html":{},"interfaces/BundlingConfig.html":{},"interfaces/CallOptions.html":{},"classes/CallSettings.html":{},"interfaces/ClientConfig.html":{},"interfaces/MethodConfig.html":{},"classes/RetryOptions.html":{},"interfaces/RetryParamsConfig.html":{},"interfaces/ServiceConfig.html":{},"miscellaneous/functions.html":{}}}],["attempts",{"_index":240,"title":{},"body":{"interfaces/BackoffSettings.html":{},"interfaces/BundlingConfig.html":{},"interfaces/CallOptions.html":{},"classes/CallSettings.html":{},"interfaces/ClientConfig.html":{},"interfaces/MethodConfig.html":{},"classes/RetryOptions.html":{},"interfaces/RetryParamsConfig.html":{},"interfaces/ServiceConfig.html":{},"miscellaneous/functions.html":{}}}],["attrbute",{"_index":291,"title":{},"body":{"interfaces/BackoffSettings.html":{},"interfaces/BundlingConfig.html":{},"interfaces/CallOptions.html":{},"classes/CallSettings.html":{},"interfaces/ClientConfig.html":{},"interfaces/MethodConfig.html":{},"classes/RetryOptions.html":{},"interfaces/RetryParamsConfig.html":{},"interfaces/ServiceConfig.html":{}}}],["attribute",{"_index":302,"title":{},"body":{"interfaces/BackoffSettings.html":{},"interfaces/BundlingConfig.html":{},"interfaces/CallOptions.html":{},"classes/CallSettings.html":{},"interfaces/ClientConfig.html":{},"interfaces/MethodConfig.html":{},"classes/RetryOptions.html":{},"interfaces/RetryParamsConfig.html":{},"interfaces/ServiceConfig.html":{}}}],["auth",{"_index":864,"title":{},"body":{"classes/ClientStub.html":{},"interfaces/ClientStubOptions.html":{},"classes/GoogleProtoFilesRoot.html":{},"classes/GrpcClient.html":{},"interfaces/GrpcClientOptions.html":{},"interfaces/Metadata.html":{},"interfaces/MetadataValue.html":{},"classes/OperationsClient.html":{},"classes/OperationsClientBuilder.html":{},"interfaces/OperationsClientOptions.html":{},"changelog.html":{},"dependencies.html":{},"miscellaneous/functions.html":{}}}],["auto",{"_index":1695,"title":{},"body":{"classes/PagedApiCaller.html":{}}}],["autodestroy",{"_index":1110,"title":{},"body":{"interfaces/Duplexify.html":{},"interfaces/DuplexifyConstructor.html":{},"interfaces/DuplexifyOptions.html":{},"classes/StreamProxy.html":{}}}],["autogen'd",{"_index":2076,"title":{},"body":{"changelog.html":{}}}],["automatically",{"_index":1246,"title":{},"body":{"interfaces/GetOperationCallback.html":{},"classes/Operation.html":{},"index.html":{}}}],["automation",{"_index":2049,"title":{},"body":{"changelog.html":{}}}],["autopaginate",{"_index":161,"title":{},"body":{"interfaces/BackoffSettings.html":{},"interfaces/BundlingConfig.html":{},"interfaces/CallOptions.html":{},"classes/CallSettings.html":{},"interfaces/ClientConfig.html":{},"interfaces/MethodConfig.html":{},"classes/OperationsClient.html":{},"classes/OperationsClientBuilder.html":{},"interfaces/OperationsClientOptions.html":{},"classes/PageDescriptor.html":{},"classes/RetryOptions.html":{},"interfaces/RetryParamsConfig.html":{},"interfaces/ServiceConfig.html":{}}}],["autorelease",{"_index":2062,"title":{},"body":{"changelog.html":{}}}],["available",{"_index":2333,"title":{},"body":{"index.html":{}}}],["avalue",{"_index":199,"title":{},"body":{"interfaces/BackoffSettings.html":{},"interfaces/BundlingConfig.html":{},"interfaces/CallOptions.html":{},"classes/CallSettings.html":{},"interfaces/ClientConfig.html":{},"interfaces/MethodConfig.html":{},"classes/RetryOptions.html":{},"interfaces/RetryParamsConfig.html":{},"interfaces/ServiceConfig.html":{}}}],["await",{"_index":946,"title":{},"body":{"classes/ClientStub.html":{},"interfaces/ClientStubOptions.html":{},"classes/GoogleProtoFilesRoot.html":{},"classes/GrpcClient.html":{},"interfaces/GrpcClientOptions.html":{},"interfaces/Metadata.html":{},"interfaces/MetadataValue.html":{},"classes/OperationsClient.html":{},"classes/OperationsClientBuilder.html":{},"interfaces/OperationsClientOptions.html":{}}}],["b872f2b",{"_index":1861,"title":{},"body":{"changelog.html":{}}}],["backoff",{"_index":112,"title":{},"body":{"interfaces/BackoffSettings.html":{},"interfaces/BundlingConfig.html":{},"interfaces/CallOptions.html":{},"classes/CallSettings.html":{},"interfaces/ClientConfig.html":{},"interfaces/GetOperationCallback.html":{},"interfaces/MethodConfig.html":{},"classes/Operation.html":{},"classes/RetryOptions.html":{},"interfaces/RetryParamsConfig.html":{},"interfaces/ServiceConfig.html":{},"miscellaneous/functions.html":{}}}],["backoffsettings",{"_index":109,"title":{"interfaces/BackoffSettings.html":{}},"body":{"interfaces/BackoffSettings.html":{},"interfaces/BundlingConfig.html":{},"interfaces/CallOptions.html":{},"classes/CallSettings.html":{},"interfaces/ClientConfig.html":{},"interfaces/GetOperationCallback.html":{},"classes/LongrunningApiCaller.html":{},"interfaces/MethodConfig.html":{},"classes/Operation.html":{},"classes/RetryOptions.html":{},"interfaces/RetryParamsConfig.html":{},"interfaces/ServiceConfig.html":{},"miscellaneous/functions.html":{}}}],["bare",{"_index":2294,"title":{},"body":{"miscellaneous/functions.html":{}}}],["base",{"_index":441,"title":{},"body":{"interfaces/BackoffSettings.html":{},"interfaces/BundlingConfig.html":{},"interfaces/CallOptions.html":{},"classes/CallSettings.html":{},"interfaces/ClientConfig.html":{},"interfaces/MethodConfig.html":{},"classes/RetryOptions.html":{},"interfaces/RetryParamsConfig.html":{},"interfaces/ServiceConfig.html":{},"interfaces/SubResponseInfo.html":{},"classes/Task.html":{},"interfaces/TaskCallback.html":{},"interfaces/TaskData.html":{},"interfaces/TaskElement.html":{}}}],["based",{"_index":681,"title":{},"body":{"classes/BundleExecutor.html":{},"interfaces/BundleOptions.html":{},"index.html":{}}}],["basemetadata",{"_index":990,"title":{},"body":{"classes/ClientStub.html":{},"interfaces/ClientStubOptions.html":{},"classes/GoogleProtoFilesRoot.html":{},"classes/GrpcClient.html":{},"interfaces/GrpcClientOptions.html":{},"interfaces/Metadata.html":{},"interfaces/MetadataValue.html":{}}}],["basemetadata.add(key",{"_index":995,"title":{},"body":{"classes/ClientStub.html":{},"interfaces/ClientStubOptions.html":{},"classes/GoogleProtoFilesRoot.html":{},"classes/GrpcClient.html":{},"interfaces/GrpcClientOptions.html":{},"interfaces/Metadata.html":{},"interfaces/MetadataValue.html":{}}}],["basemetadata.set(key",{"_index":997,"title":{},"body":{"classes/ClientStub.html":{},"interfaces/ClientStubOptions.html":{},"classes/GoogleProtoFilesRoot.html":{},"classes/GrpcClient.html":{},"interfaces/GrpcClientOptions.html":{},"interfaces/Metadata.html":{},"interfaces/MetadataValue.html":{}}}],["become",{"_index":2196,"title":{},"body":{"contributing.html":{}}}],["becomes",{"_index":1485,"title":{},"body":{"classes/OperationsClient.html":{},"classes/OperationsClientBuilder.html":{},"interfaces/OperationsClientOptions.html":{}}}],["before",{"_index":1327,"title":{},"body":{"interfaces/GetOperationCallback.html":{},"classes/Operation.html":{},"changelog.html":{},"contributing.html":{}}}],["begin",{"_index":1236,"title":{},"body":{"interfaces/GetOperationCallback.html":{},"classes/Operation.html":{}}}],["behavior",{"_index":243,"title":{},"body":{"interfaces/BackoffSettings.html":{},"interfaces/BundlingConfig.html":{},"interfaces/CallOptions.html":{},"classes/CallSettings.html":{},"interfaces/ClientConfig.html":{},"classes/ClientStub.html":{},"interfaces/ClientStubOptions.html":{},"interfaces/Duplexify.html":{},"interfaces/DuplexifyConstructor.html":{},"interfaces/DuplexifyOptions.html":{},"classes/GoogleProtoFilesRoot.html":{},"classes/GrpcClient.html":{},"interfaces/GrpcClientOptions.html":{},"interfaces/Metadata.html":{},"interfaces/MetadataValue.html":{},"interfaces/MethodConfig.html":{},"classes/RetryOptions.html":{},"interfaces/RetryParamsConfig.html":{},"interfaces/ServiceConfig.html":{},"classes/StreamProxy.html":{}}}],["behind",{"_index":1993,"title":{},"body":{"changelog.html":{}}}],["below",{"_index":147,"title":{},"body":{"interfaces/BackoffSettings.html":{},"interfaces/BundlingConfig.html":{},"interfaces/CallOptions.html":{},"classes/CallSettings.html":{},"interfaces/ClientConfig.html":{},"classes/ClientStub.html":{},"interfaces/ClientStubOptions.html":{},"classes/GoogleProtoFilesRoot.html":{},"classes/GrpcClient.html":{},"interfaces/GrpcClientOptions.html":{},"interfaces/Metadata.html":{},"interfaces/MetadataValue.html":{},"interfaces/MethodConfig.html":{},"classes/OperationsClient.html":{},"classes/OperationsClientBuilder.html":{},"interfaces/OperationsClientOptions.html":{},"classes/RetryOptions.html":{},"interfaces/RetryParamsConfig.html":{},"interfaces/ServiceConfig.html":{}}}],["best",{"_index":1474,"title":{},"body":{"classes/OperationsClient.html":{},"classes/OperationsClientBuilder.html":{},"interfaces/OperationsClientOptions.html":{}}}],["better",{"_index":1905,"title":{},"body":{"changelog.html":{}}}],["between",{"_index":218,"title":{},"body":{"interfaces/BackoffSettings.html":{},"interfaces/BundlingConfig.html":{},"interfaces/CallOptions.html":{},"classes/CallSettings.html":{},"interfaces/ClientConfig.html":{},"interfaces/MethodConfig.html":{},"classes/RetryOptions.html":{},"interfaces/RetryParamsConfig.html":{},"interfaces/ServiceConfig.html":{},"miscellaneous/functions.html":{}}}],["bidi_streaming",{"_index":1119,"title":{},"body":{"interfaces/Duplexify.html":{},"interfaces/DuplexifyConstructor.html":{},"interfaces/DuplexifyOptions.html":{},"classes/StreamProxy.html":{},"miscellaneous/enumerations.html":{}}}],["bidistreamingcall",{"_index":1200,"title":{},"body":{"interfaces/GRPCCallOtherArgs.html":{},"interfaces/GRPCCallResult.html":{},"interfaces/GaxCall.html":{},"interfaces/GaxCallPromise.html":{},"interfaces/GaxCallStream.html":{},"interfaces/RequestType.html":{},"interfaces/SimpleCallbackFunction.html":{},"classes/StreamingApiCaller.html":{},"miscellaneous/typealiases.html":{}}}],["bidistreamingcall)(metadata",{"_index":1744,"title":{},"body":{"classes/StreamingApiCaller.html":{}}}],["binary",{"_index":2351,"title":{},"body":{"license.html":{}}}],["binding",{"_index":543,"title":{},"body":{"interfaces/Bindings.html":{},"classes/OperationsClient.html":{},"classes/OperationsClientBuilder.html":{},"interfaces/OperationsClientOptions.html":{},"interfaces/ParseResult.html":{},"classes/PathTemplate.html":{},"interfaces/Segment.html":{},"miscellaneous/variables.html":{}}}],["bindings",{"_index":516,"title":{"interfaces/Bindings.html":{}},"body":{"interfaces/Bindings.html":{},"interfaces/ParseResult.html":{},"classes/PathTemplate.html":{},"interfaces/Segment.html":{}}}],["bindings[current",{"_index":559,"title":{},"body":{"interfaces/Bindings.html":{},"interfaces/ParseResult.html":{},"classes/PathTemplate.html":{},"interfaces/Segment.html":{}}}],["boolean",{"_index":160,"title":{},"body":{"interfaces/BackoffSettings.html":{},"interfaces/BundlingConfig.html":{},"interfaces/CallOptions.html":{},"classes/CallSettings.html":{},"interfaces/CancellablePromise.html":{},"interfaces/ClientConfig.html":{},"interfaces/Duplexify.html":{},"interfaces/DuplexifyConstructor.html":{},"interfaces/DuplexifyOptions.html":{},"interfaces/GetOperationCallback.html":{},"interfaces/MethodConfig.html":{},"classes/OngoingCall.html":{},"classes/OngoingCallPromise.html":{},"classes/Operation.html":{},"classes/RetryOptions.html":{},"interfaces/RetryParamsConfig.html":{},"interfaces/ServiceConfig.html":{},"classes/StreamProxy.html":{},"interfaces/SubResponseInfo.html":{},"classes/Task.html":{},"interfaces/TaskCallback.html":{},"interfaces/TaskData.html":{},"interfaces/TaskElement.html":{},"miscellaneous/functions.html":{}}}],["both",{"_index":1118,"title":{},"body":{"interfaces/Duplexify.html":{},"interfaces/DuplexifyConstructor.html":{},"interfaces/DuplexifyOptions.html":{},"classes/StreamProxy.html":{}}}],["bound",{"_index":2290,"title":{},"body":{"miscellaneous/functions.html":{}}}],["breaking",{"_index":1862,"title":{},"body":{"changelog.html":{}}}],["bring",{"_index":1001,"title":{},"body":{"classes/ClientStub.html":{},"interfaces/ClientStubOptions.html":{},"classes/GoogleProtoFilesRoot.html":{},"classes/GrpcClient.html":{},"interfaces/GrpcClientOptions.html":{},"interfaces/Metadata.html":{},"interfaces/MetadataValue.html":{}}}],["broken",{"_index":2044,"title":{},"body":{"changelog.html":{}}}],["bsd",{"_index":2344,"title":{},"body":{"index.html":{}}}],["buffer",{"_index":272,"title":{},"body":{"interfaces/BackoffSettings.html":{},"interfaces/BundlingConfig.html":{},"interfaces/CallOptions.html":{},"classes/CallSettings.html":{},"interfaces/ClientConfig.html":{},"interfaces/MethodConfig.html":{},"classes/RetryOptions.html":{},"interfaces/RetryParamsConfig.html":{},"interfaces/ServiceConfig.html":{}}}],["bug",{"_index":1842,"title":{},"body":{"changelog.html":{}}}],["build",{"_index":1635,"title":{},"body":{"classes/OperationsClient.html":{},"classes/OperationsClientBuilder.html":{},"interfaces/OperationsClientOptions.html":{},"changelog.html":{}}}],["build/test",{"_index":2067,"title":{},"body":{"changelog.html":{}}}],["builder",{"_index":1454,"title":{},"body":{"classes/OperationsClient.html":{},"classes/OperationsClientBuilder.html":{},"interfaces/OperationsClientOptions.html":{}}}],["buildmetadata",{"_index":998,"title":{},"body":{"classes/ClientStub.html":{},"interfaces/ClientStubOptions.html":{},"classes/GoogleProtoFilesRoot.html":{},"classes/GrpcClient.html":{},"interfaces/GrpcClientOptions.html":{},"interfaces/Metadata.html":{},"interfaces/MetadataValue.html":{}}}],["builds",{"_index":1629,"title":{},"body":{"classes/OperationsClient.html":{},"classes/OperationsClientBuilder.html":{},"interfaces/OperationsClientOptions.html":{},"changelog.html":{}}}],["builtin",{"_index":658,"title":{},"body":{"classes/BundleDescriptor.html":{}}}],["bundle",{"_index":254,"title":{},"body":{"interfaces/BackoffSettings.html":{},"classes/BundleDescriptor.html":{},"classes/BundleExecutor.html":{},"interfaces/BundleOptions.html":{},"interfaces/BundlingConfig.html":{},"interfaces/CallOptions.html":{},"classes/CallSettings.html":{},"interfaces/ClientConfig.html":{},"interfaces/MethodConfig.html":{},"classes/RetryOptions.html":{},"interfaces/RetryParamsConfig.html":{},"interfaces/ServiceConfig.html":{},"interfaces/SubResponseInfo.html":{},"classes/Task.html":{},"interfaces/TaskCallback.html":{},"interfaces/TaskData.html":{},"interfaces/TaskElement.html":{}}}],["bundleapicaller",{"_index":599,"title":{"classes/BundleApiCaller.html":{}},"body":{"classes/BundleApiCaller.html":{},"classes/BundleDescriptor.html":{}}}],["bundled",{"_index":18,"title":{},"body":{"interfaces/APICaller.html":{},"interfaces/ApiCallerSettings.html":{},"interfaces/BackoffSettings.html":{},"classes/BundleApiCaller.html":{},"classes/BundleDescriptor.html":{},"classes/BundleExecutor.html":{},"interfaces/BundleOptions.html":{},"interfaces/BundlingConfig.html":{},"interfaces/CallOptions.html":{},"classes/CallSettings.html":{},"interfaces/ClientConfig.html":{},"classes/ClientStub.html":{},"interfaces/ClientStubOptions.html":{},"classes/GoogleProtoFilesRoot.html":{},"classes/GrpcClient.html":{},"interfaces/GrpcClientOptions.html":{},"interfaces/Metadata.html":{},"interfaces/MetadataValue.html":{},"interfaces/MethodConfig.html":{},"classes/RetryOptions.html":{},"interfaces/RetryParamsConfig.html":{},"interfaces/ServiceConfig.html":{},"interfaces/SubResponseInfo.html":{},"classes/Task.html":{},"interfaces/TaskCallback.html":{},"interfaces/TaskData.html":{},"interfaces/TaskElement.html":{},"miscellaneous/functions.html":{}}}],["bundledescriptor",{"_index":624,"title":{"classes/BundleDescriptor.html":{}},"body":{"classes/BundleDescriptor.html":{},"classes/BundleExecutor.html":{},"interfaces/BundleOptions.html":{},"classes/ClientStub.html":{},"interfaces/ClientStubOptions.html":{},"interfaces/Descriptor.html":{},"classes/GoogleProtoFilesRoot.html":{},"classes/GrpcClient.html":{},"interfaces/GrpcClientOptions.html":{},"interfaces/Metadata.html":{},"interfaces/MetadataValue.html":{}}}],["bundledfield",{"_index":627,"title":{},"body":{"classes/BundleDescriptor.html":{},"classes/BundleExecutor.html":{},"interfaces/BundleOptions.html":{},"interfaces/SubResponseInfo.html":{},"classes/Task.html":{},"interfaces/TaskCallback.html":{},"interfaces/TaskData.html":{},"interfaces/TaskElement.html":{},"changelog.html":{}}}],["bundledfield.foreach(obj",{"_index":757,"title":{},"body":{"classes/BundleExecutor.html":{},"interfaces/BundleOptions.html":{}}}],["bundledfield.length",{"_index":754,"title":{},"body":{"classes/BundleExecutor.html":{},"interfaces/BundleOptions.html":{}}}],["bundleexecutor",{"_index":604,"title":{"classes/BundleExecutor.html":{}},"body":{"classes/BundleApiCaller.html":{},"classes/BundleDescriptor.html":{},"classes/BundleExecutor.html":{},"interfaces/BundleOptions.html":{}}}],["bundleexecutor(settings.bundleoptions",{"_index":675,"title":{},"body":{"classes/BundleDescriptor.html":{}}}],["bundleid",{"_index":714,"title":{},"body":{"classes/BundleExecutor.html":{},"interfaces/BundleOptions.html":{}}}],["bundleoptions",{"_index":125,"title":{"interfaces/BundleOptions.html":{}},"body":{"interfaces/BackoffSettings.html":{},"classes/BundleExecutor.html":{},"interfaces/BundleOptions.html":{},"interfaces/BundlingConfig.html":{},"interfaces/CallOptions.html":{},"classes/CallSettings.html":{},"interfaces/ClientConfig.html":{},"interfaces/MethodConfig.html":{},"classes/RetryOptions.html":{},"interfaces/RetryParamsConfig.html":{},"interfaces/ServiceConfig.html":{}}}],["bundler",{"_index":605,"title":{},"body":{"classes/BundleApiCaller.html":{}}}],["bundling",{"_index":185,"title":{},"body":{"interfaces/BackoffSettings.html":{},"classes/BundleApiCaller.html":{},"classes/BundleDescriptor.html":{},"classes/BundleExecutor.html":{},"interfaces/BundleOptions.html":{},"interfaces/BundlingConfig.html":{},"interfaces/CallOptions.html":{},"classes/CallSettings.html":{},"interfaces/ClientConfig.html":{},"interfaces/MethodConfig.html":{},"classes/RetryOptions.html":{},"interfaces/RetryParamsConfig.html":{},"interfaces/ServiceConfig.html":{},"interfaces/SubResponseInfo.html":{},"classes/Task.html":{},"interfaces/TaskCallback.html":{},"interfaces/TaskData.html":{},"interfaces/TaskElement.html":{},"changelog.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["bundling_no_bundled_field",{"_index":745,"title":{},"body":{"classes/BundleExecutor.html":{},"interfaces/BundleOptions.html":{}}}],["bundling_schedule_bundleid_undefined",{"_index":737,"title":{},"body":{"classes/BundleExecutor.html":{},"interfaces/BundleOptions.html":{}}}],["bundlingcalls/bundledescriptor",{"_index":1089,"title":{},"body":{"interfaces/Descriptor.html":{}}}],["bundlingcalls/bundleexecutor",{"_index":126,"title":{},"body":{"interfaces/BackoffSettings.html":{},"interfaces/BundlingConfig.html":{},"interfaces/CallOptions.html":{},"classes/CallSettings.html":{},"interfaces/ClientConfig.html":{},"interfaces/MethodConfig.html":{},"classes/RetryOptions.html":{},"interfaces/RetryParamsConfig.html":{},"interfaces/ServiceConfig.html":{}}}],["bundlingconfig",{"_index":381,"title":{"interfaces/BundlingConfig.html":{}},"body":{"interfaces/BackoffSettings.html":{},"interfaces/BundlingConfig.html":{},"interfaces/CallOptions.html":{},"classes/CallSettings.html":{},"interfaces/ClientConfig.html":{},"interfaces/MethodConfig.html":{},"classes/RetryOptions.html":{},"interfaces/RetryParamsConfig.html":{},"interfaces/ServiceConfig.html":{}}}],["bundlingrequest",{"_index":1794,"title":{},"body":{"interfaces/SubResponseInfo.html":{},"classes/Task.html":{},"interfaces/TaskCallback.html":{},"interfaces/TaskData.html":{},"interfaces/TaskElement.html":{}}}],["bundlingutils",{"_index":727,"title":{},"body":{"classes/BundleExecutor.html":{},"interfaces/BundleOptions.html":{}}}],["business",{"_index":2396,"title":{},"body":{"license.html":{}}}],["byte",{"_index":653,"title":{},"body":{"classes/BundleDescriptor.html":{},"classes/ClientStub.html":{},"interfaces/ClientStubOptions.html":{},"classes/GoogleProtoFilesRoot.html":{},"classes/GrpcClient.html":{},"interfaces/GrpcClientOptions.html":{},"interfaces/Metadata.html":{},"interfaces/MetadataValue.html":{},"classes/Task.html":{}}}],["bytebuffer",{"_index":1770,"title":{},"body":{"interfaces/SubResponseInfo.html":{},"classes/Task.html":{},"interfaces/TaskCallback.html":{},"interfaces/TaskData.html":{},"interfaces/TaskElement.html":{}}}],["bytelength",{"_index":1046,"title":{},"body":{"classes/ClientStub.html":{},"interfaces/ClientStubOptions.html":{},"classes/GoogleProtoFilesRoot.html":{},"classes/GrpcClient.html":{},"interfaces/GrpcClientOptions.html":{},"interfaces/Metadata.html":{},"interfaces/MetadataValue.html":{}}}],["bytelengthfunction",{"_index":628,"title":{},"body":{"classes/BundleDescriptor.html":{}}}],["bytelimit",{"_index":761,"title":{},"body":{"classes/BundleExecutor.html":{},"interfaces/BundleOptions.html":{}}}],["bytes",{"_index":262,"title":{},"body":{"interfaces/BackoffSettings.html":{},"classes/BundleExecutor.html":{},"interfaces/BundleOptions.html":{},"interfaces/BundlingConfig.html":{},"interfaces/CallOptions.html":{},"classes/CallSettings.html":{},"interfaces/ClientConfig.html":{},"interfaces/MethodConfig.html":{},"classes/RetryOptions.html":{},"interfaces/RetryParamsConfig.html":{},"interfaces/ServiceConfig.html":{},"interfaces/SubResponseInfo.html":{},"classes/Task.html":{},"interfaces/TaskCallback.html":{},"interfaces/TaskData.html":{},"interfaces/TaskElement.html":{}}}],["bytesizes",{"_index":267,"title":{},"body":{"interfaces/BackoffSettings.html":{},"interfaces/BundlingConfig.html":{},"interfaces/CallOptions.html":{},"classes/CallSettings.html":{},"interfaces/ClientConfig.html":{},"interfaces/MethodConfig.html":{},"classes/RetryOptions.html":{},"interfaces/RetryParamsConfig.html":{},"interfaces/ServiceConfig.html":{}}}],["cached",{"_index":1264,"title":{},"body":{"interfaces/GetOperationCallback.html":{},"classes/Operation.html":{}}}],["calculate",{"_index":666,"title":{},"body":{"classes/BundleDescriptor.html":{}}}],["calculated",{"_index":684,"title":{},"body":{"classes/BundleExecutor.html":{},"interfaces/BundleOptions.html":{}}}],["call",{"_index":22,"title":{},"body":{"interfaces/APICaller.html":{},"interfaces/ApiCallerSettings.html":{},"interfaces/BackoffSettings.html":{},"classes/BundleApiCaller.html":{},"classes/BundleDescriptor.html":{},"classes/BundleExecutor.html":{},"interfaces/BundleOptions.html":{},"interfaces/BundlingConfig.html":{},"interfaces/CallOptions.html":{},"classes/CallSettings.html":{},"interfaces/CancellablePromise.html":{},"interfaces/ClientConfig.html":{},"interfaces/Duplexify.html":{},"interfaces/DuplexifyConstructor.html":{},"interfaces/DuplexifyOptions.html":{},"interfaces/GRPCCallOtherArgs.html":{},"interfaces/GRPCCallResult.html":{},"interfaces/GaxCall.html":{},"interfaces/GaxCallPromise.html":{},"interfaces/GaxCallStream.html":{},"interfaces/GetOperationCallback.html":{},"classes/LongrunningApiCaller.html":{},"interfaces/MethodConfig.html":{},"classes/NormalApiCaller.html":{},"classes/OngoingCall.html":{},"classes/OngoingCallPromise.html":{},"classes/Operation.html":{},"classes/OperationsClient.html":{},"classes/OperationsClientBuilder.html":{},"interfaces/OperationsClientOptions.html":{},"classes/PagedApiCaller.html":{},"interfaces/RequestType.html":{},"classes/RetryOptions.html":{},"interfaces/RetryParamsConfig.html":{},"interfaces/ServiceConfig.html":{},"interfaces/SimpleCallbackFunction.html":{},"classes/StreamDescriptor.html":{},"classes/StreamProxy.html":{},"classes/StreamingApiCaller.html":{},"interfaces/SubResponseInfo.html":{},"classes/Task.html":{},"interfaces/TaskCallback.html":{},"interfaces/TaskData.html":{},"interfaces/TaskElement.html":{},"changelog.html":{},"miscellaneous/functions.html":{}}}],["call(apicall",{"_index":27,"title":{},"body":{"interfaces/APICaller.html":{},"classes/BundleApiCaller.html":{},"classes/LongrunningApiCaller.html":{},"classes/NormalApiCaller.html":{},"classes/PagedApiCaller.html":{},"classes/StreamingApiCaller.html":{}}}],["call(func",{"_index":835,"title":{},"body":{"interfaces/CancellablePromise.html":{},"classes/OngoingCall.html":{},"classes/OngoingCallPromise.html":{}}}],["callable",{"_index":2288,"title":{},"body":{"miscellaneous/functions.html":{}}}],["callback",{"_index":53,"title":{},"body":{"interfaces/APICaller.html":{},"interfaces/AnyDecoder.html":{},"interfaces/ApiCallerSettings.html":{},"interfaces/BackoffSettings.html":{},"classes/BundleApiCaller.html":{},"classes/BundleExecutor.html":{},"interfaces/BundleOptions.html":{},"interfaces/BundlingConfig.html":{},"interfaces/CallOptions.html":{},"classes/CallSettings.html":{},"interfaces/CancellablePromise.html":{},"interfaces/ClientConfig.html":{},"interfaces/Duplexify.html":{},"interfaces/DuplexifyConstructor.html":{},"interfaces/DuplexifyOptions.html":{},"interfaces/GRPCCallOtherArgs.html":{},"interfaces/GRPCCallResult.html":{},"interfaces/GaxCall.html":{},"interfaces/GaxCallPromise.html":{},"interfaces/GaxCallStream.html":{},"interfaces/GetOperationCallback.html":{},"classes/LongRunningDescriptor.html":{},"classes/LongrunningApiCaller.html":{},"interfaces/MethodConfig.html":{},"classes/NormalApiCaller.html":{},"classes/OngoingCall.html":{},"classes/OngoingCallPromise.html":{},"classes/Operation.html":{},"classes/OperationsClient.html":{},"classes/OperationsClientBuilder.html":{},"interfaces/OperationsClientOptions.html":{},"classes/PageDescriptor.html":{},"classes/PagedApiCaller.html":{},"interfaces/RequestType.html":{},"classes/RetryOptions.html":{},"interfaces/RetryParamsConfig.html":{},"interfaces/ServiceConfig.html":{},"interfaces/SimpleCallbackFunction.html":{},"classes/StreamProxy.html":{},"classes/StreamingApiCaller.html":{},"interfaces/SubResponseInfo.html":{},"classes/Task.html":{},"interfaces/TaskCallback.html":{},"interfaces/TaskData.html":{},"interfaces/TaskElement.html":{}}}],["callback(err",{"_index":1265,"title":{},"body":{"interfaces/GetOperationCallback.html":{},"classes/LongrunningApiCaller.html":{},"classes/Operation.html":{},"classes/PageDescriptor.html":{},"classes/PagedApiCaller.html":{}}}],["callback(error",{"_index":768,"title":{},"body":{"classes/BundleExecutor.html":{},"interfaces/BundleOptions.html":{},"interfaces/GetOperationCallback.html":{},"classes/Operation.html":{}}}],["callback(null",{"_index":1266,"title":{},"body":{"interfaces/GetOperationCallback.html":{},"classes/LongrunningApiCaller.html":{},"classes/Operation.html":{}}}],["callback.id",{"_index":750,"title":{},"body":{"classes/BundleExecutor.html":{},"interfaces/BundleOptions.html":{}}}],["callbacks",{"_index":1780,"title":{},"body":{"interfaces/SubResponseInfo.html":{},"classes/Task.html":{},"interfaces/TaskCallback.html":{},"interfaces/TaskData.html":{},"interfaces/TaskElement.html":{}}}],["callcanceller",{"_index":1789,"title":{},"body":{"interfaces/SubResponseInfo.html":{},"classes/Task.html":{},"interfaces/TaskCallback.html":{},"interfaces/TaskData.html":{},"interfaces/TaskElement.html":{}}}],["called",{"_index":170,"title":{},"body":{"interfaces/BackoffSettings.html":{},"classes/BundleExecutor.html":{},"interfaces/BundleOptions.html":{},"interfaces/BundlingConfig.html":{},"interfaces/CallOptions.html":{},"classes/CallSettings.html":{},"interfaces/CancellablePromise.html":{},"interfaces/ClientConfig.html":{},"interfaces/Duplexify.html":{},"interfaces/DuplexifyConstructor.html":{},"interfaces/DuplexifyOptions.html":{},"interfaces/GetOperationCallback.html":{},"interfaces/MethodConfig.html":{},"classes/OngoingCall.html":{},"classes/OngoingCallPromise.html":{},"classes/Operation.html":{},"classes/OperationsClient.html":{},"classes/OperationsClientBuilder.html":{},"interfaces/OperationsClientOptions.html":{},"classes/RetryOptions.html":{},"interfaces/RetryParamsConfig.html":{},"interfaces/ServiceConfig.html":{},"classes/StreamProxy.html":{}}}],["caller",{"_index":1385,"title":{},"body":{"classes/LongrunningApiCaller.html":{},"classes/NormalApiCaller.html":{},"classes/PagedApiCaller.html":{},"classes/StreamingApiCaller.html":{}}}],["callers",{"_index":10,"title":{},"body":{"interfaces/APICaller.html":{},"interfaces/ApiCallerSettings.html":{},"index.html":{}}}],["calling",{"_index":1793,"title":{},"body":{"interfaces/SubResponseInfo.html":{},"classes/Task.html":{},"interfaces/TaskCallback.html":{},"interfaces/TaskData.html":{},"interfaces/TaskElement.html":{},"changelog.html":{}}}],["calloptions",{"_index":130,"title":{"interfaces/CallOptions.html":{}},"body":{"interfaces/BackoffSettings.html":{},"interfaces/BundlingConfig.html":{},"interfaces/CallOptions.html":{},"classes/CallSettings.html":{},"interfaces/ClientConfig.html":{},"interfaces/GRPCCallOtherArgs.html":{},"interfaces/GRPCCallResult.html":{},"interfaces/GaxCall.html":{},"interfaces/GaxCallPromise.html":{},"interfaces/GaxCallStream.html":{},"interfaces/GetOperationCallback.html":{},"classes/LongrunningApiCaller.html":{},"interfaces/MethodConfig.html":{},"classes/Operation.html":{},"classes/PagedApiCaller.html":{},"interfaces/RequestType.html":{},"classes/RetryOptions.html":{},"interfaces/RetryParamsConfig.html":{},"interfaces/ServiceConfig.html":{},"interfaces/SimpleCallbackFunction.html":{},"miscellaneous/functions.html":{}}}],["calls",{"_index":12,"title":{},"body":{"interfaces/APICaller.html":{},"interfaces/ApiCallerSettings.html":{},"interfaces/BackoffSettings.html":{},"classes/BundleApiCaller.html":{},"classes/BundleDescriptor.html":{},"classes/BundleExecutor.html":{},"interfaces/BundleOptions.html":{},"interfaces/BundlingConfig.html":{},"interfaces/CallOptions.html":{},"classes/CallSettings.html":{},"interfaces/CancellablePromise.html":{},"interfaces/ClientConfig.html":{},"interfaces/GRPCCallOtherArgs.html":{},"interfaces/GRPCCallResult.html":{},"interfaces/GaxCall.html":{},"interfaces/GaxCallPromise.html":{},"interfaces/GaxCallStream.html":{},"interfaces/MethodConfig.html":{},"classes/OngoingCall.html":{},"classes/OngoingCallPromise.html":{},"classes/OperationsClient.html":{},"classes/OperationsClientBuilder.html":{},"interfaces/OperationsClientOptions.html":{},"interfaces/RequestType.html":{},"classes/RetryOptions.html":{},"interfaces/RetryParamsConfig.html":{},"interfaces/ServiceConfig.html":{},"interfaces/SimpleCallbackFunction.html":{},"classes/StreamDescriptor.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["callsettings",{"_index":68,"title":{"classes/CallSettings.html":{}},"body":{"interfaces/APICaller.html":{},"interfaces/AnyDecoder.html":{},"interfaces/ApiCallerSettings.html":{},"interfaces/BackoffSettings.html":{},"classes/BundleApiCaller.html":{},"classes/BundleDescriptor.html":{},"interfaces/BundlingConfig.html":{},"interfaces/CallOptions.html":{},"classes/CallSettings.html":{},"interfaces/ClientConfig.html":{},"classes/ClientStub.html":{},"interfaces/ClientStubOptions.html":{},"interfaces/Descriptor.html":{},"classes/GoogleProtoFilesRoot.html":{},"classes/GrpcClient.html":{},"interfaces/GrpcClientOptions.html":{},"classes/LongRunningDescriptor.html":{},"classes/LongrunningApiCaller.html":{},"interfaces/Metadata.html":{},"interfaces/MetadataValue.html":{},"interfaces/MethodConfig.html":{},"classes/PageDescriptor.html":{},"classes/RetryOptions.html":{},"interfaces/RetryParamsConfig.html":{},"interfaces/ServiceConfig.html":{},"classes/StreamDescriptor.html":{},"changelog.html":{},"miscellaneous/functions.html":{}}}],["callsettings(this",{"_index":335,"title":{},"body":{"interfaces/BackoffSettings.html":{},"interfaces/BundlingConfig.html":{},"interfaces/CallOptions.html":{},"classes/CallSettings.html":{},"interfaces/ClientConfig.html":{},"interfaces/MethodConfig.html":{},"classes/RetryOptions.html":{},"interfaces/RetryParamsConfig.html":{},"interfaces/ServiceConfig.html":{}}}],["can't",{"_index":546,"title":{},"body":{"interfaces/Bindings.html":{},"interfaces/ParseResult.html":{},"classes/PathTemplate.html":{},"interfaces/Segment.html":{}}}],["cancel",{"_index":719,"title":{},"body":{"classes/BundleExecutor.html":{},"interfaces/BundleOptions.html":{},"interfaces/CancellablePromise.html":{},"interfaces/Duplexify.html":{},"interfaces/DuplexifyConstructor.html":{},"interfaces/DuplexifyOptions.html":{},"interfaces/GRPCCallOtherArgs.html":{},"interfaces/GRPCCallResult.html":{},"interfaces/GaxCall.html":{},"interfaces/GaxCallPromise.html":{},"interfaces/GaxCallStream.html":{},"interfaces/GetOperationCallback.html":{},"classes/OngoingCall.html":{},"classes/OngoingCallPromise.html":{},"classes/Operation.html":{},"classes/OperationsClient.html":{},"classes/OperationsClientBuilder.html":{},"interfaces/OperationsClientOptions.html":{},"interfaces/RequestType.html":{},"interfaces/SimpleCallbackFunction.html":{},"classes/StreamProxy.html":{},"classes/Task.html":{}}}],["cancel(id",{"_index":1821,"title":{},"body":{"classes/Task.html":{}}}],["canceled",{"_index":1825,"title":{},"body":{"classes/Task.html":{}}}],["cancelfunc",{"_index":820,"title":{},"body":{"interfaces/CancellablePromise.html":{},"classes/OngoingCall.html":{},"classes/OngoingCallPromise.html":{}}}],["canceling",{"_index":1179,"title":{},"body":{"interfaces/GRPCCallOtherArgs.html":{},"interfaces/GRPCCallResult.html":{},"interfaces/GaxCall.html":{},"interfaces/GaxCallPromise.html":{},"interfaces/GaxCallStream.html":{},"interfaces/RequestType.html":{},"interfaces/SimpleCallbackFunction.html":{}}}],["cancellable",{"_index":1202,"title":{},"body":{"interfaces/GRPCCallOtherArgs.html":{},"interfaces/GRPCCallResult.html":{},"interfaces/GaxCall.html":{},"interfaces/GaxCallPromise.html":{},"interfaces/GaxCallStream.html":{},"interfaces/RequestType.html":{},"interfaces/SimpleCallbackFunction.html":{}}}],["cancellablepromise",{"_index":59,"title":{"interfaces/CancellablePromise.html":{}},"body":{"interfaces/APICaller.html":{},"interfaces/ApiCallerSettings.html":{},"interfaces/CancellablePromise.html":{},"interfaces/GRPCCallOtherArgs.html":{},"interfaces/GRPCCallResult.html":{},"interfaces/GaxCall.html":{},"interfaces/GaxCallPromise.html":{},"interfaces/GaxCallStream.html":{},"interfaces/GetOperationCallback.html":{},"classes/OngoingCall.html":{},"classes/OngoingCallPromise.html":{},"classes/Operation.html":{},"interfaces/RequestType.html":{},"interfaces/SimpleCallbackFunction.html":{},"miscellaneous/typealiases.html":{}}}],["cancellablestream",{"_index":47,"title":{},"body":{"interfaces/APICaller.html":{},"interfaces/ApiCallerSettings.html":{},"interfaces/Duplexify.html":{},"interfaces/DuplexifyConstructor.html":{},"interfaces/DuplexifyOptions.html":{},"interfaces/GRPCCallOtherArgs.html":{},"interfaces/GRPCCallResult.html":{},"interfaces/GaxCall.html":{},"interfaces/GaxCallPromise.html":{},"interfaces/GaxCallStream.html":{},"interfaces/RequestType.html":{},"interfaces/SimpleCallbackFunction.html":{},"classes/StreamProxy.html":{},"classes/StreamingApiCaller.html":{},"miscellaneous/typealiases.html":{}}}],["cancellation",{"_index":823,"title":{},"body":{"interfaces/CancellablePromise.html":{},"classes/OngoingCall.html":{},"classes/OngoingCallPromise.html":{},"classes/OperationsClient.html":{},"classes/OperationsClientBuilder.html":{},"interfaces/OperationsClientOptions.html":{}}}],["cancelled",{"_index":1625,"title":{},"body":{"classes/OperationsClient.html":{},"classes/OperationsClientBuilder.html":{},"interfaces/OperationsClientOptions.html":{},"interfaces/SubResponseInfo.html":{},"classes/Task.html":{},"interfaces/TaskCallback.html":{},"interfaces/TaskData.html":{},"interfaces/TaskElement.html":{}}}],["canceller",{"_index":33,"title":{},"body":{"interfaces/APICaller.html":{},"interfaces/ApiCallerSettings.html":{},"classes/BundleApiCaller.html":{},"interfaces/CancellablePromise.html":{},"classes/LongrunningApiCaller.html":{},"classes/NormalApiCaller.html":{},"classes/OngoingCall.html":{},"classes/OngoingCallPromise.html":{},"classes/PagedApiCaller.html":{}}}],["canceller.call((argument",{"_index":1393,"title":{},"body":{"classes/LongrunningApiCaller.html":{}}}],["canceller.call(apicall",{"_index":1403,"title":{},"body":{"classes/NormalApiCaller.html":{},"classes/PagedApiCaller.html":{}}}],["canceller.callback!(err",{"_index":622,"title":{},"body":{"classes/BundleApiCaller.html":{},"classes/LongrunningApiCaller.html":{},"classes/NormalApiCaller.html":{},"classes/PagedApiCaller.html":{}}}],["canceller.cancel",{"_index":839,"title":{},"body":{"interfaces/CancellablePromise.html":{},"classes/OngoingCall.html":{},"classes/OngoingCallPromise.html":{}}}],["canceller.promise",{"_index":623,"title":{},"body":{"classes/BundleApiCaller.html":{},"classes/LongrunningApiCaller.html":{},"classes/NormalApiCaller.html":{}}}],["canceloperation",{"_index":1458,"title":{},"body":{"classes/OperationsClient.html":{},"classes/OperationsClientBuilder.html":{},"interfaces/OperationsClientOptions.html":{}}}],["canceloperation(request",{"_index":1469,"title":{},"body":{"classes/OperationsClient.html":{},"classes/OperationsClientBuilder.html":{},"interfaces/OperationsClientOptions.html":{}}}],["cancels",{"_index":791,"title":{},"body":{"classes/BundleExecutor.html":{},"interfaces/BundleOptions.html":{},"interfaces/CancellablePromise.html":{},"interfaces/GetOperationCallback.html":{},"classes/OngoingCall.html":{},"classes/OngoingCallPromise.html":{},"classes/Operation.html":{},"classes/OperationsClient.html":{},"classes/OperationsClientBuilder.html":{},"interfaces/OperationsClientOptions.html":{},"classes/Task.html":{}}}],["canonical",{"_index":360,"title":{},"body":{"interfaces/BackoffSettings.html":{},"interfaces/BundlingConfig.html":{},"interfaces/CallOptions.html":{},"classes/CallSettings.html":{},"interfaces/ClientConfig.html":{},"interfaces/MethodConfig.html":{},"classes/RetryOptions.html":{},"interfaces/RetryParamsConfig.html":{},"interfaces/ServiceConfig.html":{},"miscellaneous/functions.html":{}}}],["case",{"_index":1336,"title":{},"body":{"interfaces/GetOperationCallback.html":{},"classes/Operation.html":{},"classes/StreamingApiCaller.html":{},"changelog.html":{}}}],["cases",{"_index":1189,"title":{},"body":{"interfaces/GRPCCallOtherArgs.html":{},"interfaces/GRPCCallResult.html":{},"interfaces/GaxCall.html":{},"interfaces/GaxCallPromise.html":{},"interfaces/GaxCallStream.html":{},"interfaces/RequestType.html":{},"interfaces/SimpleCallbackFunction.html":{}}}],["caused",{"_index":2398,"title":{},"body":{"license.html":{}}}],["causes",{"_index":1062,"title":{},"body":{"classes/ClientStub.html":{},"interfaces/ClientStubOptions.html":{},"classes/GoogleProtoFilesRoot.html":{},"classes/GrpcClient.html":{},"interfaces/GrpcClientOptions.html":{},"interfaces/Metadata.html":{},"interfaces/MetadataValue.html":{}}}],["certain",{"_index":688,"title":{},"body":{"classes/BundleExecutor.html":{},"interfaces/BundleOptions.html":{}}}],["change",{"_index":2032,"title":{},"body":{"changelog.html":{},"contributing.html":{}}}],["changelog",{"_index":1835,"title":{"changelog.html":{}},"body":{"changelog.html":{}}}],["changes",{"_index":1863,"title":{},"body":{"changelog.html":{},"contributing.html":{}}}],["channel",{"_index":940,"title":{},"body":{"classes/ClientStub.html":{},"interfaces/ClientStubOptions.html":{},"classes/GoogleProtoFilesRoot.html":{},"classes/GrpcClient.html":{},"interfaces/GrpcClientOptions.html":{},"interfaces/Metadata.html":{},"interfaces/MetadataValue.html":{},"classes/OperationsClient.html":{},"classes/OperationsClientBuilder.html":{},"interfaces/OperationsClientOptions.html":{}}}],["check",{"_index":1064,"title":{},"body":{"classes/ClientStub.html":{},"interfaces/ClientStubOptions.html":{},"interfaces/GetOperationCallback.html":{},"classes/GoogleProtoFilesRoot.html":{},"classes/GrpcClient.html":{},"interfaces/GrpcClientOptions.html":{},"interfaces/Metadata.html":{},"interfaces/MetadataValue.html":{},"classes/Operation.html":{},"classes/OperationsClient.html":{},"classes/OperationsClientBuilder.html":{},"interfaces/OperationsClientOptions.html":{},"changelog.html":{},"index.html":{}}}],["chore",{"_index":1916,"title":{},"body":{"changelog.html":{}}}],["chore(build",{"_index":2046,"title":{},"body":{"changelog.html":{}}}],["chore(deps",{"_index":1881,"title":{},"body":{"changelog.html":{}}}],["chore(package",{"_index":2176,"title":{},"body":{"changelog.html":{}}}],["chore(typescript",{"_index":1955,"title":{},"body":{"changelog.html":{}}}],["chores(build",{"_index":2139,"title":{},"body":{"changelog.html":{}}}],["ci",{"_index":2010,"title":{},"body":{"changelog.html":{}}}],["cla",{"_index":2217,"title":{},"body":{"contributing.html":{}}}],["class",{"_index":98,"title":{"classes/BundleApiCaller.html":{},"classes/BundleDescriptor.html":{},"classes/BundleExecutor.html":{},"classes/CallSettings.html":{},"classes/ClientStub.html":{},"classes/GoogleError.html":{},"classes/GoogleProtoFilesRoot.html":{},"classes/GrpcClient.html":{},"classes/LongRunningDescriptor.html":{},"classes/LongrunningApiCaller.html":{},"classes/NormalApiCaller.html":{},"classes/OngoingCall.html":{},"classes/OngoingCallPromise.html":{},"classes/Operation.html":{},"classes/OperationsClient.html":{},"classes/OperationsClientBuilder.html":{},"classes/PageDescriptor.html":{},"classes/PagedApiCaller.html":{},"classes/PathTemplate.html":{},"classes/RetryOptions.html":{},"classes/StreamDescriptor.html":{},"classes/StreamProxy.html":{},"classes/StreamingApiCaller.html":{},"classes/Task.html":{}},"body":{"interfaces/AnyDecoder.html":{},"interfaces/BackoffSettings.html":{},"interfaces/Bindings.html":{},"classes/BundleApiCaller.html":{},"classes/BundleDescriptor.html":{},"classes/BundleExecutor.html":{},"interfaces/BundleOptions.html":{},"interfaces/BundlingConfig.html":{},"interfaces/CallOptions.html":{},"classes/CallSettings.html":{},"interfaces/CancellablePromise.html":{},"interfaces/ClientConfig.html":{},"classes/ClientStub.html":{},"interfaces/ClientStubOptions.html":{},"interfaces/Duplexify.html":{},"interfaces/DuplexifyConstructor.html":{},"interfaces/DuplexifyOptions.html":{},"interfaces/GetOperationCallback.html":{},"classes/GoogleError.html":{},"classes/GoogleProtoFilesRoot.html":{},"classes/GrpcClient.html":{},"interfaces/GrpcClientOptions.html":{},"classes/LongRunningDescriptor.html":{},"classes/LongrunningApiCaller.html":{},"interfaces/Metadata.html":{},"interfaces/MetadataValue.html":{},"interfaces/MethodConfig.html":{},"classes/NormalApiCaller.html":{},"classes/OngoingCall.html":{},"classes/OngoingCallPromise.html":{},"classes/Operation.html":{},"classes/OperationsClient.html":{},"classes/OperationsClientBuilder.html":{},"interfaces/OperationsClientOptions.html":{},"classes/PageDescriptor.html":{},"classes/PagedApiCaller.html":{},"interfaces/ParseResult.html":{},"classes/PathTemplate.html":{},"classes/RetryOptions.html":{},"interfaces/RetryParamsConfig.html":{},"interfaces/Segment.html":{},"interfaces/ServiceConfig.html":{},"classes/StreamDescriptor.html":{},"classes/StreamProxy.html":{},"classes/StreamingApiCaller.html":{},"interfaces/SubResponseInfo.html":{},"classes/Task.html":{},"interfaces/TaskCallback.html":{},"interfaces/TaskData.html":{},"interfaces/TaskElement.html":{},"index.html":{}}}],["classes",{"_index":600,"title":{},"body":{"classes/BundleApiCaller.html":{},"classes/BundleDescriptor.html":{},"classes/BundleExecutor.html":{},"classes/CallSettings.html":{},"classes/ClientStub.html":{},"classes/GoogleError.html":{},"classes/GoogleProtoFilesRoot.html":{},"classes/GrpcClient.html":{},"classes/LongRunningDescriptor.html":{},"classes/LongrunningApiCaller.html":{},"classes/NormalApiCaller.html":{},"classes/OngoingCall.html":{},"classes/OngoingCallPromise.html":{},"classes/Operation.html":{},"classes/OperationsClient.html":{},"classes/OperationsClientBuilder.html":{},"classes/PageDescriptor.html":{},"classes/PagedApiCaller.html":{},"classes/PathTemplate.html":{},"classes/RetryOptions.html":{},"classes/StreamDescriptor.html":{},"classes/StreamProxy.html":{},"classes/StreamingApiCaller.html":{},"classes/Task.html":{},"index.html":{},"overview.html":{}}}],["clean",{"_index":1978,"title":{},"body":{"changelog.html":{}}}],["cleanup",{"_index":1952,"title":{},"body":{"changelog.html":{}}}],["cleared",{"_index":787,"title":{},"body":{"classes/BundleExecutor.html":{},"interfaces/BundleOptions.html":{}}}],["clears",{"_index":784,"title":{},"body":{"classes/BundleExecutor.html":{},"interfaces/BundleOptions.html":{}}}],["cleartimeout(timerid",{"_index":790,"title":{},"body":{"classes/BundleExecutor.html":{},"interfaces/BundleOptions.html":{}}}],["client",{"_index":151,"title":{},"body":{"interfaces/BackoffSettings.html":{},"interfaces/BundlingConfig.html":{},"interfaces/CallOptions.html":{},"classes/CallSettings.html":{},"interfaces/ClientConfig.html":{},"classes/ClientStub.html":{},"interfaces/ClientStubOptions.html":{},"interfaces/Duplexify.html":{},"interfaces/DuplexifyConstructor.html":{},"interfaces/DuplexifyOptions.html":{},"interfaces/GetOperationCallback.html":{},"classes/GoogleProtoFilesRoot.html":{},"classes/GrpcClient.html":{},"interfaces/GrpcClientOptions.html":{},"interfaces/Metadata.html":{},"interfaces/MetadataValue.html":{},"interfaces/MethodConfig.html":{},"classes/Operation.html":{},"classes/OperationsClient.html":{},"classes/OperationsClientBuilder.html":{},"interfaces/OperationsClientOptions.html":{},"classes/RetryOptions.html":{},"interfaces/RetryParamsConfig.html":{},"interfaces/ServiceConfig.html":{},"classes/StreamProxy.html":{},"changelog.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["client.canceloperation({name",{"_index":1495,"title":{},"body":{"classes/OperationsClient.html":{},"classes/OperationsClientBuilder.html":{},"interfaces/OperationsClientOptions.html":{}}}],["client.deleteoperation({name",{"_index":1502,"title":{},"body":{"classes/OperationsClient.html":{},"classes/OperationsClientBuilder.html":{},"interfaces/OperationsClientOptions.html":{}}}],["client.getoperation({name",{"_index":1510,"title":{},"body":{"classes/OperationsClient.html":{},"classes/OperationsClientBuilder.html":{},"interfaces/OperationsClientOptions.html":{}}}],["client.listoperations(nextrequest",{"_index":1532,"title":{},"body":{"classes/OperationsClient.html":{},"classes/OperationsClientBuilder.html":{},"interfaces/OperationsClientOptions.html":{}}}],["client.listoperations(request",{"_index":1528,"title":{},"body":{"classes/OperationsClient.html":{},"classes/OperationsClientBuilder.html":{},"interfaces/OperationsClientOptions.html":{}}}],["client.listoperationsstream(request",{"_index":1545,"title":{},"body":{"classes/OperationsClient.html":{},"classes/OperationsClientBuilder.html":{},"interfaces/OperationsClientOptions.html":{}}}],["client_config",{"_index":488,"title":{},"body":{"interfaces/BackoffSettings.html":{},"interfaces/BundlingConfig.html":{},"interfaces/CallOptions.html":{},"classes/CallSettings.html":{},"interfaces/ClientConfig.html":{},"interfaces/MethodConfig.html":{},"classes/RetryOptions.html":{},"interfaces/RetryParamsConfig.html":{},"interfaces/ServiceConfig.html":{},"miscellaneous/functions.html":{}}}],["client_streaming",{"_index":1116,"title":{},"body":{"interfaces/Duplexify.html":{},"interfaces/DuplexifyConstructor.html":{},"interfaces/DuplexifyOptions.html":{},"classes/StreamProxy.html":{},"miscellaneous/enumerations.html":{}}}],["clientconfig",{"_index":461,"title":{"interfaces/ClientConfig.html":{}},"body":{"interfaces/BackoffSettings.html":{},"interfaces/BundlingConfig.html":{},"interfaces/CallOptions.html":{},"classes/CallSettings.html":{},"interfaces/ClientConfig.html":{},"classes/ClientStub.html":{},"interfaces/ClientStubOptions.html":{},"classes/GoogleProtoFilesRoot.html":{},"classes/GrpcClient.html":{},"interfaces/GrpcClientOptions.html":{},"interfaces/Metadata.html":{},"interfaces/MetadataValue.html":{},"interfaces/MethodConfig.html":{},"classes/OperationsClient.html":{},"classes/OperationsClientBuilder.html":{},"interfaces/OperationsClientOptions.html":{},"classes/RetryOptions.html":{},"interfaces/RetryParamsConfig.html":{},"interfaces/ServiceConfig.html":{},"miscellaneous/functions.html":{}}}],["clientconfig.interfaces",{"_index":494,"title":{},"body":{"interfaces/BackoffSettings.html":{},"interfaces/BundlingConfig.html":{},"interfaces/CallOptions.html":{},"classes/CallSettings.html":{},"interfaces/ClientConfig.html":{},"interfaces/MethodConfig.html":{},"classes/RetryOptions.html":{},"interfaces/RetryParamsConfig.html":{},"interfaces/ServiceConfig.html":{}}}],["clientcredentials",{"_index":1643,"title":{},"body":{"classes/OperationsClient.html":{},"classes/OperationsClientBuilder.html":{},"interfaces/OperationsClientOptions.html":{}}}],["clients",{"_index":141,"title":{},"body":{"interfaces/BackoffSettings.html":{},"interfaces/BundlingConfig.html":{},"interfaces/CallOptions.html":{},"classes/CallSettings.html":{},"interfaces/ClientConfig.html":{},"interfaces/MethodConfig.html":{},"classes/OperationsClient.html":{},"classes/OperationsClientBuilder.html":{},"interfaces/OperationsClientOptions.html":{},"classes/RetryOptions.html":{},"interfaces/RetryParamsConfig.html":{},"interfaces/ServiceConfig.html":{},"changelog.html":{},"index.html":{}}}],["clientstreamingcall",{"_index":1199,"title":{},"body":{"interfaces/GRPCCallOtherArgs.html":{},"interfaces/GRPCCallResult.html":{},"interfaces/GaxCall.html":{},"interfaces/GaxCallPromise.html":{},"interfaces/GaxCallStream.html":{},"interfaces/RequestType.html":{},"interfaces/SimpleCallbackFunction.html":{},"classes/StreamingApiCaller.html":{},"miscellaneous/typealiases.html":{}}}],["clientstreamingcall)(metadata",{"_index":1743,"title":{},"body":{"classes/StreamingApiCaller.html":{}}}],["clientstub",{"_index":855,"title":{"classes/ClientStub.html":{}},"body":{"classes/ClientStub.html":{},"interfaces/ClientStubOptions.html":{},"classes/GoogleProtoFilesRoot.html":{},"classes/GrpcClient.html":{},"interfaces/GrpcClientOptions.html":{},"interfaces/Metadata.html":{},"interfaces/MetadataValue.html":{}}}],["clientstuboptions",{"_index":893,"title":{"interfaces/ClientStubOptions.html":{}},"body":{"classes/ClientStub.html":{},"interfaces/ClientStubOptions.html":{},"classes/GoogleProtoFilesRoot.html":{},"classes/GrpcClient.html":{},"interfaces/GrpcClientOptions.html":{},"interfaces/Metadata.html":{},"interfaces/MetadataValue.html":{},"classes/OperationsClient.html":{},"classes/OperationsClientBuilder.html":{},"interfaces/OperationsClientOptions.html":{}}}],["clone",{"_index":892,"title":{},"body":{"classes/ClientStub.html":{},"interfaces/ClientStubOptions.html":{},"classes/GoogleProtoFilesRoot.html":{},"classes/GrpcClient.html":{},"interfaces/GrpcClientOptions.html":{},"interfaces/Metadata.html":{},"interfaces/MetadataValue.html":{}}}],["closely",{"_index":969,"title":{},"body":{"classes/ClientStub.html":{},"interfaces/ClientStubOptions.html":{},"classes/GoogleProtoFilesRoot.html":{},"classes/GrpcClient.html":{},"interfaces/GrpcClientOptions.html":{},"interfaces/Metadata.html":{},"interfaces/MetadataValue.html":{}}}],["cloud",{"_index":1146,"title":{},"body":{"interfaces/Duplexify.html":{},"interfaces/DuplexifyConstructor.html":{},"interfaces/DuplexifyOptions.html":{},"classes/OperationsClient.html":{},"classes/OperationsClientBuilder.html":{},"interfaces/OperationsClientOptions.html":{},"classes/StreamProxy.html":{}}}],["code",{"_index":925,"title":{},"body":{"classes/ClientStub.html":{},"interfaces/ClientStubOptions.html":{},"interfaces/Duplexify.html":{},"interfaces/DuplexifyConstructor.html":{},"interfaces/DuplexifyOptions.html":{},"classes/GoogleError.html":{},"classes/GoogleProtoFilesRoot.html":{},"classes/GrpcClient.html":{},"interfaces/GrpcClientOptions.html":{},"interfaces/Metadata.html":{},"interfaces/MetadataValue.html":{},"classes/StreamProxy.html":{},"changelog.html":{},"contributing.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{}}}],["code.cancelled",{"_index":1489,"title":{},"body":{"classes/OperationsClient.html":{},"classes/OperationsClientBuilder.html":{},"interfaces/OperationsClientOptions.html":{}}}],["code_gen_name_version",{"_index":1561,"title":{},"body":{"classes/OperationsClient.html":{},"classes/OperationsClientBuilder.html":{},"interfaces/OperationsClientOptions.html":{},"miscellaneous/variables.html":{}}}],["codecov",{"_index":2065,"title":{},"body":{"changelog.html":{}}}],["codes",{"_index":361,"title":{},"body":{"interfaces/BackoffSettings.html":{},"interfaces/BundlingConfig.html":{},"interfaces/CallOptions.html":{},"classes/CallSettings.html":{},"interfaces/ClientConfig.html":{},"interfaces/MethodConfig.html":{},"classes/RetryOptions.html":{},"interfaces/RetryParamsConfig.html":{},"interfaces/ServiceConfig.html":{},"miscellaneous/functions.html":{}}}],["collect",{"_index":2140,"title":{},"body":{"changelog.html":{}}}],["collection",{"_index":1610,"title":{},"body":{"classes/OperationsClient.html":{},"classes/OperationsClientBuilder.html":{},"interfaces/OperationsClientOptions.html":{}}}],["comes",{"_index":689,"title":{},"body":{"classes/BundleExecutor.html":{},"interfaces/BundleOptions.html":{}}}],["common",{"_index":960,"title":{},"body":{"classes/ClientStub.html":{},"interfaces/ClientStubOptions.html":{},"classes/GoogleProtoFilesRoot.html":{},"classes/GrpcClient.html":{},"interfaces/GrpcClientOptions.html":{},"interfaces/Metadata.html":{},"interfaces/MetadataValue.html":{},"changelog.html":{}}}],["common_proto_files",{"_index":877,"title":{},"body":{"classes/ClientStub.html":{},"interfaces/ClientStubOptions.html":{},"classes/GoogleProtoFilesRoot.html":{},"classes/GrpcClient.html":{},"interfaces/GrpcClientOptions.html":{},"interfaces/Metadata.html":{},"interfaces/MetadataValue.html":{},"miscellaneous/variables.html":{}}}],["common_proto_files.indexof(filename",{"_index":985,"title":{},"body":{"classes/ClientStub.html":{},"interfaces/ClientStubOptions.html":{},"classes/GoogleProtoFilesRoot.html":{},"classes/GrpcClient.html":{},"interfaces/GrpcClientOptions.html":{},"interfaces/Metadata.html":{},"interfaces/MetadataValue.html":{}}}],["common_proto_files.indexof(includepath",{"_index":1075,"title":{},"body":{"classes/ClientStub.html":{},"interfaces/ClientStubOptions.html":{},"classes/GoogleProtoFilesRoot.html":{},"classes/GrpcClient.html":{},"interfaces/GrpcClientOptions.html":{},"interfaces/Metadata.html":{},"interfaces/MetadataValue.html":{}}}],["communicating",{"_index":2330,"title":{},"body":{"index.html":{}}}],["company",{"_index":2224,"title":{},"body":{"contributing.html":{}}}],["complete",{"_index":1240,"title":{},"body":{"interfaces/GetOperationCallback.html":{},"classes/Operation.html":{},"classes/OperationsClient.html":{},"classes/OperationsClientBuilder.html":{},"interfaces/OperationsClientOptions.html":{}}}],["completed",{"_index":821,"title":{},"body":{"interfaces/CancellablePromise.html":{},"interfaces/GetOperationCallback.html":{},"classes/OngoingCall.html":{},"classes/OngoingCallPromise.html":{},"classes/Operation.html":{},"classes/OperationsClient.html":{},"classes/OperationsClientBuilder.html":{},"interfaces/OperationsClientOptions.html":{}}}],["completelisteners",{"_index":1214,"title":{},"body":{"interfaces/GetOperationCallback.html":{},"classes/Operation.html":{}}}],["completion",{"_index":219,"title":{},"body":{"interfaces/BackoffSettings.html":{},"interfaces/BundlingConfig.html":{},"interfaces/CallOptions.html":{},"classes/CallSettings.html":{},"interfaces/ClientConfig.html":{},"interfaces/GetOperationCallback.html":{},"interfaces/MethodConfig.html":{},"classes/Operation.html":{},"classes/RetryOptions.html":{},"interfaces/RetryParamsConfig.html":{},"interfaces/ServiceConfig.html":{},"miscellaneous/functions.html":{}}}],["compute",{"_index":1052,"title":{},"body":{"classes/ClientStub.html":{},"interfaces/ClientStubOptions.html":{},"classes/GoogleProtoFilesRoot.html":{},"classes/GrpcClient.html":{},"interfaces/GrpcClientOptions.html":{},"interfaces/Metadata.html":{},"interfaces/MetadataValue.html":{},"miscellaneous/functions.html":{}}}],["computebundleid",{"_index":726,"title":{},"body":{"classes/BundleExecutor.html":{},"interfaces/BundleOptions.html":{},"miscellaneous/functions.html":{}}}],["computebundleid(obj",{"_index":2276,"title":{},"body":{"miscellaneous/functions.html":{}}}],["conditions",{"_index":2356,"title":{},"body":{"license.html":{}}}],["conduct",{"_index":1792,"title":{},"body":{"interfaces/SubResponseInfo.html":{},"classes/Task.html":{},"interfaces/TaskCallback.html":{},"interfaces/TaskData.html":{},"interfaces/TaskElement.html":{},"changelog.html":{}}}],["config",{"_index":408,"title":{},"body":{"interfaces/BackoffSettings.html":{},"interfaces/BundlingConfig.html":{},"interfaces/CallOptions.html":{},"classes/CallSettings.html":{},"interfaces/ClientConfig.html":{},"classes/ClientStub.html":{},"interfaces/ClientStubOptions.html":{},"classes/GoogleProtoFilesRoot.html":{},"classes/GrpcClient.html":{},"interfaces/GrpcClientOptions.html":{},"interfaces/Metadata.html":{},"interfaces/MetadataValue.html":{},"interfaces/MethodConfig.html":{},"classes/OperationsClient.html":{},"classes/OperationsClientBuilder.html":{},"interfaces/OperationsClientOptions.html":{},"classes/RetryOptions.html":{},"interfaces/RetryParamsConfig.html":{},"interfaces/ServiceConfig.html":{},"changelog.html":{},"miscellaneous/functions.html":{}}}],["configdata",{"_index":1554,"title":{},"body":{"classes/OperationsClient.html":{},"classes/OperationsClientBuilder.html":{},"interfaces/OperationsClientOptions.html":{},"miscellaneous/variables.html":{}}}],["configoverrides",{"_index":486,"title":{},"body":{"interfaces/BackoffSettings.html":{},"interfaces/BundlingConfig.html":{},"interfaces/CallOptions.html":{},"classes/CallSettings.html":{},"interfaces/ClientConfig.html":{},"classes/ClientStub.html":{},"interfaces/ClientStubOptions.html":{},"classes/GoogleProtoFilesRoot.html":{},"classes/GrpcClient.html":{},"interfaces/GrpcClientOptions.html":{},"interfaces/Metadata.html":{},"interfaces/MetadataValue.html":{},"interfaces/MethodConfig.html":{},"classes/RetryOptions.html":{},"interfaces/RetryParamsConfig.html":{},"interfaces/ServiceConfig.html":{},"miscellaneous/functions.html":{}}}],["configoverrides.interfaces",{"_index":495,"title":{},"body":{"interfaces/BackoffSettings.html":{},"interfaces/BundlingConfig.html":{},"interfaces/CallOptions.html":{},"classes/CallSettings.html":{},"interfaces/ClientConfig.html":{},"interfaces/MethodConfig.html":{},"classes/RetryOptions.html":{},"interfaces/RetryParamsConfig.html":{},"interfaces/ServiceConfig.html":{}}}],["configs",{"_index":1017,"title":{},"body":{"classes/ClientStub.html":{},"interfaces/ClientStubOptions.html":{},"classes/GoogleProtoFilesRoot.html":{},"classes/GrpcClient.html":{},"interfaces/GrpcClientOptions.html":{},"interfaces/Metadata.html":{},"interfaces/MetadataValue.html":{},"changelog.html":{}}}],["configurable",{"_index":206,"title":{},"body":{"interfaces/BackoffSettings.html":{},"interfaces/BundlingConfig.html":{},"interfaces/CallOptions.html":{},"classes/CallSettings.html":{},"interfaces/ClientConfig.html":{},"interfaces/MethodConfig.html":{},"classes/RetryOptions.html":{},"interfaces/RetryParamsConfig.html":{},"interfaces/ServiceConfig.html":{},"miscellaneous/functions.html":{}}}],["configuration",{"_index":288,"title":{},"body":{"interfaces/BackoffSettings.html":{},"interfaces/BundlingConfig.html":{},"interfaces/CallOptions.html":{},"classes/CallSettings.html":{},"interfaces/ClientConfig.html":{},"interfaces/MethodConfig.html":{},"classes/RetryOptions.html":{},"interfaces/RetryParamsConfig.html":{},"interfaces/ServiceConfig.html":{},"miscellaneous/functions.html":{}}}],["configure",{"_index":133,"title":{},"body":{"interfaces/BackoffSettings.html":{},"interfaces/BundlingConfig.html":{},"interfaces/CallOptions.html":{},"classes/CallSettings.html":{},"interfaces/ClientConfig.html":{},"interfaces/MethodConfig.html":{},"classes/RetryOptions.html":{},"interfaces/RetryParamsConfig.html":{},"interfaces/ServiceConfig.html":{},"changelog.html":{}}}],["configured",{"_index":163,"title":{},"body":{"interfaces/BackoffSettings.html":{},"interfaces/BundlingConfig.html":{},"interfaces/CallOptions.html":{},"classes/CallSettings.html":{},"interfaces/ClientConfig.html":{},"interfaces/MethodConfig.html":{},"classes/RetryOptions.html":{},"interfaces/RetryParamsConfig.html":{},"interfaces/ServiceConfig.html":{}}}],["configures",{"_index":363,"title":{},"body":{"interfaces/BackoffSettings.html":{},"classes/BundleExecutor.html":{},"interfaces/BundleOptions.html":{},"interfaces/BundlingConfig.html":{},"interfaces/CallOptions.html":{},"classes/CallSettings.html":{},"interfaces/ClientConfig.html":{},"interfaces/MethodConfig.html":{},"classes/RetryOptions.html":{},"interfaces/RetryParamsConfig.html":{},"interfaces/ServiceConfig.html":{},"miscellaneous/functions.html":{}}}],["configuring",{"_index":938,"title":{},"body":{"classes/ClientStub.html":{},"interfaces/ClientStubOptions.html":{},"classes/GoogleProtoFilesRoot.html":{},"classes/GrpcClient.html":{},"interfaces/GrpcClientOptions.html":{},"interfaces/Metadata.html":{},"interfaces/MetadataValue.html":{}}}],["connect",{"_index":1641,"title":{},"body":{"classes/OperationsClient.html":{},"classes/OperationsClientBuilder.html":{},"interfaces/OperationsClientOptions.html":{}}}],["connection",{"_index":1027,"title":{},"body":{"classes/ClientStub.html":{},"interfaces/ClientStubOptions.html":{},"interfaces/GetOperationCallback.html":{},"classes/GoogleProtoFilesRoot.html":{},"classes/GrpcClient.html":{},"interfaces/GrpcClientOptions.html":{},"interfaces/Metadata.html":{},"interfaces/MetadataValue.html":{},"classes/Operation.html":{}}}],["consequential",{"_index":2389,"title":{},"body":{"license.html":{}}}],["consideration",{"_index":1754,"title":{},"body":{"interfaces/SubResponseInfo.html":{},"classes/Task.html":{},"interfaces/TaskCallback.html":{},"interfaces/TaskData.html":{},"interfaces/TaskElement.html":{}}}],["consistent",{"_index":1450,"title":{},"body":{"classes/OperationsClient.html":{},"classes/OperationsClientBuilder.html":{},"interfaces/OperationsClientOptions.html":{}}}],["console.error",{"_index":1971,"title":{},"body":{"changelog.html":{}}}],["console.error(err",{"_index":1550,"title":{},"body":{"classes/OperationsClient.html":{},"classes/OperationsClientBuilder.html":{},"interfaces/OperationsClientOptions.html":{}}}],["console.log(resources",{"_index":1529,"title":{},"body":{"classes/OperationsClient.html":{},"classes/OperationsClientBuilder.html":{},"interfaces/OperationsClientOptions.html":{}}}],["console.warn",{"_index":1970,"title":{},"body":{"changelog.html":{}}}],["const",{"_index":344,"title":{},"body":{"interfaces/BackoffSettings.html":{},"interfaces/Bindings.html":{},"classes/BundleExecutor.html":{},"interfaces/BundleOptions.html":{},"interfaces/BundlingConfig.html":{},"interfaces/CallOptions.html":{},"classes/CallSettings.html":{},"interfaces/CancellablePromise.html":{},"interfaces/ClientConfig.html":{},"classes/ClientStub.html":{},"interfaces/ClientStubOptions.html":{},"interfaces/Duplexify.html":{},"interfaces/DuplexifyConstructor.html":{},"interfaces/DuplexifyOptions.html":{},"interfaces/GetOperationCallback.html":{},"classes/GoogleProtoFilesRoot.html":{},"classes/GrpcClient.html":{},"interfaces/GrpcClientOptions.html":{},"classes/LongrunningApiCaller.html":{},"interfaces/Metadata.html":{},"interfaces/MetadataValue.html":{},"interfaces/MethodConfig.html":{},"classes/OngoingCall.html":{},"classes/OngoingCallPromise.html":{},"classes/Operation.html":{},"classes/OperationsClient.html":{},"classes/OperationsClientBuilder.html":{},"interfaces/OperationsClientOptions.html":{},"classes/PageDescriptor.html":{},"classes/PagedApiCaller.html":{},"interfaces/ParseResult.html":{},"classes/PathTemplate.html":{},"classes/RetryOptions.html":{},"interfaces/RetryParamsConfig.html":{},"interfaces/Segment.html":{},"interfaces/ServiceConfig.html":{},"classes/StreamProxy.html":{},"interfaces/SubResponseInfo.html":{},"classes/Task.html":{},"interfaces/TaskCallback.html":{},"interfaces/TaskData.html":{},"interfaces/TaskElement.html":{},"changelog.html":{},"index.html":{}}}],["constructing",{"_index":2302,"title":{},"body":{"miscellaneous/functions.html":{}}}],["constructor",{"_index":103,"title":{},"body":{"interfaces/AnyDecoder.html":{},"interfaces/BackoffSettings.html":{},"interfaces/Bindings.html":{},"classes/BundleApiCaller.html":{},"classes/BundleDescriptor.html":{},"classes/BundleExecutor.html":{},"interfaces/BundleOptions.html":{},"interfaces/BundlingConfig.html":{},"interfaces/CallOptions.html":{},"classes/CallSettings.html":{},"interfaces/CancellablePromise.html":{},"interfaces/ClientConfig.html":{},"classes/ClientStub.html":{},"interfaces/ClientStubOptions.html":{},"interfaces/Duplexify.html":{},"interfaces/DuplexifyConstructor.html":{},"interfaces/DuplexifyOptions.html":{},"interfaces/GetOperationCallback.html":{},"classes/GoogleProtoFilesRoot.html":{},"classes/GrpcClient.html":{},"interfaces/GrpcClientOptions.html":{},"classes/LongRunningDescriptor.html":{},"classes/LongrunningApiCaller.html":{},"interfaces/Metadata.html":{},"interfaces/MetadataValue.html":{},"interfaces/MethodConfig.html":{},"classes/OngoingCall.html":{},"classes/OngoingCallPromise.html":{},"classes/Operation.html":{},"classes/OperationsClient.html":{},"classes/OperationsClientBuilder.html":{},"interfaces/OperationsClientOptions.html":{},"classes/PageDescriptor.html":{},"classes/PagedApiCaller.html":{},"interfaces/ParseResult.html":{},"classes/PathTemplate.html":{},"classes/RetryOptions.html":{},"interfaces/RetryParamsConfig.html":{},"interfaces/Segment.html":{},"interfaces/ServiceConfig.html":{},"classes/StreamDescriptor.html":{},"classes/StreamProxy.html":{},"classes/StreamingApiCaller.html":{},"interfaces/SubResponseInfo.html":{},"classes/Task.html":{},"interfaces/TaskCallback.html":{},"interfaces/TaskData.html":{},"interfaces/TaskElement.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["constructor(...args",{"_index":1060,"title":{},"body":{"classes/ClientStub.html":{},"interfaces/ClientStubOptions.html":{},"classes/GoogleProtoFilesRoot.html":{},"classes/GrpcClient.html":{},"interfaces/GrpcClientOptions.html":{},"interfaces/Metadata.html":{},"interfaces/MetadataValue.html":{}}}],["constructor(apicall",{"_index":1814,"title":{},"body":{"classes/Task.html":{}}}],["constructor(bundledfield",{"_index":632,"title":{},"body":{"classes/BundleDescriptor.html":{}}}],["constructor(bundleoptions",{"_index":699,"title":{},"body":{"classes/BundleExecutor.html":{}}}],["constructor(bundler",{"_index":606,"title":{},"body":{"classes/BundleApiCaller.html":{}}}],["constructor(callback",{"_index":826,"title":{},"body":{"interfaces/CancellablePromise.html":{},"classes/OngoingCall.html":{},"classes/OngoingCallPromise.html":{}}}],["constructor(data",{"_index":536,"title":{},"body":{"interfaces/Bindings.html":{},"interfaces/ParseResult.html":{},"classes/PathTemplate.html":{},"interfaces/Segment.html":{}}}],["constructor(descriptor",{"_index":1729,"title":{},"body":{"classes/StreamingApiCaller.html":{}}}],["constructor(gaxgrpc",{"_index":1463,"title":{},"body":{"classes/OperationsClient.html":{},"classes/OperationsClientBuilder.html":{},"interfaces/OperationsClientOptions.html":{}}}],["constructor(grpcop",{"_index":1417,"title":{},"body":{"classes/Operation.html":{}}}],["constructor(longrunningdescriptor",{"_index":1383,"title":{},"body":{"classes/LongrunningApiCaller.html":{}}}],["constructor(operationsclient",{"_index":1377,"title":{},"body":{"classes/LongRunningDescriptor.html":{}}}],["constructor(options",{"_index":914,"title":{},"body":{"classes/ClientStub.html":{},"interfaces/ClientStubOptions.html":{},"classes/GoogleProtoFilesRoot.html":{},"classes/GrpcClient.html":{},"interfaces/GrpcClientOptions.html":{},"interfaces/Metadata.html":{},"interfaces/MetadataValue.html":{}}}],["constructor(pagedescriptor",{"_index":1676,"title":{},"body":{"classes/PagedApiCaller.html":{}}}],["constructor(promisector",{"_index":845,"title":{},"body":{"interfaces/CancellablePromise.html":{},"classes/OngoingCall.html":{},"classes/OngoingCallPromise.html":{}}}],["constructor(requestpagetokenfield",{"_index":1655,"title":{},"body":{"classes/PageDescriptor.html":{}}}],["constructor(retrycodes",{"_index":211,"title":{},"body":{"interfaces/BackoffSettings.html":{},"interfaces/BundlingConfig.html":{},"interfaces/CallOptions.html":{},"classes/CallSettings.html":{},"interfaces/ClientConfig.html":{},"interfaces/MethodConfig.html":{},"classes/RetryOptions.html":{},"interfaces/RetryParamsConfig.html":{},"interfaces/ServiceConfig.html":{}}}],["constructor(settings",{"_index":309,"title":{},"body":{"interfaces/BackoffSettings.html":{},"interfaces/BundlingConfig.html":{},"interfaces/CallOptions.html":{},"classes/CallSettings.html":{},"interfaces/ClientConfig.html":{},"interfaces/MethodConfig.html":{},"classes/RetryOptions.html":{},"interfaces/RetryParamsConfig.html":{},"interfaces/ServiceConfig.html":{}}}],["constructor(streamtype",{"_index":1712,"title":{},"body":{"classes/StreamDescriptor.html":{}}}],["constructor(type",{"_index":1125,"title":{},"body":{"interfaces/Duplexify.html":{},"interfaces/DuplexifyConstructor.html":{},"interfaces/DuplexifyOptions.html":{},"classes/StreamProxy.html":{}}}],["constructretry",{"_index":419,"title":{},"body":{"interfaces/BackoffSettings.html":{},"interfaces/BundlingConfig.html":{},"interfaces/CallOptions.html":{},"classes/CallSettings.html":{},"interfaces/ClientConfig.html":{},"interfaces/MethodConfig.html":{},"classes/RetryOptions.html":{},"interfaces/RetryParamsConfig.html":{},"interfaces/ServiceConfig.html":{}}}],["constructs",{"_index":462,"title":{},"body":{"interfaces/BackoffSettings.html":{},"interfaces/BundlingConfig.html":{},"interfaces/CallOptions.html":{},"classes/CallSettings.html":{},"interfaces/ClientConfig.html":{},"interfaces/MethodConfig.html":{},"classes/RetryOptions.html":{},"interfaces/RetryParamsConfig.html":{},"interfaces/ServiceConfig.html":{},"miscellaneous/functions.html":{}}}],["constructsettings",{"_index":402,"title":{},"body":{"interfaces/BackoffSettings.html":{},"interfaces/BundlingConfig.html":{},"interfaces/CallOptions.html":{},"classes/CallSettings.html":{},"interfaces/ClientConfig.html":{},"classes/ClientStub.html":{},"interfaces/ClientStubOptions.html":{},"classes/GoogleProtoFilesRoot.html":{},"classes/GrpcClient.html":{},"interfaces/GrpcClientOptions.html":{},"interfaces/Metadata.html":{},"interfaces/MetadataValue.html":{},"interfaces/MethodConfig.html":{},"classes/RetryOptions.html":{},"interfaces/RetryParamsConfig.html":{},"interfaces/ServiceConfig.html":{},"miscellaneous/functions.html":{}}}],["constructsettings(servicename",{"_index":1370,"title":{},"body":{"classes/GrpcClient.html":{},"miscellaneous/functions.html":{}}}],["consumed",{"_index":655,"title":{},"body":{"classes/BundleDescriptor.html":{}}}],["contain",{"_index":746,"title":{},"body":{"classes/BundleExecutor.html":{},"interfaces/BundleOptions.html":{},"interfaces/GRPCCallOtherArgs.html":{},"interfaces/GRPCCallResult.html":{},"interfaces/GaxCall.html":{},"interfaces/GaxCallPromise.html":{},"interfaces/GaxCallStream.html":{},"interfaces/RequestType.html":{},"interfaces/SimpleCallbackFunction.html":{}}}],["contained",{"_index":1613,"title":{},"body":{"classes/OperationsClient.html":{},"classes/OperationsClientBuilder.html":{},"interfaces/OperationsClientOptions.html":{}}}],["containing",{"_index":284,"title":{},"body":{"interfaces/BackoffSettings.html":{},"interfaces/BundlingConfig.html":{},"interfaces/CallOptions.html":{},"classes/CallSettings.html":{},"interfaces/ClientConfig.html":{},"interfaces/MethodConfig.html":{},"classes/RetryOptions.html":{},"interfaces/RetryParamsConfig.html":{},"interfaces/ServiceConfig.html":{}}}],["contains",{"_index":541,"title":{},"body":{"interfaces/Bindings.html":{},"classes/OperationsClient.html":{},"classes/OperationsClientBuilder.html":{},"interfaces/OperationsClientOptions.html":{},"interfaces/ParseResult.html":{},"classes/PathTemplate.html":{},"interfaces/Segment.html":{},"changelog.html":{}}}],["content",{"_index":379,"title":{},"body":{"interfaces/BackoffSettings.html":{},"interfaces/BundlingConfig.html":{},"interfaces/CallOptions.html":{},"classes/CallSettings.html":{},"interfaces/ClientConfig.html":{},"interfaces/MethodConfig.html":{},"classes/RetryOptions.html":{},"interfaces/RetryParamsConfig.html":{},"interfaces/ServiceConfig.html":{}}}],["contents",{"_index":2200,"title":{},"body":{"contributing.html":{}}}],["context",{"_index":903,"title":{},"body":{"classes/ClientStub.html":{},"interfaces/ClientStubOptions.html":{},"classes/GoogleProtoFilesRoot.html":{},"classes/GrpcClient.html":{},"interfaces/GrpcClientOptions.html":{},"interfaces/Metadata.html":{},"interfaces/MetadataValue.html":{}}}],["continuous",{"_index":2143,"title":{},"body":{"changelog.html":{}}}],["continuously",{"_index":1543,"title":{},"body":{"classes/OperationsClient.html":{},"classes/OperationsClientBuilder.html":{},"interfaces/OperationsClientOptions.html":{}}}],["contract",{"_index":2401,"title":{},"body":{"license.html":{}}}],["contrib",{"_index":1961,"title":{},"body":{"changelog.html":{}}}],["contribute",{"_index":2226,"title":{},"body":{"contributing.html":{}}}],["contributing",{"_index":2005,"title":{"contributing.html":{}},"body":{"changelog.html":{},"contributing.html":{},"index.html":{}}}],["contributions",{"_index":2339,"title":{},"body":{"index.html":{}}}],["contributor",{"_index":2197,"title":{},"body":{"contributing.html":{}}}],["contributors",{"_index":2366,"title":{},"body":{"license.html":{}}}],["convenient",{"_index":2324,"title":{},"body":{"index.html":{}}}],["conventions",{"_index":2318,"title":{},"body":{"index.html":{}}}],["converts",{"_index":2283,"title":{},"body":{"miscellaneous/functions.html":{}}}],["coordinates",{"_index":1790,"title":{},"body":{"interfaces/SubResponseInfo.html":{},"classes/Task.html":{},"interfaces/TaskCallback.html":{},"interfaces/TaskData.html":{},"interfaces/TaskElement.html":{}}}],["copied",{"_index":1004,"title":{},"body":{"classes/ClientStub.html":{},"interfaces/ClientStubOptions.html":{},"classes/GoogleProtoFilesRoot.html":{},"classes/GrpcClient.html":{},"interfaces/GrpcClientOptions.html":{},"interfaces/Metadata.html":{},"interfaces/MetadataValue.html":{},"interfaces/SubResponseInfo.html":{},"classes/Task.html":{},"interfaces/TaskCallback.html":{},"interfaces/TaskData.html":{},"interfaces/TaskElement.html":{}}}],["copy",{"_index":333,"title":{},"body":{"interfaces/BackoffSettings.html":{},"interfaces/BundlingConfig.html":{},"interfaces/CallOptions.html":{},"classes/CallSettings.html":{},"interfaces/ClientConfig.html":{},"interfaces/Duplexify.html":{},"interfaces/DuplexifyConstructor.html":{},"interfaces/DuplexifyOptions.html":{},"interfaces/MethodConfig.html":{},"classes/RetryOptions.html":{},"interfaces/RetryParamsConfig.html":{},"interfaces/ServiceConfig.html":{},"classes/StreamProxy.html":{},"interfaces/SubResponseInfo.html":{},"classes/Task.html":{},"interfaces/TaskCallback.html":{},"interfaces/TaskData.html":{},"interfaces/TaskElement.html":{}}}],["copying",{"_index":1761,"title":{},"body":{"interfaces/SubResponseInfo.html":{},"classes/Task.html":{},"interfaces/TaskCallback.html":{},"interfaces/TaskData.html":{},"interfaces/TaskElement.html":{}}}],["copyright",{"_index":2345,"title":{},"body":{"license.html":{}}}],["corporate",{"_index":2215,"title":{},"body":{"contributing.html":{}}}],["correspond",{"_index":274,"title":{},"body":{"interfaces/BackoffSettings.html":{},"interfaces/BundlingConfig.html":{},"interfaces/CallOptions.html":{},"classes/CallSettings.html":{},"interfaces/ClientConfig.html":{},"interfaces/MethodConfig.html":{},"classes/RetryOptions.html":{},"interfaces/RetryParamsConfig.html":{},"interfaces/ServiceConfig.html":{}}}],["corresponding",{"_index":1488,"title":{},"body":{"classes/OperationsClient.html":{},"classes/OperationsClientBuilder.html":{},"interfaces/OperationsClientOptions.html":{}}}],["count",{"_index":246,"title":{},"body":{"interfaces/BackoffSettings.html":{},"interfaces/BundlingConfig.html":{},"interfaces/CallOptions.html":{},"classes/CallSettings.html":{},"interfaces/ClientConfig.html":{},"interfaces/MethodConfig.html":{},"classes/RetryOptions.html":{},"interfaces/RetryParamsConfig.html":{},"interfaces/ServiceConfig.html":{},"interfaces/SubResponseInfo.html":{},"classes/Task.html":{},"interfaces/TaskCallback.html":{},"interfaces/TaskData.html":{},"interfaces/TaskElement.html":{}}}],["countlimit",{"_index":759,"title":{},"body":{"classes/BundleExecutor.html":{},"interfaces/BundleOptions.html":{}}}],["countthreshold",{"_index":777,"title":{},"body":{"classes/BundleExecutor.html":{},"interfaces/BundleOptions.html":{}}}],["couple",{"_index":2210,"title":{},"body":{"contributing.html":{}}}],["create",{"_index":190,"title":{},"body":{"interfaces/BackoffSettings.html":{},"interfaces/BundlingConfig.html":{},"interfaces/CallOptions.html":{},"classes/CallSettings.html":{},"interfaces/ClientConfig.html":{},"interfaces/Duplexify.html":{},"interfaces/DuplexifyConstructor.html":{},"interfaces/DuplexifyOptions.html":{},"interfaces/GetOperationCallback.html":{},"interfaces/MethodConfig.html":{},"classes/Operation.html":{},"classes/RetryOptions.html":{},"interfaces/RetryParamsConfig.html":{},"interfaces/ServiceConfig.html":{},"classes/StreamProxy.html":{},"changelog.html":{},"miscellaneous/functions.html":{}}}],["createactualcallback",{"_index":1684,"title":{},"body":{"classes/PagedApiCaller.html":{}}}],["createapicall",{"_index":1553,"title":{},"body":{"classes/OperationsClient.html":{},"classes/OperationsClientBuilder.html":{},"interfaces/OperationsClientOptions.html":{},"miscellaneous/functions.html":{}}}],["createapicall(func",{"_index":2282,"title":{},"body":{"miscellaneous/functions.html":{}}}],["createapicaller",{"_index":77,"title":{},"body":{"interfaces/APICaller.html":{},"interfaces/ApiCallerSettings.html":{},"miscellaneous/functions.html":{}}}],["createapicaller(settings",{"_index":2298,"title":{},"body":{"miscellaneous/functions.html":{}}}],["createbackoffsettings",{"_index":365,"title":{},"body":{"interfaces/BackoffSettings.html":{},"interfaces/BundlingConfig.html":{},"interfaces/CallOptions.html":{},"classes/CallSettings.html":{},"interfaces/ClientConfig.html":{},"classes/LongrunningApiCaller.html":{},"interfaces/MethodConfig.html":{},"classes/RetryOptions.html":{},"interfaces/RetryParamsConfig.html":{},"interfaces/ServiceConfig.html":{},"miscellaneous/functions.html":{}}}],["createbackoffsettings(100",{"_index":367,"title":{},"body":{"interfaces/BackoffSettings.html":{},"interfaces/BundlingConfig.html":{},"interfaces/CallOptions.html":{},"classes/CallSettings.html":{},"interfaces/ClientConfig.html":{},"interfaces/MethodConfig.html":{},"classes/RetryOptions.html":{},"interfaces/RetryParamsConfig.html":{},"interfaces/ServiceConfig.html":{}}}],["createbackoffsettings(initialretrydelaymillis",{"_index":2278,"title":{},"body":{"miscellaneous/functions.html":{}}}],["createbundleoptions(bundlingconfig",{"_index":515,"title":{},"body":{"interfaces/BackoffSettings.html":{},"interfaces/BundlingConfig.html":{},"interfaces/CallOptions.html":{},"classes/CallSettings.html":{},"interfaces/ClientConfig.html":{},"interfaces/MethodConfig.html":{},"classes/RetryOptions.html":{},"interfaces/RetryParamsConfig.html":{},"interfaces/ServiceConfig.html":{}}}],["createbundleoptions(options",{"_index":380,"title":{},"body":{"interfaces/BackoffSettings.html":{},"interfaces/BundlingConfig.html":{},"interfaces/CallOptions.html":{},"classes/CallSettings.html":{},"interfaces/ClientConfig.html":{},"interfaces/MethodConfig.html":{},"classes/RetryOptions.html":{},"interfaces/RetryParamsConfig.html":{},"interfaces/ServiceConfig.html":{}}}],["createbytelengthfunction",{"_index":1361,"title":{},"body":{"classes/GrpcClient.html":{},"miscellaneous/variables.html":{}}}],["createbytelengthfunction(message",{"_index":1053,"title":{},"body":{"classes/ClientStub.html":{},"interfaces/ClientStubOptions.html":{},"classes/GoogleProtoFilesRoot.html":{},"classes/GrpcClient.html":{},"interfaces/GrpcClientOptions.html":{},"interfaces/Metadata.html":{},"interfaces/MetadataValue.html":{}}}],["created",{"_index":1452,"title":{},"body":{"classes/OperationsClient.html":{},"classes/OperationsClientBuilder.html":{},"interfaces/OperationsClientOptions.html":{}}}],["createdefaultbackoffsettings",{"_index":366,"title":{},"body":{"interfaces/BackoffSettings.html":{},"interfaces/BundlingConfig.html":{},"interfaces/CallOptions.html":{},"classes/CallSettings.html":{},"interfaces/ClientConfig.html":{},"classes/LongrunningApiCaller.html":{},"interfaces/MethodConfig.html":{},"classes/RetryOptions.html":{},"interfaces/RetryParamsConfig.html":{},"interfaces/ServiceConfig.html":{},"miscellaneous/functions.html":{}}}],["createfoo",{"_index":476,"title":{},"body":{"interfaces/BackoffSettings.html":{},"interfaces/BundlingConfig.html":{},"interfaces/CallOptions.html":{},"classes/CallSettings.html":{},"interfaces/ClientConfig.html":{},"interfaces/MethodConfig.html":{},"classes/RetryOptions.html":{},"interfaces/RetryParamsConfig.html":{},"interfaces/ServiceConfig.html":{},"miscellaneous/functions.html":{}}}],["createmaxretriesbackoffsettings",{"_index":374,"title":{},"body":{"interfaces/BackoffSettings.html":{},"interfaces/BundlingConfig.html":{},"interfaces/CallOptions.html":{},"classes/CallSettings.html":{},"interfaces/ClientConfig.html":{},"interfaces/MethodConfig.html":{},"classes/RetryOptions.html":{},"interfaces/RetryParamsConfig.html":{},"interfaces/ServiceConfig.html":{},"miscellaneous/functions.html":{}}}],["createmaxretriesbackoffsettings(initialretrydelaymillis",{"_index":2279,"title":{},"body":{"miscellaneous/functions.html":{}}}],["createretryoptions",{"_index":364,"title":{},"body":{"interfaces/BackoffSettings.html":{},"interfaces/BundlingConfig.html":{},"interfaces/CallOptions.html":{},"classes/CallSettings.html":{},"interfaces/ClientConfig.html":{},"interfaces/MethodConfig.html":{},"classes/RetryOptions.html":{},"interfaces/RetryParamsConfig.html":{},"interfaces/ServiceConfig.html":{},"miscellaneous/functions.html":{}}}],["createretryoptions(codes",{"_index":436,"title":{},"body":{"interfaces/BackoffSettings.html":{},"interfaces/BundlingConfig.html":{},"interfaces/CallOptions.html":{},"classes/CallSettings.html":{},"interfaces/ClientConfig.html":{},"interfaces/MethodConfig.html":{},"classes/RetryOptions.html":{},"interfaces/RetryParamsConfig.html":{},"interfaces/ServiceConfig.html":{}}}],["createretryoptions(retrycodes",{"_index":2280,"title":{},"body":{"miscellaneous/functions.html":{}}}],["creates",{"_index":375,"title":{},"body":{"interfaces/BackoffSettings.html":{},"interfaces/Bindings.html":{},"interfaces/BundlingConfig.html":{},"interfaces/CallOptions.html":{},"classes/CallSettings.html":{},"interfaces/ClientConfig.html":{},"classes/ClientStub.html":{},"interfaces/ClientStubOptions.html":{},"classes/GoogleProtoFilesRoot.html":{},"classes/GrpcClient.html":{},"interfaces/GrpcClientOptions.html":{},"classes/LongrunningApiCaller.html":{},"interfaces/Metadata.html":{},"interfaces/MetadataValue.html":{},"interfaces/MethodConfig.html":{},"classes/NormalApiCaller.html":{},"classes/PageDescriptor.html":{},"classes/PagedApiCaller.html":{},"interfaces/ParseResult.html":{},"classes/PathTemplate.html":{},"classes/RetryOptions.html":{},"interfaces/RetryParamsConfig.html":{},"interfaces/Segment.html":{},"interfaces/ServiceConfig.html":{},"interfaces/SubResponseInfo.html":{},"classes/Task.html":{},"interfaces/TaskCallback.html":{},"interfaces/TaskData.html":{},"interfaces/TaskElement.html":{},"miscellaneous/functions.html":{}}}],["createstream",{"_index":1654,"title":{},"body":{"classes/PageDescriptor.html":{}}}],["createstream(apicall",{"_index":1660,"title":{},"body":{"classes/PageDescriptor.html":{}}}],["createstub",{"_index":1025,"title":{},"body":{"classes/ClientStub.html":{},"interfaces/ClientStubOptions.html":{},"classes/GoogleProtoFilesRoot.html":{},"classes/GrpcClient.html":{},"interfaces/GrpcClientOptions.html":{},"interfaces/Metadata.html":{},"interfaces/MetadataValue.html":{}}}],["createstub(createstub",{"_index":1036,"title":{},"body":{"classes/ClientStub.html":{},"interfaces/ClientStubOptions.html":{},"classes/GoogleProtoFilesRoot.html":{},"classes/GrpcClient.html":{},"interfaces/GrpcClientOptions.html":{},"interfaces/Metadata.html":{},"interfaces/MetadataValue.html":{}}}],["createstub(serviceaddress",{"_index":1045,"title":{},"body":{"classes/ClientStub.html":{},"interfaces/ClientStubOptions.html":{},"classes/GoogleProtoFilesRoot.html":{},"classes/GrpcClient.html":{},"interfaces/GrpcClientOptions.html":{},"interfaces/Metadata.html":{},"interfaces/MetadataValue.html":{}}}],["creating",{"_index":909,"title":{},"body":{"classes/ClientStub.html":{},"interfaces/ClientStubOptions.html":{},"classes/GoogleProtoFilesRoot.html":{},"classes/GrpcClient.html":{},"interfaces/GrpcClientOptions.html":{},"interfaces/Metadata.html":{},"interfaces/MetadataValue.html":{}}}],["credential",{"_index":942,"title":{},"body":{"classes/ClientStub.html":{},"interfaces/ClientStubOptions.html":{},"classes/GoogleProtoFilesRoot.html":{},"classes/GrpcClient.html":{},"interfaces/GrpcClientOptions.html":{},"interfaces/Metadata.html":{},"interfaces/MetadataValue.html":{}}}],["credentials",{"_index":906,"title":{},"body":{"classes/ClientStub.html":{},"interfaces/ClientStubOptions.html":{},"classes/GoogleProtoFilesRoot.html":{},"classes/GrpcClient.html":{},"interfaces/GrpcClientOptions.html":{},"interfaces/Metadata.html":{},"interfaces/MetadataValue.html":{},"changelog.html":{}}}],["creds",{"_index":1038,"title":{},"body":{"classes/ClientStub.html":{},"interfaces/ClientStubOptions.html":{},"classes/GoogleProtoFilesRoot.html":{},"classes/GrpcClient.html":{},"interfaces/GrpcClientOptions.html":{},"interfaces/Metadata.html":{},"interfaces/MetadataValue.html":{}}}],["current",{"_index":552,"title":{},"body":{"interfaces/Bindings.html":{},"classes/ClientStub.html":{},"interfaces/ClientStubOptions.html":{},"interfaces/GetOperationCallback.html":{},"classes/GoogleProtoFilesRoot.html":{},"classes/GrpcClient.html":{},"interfaces/GrpcClientOptions.html":{},"interfaces/Metadata.html":{},"interfaces/MetadataValue.html":{},"classes/Operation.html":{},"classes/OperationsClient.html":{},"classes/OperationsClientBuilder.html":{},"interfaces/OperationsClientOptions.html":{},"interfaces/ParseResult.html":{},"classes/PathTemplate.html":{},"interfaces/Segment.html":{},"classes/Task.html":{}}}],["current.lastindexof(path.sep",{"_index":1081,"title":{},"body":{"classes/ClientStub.html":{},"interfaces/ClientStubOptions.html":{},"classes/GoogleProtoFilesRoot.html":{},"classes/GrpcClient.html":{},"interfaces/GrpcClientOptions.html":{},"interfaces/Metadata.html":{},"interfaces/MetadataValue.html":{}}}],["current.length",{"_index":1079,"title":{},"body":{"classes/ClientStub.html":{},"interfaces/ClientStubOptions.html":{},"classes/GoogleProtoFilesRoot.html":{},"classes/GrpcClient.html":{},"interfaces/GrpcClientOptions.html":{},"interfaces/Metadata.html":{},"interfaces/MetadataValue.html":{}}}],["current.substring(0",{"_index":1080,"title":{},"body":{"classes/ClientStub.html":{},"interfaces/ClientStubOptions.html":{},"classes/GoogleProtoFilesRoot.html":{},"classes/GrpcClient.html":{},"interfaces/GrpcClientOptions.html":{},"interfaces/Metadata.html":{},"interfaces/MetadataValue.html":{}}}],["currentcallpromise_",{"_index":1218,"title":{},"body":{"interfaces/GetOperationCallback.html":{},"classes/Operation.html":{}}}],["customize",{"_index":1026,"title":{},"body":{"classes/ClientStub.html":{},"interfaces/ClientStubOptions.html":{},"classes/GoogleProtoFilesRoot.html":{},"classes/GrpcClient.html":{},"interfaces/GrpcClientOptions.html":{},"interfaces/Metadata.html":{},"interfaces/MetadataValue.html":{}}}],["customized",{"_index":1645,"title":{},"body":{"classes/OperationsClient.html":{},"classes/OperationsClientBuilder.html":{},"interfaces/OperationsClientOptions.html":{}}}],["d.callback.id",{"_index":1808,"title":{},"body":{"interfaces/SubResponseInfo.html":{},"classes/Task.html":{},"interfaces/TaskCallback.html":{},"interfaces/TaskData.html":{},"interfaces/TaskElement.html":{}}}],["d.cancelled",{"_index":1809,"title":{},"body":{"interfaces/SubResponseInfo.html":{},"classes/Task.html":{},"interfaces/TaskCallback.html":{},"interfaces/TaskData.html":{},"interfaces/TaskElement.html":{}}}],["damage",{"_index":2408,"title":{},"body":{"license.html":{}}}],["damages",{"_index":2390,"title":{},"body":{"license.html":{}}}],["data",{"_index":534,"title":{},"body":{"interfaces/Bindings.html":{},"classes/BundleDescriptor.html":{},"classes/ClientStub.html":{},"interfaces/ClientStubOptions.html":{},"interfaces/Duplexify.html":{},"interfaces/DuplexifyConstructor.html":{},"interfaces/DuplexifyOptions.html":{},"classes/GoogleProtoFilesRoot.html":{},"classes/GrpcClient.html":{},"interfaces/GrpcClientOptions.html":{},"interfaces/Metadata.html":{},"interfaces/MetadataValue.html":{},"classes/OperationsClient.html":{},"classes/OperationsClientBuilder.html":{},"interfaces/OperationsClientOptions.html":{},"classes/PageDescriptor.html":{},"interfaces/ParseResult.html":{},"classes/PathTemplate.html":{},"interfaces/Segment.html":{},"classes/StreamProxy.html":{},"license.html":{}}}],["data.elements.length",{"_index":1806,"title":{},"body":{"interfaces/SubResponseInfo.html":{},"classes/Task.html":{},"interfaces/TaskCallback.html":{},"interfaces/TaskData.html":{},"interfaces/TaskElement.html":{}}}],["date",{"_index":1208,"title":{},"body":{"interfaces/GRPCCallOtherArgs.html":{},"interfaces/GRPCCallResult.html":{},"interfaces/GaxCall.html":{},"interfaces/GaxCallPromise.html":{},"interfaces/GaxCallStream.html":{},"interfaces/GetOperationCallback.html":{},"classes/Operation.html":{},"interfaces/RequestType.html":{},"interfaces/SimpleCallbackFunction.html":{}}}],["dead",{"_index":2113,"title":{},"body":{"changelog.html":{}}}],["deadline",{"_index":1207,"title":{},"body":{"interfaces/GRPCCallOtherArgs.html":{},"interfaces/GRPCCallResult.html":{},"interfaces/GaxCall.html":{},"interfaces/GaxCallPromise.html":{},"interfaces/GaxCallStream.html":{},"interfaces/GetOperationCallback.html":{},"classes/Operation.html":{},"interfaces/RequestType.html":{},"interfaces/SimpleCallbackFunction.html":{}}}],["deadline_exceeded",{"_index":468,"title":{},"body":{"interfaces/BackoffSettings.html":{},"interfaces/BundlingConfig.html":{},"interfaces/CallOptions.html":{},"classes/CallSettings.html":{},"interfaces/ClientConfig.html":{},"interfaces/MethodConfig.html":{},"classes/RetryOptions.html":{},"interfaces/RetryParamsConfig.html":{},"interfaces/ServiceConfig.html":{},"miscellaneous/functions.html":{}}}],["decoders",{"_index":1387,"title":{},"body":{"classes/LongrunningApiCaller.html":{}}}],["decoration",{"_index":1157,"title":{},"body":{"interfaces/Duplexify.html":{},"interfaces/DuplexifyConstructor.html":{},"interfaces/DuplexifyOptions.html":{},"classes/StreamProxy.html":{}}}],["decrypt",{"_index":2072,"title":{},"body":{"changelog.html":{}}}],["deep",{"_index":1753,"title":{},"body":{"interfaces/SubResponseInfo.html":{},"classes/Task.html":{},"interfaces/TaskCallback.html":{},"interfaces/TaskData.html":{},"interfaces/TaskElement.html":{}}}],["deepcopyforresponse",{"_index":1766,"title":{},"body":{"interfaces/SubResponseInfo.html":{},"classes/Task.html":{},"interfaces/TaskCallback.html":{},"interfaces/TaskData.html":{},"interfaces/TaskElement.html":{}}}],["deepcopyforresponse(obj[key",{"_index":1783,"title":{},"body":{"interfaces/SubResponseInfo.html":{},"classes/Task.html":{},"interfaces/TaskCallback.html":{},"interfaces/TaskData.html":{},"interfaces/TaskElement.html":{}}}],["default",{"_index":180,"title":{},"body":{"interfaces/BackoffSettings.html":{},"interfaces/BundlingConfig.html":{},"interfaces/CallOptions.html":{},"classes/CallSettings.html":{},"interfaces/ClientConfig.html":{},"classes/ClientStub.html":{},"interfaces/ClientStubOptions.html":{},"classes/GoogleProtoFilesRoot.html":{},"classes/GrpcClient.html":{},"interfaces/GrpcClientOptions.html":{},"interfaces/Metadata.html":{},"interfaces/MetadataValue.html":{},"interfaces/MethodConfig.html":{},"classes/OperationsClient.html":{},"classes/OperationsClientBuilder.html":{},"interfaces/OperationsClientOptions.html":{},"classes/RetryOptions.html":{},"interfaces/RetryParamsConfig.html":{},"interfaces/ServiceConfig.html":{},"classes/StreamingApiCaller.html":{},"changelog.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["default_service_port",{"_index":1559,"title":{},"body":{"classes/OperationsClient.html":{},"classes/OperationsClientBuilder.html":{},"interfaces/OperationsClientOptions.html":{},"miscellaneous/variables.html":{}}}],["defaults",{"_index":139,"title":{},"body":{"interfaces/BackoffSettings.html":{},"interfaces/BundlingConfig.html":{},"interfaces/CallOptions.html":{},"classes/CallSettings.html":{},"interfaces/ClientConfig.html":{},"classes/ClientStub.html":{},"interfaces/ClientStubOptions.html":{},"classes/GoogleProtoFilesRoot.html":{},"classes/GrpcClient.html":{},"interfaces/GrpcClientOptions.html":{},"interfaces/Metadata.html":{},"interfaces/MetadataValue.html":{},"interfaces/MethodConfig.html":{},"classes/OperationsClient.html":{},"classes/OperationsClientBuilder.html":{},"interfaces/OperationsClientOptions.html":{},"classes/RetryOptions.html":{},"interfaces/RetryParamsConfig.html":{},"interfaces/ServiceConfig.html":{}}}],["defaults[jsname",{"_index":514,"title":{},"body":{"interfaces/BackoffSettings.html":{},"interfaces/BundlingConfig.html":{},"interfaces/CallOptions.html":{},"classes/CallSettings.html":{},"interfaces/ClientConfig.html":{},"interfaces/MethodConfig.html":{},"classes/RetryOptions.html":{},"interfaces/RetryParamsConfig.html":{},"interfaces/ServiceConfig.html":{}}}],["defaults[methodname",{"_index":1596,"title":{},"body":{"classes/OperationsClient.html":{},"classes/OperationsClientBuilder.html":{},"interfaces/OperationsClientOptions.html":{}}}],["defined",{"_index":38,"title":{},"body":{"interfaces/APICaller.html":{},"interfaces/Bindings.html":{},"classes/BundleApiCaller.html":{},"classes/BundleDescriptor.html":{},"classes/BundleExecutor.html":{},"interfaces/BundlingConfig.html":{},"classes/CallSettings.html":{},"interfaces/CancellablePromise.html":{},"classes/ClientStub.html":{},"interfaces/Descriptor.html":{},"interfaces/Duplexify.html":{},"interfaces/DuplexifyConstructor.html":{},"interfaces/GRPCCallOtherArgs.html":{},"interfaces/GRPCCallResult.html":{},"interfaces/GaxCall.html":{},"interfaces/GaxCallPromise.html":{},"interfaces/GaxCallStream.html":{},"classes/GoogleError.html":{},"classes/GoogleProtoFilesRoot.html":{},"classes/GrpcClient.html":{},"classes/LongRunningDescriptor.html":{},"classes/LongrunningApiCaller.html":{},"classes/NormalApiCaller.html":{},"classes/OngoingCall.html":{},"classes/OngoingCallPromise.html":{},"classes/Operation.html":{},"classes/OperationsClient.html":{},"classes/OperationsClientBuilder.html":{},"interfaces/OperationsClientOptions.html":{},"classes/PageDescriptor.html":{},"classes/PagedApiCaller.html":{},"classes/PathTemplate.html":{},"interfaces/RequestType.html":{},"classes/RetryOptions.html":{},"interfaces/SimpleCallbackFunction.html":{},"classes/StreamDescriptor.html":{},"classes/StreamProxy.html":{},"classes/StreamingApiCaller.html":{},"classes/Task.html":{},"miscellaneous/variables.html":{}}}],["defines",{"_index":1223,"title":{},"body":{"interfaces/GetOperationCallback.html":{},"classes/Operation.html":{},"miscellaneous/functions.html":{}}}],["definition",{"_index":2322,"title":{},"body":{"index.html":{}}}],["delay",{"_index":215,"title":{},"body":{"interfaces/BackoffSettings.html":{},"interfaces/BundlingConfig.html":{},"interfaces/CallOptions.html":{},"classes/CallSettings.html":{},"interfaces/ClientConfig.html":{},"interfaces/GetOperationCallback.html":{},"interfaces/MethodConfig.html":{},"classes/Operation.html":{},"classes/RetryOptions.html":{},"interfaces/RetryParamsConfig.html":{},"interfaces/ServiceConfig.html":{},"miscellaneous/functions.html":{}}}],["delay_threshold_millis",{"_index":387,"title":{},"body":{"interfaces/BackoffSettings.html":{},"interfaces/BundlingConfig.html":{},"interfaces/CallOptions.html":{},"classes/CallSettings.html":{},"interfaces/ClientConfig.html":{},"interfaces/MethodConfig.html":{},"classes/RetryOptions.html":{},"interfaces/RetryParamsConfig.html":{},"interfaces/ServiceConfig.html":{},"miscellaneous/functions.html":{}}}],["delaymult",{"_index":1311,"title":{},"body":{"interfaces/GetOperationCallback.html":{},"classes/Operation.html":{}}}],["delaythreshold",{"_index":276,"title":{},"body":{"interfaces/BackoffSettings.html":{},"classes/BundleExecutor.html":{},"interfaces/BundleOptions.html":{},"interfaces/BundlingConfig.html":{},"interfaces/CallOptions.html":{},"classes/CallSettings.html":{},"interfaces/ClientConfig.html":{},"interfaces/MethodConfig.html":{},"classes/RetryOptions.html":{},"interfaces/RetryParamsConfig.html":{},"interfaces/ServiceConfig.html":{}}}],["delete",{"_index":355,"title":{},"body":{"interfaces/BackoffSettings.html":{},"classes/BundleExecutor.html":{},"interfaces/BundleOptions.html":{},"interfaces/BundlingConfig.html":{},"interfaces/CallOptions.html":{},"classes/CallSettings.html":{},"interfaces/ClientConfig.html":{},"interfaces/MethodConfig.html":{},"classes/RetryOptions.html":{},"interfaces/RetryParamsConfig.html":{},"interfaces/ServiceConfig.html":{}}}],["deleted",{"_index":1484,"title":{},"body":{"classes/OperationsClient.html":{},"classes/OperationsClientBuilder.html":{},"interfaces/OperationsClientOptions.html":{}}}],["deleteoperation",{"_index":1459,"title":{},"body":{"classes/OperationsClient.html":{},"classes/OperationsClientBuilder.html":{},"interfaces/OperationsClientOptions.html":{}}}],["deleteoperation(request",{"_index":1498,"title":{},"body":{"classes/OperationsClient.html":{},"classes/OperationsClientBuilder.html":{},"interfaces/OperationsClientOptions.html":{}}}],["deletes",{"_index":1500,"title":{},"body":{"classes/OperationsClient.html":{},"classes/OperationsClientBuilder.html":{},"interfaces/OperationsClientOptions.html":{}}}],["demultiplex",{"_index":650,"title":{},"body":{"classes/BundleDescriptor.html":{}}}],["depend",{"_index":2335,"title":{},"body":{"index.html":{}}}],["dependencies",{"_index":1880,"title":{"dependencies.html":{}},"body":{"changelog.html":{},"contributing.html":{},"dependencies.html":{}}}],["dependency",{"_index":1846,"title":{},"body":{"changelog.html":{}}}],["deps",{"_index":1844,"title":{},"body":{"changelog.html":{}}}],["derived",{"_index":2370,"title":{},"body":{"license.html":{}}}],["describes",{"_index":634,"title":{},"body":{"classes/BundleDescriptor.html":{}}}],["describing",{"_index":2231,"title":{},"body":{"contributing.html":{}}}],["description",{"_index":7,"title":{},"body":{"interfaces/APICaller.html":{},"interfaces/AnyDecoder.html":{},"interfaces/BackoffSettings.html":{},"classes/BundleApiCaller.html":{},"classes/BundleDescriptor.html":{},"classes/BundleExecutor.html":{},"interfaces/BundleOptions.html":{},"interfaces/CallOptions.html":{},"classes/CallSettings.html":{},"classes/GrpcClient.html":{},"classes/LongRunningDescriptor.html":{},"classes/LongrunningApiCaller.html":{},"classes/NormalApiCaller.html":{},"classes/OngoingCall.html":{},"classes/OngoingCallPromise.html":{},"classes/Operation.html":{},"classes/OperationsClient.html":{},"classes/PageDescriptor.html":{},"classes/PagedApiCaller.html":{},"classes/PathTemplate.html":{},"classes/RetryOptions.html":{},"classes/StreamDescriptor.html":{},"classes/StreamProxy.html":{},"classes/StreamingApiCaller.html":{},"classes/Task.html":{},"miscellaneous/functions.html":{}}}],["descriptor",{"_index":67,"title":{"interfaces/Descriptor.html":{}},"body":{"interfaces/APICaller.html":{},"interfaces/AnyDecoder.html":{},"interfaces/ApiCallerSettings.html":{},"classes/BundleDescriptor.html":{},"interfaces/Descriptor.html":{},"classes/LongRunningDescriptor.html":{},"classes/OperationsClient.html":{},"classes/OperationsClientBuilder.html":{},"interfaces/OperationsClientOptions.html":{},"classes/PageDescriptor.html":{},"classes/StreamDescriptor.html":{},"classes/StreamingApiCaller.html":{},"miscellaneous/functions.html":{}}}],["descriptor.getapicaller(settings",{"_index":81,"title":{},"body":{"interfaces/APICaller.html":{},"interfaces/ApiCallerSettings.html":{}}}],["designed",{"_index":1441,"title":{},"body":{"classes/OperationsClient.html":{},"classes/OperationsClientBuilder.html":{},"interfaces/OperationsClientOptions.html":{}}}],["desired",{"_index":2241,"title":{},"body":{"contributing.html":{}}}],["despite",{"_index":1482,"title":{},"body":{"classes/OperationsClient.html":{},"classes/OperationsClientBuilder.html":{},"interfaces/OperationsClientOptions.html":{}}}],["destroyed",{"_index":1093,"title":{},"body":{"interfaces/Duplexify.html":{},"interfaces/DuplexifyConstructor.html":{},"interfaces/DuplexifyOptions.html":{},"classes/StreamProxy.html":{}}}],["detailed",{"_index":2343,"title":{},"body":{"index.html":{}}}],["details",{"_index":1161,"title":{},"body":{"interfaces/Duplexify.html":{},"interfaces/DuplexifyConstructor.html":{},"interfaces/DuplexifyOptions.html":{},"classes/OperationsClient.html":{},"classes/OperationsClientBuilder.html":{},"interfaces/OperationsClientOptions.html":{},"classes/StreamProxy.html":{},"contributing.html":{},"index.html":{}}}],["detemrine",{"_index":645,"title":{},"body":{"classes/BundleDescriptor.html":{}}}],["determine",{"_index":642,"title":{},"body":{"classes/BundleDescriptor.html":{},"miscellaneous/functions.html":{}}}],["determines",{"_index":155,"title":{},"body":{"interfaces/BackoffSettings.html":{},"interfaces/BundlingConfig.html":{},"interfaces/CallOptions.html":{},"classes/CallSettings.html":{},"interfaces/ClientConfig.html":{},"interfaces/MethodConfig.html":{},"classes/OperationsClient.html":{},"classes/OperationsClientBuilder.html":{},"interfaces/OperationsClientOptions.html":{},"classes/RetryOptions.html":{},"interfaces/RetryParamsConfig.html":{},"interfaces/ServiceConfig.html":{}}}],["dev",{"_index":1878,"title":{},"body":{"changelog.html":{}}}],["develop",{"_index":2242,"title":{},"body":{"contributing.html":{}}}],["developers",{"_index":1449,"title":{},"body":{"classes/OperationsClient.html":{},"classes/OperationsClientBuilder.html":{},"interfaces/OperationsClientOptions.html":{}}}],["development",{"_index":2316,"title":{},"body":{"index.html":{}}}],["dictionary",{"_index":404,"title":{},"body":{"interfaces/BackoffSettings.html":{},"interfaces/BundlingConfig.html":{},"interfaces/CallOptions.html":{},"classes/CallSettings.html":{},"interfaces/ClientConfig.html":{},"classes/ClientStub.html":{},"interfaces/ClientStubOptions.html":{},"classes/GoogleProtoFilesRoot.html":{},"classes/GrpcClient.html":{},"interfaces/GrpcClientOptions.html":{},"interfaces/Metadata.html":{},"interfaces/MetadataValue.html":{},"interfaces/MethodConfig.html":{},"classes/RetryOptions.html":{},"interfaces/RetryParamsConfig.html":{},"interfaces/ServiceConfig.html":{},"miscellaneous/functions.html":{}}}],["different",{"_index":1524,"title":{},"body":{"classes/OperationsClient.html":{},"classes/OperationsClientBuilder.html":{},"interfaces/OperationsClientOptions.html":{}}}],["direct",{"_index":2291,"title":{},"body":{"miscellaneous/functions.html":{},"license.html":{}}}],["directly",{"_index":904,"title":{},"body":{"classes/ClientStub.html":{},"interfaces/ClientStubOptions.html":{},"interfaces/Duplexify.html":{},"interfaces/DuplexifyConstructor.html":{},"interfaces/DuplexifyOptions.html":{},"classes/GoogleProtoFilesRoot.html":{},"classes/GrpcClient.html":{},"interfaces/GrpcClientOptions.html":{},"interfaces/Metadata.html":{},"interfaces/MetadataValue.html":{},"classes/StreamProxy.html":{},"index.html":{}}}],["directory",{"_index":962,"title":{},"body":{"classes/ClientStub.html":{},"interfaces/ClientStubOptions.html":{},"classes/GoogleProtoFilesRoot.html":{},"classes/GrpcClient.html":{},"interfaces/GrpcClientOptions.html":{},"interfaces/Metadata.html":{},"interfaces/MetadataValue.html":{}}}],["disclaimed",{"_index":2383,"title":{},"body":{"license.html":{}}}],["disclaimer",{"_index":2361,"title":{},"body":{"license.html":{}}}],["discriminator",{"_index":742,"title":{},"body":{"classes/BundleExecutor.html":{},"interfaces/BundleOptions.html":{}}}],["discriminatorfields",{"_index":2277,"title":{},"body":{"miscellaneous/functions.html":{}}}],["distribution",{"_index":2365,"title":{},"body":{"license.html":{}}}],["docs",{"_index":1959,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["documentation",{"_index":1958,"title":{},"body":{"changelog.html":{},"index.html":{},"license.html":{}}}],["docuploader",{"_index":1932,"title":{},"body":{"changelog.html":{}}}],["doesn't",{"_index":1478,"title":{},"body":{"classes/OperationsClient.html":{},"classes/OperationsClientBuilder.html":{},"interfaces/OperationsClientOptions.html":{}}}],["domain",{"_index":1637,"title":{},"body":{"classes/OperationsClient.html":{},"classes/OperationsClientBuilder.html":{},"interfaces/OperationsClientOptions.html":{}}}],["don't",{"_index":1071,"title":{},"body":{"classes/ClientStub.html":{},"interfaces/ClientStubOptions.html":{},"interfaces/GetOperationCallback.html":{},"classes/GoogleProtoFilesRoot.html":{},"classes/GrpcClient.html":{},"interfaces/GrpcClientOptions.html":{},"interfaces/Metadata.html":{},"interfaces/MetadataValue.html":{},"classes/Operation.html":{},"classes/PagedApiCaller.html":{},"changelog.html":{}}}],["done",{"_index":1219,"title":{},"body":{"interfaces/GetOperationCallback.html":{},"classes/Operation.html":{},"contributing.html":{}}}],["dothingswith(element",{"_index":1548,"title":{},"body":{"classes/OperationsClient.html":{},"classes/OperationsClientBuilder.html":{},"interfaces/OperationsClientOptions.html":{}}}],["dothingswith(resource",{"_index":1536,"title":{},"body":{"classes/OperationsClient.html":{},"classes/OperationsClientBuilder.html":{},"interfaces/OperationsClientOptions.html":{}}}],["dothingswith(response",{"_index":1511,"title":{},"body":{"classes/OperationsClient.html":{},"classes/OperationsClientBuilder.html":{},"interfaces/OperationsClientOptions.html":{}}}],["drop",{"_index":1913,"title":{},"body":{"changelog.html":{}}}],["duplex",{"_index":1092,"title":{},"body":{"interfaces/Duplexify.html":{},"interfaces/DuplexifyConstructor.html":{},"interfaces/DuplexifyOptions.html":{},"interfaces/GRPCCallOtherArgs.html":{},"interfaces/GRPCCallResult.html":{},"interfaces/GaxCall.html":{},"interfaces/GaxCallPromise.html":{},"interfaces/GaxCallStream.html":{},"interfaces/RequestType.html":{},"interfaces/SimpleCallbackFunction.html":{},"classes/StreamProxy.html":{}}}],["duplexify",{"_index":1090,"title":{"interfaces/Duplexify.html":{}},"body":{"interfaces/Duplexify.html":{},"interfaces/DuplexifyConstructor.html":{},"interfaces/DuplexifyOptions.html":{},"classes/StreamProxy.html":{},"dependencies.html":{},"miscellaneous/variables.html":{}}}],["duplexifyconstructor",{"_index":1104,"title":{"interfaces/DuplexifyConstructor.html":{}},"body":{"interfaces/Duplexify.html":{},"interfaces/DuplexifyConstructor.html":{},"interfaces/DuplexifyOptions.html":{},"classes/StreamProxy.html":{},"miscellaneous/variables.html":{}}}],["duplexifyoptions",{"_index":1109,"title":{"interfaces/DuplexifyOptions.html":{}},"body":{"interfaces/Duplexify.html":{},"interfaces/DuplexifyConstructor.html":{},"interfaces/DuplexifyOptions.html":{},"classes/StreamProxy.html":{}}}],["duplexoptions",{"_index":1102,"title":{},"body":{"interfaces/Duplexify.html":{},"interfaces/DuplexifyConstructor.html":{},"interfaces/DuplexifyOptions.html":{},"classes/StreamProxy.html":{}}}],["e.g",{"_index":1338,"title":{},"body":{"interfaces/GetOperationCallback.html":{},"classes/Operation.html":{},"classes/OperationsClient.html":{},"classes/OperationsClientBuilder.html":{},"interfaces/OperationsClientOptions.html":{},"index.html":{}}}],["each",{"_index":680,"title":{},"body":{"classes/BundleExecutor.html":{},"interfaces/BundleOptions.html":{},"classes/OperationsClient.html":{},"classes/OperationsClientBuilder.html":{},"interfaces/OperationsClientOptions.html":{}}}],["effort",{"_index":1475,"title":{},"body":{"classes/OperationsClient.html":{},"classes/OperationsClientBuilder.html":{},"interfaces/OperationsClientOptions.html":{}}}],["element",{"_index":278,"title":{},"body":{"interfaces/BackoffSettings.html":{},"interfaces/BundlingConfig.html":{},"interfaces/CallOptions.html":{},"classes/CallSettings.html":{},"interfaces/ClientConfig.html":{},"interfaces/GRPCCallOtherArgs.html":{},"interfaces/GRPCCallResult.html":{},"interfaces/GaxCall.html":{},"interfaces/GaxCallPromise.html":{},"interfaces/GaxCallStream.html":{},"interfaces/GetOperationCallback.html":{},"interfaces/MethodConfig.html":{},"classes/Operation.html":{},"classes/OperationsClient.html":{},"classes/OperationsClientBuilder.html":{},"interfaces/OperationsClientOptions.html":{},"interfaces/RequestType.html":{},"classes/RetryOptions.html":{},"interfaces/RetryParamsConfig.html":{},"interfaces/ServiceConfig.html":{},"interfaces/SimpleCallbackFunction.html":{},"interfaces/SubResponseInfo.html":{},"classes/Task.html":{},"interfaces/TaskCallback.html":{},"interfaces/TaskData.html":{},"interfaces/TaskElement.html":{}}}],["element_count_limit",{"_index":384,"title":{},"body":{"interfaces/BackoffSettings.html":{},"interfaces/BundlingConfig.html":{},"interfaces/CallOptions.html":{},"classes/CallSettings.html":{},"interfaces/ClientConfig.html":{},"interfaces/MethodConfig.html":{},"classes/RetryOptions.html":{},"interfaces/RetryParamsConfig.html":{},"interfaces/ServiceConfig.html":{},"miscellaneous/functions.html":{}}}],["element_count_threshold",{"_index":383,"title":{},"body":{"interfaces/BackoffSettings.html":{},"interfaces/BundlingConfig.html":{},"interfaces/CallOptions.html":{},"classes/CallSettings.html":{},"interfaces/ClientConfig.html":{},"interfaces/MethodConfig.html":{},"classes/RetryOptions.html":{},"interfaces/RetryParamsConfig.html":{},"interfaces/ServiceConfig.html":{},"miscellaneous/functions.html":{}}}],["elementcount",{"_index":753,"title":{},"body":{"classes/BundleExecutor.html":{},"interfaces/BundleOptions.html":{}}}],["elementcountlimit",{"_index":250,"title":{},"body":{"interfaces/BackoffSettings.html":{},"classes/BundleExecutor.html":{},"interfaces/BundleOptions.html":{},"interfaces/BundlingConfig.html":{},"interfaces/CallOptions.html":{},"classes/CallSettings.html":{},"interfaces/ClientConfig.html":{},"interfaces/MethodConfig.html":{},"classes/RetryOptions.html":{},"interfaces/RetryParamsConfig.html":{},"interfaces/ServiceConfig.html":{}}}],["elementcountthreshold",{"_index":244,"title":{},"body":{"interfaces/BackoffSettings.html":{},"classes/BundleExecutor.html":{},"interfaces/BundleOptions.html":{},"interfaces/BundlingConfig.html":{},"interfaces/CallOptions.html":{},"classes/CallSettings.html":{},"interfaces/ClientConfig.html":{},"interfaces/MethodConfig.html":{},"classes/RetryOptions.html":{},"interfaces/RetryParamsConfig.html":{},"interfaces/ServiceConfig.html":{}}}],["elements",{"_index":176,"title":{},"body":{"interfaces/BackoffSettings.html":{},"classes/BundleDescriptor.html":{},"classes/BundleExecutor.html":{},"interfaces/BundleOptions.html":{},"interfaces/BundlingConfig.html":{},"interfaces/CallOptions.html":{},"classes/CallSettings.html":{},"interfaces/ClientConfig.html":{},"interfaces/GRPCCallOtherArgs.html":{},"interfaces/GRPCCallResult.html":{},"interfaces/GaxCall.html":{},"interfaces/GaxCallPromise.html":{},"interfaces/GaxCallStream.html":{},"interfaces/MethodConfig.html":{},"classes/OperationsClient.html":{},"classes/OperationsClientBuilder.html":{},"interfaces/OperationsClientOptions.html":{},"interfaces/RequestType.html":{},"classes/RetryOptions.html":{},"interfaces/RetryParamsConfig.html":{},"interfaces/ServiceConfig.html":{},"interfaces/SimpleCallbackFunction.html":{},"interfaces/SubResponseInfo.html":{},"classes/Task.html":{},"interfaces/TaskCallback.html":{},"interfaces/TaskData.html":{},"interfaces/TaskElement.html":{},"changelog.html":{}}}],["emit(event",{"_index":1322,"title":{},"body":{"interfaces/GetOperationCallback.html":{},"classes/Operation.html":{}}}],["emits",{"_index":1551,"title":{},"body":{"classes/OperationsClient.html":{},"classes/OperationsClientBuilder.html":{},"interfaces/OperationsClientOptions.html":{},"classes/PageDescriptor.html":{}}}],["emittedwarnings",{"_index":2418,"title":{},"body":{"miscellaneous/variables.html":{}}}],["emitter",{"_index":1719,"title":{},"body":{"classes/StreamDescriptor.html":{}}}],["enable",{"_index":2013,"title":{},"body":{"changelog.html":{}}}],["enabled",{"_index":619,"title":{},"body":{"classes/BundleApiCaller.html":{},"classes/OperationsClient.html":{},"classes/OperationsClientBuilder.html":{},"interfaces/OperationsClientOptions.html":{},"changelog.html":{}}}],["encapsulates",{"_index":127,"title":{},"body":{"interfaces/BackoffSettings.html":{},"interfaces/BundlingConfig.html":{},"interfaces/CallOptions.html":{},"classes/CallSettings.html":{},"interfaces/ClientConfig.html":{},"interfaces/MethodConfig.html":{},"classes/RetryOptions.html":{},"interfaces/RetryParamsConfig.html":{},"interfaces/ServiceConfig.html":{}}}],["encode",{"_index":1054,"title":{},"body":{"classes/ClientStub.html":{},"interfaces/ClientStubOptions.html":{},"classes/GoogleProtoFilesRoot.html":{},"classes/GrpcClient.html":{},"interfaces/GrpcClientOptions.html":{},"interfaces/Metadata.html":{},"interfaces/MetadataValue.html":{},"classes/Task.html":{}}}],["encoded/decoded",{"_index":661,"title":{},"body":{"classes/BundleDescriptor.html":{}}}],["encoder",{"_index":1050,"title":{},"body":{"classes/ClientStub.html":{},"interfaces/ClientStubOptions.html":{},"classes/GoogleProtoFilesRoot.html":{},"classes/GrpcClient.html":{},"interfaces/GrpcClientOptions.html":{},"interfaces/Metadata.html":{},"interfaces/MetadataValue.html":{}}}],["encouraged",{"_index":2342,"title":{},"body":{"index.html":{}}}],["end",{"_index":182,"title":{},"body":{"interfaces/BackoffSettings.html":{},"interfaces/BundlingConfig.html":{},"interfaces/CallOptions.html":{},"classes/CallSettings.html":{},"interfaces/ClientConfig.html":{},"interfaces/Duplexify.html":{},"interfaces/DuplexifyConstructor.html":{},"interfaces/DuplexifyOptions.html":{},"interfaces/MethodConfig.html":{},"classes/OperationsClient.html":{},"classes/OperationsClientBuilder.html":{},"interfaces/OperationsClientOptions.html":{},"classes/RetryOptions.html":{},"interfaces/RetryParamsConfig.html":{},"interfaces/ServiceConfig.html":{},"classes/StreamProxy.html":{},"interfaces/SubResponseInfo.html":{},"classes/Task.html":{},"interfaces/TaskCallback.html":{},"interfaces/TaskData.html":{},"interfaces/TaskElement.html":{},"changelog.html":{}}}],["end_binding",{"_index":2419,"title":{},"body":{"miscellaneous/variables.html":{}}}],["ended",{"_index":1664,"title":{},"body":{"classes/PageDescriptor.html":{},"dependencies.html":{}}}],["ending",{"_index":1763,"title":{},"body":{"interfaces/SubResponseInfo.html":{},"classes/Task.html":{},"interfaces/TaskCallback.html":{},"interfaces/TaskData.html":{},"interfaces/TaskElement.html":{}}}],["endorse",{"_index":2367,"title":{},"body":{"license.html":{}}}],["ends",{"_index":1765,"title":{},"body":{"interfaces/SubResponseInfo.html":{},"classes/Task.html":{},"interfaces/TaskCallback.html":{},"interfaces/TaskData.html":{},"interfaces/TaskElement.html":{}}}],["engines",{"_index":1855,"title":{},"body":{"changelog.html":{}}}],["enough",{"_index":738,"title":{},"body":{"classes/BundleExecutor.html":{},"interfaces/BundleOptions.html":{}}}],["ensure",{"_index":2243,"title":{},"body":{"contributing.html":{}}}],["entire",{"_index":444,"title":{},"body":{"interfaces/BackoffSettings.html":{},"interfaces/BundlingConfig.html":{},"interfaces/CallOptions.html":{},"classes/CallSettings.html":{},"interfaces/ClientConfig.html":{},"interfaces/MethodConfig.html":{},"classes/RetryOptions.html":{},"interfaces/RetryParamsConfig.html":{},"interfaces/ServiceConfig.html":{},"classes/Task.html":{}}}],["entry",{"_index":406,"title":{},"body":{"interfaces/BackoffSettings.html":{},"interfaces/BundlingConfig.html":{},"interfaces/CallOptions.html":{},"classes/CallSettings.html":{},"interfaces/ClientConfig.html":{},"interfaces/MethodConfig.html":{},"classes/RetryOptions.html":{},"interfaces/RetryParamsConfig.html":{},"interfaces/ServiceConfig.html":{}}}],["enum",{"_index":1111,"title":{},"body":{"interfaces/Duplexify.html":{},"interfaces/DuplexifyConstructor.html":{},"interfaces/DuplexifyOptions.html":{},"classes/StreamProxy.html":{}}}],["enumerations",{"_index":2259,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["enums",{"_index":978,"title":{},"body":{"classes/ClientStub.html":{},"interfaces/ClientStubOptions.html":{},"classes/GoogleProtoFilesRoot.html":{},"classes/GrpcClient.html":{},"interfaces/GrpcClientOptions.html":{},"interfaces/Metadata.html":{},"interfaces/MetadataValue.html":{}}}],["environment",{"_index":1995,"title":{},"body":{"changelog.html":{},"contributing.html":{}}}],["equals",{"_index":891,"title":{},"body":{"classes/ClientStub.html":{},"interfaces/ClientStubOptions.html":{},"classes/GoogleProtoFilesRoot.html":{},"classes/GrpcClient.html":{},"interfaces/GrpcClientOptions.html":{},"interfaces/Metadata.html":{},"interfaces/MetadataValue.html":{}}}],["equivalent",{"_index":1540,"title":{},"body":{"classes/OperationsClient.html":{},"classes/OperationsClientBuilder.html":{},"interfaces/OperationsClientOptions.html":{}}}],["err",{"_index":48,"title":{},"body":{"interfaces/APICaller.html":{},"interfaces/ApiCallerSettings.html":{},"classes/BundleApiCaller.html":{},"interfaces/CancellablePromise.html":{},"interfaces/GRPCCallOtherArgs.html":{},"interfaces/GRPCCallResult.html":{},"interfaces/GaxCall.html":{},"interfaces/GaxCallPromise.html":{},"interfaces/GaxCallStream.html":{},"interfaces/GetOperationCallback.html":{},"classes/LongrunningApiCaller.html":{},"classes/NormalApiCaller.html":{},"classes/OngoingCall.html":{},"classes/OngoingCallPromise.html":{},"classes/Operation.html":{},"classes/OperationsClient.html":{},"classes/OperationsClientBuilder.html":{},"interfaces/OperationsClientOptions.html":{},"classes/PageDescriptor.html":{},"classes/PagedApiCaller.html":{},"interfaces/RequestType.html":{},"interfaces/SimpleCallbackFunction.html":{},"classes/StreamingApiCaller.html":{},"interfaces/SubResponseInfo.html":{},"classes/Task.html":{},"interfaces/TaskCallback.html":{},"interfaces/TaskData.html":{},"interfaces/TaskElement.html":{}}}],["error",{"_index":237,"title":{},"body":{"interfaces/BackoffSettings.html":{},"interfaces/Bindings.html":{},"classes/BundleExecutor.html":{},"interfaces/BundleOptions.html":{},"interfaces/BundlingConfig.html":{},"interfaces/CallOptions.html":{},"classes/CallSettings.html":{},"interfaces/CancellablePromise.html":{},"interfaces/ClientConfig.html":{},"interfaces/GetOperationCallback.html":{},"classes/GoogleError.html":{},"interfaces/MethodConfig.html":{},"classes/OngoingCall.html":{},"classes/OngoingCallPromise.html":{},"classes/Operation.html":{},"classes/PageDescriptor.html":{},"classes/PagedApiCaller.html":{},"interfaces/ParseResult.html":{},"classes/PathTemplate.html":{},"classes/RetryOptions.html":{},"interfaces/RetryParamsConfig.html":{},"interfaces/Segment.html":{},"interfaces/ServiceConfig.html":{},"classes/StreamingApiCaller.html":{},"miscellaneous/functions.html":{}}}],["error('one",{"_index":399,"title":{},"body":{"interfaces/BackoffSettings.html":{},"interfaces/BundlingConfig.html":{},"interfaces/CallOptions.html":{},"classes/CallSettings.html":{},"interfaces/ClientConfig.html":{},"interfaces/MethodConfig.html":{},"classes/RetryOptions.html":{},"interfaces/RetryParamsConfig.html":{},"interfaces/ServiceConfig.html":{}}}],["error('the",{"_index":1074,"title":{},"body":{"classes/ClientStub.html":{},"interfaces/ClientStubOptions.html":{},"classes/GoogleProtoFilesRoot.html":{},"classes/GrpcClient.html":{},"interfaces/GrpcClientOptions.html":{},"interfaces/Metadata.html":{},"interfaces/MetadataValue.html":{}}}],["error(`${param",{"_index":392,"title":{},"body":{"interfaces/BackoffSettings.html":{},"interfaces/BundlingConfig.html":{},"interfaces/CallOptions.html":{},"classes/CallSettings.html":{},"interfaces/ClientConfig.html":{},"interfaces/MethodConfig.html":{},"classes/RetryOptions.html":{},"interfaces/RetryParamsConfig.html":{},"interfaces/ServiceConfig.html":{}}}],["error(errormessage",{"_index":935,"title":{},"body":{"classes/ClientStub.html":{},"interfaces/ClientStubOptions.html":{},"classes/GoogleProtoFilesRoot.html":{},"classes/GrpcClient.html":{},"interfaces/GrpcClientOptions.html":{},"interfaces/Metadata.html":{},"interfaces/MetadataValue.html":{}}}],["error(filename",{"_index":987,"title":{},"body":{"classes/ClientStub.html":{},"interfaces/ClientStubOptions.html":{},"classes/GoogleProtoFilesRoot.html":{},"classes/GrpcClient.html":{},"interfaces/GrpcClientOptions.html":{},"interfaces/Metadata.html":{},"interfaces/MetadataValue.html":{}}}],["error.code",{"_index":766,"title":{},"body":{"classes/BundleExecutor.html":{},"interfaces/BundleOptions.html":{},"interfaces/CancellablePromise.html":{},"interfaces/GetOperationCallback.html":{},"classes/OngoingCall.html":{},"classes/OngoingCallPromise.html":{},"classes/Operation.html":{}}}],["errormessage",{"_index":923,"title":{},"body":{"classes/ClientStub.html":{},"interfaces/ClientStubOptions.html":{},"classes/GoogleProtoFilesRoot.html":{},"classes/GrpcClient.html":{},"interfaces/GrpcClientOptions.html":{},"interfaces/Metadata.html":{},"interfaces/MetadataValue.html":{}}}],["errors",{"_index":158,"title":{},"body":{"interfaces/BackoffSettings.html":{},"interfaces/BundlingConfig.html":{},"interfaces/CallOptions.html":{},"classes/CallSettings.html":{},"interfaces/ClientConfig.html":{},"interfaces/MethodConfig.html":{},"classes/RetryOptions.html":{},"interfaces/RetryParamsConfig.html":{},"interfaces/ServiceConfig.html":{},"changelog.html":{}}}],["es6",{"_index":188,"title":{},"body":{"interfaces/BackoffSettings.html":{},"interfaces/BundlingConfig.html":{},"interfaces/CallOptions.html":{},"classes/CallSettings.html":{},"interfaces/CancellablePromise.html":{},"interfaces/ClientConfig.html":{},"classes/ClientStub.html":{},"interfaces/ClientStubOptions.html":{},"classes/GoogleProtoFilesRoot.html":{},"classes/GrpcClient.html":{},"interfaces/GrpcClientOptions.html":{},"interfaces/Metadata.html":{},"interfaces/MetadataValue.html":{},"interfaces/MethodConfig.html":{},"classes/OngoingCall.html":{},"classes/OngoingCallPromise.html":{},"classes/RetryOptions.html":{},"interfaces/RetryParamsConfig.html":{},"interfaces/ServiceConfig.html":{},"miscellaneous/functions.html":{}}}],["eslint",{"_index":2019,"title":{},"body":{"changelog.html":{}}}],["eslintignore",{"_index":2087,"title":{},"body":{"changelog.html":{}}}],["especially",{"_index":2306,"title":{},"body":{"miscellaneous/functions.html":{}}}],["etc",{"_index":1492,"title":{},"body":{"classes/OperationsClient.html":{},"classes/OperationsClientBuilder.html":{},"interfaces/OperationsClientOptions.html":{},"changelog.html":{},"index.html":{}}}],["even",{"_index":2405,"title":{},"body":{"license.html":{}}}],["event",{"_index":792,"title":{},"body":{"classes/BundleExecutor.html":{},"interfaces/BundleOptions.html":{},"interfaces/Duplexify.html":{},"interfaces/DuplexifyConstructor.html":{},"interfaces/DuplexifyOptions.html":{},"interfaces/GetOperationCallback.html":{},"classes/Operation.html":{},"classes/OperationsClient.html":{},"classes/OperationsClientBuilder.html":{},"interfaces/OperationsClientOptions.html":{},"classes/PageDescriptor.html":{},"classes/StreamDescriptor.html":{},"classes/StreamProxy.html":{},"license.html":{}}}],["eventemitter",{"_index":1212,"title":{},"body":{"interfaces/GetOperationCallback.html":{},"classes/Operation.html":{}}}],["events",{"_index":1136,"title":{},"body":{"interfaces/Duplexify.html":{},"interfaces/DuplexifyConstructor.html":{},"interfaces/DuplexifyOptions.html":{},"interfaces/GetOperationCallback.html":{},"classes/Operation.html":{},"classes/StreamProxy.html":{}}}],["eventstoforward",{"_index":1139,"title":{},"body":{"interfaces/Duplexify.html":{},"interfaces/DuplexifyConstructor.html":{},"interfaces/DuplexifyOptions.html":{},"classes/StreamProxy.html":{}}}],["eventstoforward.foreach(event",{"_index":1140,"title":{},"body":{"interfaces/Duplexify.html":{},"interfaces/DuplexifyConstructor.html":{},"interfaces/DuplexifyOptions.html":{},"classes/StreamProxy.html":{}}}],["example",{"_index":193,"title":{},"body":{"interfaces/BackoffSettings.html":{},"interfaces/BundlingConfig.html":{},"interfaces/CallOptions.html":{},"classes/CallSettings.html":{},"interfaces/ClientConfig.html":{},"interfaces/MethodConfig.html":{},"classes/OperationsClient.html":{},"classes/OperationsClientBuilder.html":{},"interfaces/OperationsClientOptions.html":{},"classes/RetryOptions.html":{},"interfaces/RetryParamsConfig.html":{},"interfaces/ServiceConfig.html":{},"changelog.html":{},"miscellaneous/functions.html":{}}}],["examples",{"_index":146,"title":{},"body":{"interfaces/BackoffSettings.html":{},"interfaces/BundlingConfig.html":{},"interfaces/CallOptions.html":{},"classes/CallSettings.html":{},"interfaces/ClientConfig.html":{},"interfaces/MethodConfig.html":{},"classes/RetryOptions.html":{},"interfaces/RetryParamsConfig.html":{},"interfaces/ServiceConfig.html":{}}}],["exceed",{"_index":256,"title":{},"body":{"interfaces/BackoffSettings.html":{},"interfaces/BundlingConfig.html":{},"interfaces/CallOptions.html":{},"classes/CallSettings.html":{},"interfaces/ClientConfig.html":{},"interfaces/MethodConfig.html":{},"classes/RetryOptions.html":{},"interfaces/RetryParamsConfig.html":{},"interfaces/ServiceConfig.html":{}}}],["exceeded",{"_index":1326,"title":{},"body":{"interfaces/GetOperationCallback.html":{},"classes/Operation.html":{}}}],["exceeds",{"_index":763,"title":{},"body":{"classes/BundleExecutor.html":{},"interfaces/BundleOptions.html":{}}}],["executing",{"_index":704,"title":{},"body":{"classes/BundleExecutor.html":{},"interfaces/BundleOptions.html":{}}}],["execution",{"_index":1791,"title":{},"body":{"interfaces/SubResponseInfo.html":{},"classes/Task.html":{},"interfaces/TaskCallback.html":{},"interfaces/TaskData.html":{},"interfaces/TaskElement.html":{}}}],["exemplary",{"_index":2388,"title":{},"body":{"license.html":{}}}],["existing",{"_index":971,"title":{},"body":{"classes/ClientStub.html":{},"interfaces/ClientStubOptions.html":{},"classes/GoogleProtoFilesRoot.html":{},"classes/GrpcClient.html":{},"interfaces/GrpcClientOptions.html":{},"interfaces/Metadata.html":{},"interfaces/MetadataValue.html":{},"contributing.html":{}}}],["existingbytes",{"_index":771,"title":{},"body":{"classes/BundleExecutor.html":{},"interfaces/BundleOptions.html":{}}}],["existingcount",{"_index":769,"title":{},"body":{"classes/BundleExecutor.html":{},"interfaces/BundleOptions.html":{}}}],["exists",{"_index":785,"title":{},"body":{"classes/BundleExecutor.html":{},"interfaces/BundleOptions.html":{},"classes/OperationsClient.html":{},"classes/OperationsClientBuilder.html":{},"interfaces/OperationsClientOptions.html":{}}}],["expects",{"_index":1148,"title":{},"body":{"interfaces/Duplexify.html":{},"interfaces/DuplexifyConstructor.html":{},"interfaces/DuplexifyOptions.html":{},"classes/StreamProxy.html":{}}}],["experience",{"_index":1451,"title":{},"body":{"classes/OperationsClient.html":{},"classes/OperationsClientBuilder.html":{},"interfaces/OperationsClientOptions.html":{}}}],["exponential",{"_index":111,"title":{},"body":{"interfaces/BackoffSettings.html":{},"interfaces/BundlingConfig.html":{},"interfaces/CallOptions.html":{},"classes/CallSettings.html":{},"interfaces/ClientConfig.html":{},"interfaces/MethodConfig.html":{},"classes/RetryOptions.html":{},"interfaces/RetryParamsConfig.html":{},"interfaces/ServiceConfig.html":{},"miscellaneous/functions.html":{}}}],["export",{"_index":73,"title":{},"body":{"interfaces/APICaller.html":{},"interfaces/AnyDecoder.html":{},"interfaces/ApiCallerSettings.html":{},"interfaces/BackoffSettings.html":{},"interfaces/Bindings.html":{},"classes/BundleApiCaller.html":{},"classes/BundleDescriptor.html":{},"classes/BundleExecutor.html":{},"interfaces/BundleOptions.html":{},"interfaces/BundlingConfig.html":{},"interfaces/CallOptions.html":{},"classes/CallSettings.html":{},"interfaces/CancellablePromise.html":{},"interfaces/ClientConfig.html":{},"classes/ClientStub.html":{},"interfaces/ClientStubOptions.html":{},"interfaces/Descriptor.html":{},"interfaces/Duplexify.html":{},"interfaces/DuplexifyConstructor.html":{},"interfaces/DuplexifyOptions.html":{},"interfaces/GRPCCallOtherArgs.html":{},"interfaces/GRPCCallResult.html":{},"interfaces/GaxCall.html":{},"interfaces/GaxCallPromise.html":{},"interfaces/GaxCallStream.html":{},"interfaces/GetOperationCallback.html":{},"classes/GoogleError.html":{},"classes/GoogleProtoFilesRoot.html":{},"classes/GrpcClient.html":{},"interfaces/GrpcClientOptions.html":{},"classes/LongRunningDescriptor.html":{},"classes/LongrunningApiCaller.html":{},"interfaces/Metadata.html":{},"interfaces/MetadataValue.html":{},"interfaces/MethodConfig.html":{},"classes/NormalApiCaller.html":{},"classes/OngoingCall.html":{},"classes/OngoingCallPromise.html":{},"classes/Operation.html":{},"classes/OperationsClient.html":{},"classes/OperationsClientBuilder.html":{},"interfaces/OperationsClientOptions.html":{},"classes/PageDescriptor.html":{},"classes/PagedApiCaller.html":{},"interfaces/ParseResult.html":{},"classes/PathTemplate.html":{},"interfaces/RequestType.html":{},"classes/RetryOptions.html":{},"interfaces/RetryParamsConfig.html":{},"interfaces/Segment.html":{},"interfaces/ServiceConfig.html":{},"interfaces/SimpleCallbackFunction.html":{},"classes/StreamDescriptor.html":{},"classes/StreamProxy.html":{},"classes/StreamingApiCaller.html":{},"interfaces/SubResponseInfo.html":{},"classes/Task.html":{},"interfaces/TaskCallback.html":{},"interfaces/TaskData.html":{},"interfaces/TaskElement.html":{},"changelog.html":{}}}],["express",{"_index":2375,"title":{},"body":{"license.html":{}}}],["extend",{"_index":1812,"title":{},"body":{"classes/Task.html":{},"changelog.html":{}}}],["extend(elements",{"_index":1826,"title":{},"body":{"classes/Task.html":{}}}],["extends",{"_index":814,"title":{},"body":{"interfaces/CancellablePromise.html":{},"classes/ClientStub.html":{},"interfaces/ClientStubOptions.html":{},"interfaces/Duplexify.html":{},"interfaces/DuplexifyConstructor.html":{},"interfaces/DuplexifyOptions.html":{},"interfaces/GetOperationCallback.html":{},"classes/GoogleError.html":{},"classes/GoogleProtoFilesRoot.html":{},"classes/GrpcClient.html":{},"interfaces/GrpcClientOptions.html":{},"interfaces/Metadata.html":{},"interfaces/MetadataValue.html":{},"classes/OngoingCall.html":{},"classes/OngoingCallPromise.html":{},"classes/Operation.html":{},"classes/StreamProxy.html":{},"interfaces/SubResponseInfo.html":{},"classes/Task.html":{},"interfaces/TaskCallback.html":{},"interfaces/TaskData.html":{},"interfaces/TaskElement.html":{}}}],["extension",{"_index":2091,"title":{},"body":{"changelog.html":{}}}],["extensions",{"_index":2314,"title":{},"body":{"index.html":{}}}],["external:\"google.longrunning.listoperationsresponse",{"_index":1618,"title":{},"body":{"classes/OperationsClient.html":{},"classes/OperationsClientBuilder.html":{},"interfaces/OperationsClientOptions.html":{}}}],["external:\"google.longrunning.operation",{"_index":1607,"title":{},"body":{"classes/OperationsClient.html":{},"classes/OperationsClientBuilder.html":{},"interfaces/OperationsClientOptions.html":{}}}],["extras",{"_index":522,"title":{},"body":{"interfaces/Bindings.html":{},"interfaces/ParseResult.html":{},"classes/PathTemplate.html":{},"interfaces/Segment.html":{}}}],["extras.binding",{"_index":556,"title":{},"body":{"interfaces/Bindings.html":{},"interfaces/ParseResult.html":{},"classes/PathTemplate.html":{},"interfaces/Segment.html":{}}}],["extras.end_binding",{"_index":586,"title":{},"body":{"interfaces/Bindings.html":{},"interfaces/ParseResult.html":{},"classes/PathTemplate.html":{},"interfaces/Segment.html":{}}}],["extras.finishparse(parser.parse(data",{"_index":538,"title":{},"body":{"interfaces/Bindings.html":{},"interfaces/ParseResult.html":{},"classes/PathTemplate.html":{},"interfaces/Segment.html":{}}}],["extras.terminal",{"_index":558,"title":{},"body":{"interfaces/Bindings.html":{},"interfaces/ParseResult.html":{},"classes/PathTemplate.html":{},"interfaces/Segment.html":{}}}],["fail",{"_index":23,"title":{},"body":{"interfaces/APICaller.html":{},"interfaces/ApiCallerSettings.html":{},"classes/BundleApiCaller.html":{},"interfaces/GetOperationCallback.html":{},"classes/LongrunningApiCaller.html":{},"classes/NormalApiCaller.html":{},"classes/Operation.html":{},"classes/PagedApiCaller.html":{},"classes/StreamingApiCaller.html":{},"changelog.html":{}}}],["fail(canceller",{"_index":46,"title":{},"body":{"interfaces/APICaller.html":{},"classes/BundleApiCaller.html":{},"classes/LongrunningApiCaller.html":{},"classes/NormalApiCaller.html":{},"classes/PagedApiCaller.html":{}}}],["fail(stream",{"_index":1732,"title":{},"body":{"classes/StreamingApiCaller.html":{}}}],["failed",{"_index":221,"title":{},"body":{"interfaces/BackoffSettings.html":{},"interfaces/BundlingConfig.html":{},"interfaces/CallOptions.html":{},"classes/CallSettings.html":{},"interfaces/ClientConfig.html":{},"interfaces/GetOperationCallback.html":{},"interfaces/MethodConfig.html":{},"classes/Operation.html":{},"classes/RetryOptions.html":{},"interfaces/RetryParamsConfig.html":{},"interfaces/ServiceConfig.html":{},"miscellaneous/functions.html":{}}}],["failure",{"_index":208,"title":{},"body":{"interfaces/BackoffSettings.html":{},"interfaces/BundlingConfig.html":{},"interfaces/CallOptions.html":{},"classes/CallSettings.html":{},"interfaces/ClientConfig.html":{},"interfaces/MethodConfig.html":{},"classes/RetryOptions.html":{},"interfaces/RetryParamsConfig.html":{},"interfaces/ServiceConfig.html":{},"miscellaneous/functions.html":{}}}],["false",{"_index":162,"title":{},"body":{"interfaces/BackoffSettings.html":{},"interfaces/Bindings.html":{},"classes/BundleDescriptor.html":{},"interfaces/BundlingConfig.html":{},"interfaces/CallOptions.html":{},"classes/CallSettings.html":{},"interfaces/CancellablePromise.html":{},"interfaces/ClientConfig.html":{},"classes/ClientStub.html":{},"interfaces/ClientStubOptions.html":{},"interfaces/Duplexify.html":{},"interfaces/DuplexifyConstructor.html":{},"interfaces/DuplexifyOptions.html":{},"interfaces/GetOperationCallback.html":{},"classes/GoogleProtoFilesRoot.html":{},"classes/GrpcClient.html":{},"interfaces/GrpcClientOptions.html":{},"interfaces/Metadata.html":{},"interfaces/MetadataValue.html":{},"interfaces/MethodConfig.html":{},"classes/OngoingCall.html":{},"classes/OngoingCallPromise.html":{},"classes/Operation.html":{},"classes/OperationsClient.html":{},"classes/OperationsClientBuilder.html":{},"interfaces/OperationsClientOptions.html":{},"classes/PageDescriptor.html":{},"interfaces/ParseResult.html":{},"classes/PathTemplate.html":{},"classes/RetryOptions.html":{},"interfaces/RetryParamsConfig.html":{},"interfaces/Segment.html":{},"interfaces/ServiceConfig.html":{},"classes/StreamProxy.html":{},"interfaces/SubResponseInfo.html":{},"classes/Task.html":{},"interfaces/TaskCallback.html":{},"interfaces/TaskData.html":{},"interfaces/TaskElement.html":{}}}],["feat",{"_index":1872,"title":{},"body":{"changelog.html":{}}}],["features",{"_index":1859,"title":{},"body":{"changelog.html":{}}}],["fetches",{"_index":1542,"title":{},"body":{"classes/OperationsClient.html":{},"classes/OperationsClientBuilder.html":{},"interfaces/OperationsClientOptions.html":{}}}],["fetchnextpagetoken",{"_index":1685,"title":{},"body":{"classes/PagedApiCaller.html":{}}}],["field",{"_index":249,"title":{},"body":{"interfaces/BackoffSettings.html":{},"classes/BundleDescriptor.html":{},"classes/BundleExecutor.html":{},"interfaces/BundleOptions.html":{},"interfaces/BundlingConfig.html":{},"interfaces/CallOptions.html":{},"classes/CallSettings.html":{},"interfaces/ClientConfig.html":{},"classes/ClientStub.html":{},"interfaces/ClientStubOptions.html":{},"classes/GoogleProtoFilesRoot.html":{},"classes/GrpcClient.html":{},"interfaces/GrpcClientOptions.html":{},"interfaces/Metadata.html":{},"interfaces/MetadataValue.html":{},"interfaces/MethodConfig.html":{},"classes/RetryOptions.html":{},"interfaces/RetryParamsConfig.html":{},"interfaces/ServiceConfig.html":{},"interfaces/SubResponseInfo.html":{},"classes/Task.html":{},"interfaces/TaskCallback.html":{},"interfaces/TaskData.html":{},"interfaces/TaskElement.html":{},"changelog.html":{},"miscellaneous/functions.html":{}}}],["fields",{"_index":640,"title":{},"body":{"classes/BundleDescriptor.html":{},"classes/BundleExecutor.html":{},"interfaces/BundleOptions.html":{},"interfaces/SubResponseInfo.html":{},"classes/Task.html":{},"interfaces/TaskCallback.html":{},"interfaces/TaskData.html":{},"interfaces/TaskElement.html":{}}}],["file",{"_index":5,"title":{},"body":{"interfaces/APICaller.html":{},"interfaces/AnyDecoder.html":{},"interfaces/ApiCallerSettings.html":{},"interfaces/BackoffSettings.html":{},"interfaces/Bindings.html":{},"classes/BundleApiCaller.html":{},"classes/BundleDescriptor.html":{},"classes/BundleExecutor.html":{},"interfaces/BundleOptions.html":{},"interfaces/BundlingConfig.html":{},"interfaces/CallOptions.html":{},"classes/CallSettings.html":{},"interfaces/CancellablePromise.html":{},"interfaces/ClientConfig.html":{},"classes/ClientStub.html":{},"interfaces/ClientStubOptions.html":{},"interfaces/Descriptor.html":{},"interfaces/Duplexify.html":{},"interfaces/DuplexifyConstructor.html":{},"interfaces/DuplexifyOptions.html":{},"interfaces/GRPCCallOtherArgs.html":{},"interfaces/GRPCCallResult.html":{},"interfaces/GaxCall.html":{},"interfaces/GaxCallPromise.html":{},"interfaces/GaxCallStream.html":{},"interfaces/GetOperationCallback.html":{},"classes/GoogleError.html":{},"classes/GoogleProtoFilesRoot.html":{},"classes/GrpcClient.html":{},"interfaces/GrpcClientOptions.html":{},"classes/LongRunningDescriptor.html":{},"classes/LongrunningApiCaller.html":{},"interfaces/Metadata.html":{},"interfaces/MetadataValue.html":{},"interfaces/MethodConfig.html":{},"classes/NormalApiCaller.html":{},"classes/OngoingCall.html":{},"classes/OngoingCallPromise.html":{},"classes/Operation.html":{},"classes/OperationsClient.html":{},"classes/OperationsClientBuilder.html":{},"interfaces/OperationsClientOptions.html":{},"classes/PageDescriptor.html":{},"classes/PagedApiCaller.html":{},"interfaces/ParseResult.html":{},"classes/PathTemplate.html":{},"interfaces/RequestType.html":{},"classes/RetryOptions.html":{},"interfaces/RetryParamsConfig.html":{},"interfaces/Segment.html":{},"interfaces/ServiceConfig.html":{},"interfaces/SimpleCallbackFunction.html":{},"classes/StreamDescriptor.html":{},"classes/StreamProxy.html":{},"classes/StreamingApiCaller.html":{},"interfaces/SubResponseInfo.html":{},"classes/Task.html":{},"interfaces/TaskCallback.html":{},"interfaces/TaskData.html":{},"interfaces/TaskElement.html":{},"miscellaneous/functions.html":{}}}],["filename",{"_index":951,"title":{},"body":{"classes/ClientStub.html":{},"interfaces/ClientStubOptions.html":{},"classes/GoogleProtoFilesRoot.html":{},"classes/GrpcClient.html":{},"interfaces/GrpcClientOptions.html":{},"interfaces/Metadata.html":{},"interfaces/MetadataValue.html":{}}}],["files",{"_index":1877,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["fill",{"_index":2213,"title":{},"body":{"contributing.html":{}}}],["filter",{"_index":1521,"title":{},"body":{"classes/OperationsClient.html":{},"classes/OperationsClientBuilder.html":{},"interfaces/OperationsClientOptions.html":{}}}],["filter(f",{"_index":883,"title":{},"body":{"classes/ClientStub.html":{},"interfaces/ClientStubOptions.html":{},"classes/GoogleProtoFilesRoot.html":{},"classes/GrpcClient.html":{},"interfaces/GrpcClientOptions.html":{},"interfaces/Metadata.html":{},"interfaces/MetadataValue.html":{},"miscellaneous/variables.html":{}}}],["finish",{"_index":1056,"title":{},"body":{"classes/ClientStub.html":{},"interfaces/ClientStubOptions.html":{},"classes/GoogleProtoFilesRoot.html":{},"classes/GrpcClient.html":{},"interfaces/GrpcClientOptions.html":{},"interfaces/Metadata.html":{},"interfaces/MetadataValue.html":{}}}],["finished",{"_index":718,"title":{},"body":{"classes/BundleExecutor.html":{},"interfaces/BundleOptions.html":{},"interfaces/GetOperationCallback.html":{},"classes/Operation.html":{}}}],["finishes",{"_index":825,"title":{},"body":{"interfaces/CancellablePromise.html":{},"classes/OngoingCall.html":{},"classes/OngoingCallPromise.html":{},"classes/OperationsClient.html":{},"classes/OperationsClientBuilder.html":{},"interfaces/OperationsClientOptions.html":{}}}],["fires",{"_index":686,"title":{},"body":{"classes/BundleExecutor.html":{},"interfaces/BundleOptions.html":{}}}],["first",{"_index":220,"title":{},"body":{"interfaces/BackoffSettings.html":{},"interfaces/BundlingConfig.html":{},"interfaces/CallOptions.html":{},"classes/CallSettings.html":{},"interfaces/ClientConfig.html":{},"interfaces/GRPCCallOtherArgs.html":{},"interfaces/GRPCCallResult.html":{},"interfaces/GaxCall.html":{},"interfaces/GaxCallPromise.html":{},"interfaces/GaxCallStream.html":{},"interfaces/GetOperationCallback.html":{},"interfaces/MethodConfig.html":{},"classes/Operation.html":{},"classes/OperationsClient.html":{},"classes/OperationsClientBuilder.html":{},"interfaces/OperationsClientOptions.html":{},"interfaces/RequestType.html":{},"classes/RetryOptions.html":{},"interfaces/RetryParamsConfig.html":{},"interfaces/ServiceConfig.html":{},"interfaces/SimpleCallbackFunction.html":{},"miscellaneous/functions.html":{}}}],["fitness",{"_index":2381,"title":{},"body":{"license.html":{}}}],["five",{"_index":1193,"title":{},"body":{"interfaces/GRPCCallOtherArgs.html":{},"interfaces/GRPCCallResult.html":{},"interfaces/GaxCall.html":{},"interfaces/GaxCallPromise.html":{},"interfaces/GaxCallStream.html":{},"interfaces/RequestType.html":{},"interfaces/SimpleCallbackFunction.html":{}}}],["fix",{"_index":1884,"title":{},"body":{"changelog.html":{},"contributing.html":{}}}],["fix(build",{"_index":2059,"title":{},"body":{"changelog.html":{}}}],["fix(deps",{"_index":1891,"title":{},"body":{"changelog.html":{}}}],["fix(ts",{"_index":1912,"title":{},"body":{"changelog.html":{}}}],["fixes",{"_index":1843,"title":{},"body":{"changelog.html":{}}}],["fixing",{"_index":2185,"title":{},"body":{"changelog.html":{}}}],["flattening",{"_index":299,"title":{},"body":{"interfaces/BackoffSettings.html":{},"interfaces/BundlingConfig.html":{},"interfaces/CallOptions.html":{},"classes/CallSettings.html":{},"interfaces/ClientConfig.html":{},"interfaces/MethodConfig.html":{},"classes/RetryOptions.html":{},"interfaces/RetryParamsConfig.html":{},"interfaces/ServiceConfig.html":{}}}],["folder",{"_index":2121,"title":{},"body":{"changelog.html":{}}}],["follow",{"_index":2227,"title":{},"body":{"contributing.html":{}}}],["following",{"_index":1192,"title":{},"body":{"interfaces/GRPCCallOtherArgs.html":{},"interfaces/GRPCCallResult.html":{},"interfaces/GaxCall.html":{},"interfaces/GaxCallPromise.html":{},"interfaces/GaxCallStream.html":{},"classes/OperationsClient.html":{},"classes/OperationsClientBuilder.html":{},"interfaces/OperationsClientOptions.html":{},"interfaces/RequestType.html":{},"interfaces/SimpleCallbackFunction.html":{},"license.html":{}}}],["forever",{"_index":1342,"title":{},"body":{"interfaces/GetOperationCallback.html":{},"classes/Operation.html":{},"changelog.html":{}}}],["forin",{"_index":343,"title":{},"body":{"interfaces/BackoffSettings.html":{},"interfaces/BundlingConfig.html":{},"interfaces/CallOptions.html":{},"classes/CallSettings.html":{},"interfaces/ClientConfig.html":{},"classes/ClientStub.html":{},"interfaces/ClientStubOptions.html":{},"classes/GoogleProtoFilesRoot.html":{},"classes/GrpcClient.html":{},"interfaces/GrpcClientOptions.html":{},"interfaces/Metadata.html":{},"interfaces/MetadataValue.html":{},"interfaces/MethodConfig.html":{},"classes/RetryOptions.html":{},"interfaces/RetryParamsConfig.html":{},"interfaces/ServiceConfig.html":{}}}],["fork",{"_index":2240,"title":{},"body":{"contributing.html":{}}}],["form",{"_index":464,"title":{},"body":{"interfaces/BackoffSettings.html":{},"interfaces/BundlingConfig.html":{},"interfaces/CallOptions.html":{},"classes/CallSettings.html":{},"interfaces/ClientConfig.html":{},"interfaces/MethodConfig.html":{},"classes/RetryOptions.html":{},"interfaces/RetryParamsConfig.html":{},"interfaces/ServiceConfig.html":{},"miscellaneous/functions.html":{},"license.html":{}}}],["format",{"_index":594,"title":{},"body":{"interfaces/Bindings.html":{},"classes/OperationsClient.html":{},"classes/OperationsClientBuilder.html":{},"interfaces/OperationsClientOptions.html":{},"interfaces/ParseResult.html":{},"classes/PathTemplate.html":{},"interfaces/Segment.html":{},"changelog.html":{},"miscellaneous/functions.html":{}}}],["formatsegments",{"_index":2265,"title":{},"body":{"miscellaneous/functions.html":{}}}],["formatsegments(out",{"_index":588,"title":{},"body":{"interfaces/Bindings.html":{},"interfaces/ParseResult.html":{},"classes/PathTemplate.html":{},"interfaces/Segment.html":{}}}],["formatsegments(segments",{"_index":595,"title":{},"body":{"interfaces/Bindings.html":{},"interfaces/ParseResult.html":{},"classes/PathTemplate.html":{},"interfaces/Segment.html":{},"miscellaneous/functions.html":{}}}],["formatsegments(this.segments",{"_index":591,"title":{},"body":{"interfaces/Bindings.html":{},"interfaces/ParseResult.html":{},"classes/PathTemplate.html":{},"interfaces/Segment.html":{}}}],["forms",{"_index":2352,"title":{},"body":{"license.html":{}}}],["forward",{"_index":1135,"title":{},"body":{"interfaces/Duplexify.html":{},"interfaces/DuplexifyConstructor.html":{},"interfaces/DuplexifyOptions.html":{},"classes/StreamProxy.html":{}}}],["forwardevents",{"_index":1721,"title":{},"body":{"classes/StreamProxy.html":{}}}],["forwardevents(stream",{"_index":1138,"title":{},"body":{"interfaces/Duplexify.html":{},"interfaces/DuplexifyConstructor.html":{},"interfaces/DuplexifyOptions.html":{},"classes/StreamProxy.html":{}}}],["found",{"_index":493,"title":{},"body":{"interfaces/BackoffSettings.html":{},"interfaces/BundlingConfig.html":{},"interfaces/CallOptions.html":{},"classes/CallSettings.html":{},"interfaces/ClientConfig.html":{},"classes/ClientStub.html":{},"interfaces/ClientStubOptions.html":{},"classes/GoogleProtoFilesRoot.html":{},"classes/GrpcClient.html":{},"interfaces/GrpcClientOptions.html":{},"interfaces/Metadata.html":{},"interfaces/MetadataValue.html":{},"interfaces/MethodConfig.html":{},"classes/RetryOptions.html":{},"interfaces/RetryParamsConfig.html":{},"interfaces/ServiceConfig.html":{}}}],["fourth",{"_index":1616,"title":{},"body":{"classes/OperationsClient.html":{},"classes/OperationsClientBuilder.html":{},"interfaces/OperationsClientOptions.html":{}}}],["fresh",{"_index":258,"title":{},"body":{"interfaces/BackoffSettings.html":{},"interfaces/BundlingConfig.html":{},"interfaces/CallOptions.html":{},"classes/CallSettings.html":{},"interfaces/ClientConfig.html":{},"interfaces/MethodConfig.html":{},"classes/RetryOptions.html":{},"interfaces/RetryParamsConfig.html":{},"interfaces/ServiceConfig.html":{}}}],["fromparams",{"_index":2267,"title":{},"body":{"miscellaneous/functions.html":{}}}],["fromparams(params",{"_index":2300,"title":{},"body":{"miscellaneous/functions.html":{}}}],["fs",{"_index":861,"title":{},"body":{"classes/ClientStub.html":{},"interfaces/ClientStubOptions.html":{},"classes/GoogleProtoFilesRoot.html":{},"classes/GrpcClient.html":{},"interfaces/GrpcClientOptions.html":{},"interfaces/Metadata.html":{},"interfaces/MetadataValue.html":{}}}],["fs.existssync(includepath",{"_index":1073,"title":{},"body":{"classes/ClientStub.html":{},"interfaces/ClientStubOptions.html":{},"classes/GoogleProtoFilesRoot.html":{},"classes/GrpcClient.html":{},"interfaces/GrpcClientOptions.html":{},"interfaces/Metadata.html":{},"interfaces/MetadataValue.html":{}}}],["fs.existssync(path.join(current",{"_index":1078,"title":{},"body":{"classes/ClientStub.html":{},"interfaces/ClientStubOptions.html":{},"classes/GoogleProtoFilesRoot.html":{},"classes/GrpcClient.html":{},"interfaces/GrpcClientOptions.html":{},"interfaces/Metadata.html":{},"interfaces/MetadataValue.html":{}}}],["fs.existssync(path.join(protopath",{"_index":983,"title":{},"body":{"classes/ClientStub.html":{},"interfaces/ClientStubOptions.html":{},"classes/GoogleProtoFilesRoot.html":{},"classes/GrpcClient.html":{},"interfaces/GrpcClientOptions.html":{},"interfaces/Metadata.html":{},"interfaces/MetadataValue.html":{}}}],["fulfill",{"_index":834,"title":{},"body":{"interfaces/CancellablePromise.html":{},"classes/OngoingCall.html":{},"classes/OngoingCallPromise.html":{}}}],["fullly",{"_index":1016,"title":{},"body":{"classes/ClientStub.html":{},"interfaces/ClientStubOptions.html":{},"classes/GoogleProtoFilesRoot.html":{},"classes/GrpcClient.html":{},"interfaces/GrpcClientOptions.html":{},"interfaces/Metadata.html":{},"interfaces/MetadataValue.html":{}}}],["fully",{"_index":483,"title":{},"body":{"interfaces/BackoffSettings.html":{},"interfaces/Bindings.html":{},"interfaces/BundlingConfig.html":{},"interfaces/CallOptions.html":{},"classes/CallSettings.html":{},"interfaces/ClientConfig.html":{},"classes/ClientStub.html":{},"interfaces/ClientStubOptions.html":{},"classes/GoogleProtoFilesRoot.html":{},"classes/GrpcClient.html":{},"interfaces/GrpcClientOptions.html":{},"interfaces/Metadata.html":{},"interfaces/MetadataValue.html":{},"interfaces/MethodConfig.html":{},"interfaces/ParseResult.html":{},"classes/PathTemplate.html":{},"classes/RetryOptions.html":{},"interfaces/RetryParamsConfig.html":{},"interfaces/Segment.html":{},"interfaces/ServiceConfig.html":{},"miscellaneous/functions.html":{}}}],["func",{"_index":63,"title":{},"body":{"interfaces/APICaller.html":{},"classes/BundleApiCaller.html":{},"interfaces/CancellablePromise.html":{},"classes/LongrunningApiCaller.html":{},"classes/NormalApiCaller.html":{},"classes/OngoingCall.html":{},"classes/OngoingCallPromise.html":{},"classes/PagedApiCaller.html":{},"classes/StreamingApiCaller.html":{},"miscellaneous/functions.html":{}}}],["func(argument",{"_index":836,"title":{},"body":{"interfaces/CancellablePromise.html":{},"classes/OngoingCall.html":{},"classes/OngoingCallPromise.html":{}}}],["function",{"_index":76,"title":{},"body":{"interfaces/APICaller.html":{},"interfaces/ApiCallerSettings.html":{},"interfaces/BackoffSettings.html":{},"interfaces/Bindings.html":{},"classes/BundleDescriptor.html":{},"classes/BundleExecutor.html":{},"interfaces/BundleOptions.html":{},"interfaces/BundlingConfig.html":{},"interfaces/CallOptions.html":{},"classes/CallSettings.html":{},"interfaces/CancellablePromise.html":{},"interfaces/ClientConfig.html":{},"classes/ClientStub.html":{},"interfaces/ClientStubOptions.html":{},"interfaces/Duplexify.html":{},"interfaces/DuplexifyConstructor.html":{},"interfaces/DuplexifyOptions.html":{},"interfaces/GRPCCallOtherArgs.html":{},"interfaces/GetOperationCallback.html":{},"classes/GoogleProtoFilesRoot.html":{},"classes/GrpcClient.html":{},"interfaces/GrpcClientOptions.html":{},"interfaces/Metadata.html":{},"interfaces/MetadataValue.html":{},"interfaces/MethodConfig.html":{},"classes/OngoingCall.html":{},"classes/OngoingCallPromise.html":{},"classes/Operation.html":{},"classes/OperationsClient.html":{},"classes/OperationsClientBuilder.html":{},"interfaces/OperationsClientOptions.html":{},"classes/PageDescriptor.html":{},"classes/PagedApiCaller.html":{},"interfaces/ParseResult.html":{},"classes/PathTemplate.html":{},"classes/RetryOptions.html":{},"interfaces/RetryParamsConfig.html":{},"interfaces/Segment.html":{},"interfaces/ServiceConfig.html":{},"classes/StreamProxy.html":{},"interfaces/SubResponseInfo.html":{},"classes/Task.html":{},"interfaces/TaskCallback.html":{},"interfaces/TaskData.html":{},"interfaces/TaskElement.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["function(?error",{"_index":1605,"title":{},"body":{"classes/OperationsClient.html":{},"classes/OperationsClientBuilder.html":{},"interfaces/OperationsClientOptions.html":{}}}],["function(err",{"_index":200,"title":{},"body":{"interfaces/BackoffSettings.html":{},"interfaces/BundlingConfig.html":{},"interfaces/CallOptions.html":{},"classes/CallSettings.html":{},"interfaces/ClientConfig.html":{},"interfaces/MethodConfig.html":{},"classes/RetryOptions.html":{},"interfaces/RetryParamsConfig.html":{},"interfaces/ServiceConfig.html":{}}}],["function(error",{"_index":1599,"title":{},"body":{"classes/OperationsClient.html":{},"classes/OperationsClientBuilder.html":{},"interfaces/OperationsClientOptions.html":{}}}],["function(object):number",{"_index":1051,"title":{},"body":{"classes/ClientStub.html":{},"interfaces/ClientStubOptions.html":{},"classes/GoogleProtoFilesRoot.html":{},"classes/GrpcClient.html":{},"interfaces/GrpcClientOptions.html":{},"interfaces/Metadata.html":{},"interfaces/MetadataValue.html":{}}}],["functionality",{"_index":2332,"title":{},"body":{"index.html":{}}}],["functions",{"_index":705,"title":{"miscellaneous/functions.html":{}},"body":{"classes/BundleExecutor.html":{},"interfaces/BundleOptions.html":{},"interfaces/GRPCCallOtherArgs.html":{},"interfaces/GRPCCallResult.html":{},"interfaces/GaxCall.html":{},"interfaces/GaxCallPromise.html":{},"interfaces/GaxCallStream.html":{},"interfaces/RequestType.html":{},"interfaces/SimpleCallbackFunction.html":{},"miscellaneous/functions.html":{}}}],["further",{"_index":1124,"title":{},"body":{"interfaces/Duplexify.html":{},"interfaces/DuplexifyConstructor.html":{},"interfaces/DuplexifyOptions.html":{},"classes/StreamProxy.html":{}}}],["gapic",{"_index":2137,"title":{},"body":{"changelog.html":{}}}],["gapic/0.7.1",{"_index":1562,"title":{},"body":{"classes/OperationsClient.html":{},"classes/OperationsClientBuilder.html":{},"interfaces/OperationsClientOptions.html":{},"miscellaneous/variables.html":{}}}],["gax",{"_index":69,"title":{},"body":{"interfaces/APICaller.html":{},"interfaces/AnyDecoder.html":{},"interfaces/ApiCallerSettings.html":{},"interfaces/BackoffSettings.html":{},"classes/BundleApiCaller.html":{},"classes/BundleDescriptor.html":{},"interfaces/BundlingConfig.html":{},"interfaces/CallOptions.html":{},"classes/CallSettings.html":{},"interfaces/ClientConfig.html":{},"classes/ClientStub.html":{},"interfaces/ClientStubOptions.html":{},"interfaces/Descriptor.html":{},"interfaces/GRPCCallOtherArgs.html":{},"interfaces/GRPCCallResult.html":{},"interfaces/GaxCall.html":{},"interfaces/GaxCallPromise.html":{},"interfaces/GaxCallStream.html":{},"interfaces/GetOperationCallback.html":{},"classes/GoogleProtoFilesRoot.html":{},"classes/GrpcClient.html":{},"interfaces/GrpcClientOptions.html":{},"classes/LongRunningDescriptor.html":{},"classes/LongrunningApiCaller.html":{},"interfaces/Metadata.html":{},"interfaces/MetadataValue.html":{},"interfaces/MethodConfig.html":{},"classes/Operation.html":{},"classes/OperationsClient.html":{},"classes/OperationsClientBuilder.html":{},"interfaces/OperationsClientOptions.html":{},"classes/PageDescriptor.html":{},"classes/PagedApiCaller.html":{},"interfaces/RequestType.html":{},"classes/RetryOptions.html":{},"interfaces/RetryParamsConfig.html":{},"interfaces/ServiceConfig.html":{},"interfaces/SimpleCallbackFunction.html":{},"classes/StreamDescriptor.html":{},"changelog.html":{},"index.html":{}}}],["gax.calloptions",{"_index":1493,"title":{},"body":{"classes/OperationsClient.html":{}}}],["gax.calloptions]{@link",{"_index":1602,"title":{},"body":{"classes/OperationsClient.html":{},"classes/OperationsClientBuilder.html":{},"interfaces/OperationsClientOptions.html":{}}}],["gax.callsettings",{"_index":1538,"title":{},"body":{"classes/OperationsClient.html":{},"classes/OperationsClientBuilder.html":{},"interfaces/OperationsClientOptions.html":{}}}],["gax.clientconfig",{"_index":1019,"title":{},"body":{"classes/ClientStub.html":{},"interfaces/ClientStubOptions.html":{},"classes/GoogleProtoFilesRoot.html":{},"classes/GrpcClient.html":{},"interfaces/GrpcClientOptions.html":{},"interfaces/Metadata.html":{},"interfaces/MetadataValue.html":{},"classes/OperationsClient.html":{},"classes/OperationsClientBuilder.html":{},"interfaces/OperationsClientOptions.html":{}}}],["gax.constructsettings",{"_index":1020,"title":{},"body":{"classes/ClientStub.html":{},"interfaces/ClientStubOptions.html":{},"classes/GoogleProtoFilesRoot.html":{},"classes/GrpcClient.html":{},"interfaces/GrpcClientOptions.html":{},"interfaces/Metadata.html":{},"interfaces/MetadataValue.html":{},"classes/OperationsClient.html":{},"classes/OperationsClientBuilder.html":{},"interfaces/OperationsClientOptions.html":{}}}],["gaxcall",{"_index":1206,"title":{"interfaces/GaxCall.html":{}},"body":{"interfaces/GRPCCallOtherArgs.html":{},"interfaces/GRPCCallResult.html":{},"interfaces/GaxCall.html":{},"interfaces/GaxCallPromise.html":{},"interfaces/GaxCallStream.html":{},"classes/OperationsClient.html":{},"classes/OperationsClientBuilder.html":{},"interfaces/OperationsClientOptions.html":{},"classes/PageDescriptor.html":{},"classes/PagedApiCaller.html":{},"interfaces/RequestType.html":{},"interfaces/SimpleCallbackFunction.html":{},"miscellaneous/functions.html":{}}}],["gaxcallpromise",{"_index":1204,"title":{"interfaces/GaxCallPromise.html":{}},"body":{"interfaces/GRPCCallOtherArgs.html":{},"interfaces/GRPCCallResult.html":{},"interfaces/GaxCall.html":{},"interfaces/GaxCallPromise.html":{},"interfaces/GaxCallStream.html":{},"interfaces/GetOperationCallback.html":{},"classes/Operation.html":{},"interfaces/RequestType.html":{},"interfaces/SimpleCallbackFunction.html":{}}}],["gaxcallresult",{"_index":1203,"title":{},"body":{"interfaces/GRPCCallOtherArgs.html":{},"interfaces/GRPCCallResult.html":{},"interfaces/GaxCall.html":{},"interfaces/GaxCallPromise.html":{},"interfaces/GaxCallStream.html":{},"interfaces/RequestType.html":{},"interfaces/SimpleCallbackFunction.html":{},"miscellaneous/typealiases.html":{}}}],["gaxcallstream",{"_index":1205,"title":{"interfaces/GaxCallStream.html":{}},"body":{"interfaces/GRPCCallOtherArgs.html":{},"interfaces/GRPCCallResult.html":{},"interfaces/GaxCall.html":{},"interfaces/GaxCallPromise.html":{},"interfaces/GaxCallStream.html":{},"interfaces/RequestType.html":{},"interfaces/SimpleCallbackFunction.html":{}}}],["gaxgrpc",{"_index":1467,"title":{},"body":{"classes/OperationsClient.html":{},"classes/OperationsClientBuilder.html":{},"interfaces/OperationsClientOptions.html":{}}}],["gaxgrpc.auth",{"_index":1587,"title":{},"body":{"classes/OperationsClient.html":{},"classes/OperationsClientBuilder.html":{},"interfaces/OperationsClientOptions.html":{}}}],["gaxgrpc.constructsettings",{"_index":1583,"title":{},"body":{"classes/OperationsClient.html":{},"classes/OperationsClientBuilder.html":{},"interfaces/OperationsClientOptions.html":{}}}],["gaxgrpc.createstub",{"_index":1589,"title":{},"body":{"classes/OperationsClient.html":{},"classes/OperationsClientBuilder.html":{},"interfaces/OperationsClientOptions.html":{}}}],["gaxgrpc.grpcversion",{"_index":1582,"title":{},"body":{"classes/OperationsClient.html":{},"classes/OperationsClientBuilder.html":{},"interfaces/OperationsClientOptions.html":{}}}],["gaxgrpc.loadproto",{"_index":1631,"title":{},"body":{"classes/OperationsClient.html":{},"classes/OperationsClientBuilder.html":{},"interfaces/OperationsClientOptions.html":{}}}],["gaxpromise",{"_index":840,"title":{},"body":{"interfaces/CancellablePromise.html":{},"classes/OngoingCall.html":{},"classes/OngoingCallPromise.html":{}}}],["gcp",{"_index":2017,"title":{},"body":{"changelog.html":{}}}],["generally",{"_index":2308,"title":{},"body":{"miscellaneous/functions.html":{}}}],["generated",{"_index":1047,"title":{},"body":{"classes/ClientStub.html":{},"interfaces/ClientStubOptions.html":{},"classes/GoogleProtoFilesRoot.html":{},"classes/GrpcClient.html":{},"interfaces/GrpcClientOptions.html":{},"interfaces/Metadata.html":{},"interfaces/MetadataValue.html":{},"changelog.html":{},"index.html":{}}}],["generator",{"_index":300,"title":{},"body":{"interfaces/BackoffSettings.html":{},"interfaces/BundlingConfig.html":{},"interfaces/CallOptions.html":{},"classes/CallSettings.html":{},"interfaces/ClientConfig.html":{},"interfaces/MethodConfig.html":{},"classes/RetryOptions.html":{},"interfaces/RetryParamsConfig.html":{},"interfaces/ServiceConfig.html":{}}}],["getapicaller",{"_index":631,"title":{},"body":{"classes/BundleDescriptor.html":{},"interfaces/Descriptor.html":{},"classes/LongRunningDescriptor.html":{},"classes/PageDescriptor.html":{},"classes/StreamDescriptor.html":{}}}],["getapicaller(settings",{"_index":107,"title":{},"body":{"interfaces/AnyDecoder.html":{},"classes/BundleDescriptor.html":{},"interfaces/Descriptor.html":{},"classes/LongRunningDescriptor.html":{},"classes/PageDescriptor.html":{},"classes/StreamDescriptor.html":{}}}],["getbytelength(obj",{"_index":1057,"title":{},"body":{"classes/ClientStub.html":{},"interfaces/ClientStubOptions.html":{},"classes/GoogleProtoFilesRoot.html":{},"classes/GrpcClient.html":{},"interfaces/GrpcClientOptions.html":{},"interfaces/Metadata.html":{},"interfaces/MetadataValue.html":{}}}],["getelementcount",{"_index":1801,"title":{},"body":{"interfaces/SubResponseInfo.html":{},"classes/Task.html":{},"interfaces/TaskCallback.html":{},"interfaces/TaskData.html":{},"interfaces/TaskElement.html":{}}}],["getoperation",{"_index":1272,"title":{},"body":{"interfaces/GetOperationCallback.html":{},"classes/Operation.html":{},"classes/OperationsClient.html":{},"classes/OperationsClientBuilder.html":{},"interfaces/OperationsClientOptions.html":{}}}],["getoperation(callback",{"_index":1273,"title":{},"body":{"interfaces/GetOperationCallback.html":{},"classes/Operation.html":{}}}],["getoperation(request",{"_index":1503,"title":{},"body":{"classes/OperationsClient.html":{},"classes/OperationsClientBuilder.html":{},"interfaces/OperationsClientOptions.html":{}}}],["getoperationcallback",{"_index":1210,"title":{"interfaces/GetOperationCallback.html":{}},"body":{"interfaces/GetOperationCallback.html":{},"classes/Operation.html":{}}}],["getprojectid",{"_index":1460,"title":{},"body":{"classes/OperationsClient.html":{},"classes/OperationsClientBuilder.html":{},"interfaces/OperationsClientOptions.html":{}}}],["getprojectid(callback",{"_index":1514,"title":{},"body":{"classes/OperationsClient.html":{},"classes/OperationsClientBuilder.html":{},"interfaces/OperationsClientOptions.html":{}}}],["getrequestbytesize",{"_index":1813,"title":{},"body":{"classes/Task.html":{}}}],["gets",{"_index":1505,"title":{},"body":{"classes/OperationsClient.html":{},"classes/OperationsClientBuilder.html":{},"interfaces/OperationsClientOptions.html":{}}}],["getsegments",{"_index":1707,"title":{},"body":{"classes/PathTemplate.html":{}}}],["getsize",{"_index":1705,"title":{},"body":{"classes/PathTemplate.html":{}}}],["getting",{"_index":1834,"title":{"changelog.html":{},"contributing.html":{},"index.html":{},"license.html":{}},"body":{}}],["given",{"_index":950,"title":{},"body":{"classes/ClientStub.html":{},"interfaces/ClientStubOptions.html":{},"classes/GoogleProtoFilesRoot.html":{},"classes/GrpcClient.html":{},"interfaces/GrpcClientOptions.html":{},"interfaces/Metadata.html":{},"interfaces/MetadataValue.html":{},"miscellaneous/functions.html":{}}}],["gl",{"_index":1576,"title":{},"body":{"classes/OperationsClient.html":{},"classes/OperationsClientBuilder.html":{},"interfaces/OperationsClientOptions.html":{}}}],["globby",{"_index":2104,"title":{},"body":{"changelog.html":{}}}],["goods",{"_index":2393,"title":{},"body":{"license.html":{}}}],["goog",{"_index":1007,"title":{},"body":{"classes/ClientStub.html":{},"interfaces/ClientStubOptions.html":{},"classes/GoogleProtoFilesRoot.html":{},"classes/GrpcClient.html":{},"interfaces/GrpcClientOptions.html":{},"interfaces/Metadata.html":{},"interfaces/MetadataValue.html":{},"classes/OperationsClient.html":{},"classes/OperationsClientBuilder.html":{},"interfaces/OperationsClientOptions.html":{}}}],["google",{"_index":359,"title":{},"body":{"interfaces/BackoffSettings.html":{},"interfaces/BundlingConfig.html":{},"interfaces/CallOptions.html":{},"classes/CallSettings.html":{},"interfaces/ClientConfig.html":{},"classes/ClientStub.html":{},"interfaces/ClientStubOptions.html":{},"interfaces/Duplexify.html":{},"interfaces/DuplexifyConstructor.html":{},"interfaces/DuplexifyOptions.html":{},"classes/GoogleProtoFilesRoot.html":{},"classes/GrpcClient.html":{},"interfaces/GrpcClientOptions.html":{},"interfaces/Metadata.html":{},"interfaces/MetadataValue.html":{},"interfaces/MethodConfig.html":{},"classes/OperationsClient.html":{},"classes/OperationsClientBuilder.html":{},"interfaces/OperationsClientOptions.html":{},"classes/RetryOptions.html":{},"interfaces/RetryParamsConfig.html":{},"interfaces/ServiceConfig.html":{},"classes/StreamProxy.html":{},"changelog.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{}}}],["google.fake.v1.servicename",{"_index":465,"title":{},"body":{"interfaces/BackoffSettings.html":{},"interfaces/BundlingConfig.html":{},"interfaces/CallOptions.html":{},"classes/CallSettings.html":{},"interfaces/ClientConfig.html":{},"interfaces/MethodConfig.html":{},"classes/RetryOptions.html":{},"interfaces/RetryParamsConfig.html":{},"interfaces/ServiceConfig.html":{},"miscellaneous/functions.html":{}}}],["google.longrunning.listoperationsresponse]{@link",{"_index":1617,"title":{},"body":{"classes/OperationsClient.html":{},"classes/OperationsClientBuilder.html":{},"interfaces/OperationsClientOptions.html":{}}}],["google.longrunning.operation",{"_index":1213,"title":{},"body":{"interfaces/GetOperationCallback.html":{},"classes/Operation.html":{},"classes/OperationsClient.html":{}}}],["google.longrunning.operation]{@link",{"_index":1606,"title":{},"body":{"classes/OperationsClient.html":{},"classes/OperationsClientBuilder.html":{},"interfaces/OperationsClientOptions.html":{}}}],["google.longrunning.operations",{"_index":1584,"title":{},"body":{"classes/OperationsClient.html":{},"classes/OperationsClientBuilder.html":{},"interfaces/OperationsClientOptions.html":{}}}],["google.longrunnung.operation",{"_index":1220,"title":{},"body":{"interfaces/GetOperationCallback.html":{},"classes/Operation.html":{}}}],["google.protobuf.any",{"_index":87,"title":{},"body":{"interfaces/AnyDecoder.html":{},"classes/LongRunningDescriptor.html":{}}}],["google.rpc.code.unimplemented",{"_index":1479,"title":{},"body":{"classes/OperationsClient.html":{},"classes/OperationsClientBuilder.html":{},"interfaces/OperationsClientOptions.html":{}}}],["google.rpc.status.code",{"_index":1487,"title":{},"body":{"classes/OperationsClient.html":{},"classes/OperationsClientBuilder.html":{},"interfaces/OperationsClientOptions.html":{}}}],["google/longrunning/operations.proto",{"_index":1632,"title":{},"body":{"classes/OperationsClient.html":{},"classes/OperationsClientBuilder.html":{},"interfaces/OperationsClientOptions.html":{}}}],["googleapiclient",{"_index":1575,"title":{},"body":{"classes/OperationsClient.html":{},"classes/OperationsClientBuilder.html":{},"interfaces/OperationsClientOptions.html":{}}}],["googleapiclient.join",{"_index":1586,"title":{},"body":{"classes/OperationsClient.html":{},"classes/OperationsClientBuilder.html":{},"interfaces/OperationsClientOptions.html":{}}}],["googleapiclient.push",{"_index":1581,"title":{},"body":{"classes/OperationsClient.html":{},"classes/OperationsClientBuilder.html":{},"interfaces/OperationsClientOptions.html":{}}}],["googleapiclient.push(opts.libname",{"_index":1580,"title":{},"body":{"classes/OperationsClient.html":{},"classes/OperationsClientBuilder.html":{},"interfaces/OperationsClientOptions.html":{}}}],["googleapis",{"_index":959,"title":{},"body":{"classes/ClientStub.html":{},"interfaces/ClientStubOptions.html":{},"classes/GoogleProtoFilesRoot.html":{},"classes/GrpcClient.html":{},"interfaces/GrpcClientOptions.html":{},"interfaces/Metadata.html":{},"interfaces/MetadataValue.html":{}}}],["googleauth",{"_index":862,"title":{},"body":{"classes/ClientStub.html":{},"interfaces/ClientStubOptions.html":{},"classes/GoogleProtoFilesRoot.html":{},"classes/GrpcClient.html":{},"interfaces/GrpcClientOptions.html":{},"interfaces/Metadata.html":{},"interfaces/MetadataValue.html":{},"classes/OperationsClient.html":{},"classes/OperationsClientBuilder.html":{},"interfaces/OperationsClientOptions.html":{}}}],["googleauth(options",{"_index":916,"title":{},"body":{"classes/ClientStub.html":{},"interfaces/ClientStubOptions.html":{},"classes/GoogleProtoFilesRoot.html":{},"classes/GrpcClient.html":{},"interfaces/GrpcClientOptions.html":{},"interfaces/Metadata.html":{},"interfaces/MetadataValue.html":{}}}],["googleauthoptions",{"_index":863,"title":{},"body":{"classes/ClientStub.html":{},"interfaces/ClientStubOptions.html":{},"classes/GoogleProtoFilesRoot.html":{},"classes/GrpcClient.html":{},"interfaces/GrpcClientOptions.html":{},"interfaces/Metadata.html":{},"interfaces/MetadataValue.html":{}}}],["googleerror",{"_index":49,"title":{"classes/GoogleError.html":{}},"body":{"interfaces/APICaller.html":{},"interfaces/ApiCallerSettings.html":{},"classes/BundleApiCaller.html":{},"classes/BundleExecutor.html":{},"interfaces/BundleOptions.html":{},"interfaces/CancellablePromise.html":{},"interfaces/GRPCCallOtherArgs.html":{},"interfaces/GRPCCallResult.html":{},"interfaces/GaxCall.html":{},"interfaces/GaxCallPromise.html":{},"interfaces/GaxCallStream.html":{},"interfaces/GetOperationCallback.html":{},"classes/GoogleError.html":{},"classes/LongrunningApiCaller.html":{},"classes/NormalApiCaller.html":{},"classes/OngoingCall.html":{},"classes/OngoingCallPromise.html":{},"classes/Operation.html":{},"classes/PagedApiCaller.html":{},"interfaces/RequestType.html":{},"interfaces/SimpleCallbackFunction.html":{},"interfaces/SubResponseInfo.html":{},"classes/Task.html":{},"interfaces/TaskCallback.html":{},"interfaces/TaskData.html":{},"interfaces/TaskElement.html":{}}}],["googleerror('bundling",{"_index":618,"title":{},"body":{"classes/BundleApiCaller.html":{}}}],["googleerror('cancelled",{"_index":831,"title":{},"body":{"interfaces/CancellablePromise.html":{},"classes/OngoingCall.html":{},"classes/OngoingCallPromise.html":{}}}],["googleerror('neither",{"_index":852,"title":{},"body":{"interfaces/CancellablePromise.html":{},"classes/OngoingCall.html":{},"classes/OngoingCallPromise.html":{}}}],["googleerror('undefined",{"_index":1686,"title":{},"body":{"classes/PagedApiCaller.html":{}}}],["googleerror(message",{"_index":765,"title":{},"body":{"classes/BundleExecutor.html":{},"interfaces/BundleOptions.html":{}}}],["googleerror(op.error!.message",{"_index":1295,"title":{},"body":{"interfaces/GetOperationCallback.html":{},"classes/Operation.html":{}}}],["googleerror(self.latestresponse.error.message",{"_index":1277,"title":{},"body":{"interfaces/GetOperationCallback.html":{},"classes/Operation.html":{}}}],["googleprotofilesdir",{"_index":872,"title":{},"body":{"classes/ClientStub.html":{},"interfaces/ClientStubOptions.html":{},"classes/GoogleProtoFilesRoot.html":{},"classes/GrpcClient.html":{},"interfaces/GrpcClientOptions.html":{},"interfaces/Metadata.html":{},"interfaces/MetadataValue.html":{},"miscellaneous/variables.html":{}}}],["googleprotofilesroot",{"_index":881,"title":{"classes/GoogleProtoFilesRoot.html":{}},"body":{"classes/ClientStub.html":{},"interfaces/ClientStubOptions.html":{},"classes/GoogleProtoFilesRoot.html":{},"classes/GrpcClient.html":{},"interfaces/GrpcClientOptions.html":{},"interfaces/Metadata.html":{},"interfaces/MetadataValue.html":{}}}],["googleprotofilesroot._findincludepath(originpath",{"_index":1076,"title":{},"body":{"classes/ClientStub.html":{},"interfaces/ClientStubOptions.html":{},"classes/GoogleProtoFilesRoot.html":{},"classes/GrpcClient.html":{},"interfaces/GrpcClientOptions.html":{},"interfaces/Metadata.html":{},"interfaces/MetadataValue.html":{}}}],["governed",{"_index":2285,"title":{},"body":{"miscellaneous/functions.html":{}}}],["greater",{"_index":2033,"title":{},"body":{"changelog.html":{}}}],["grpc",{"_index":94,"title":{},"body":{"interfaces/AnyDecoder.html":{},"classes/ClientStub.html":{},"interfaces/ClientStubOptions.html":{},"interfaces/Duplexify.html":{},"interfaces/DuplexifyConstructor.html":{},"interfaces/DuplexifyOptions.html":{},"interfaces/GRPCCallOtherArgs.html":{},"interfaces/GRPCCallResult.html":{},"interfaces/GaxCall.html":{},"interfaces/GaxCallPromise.html":{},"interfaces/GaxCallStream.html":{},"interfaces/GetOperationCallback.html":{},"classes/GoogleProtoFilesRoot.html":{},"classes/GrpcClient.html":{},"interfaces/GrpcClientOptions.html":{},"classes/LongRunningDescriptor.html":{},"interfaces/Metadata.html":{},"interfaces/MetadataValue.html":{},"classes/Operation.html":{},"classes/OperationsClient.html":{},"classes/OperationsClientBuilder.html":{},"interfaces/OperationsClientOptions.html":{},"interfaces/RequestType.html":{},"interfaces/SimpleCallbackFunction.html":{},"classes/StreamDescriptor.html":{},"classes/StreamProxy.html":{},"classes/StreamingApiCaller.html":{},"changelog.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["grpc.channelcredentials",{"_index":898,"title":{},"body":{"classes/ClientStub.html":{},"interfaces/ClientStubOptions.html":{},"classes/GoogleProtoFilesRoot.html":{},"classes/GrpcClient.html":{},"interfaces/GrpcClientOptions.html":{},"interfaces/Metadata.html":{},"interfaces/MetadataValue.html":{}}}],["grpc.client",{"_index":899,"title":{},"body":{"classes/ClientStub.html":{},"interfaces/ClientStubOptions.html":{},"classes/GoogleProtoFilesRoot.html":{},"classes/GrpcClient.html":{},"interfaces/GrpcClientOptions.html":{},"interfaces/Metadata.html":{},"interfaces/MetadataValue.html":{}}}],["grpc.clientcredentials",{"_index":1642,"title":{},"body":{"classes/OperationsClient.html":{},"classes/OperationsClientBuilder.html":{},"interfaces/OperationsClientOptions.html":{}}}],["grpc.credentials.combinechannelcredentials",{"_index":948,"title":{},"body":{"classes/ClientStub.html":{},"interfaces/ClientStubOptions.html":{},"classes/GoogleProtoFilesRoot.html":{},"classes/GrpcClient.html":{},"interfaces/GrpcClientOptions.html":{},"interfaces/Metadata.html":{},"interfaces/MetadataValue.html":{}}}],["grpc.credentials.createfromgooglecredential(client",{"_index":949,"title":{},"body":{"classes/ClientStub.html":{},"interfaces/ClientStubOptions.html":{},"classes/GoogleProtoFilesRoot.html":{},"classes/GrpcClient.html":{},"interfaces/GrpcClientOptions.html":{},"interfaces/Metadata.html":{},"interfaces/MetadataValue.html":{}}}],["grpc.credentials.createssl",{"_index":945,"title":{},"body":{"classes/ClientStub.html":{},"interfaces/ClientStubOptions.html":{},"classes/GoogleProtoFilesRoot.html":{},"classes/GrpcClient.html":{},"interfaces/GrpcClientOptions.html":{},"interfaces/Metadata.html":{},"interfaces/MetadataValue.html":{}}}],["grpc.load",{"_index":972,"title":{},"body":{"classes/ClientStub.html":{},"interfaces/ClientStubOptions.html":{},"classes/GoogleProtoFilesRoot.html":{},"classes/GrpcClient.html":{},"interfaces/GrpcClientOptions.html":{},"interfaces/Metadata.html":{},"interfaces/MetadataValue.html":{}}}],["grpc/grpc",{"_index":722,"title":{},"body":{"classes/BundleExecutor.html":{},"interfaces/BundleOptions.html":{},"interfaces/CancellablePromise.html":{},"classes/ClientStub.html":{},"interfaces/ClientStubOptions.html":{},"interfaces/GetOperationCallback.html":{},"classes/GoogleError.html":{},"classes/GoogleProtoFilesRoot.html":{},"classes/GrpcClient.html":{},"interfaces/GrpcClientOptions.html":{},"interfaces/Metadata.html":{},"interfaces/MetadataValue.html":{},"classes/OngoingCall.html":{},"classes/OngoingCallPromise.html":{},"classes/Operation.html":{},"interfaces/SubResponseInfo.html":{},"classes/Task.html":{},"interfaces/TaskCallback.html":{},"interfaces/TaskData.html":{},"interfaces/TaskElement.html":{},"changelog.html":{},"dependencies.html":{}}}],["grpc/proto",{"_index":859,"title":{},"body":{"classes/ClientStub.html":{},"interfaces/ClientStubOptions.html":{},"classes/GoogleProtoFilesRoot.html":{},"classes/GrpcClient.html":{},"interfaces/GrpcClientOptions.html":{},"interfaces/Metadata.html":{},"interfaces/MetadataValue.html":{},"changelog.html":{},"dependencies.html":{}}}],["grpccall",{"_index":61,"title":{},"body":{"interfaces/APICaller.html":{},"interfaces/ApiCallerSettings.html":{},"classes/BundleApiCaller.html":{},"interfaces/GRPCCallOtherArgs.html":{},"interfaces/GRPCCallResult.html":{},"interfaces/GaxCall.html":{},"interfaces/GaxCallPromise.html":{},"interfaces/GaxCallStream.html":{},"classes/LongrunningApiCaller.html":{},"classes/NormalApiCaller.html":{},"classes/PagedApiCaller.html":{},"interfaces/RequestType.html":{},"interfaces/SimpleCallbackFunction.html":{},"classes/StreamingApiCaller.html":{},"miscellaneous/typealiases.html":{}}}],["grpccallbackwrapper",{"_index":841,"title":{},"body":{"interfaces/CancellablePromise.html":{},"classes/OngoingCall.html":{},"classes/OngoingCallPromise.html":{}}}],["grpccallotherargs",{"_index":1175,"title":{"interfaces/GRPCCallOtherArgs.html":{}},"body":{"interfaces/GRPCCallOtherArgs.html":{},"interfaces/GRPCCallResult.html":{},"interfaces/GaxCall.html":{},"interfaces/GaxCallPromise.html":{},"interfaces/GaxCallStream.html":{},"interfaces/RequestType.html":{},"interfaces/SimpleCallbackFunction.html":{}}}],["grpccallresult",{"_index":1103,"title":{"interfaces/GRPCCallResult.html":{}},"body":{"interfaces/Duplexify.html":{},"interfaces/DuplexifyConstructor.html":{},"interfaces/DuplexifyOptions.html":{},"interfaces/GRPCCallOtherArgs.html":{},"interfaces/GRPCCallResult.html":{},"interfaces/GaxCall.html":{},"interfaces/GaxCallPromise.html":{},"interfaces/GaxCallStream.html":{},"interfaces/RequestType.html":{},"interfaces/SimpleCallbackFunction.html":{},"classes/StreamProxy.html":{},"interfaces/SubResponseInfo.html":{},"classes/Task.html":{},"interfaces/TaskCallback.html":{},"interfaces/TaskData.html":{},"interfaces/TaskElement.html":{}}}],["grpcclient",{"_index":900,"title":{"classes/GrpcClient.html":{}},"body":{"classes/ClientStub.html":{},"interfaces/ClientStubOptions.html":{},"classes/GoogleProtoFilesRoot.html":{},"classes/GrpcClient.html":{},"interfaces/GrpcClientOptions.html":{},"interfaces/Metadata.html":{},"interfaces/MetadataValue.html":{},"classes/OperationsClient.html":{},"classes/OperationsClientBuilder.html":{},"interfaces/OperationsClientOptions.html":{}}}],["grpcclient.createbytelengthfunction",{"_index":2422,"title":{},"body":{"miscellaneous/variables.html":{}}}],["grpcclientoptions",{"_index":888,"title":{"interfaces/GrpcClientOptions.html":{}},"body":{"classes/ClientStub.html":{},"interfaces/ClientStubOptions.html":{},"classes/GoogleProtoFilesRoot.html":{},"classes/GrpcClient.html":{},"interfaces/GrpcClientOptions.html":{},"interfaces/Metadata.html":{},"interfaces/MetadataValue.html":{}}}],["grpcclients",{"_index":1464,"title":{},"body":{"classes/OperationsClient.html":{},"classes/OperationsClientBuilder.html":{},"interfaces/OperationsClientOptions.html":{}}}],["grpcclients.google.longrunning.operations",{"_index":1590,"title":{},"body":{"classes/OperationsClient.html":{},"classes/OperationsClientBuilder.html":{},"interfaces/OperationsClientOptions.html":{}}}],["grpcmodule",{"_index":889,"title":{},"body":{"classes/ClientStub.html":{},"interfaces/ClientStubOptions.html":{},"classes/GoogleProtoFilesRoot.html":{},"classes/GrpcClient.html":{},"interfaces/GrpcClientOptions.html":{},"interfaces/Metadata.html":{},"interfaces/MetadataValue.html":{},"miscellaneous/typealiases.html":{}}}],["grpcop",{"_index":1221,"title":{},"body":{"interfaces/GetOperationCallback.html":{},"classes/Operation.html":{}}}],["grpcoptions",{"_index":1040,"title":{},"body":{"classes/ClientStub.html":{},"interfaces/ClientStubOptions.html":{},"classes/GoogleProtoFilesRoot.html":{},"classes/GrpcClient.html":{},"interfaces/GrpcClientOptions.html":{},"interfaces/Metadata.html":{},"interfaces/MetadataValue.html":{},"changelog.html":{}}}],["grpcoptions[key.replace(/^grpc",{"_index":1043,"title":{},"body":{"classes/ClientStub.html":{},"interfaces/ClientStubOptions.html":{},"classes/GoogleProtoFilesRoot.html":{},"classes/GrpcClient.html":{},"interfaces/GrpcClientOptions.html":{},"interfaces/Metadata.html":{},"interfaces/MetadataValue.html":{}}}],["grpcprotoloader",{"_index":858,"title":{},"body":{"classes/ClientStub.html":{},"interfaces/ClientStubOptions.html":{},"classes/GoogleProtoFilesRoot.html":{},"classes/GrpcClient.html":{},"interfaces/GrpcClientOptions.html":{},"interfaces/Metadata.html":{},"interfaces/MetadataValue.html":{}}}],["grpcprotoloader.loadsync(filename",{"_index":956,"title":{},"body":{"classes/ClientStub.html":{},"interfaces/ClientStubOptions.html":{},"classes/GoogleProtoFilesRoot.html":{},"classes/GrpcClient.html":{},"interfaces/GrpcClientOptions.html":{},"interfaces/Metadata.html":{},"interfaces/MetadataValue.html":{}}}],["grpcprotoloader.options",{"_index":954,"title":{},"body":{"classes/ClientStub.html":{},"interfaces/ClientStubOptions.html":{},"classes/GoogleProtoFilesRoot.html":{},"classes/GrpcClient.html":{},"interfaces/GrpcClientOptions.html":{},"interfaces/Metadata.html":{},"interfaces/MetadataValue.html":{}}}],["grpctypes.clientcredentials",{"_index":1031,"title":{},"body":{"classes/ClientStub.html":{},"interfaces/ClientStubOptions.html":{},"classes/GoogleProtoFilesRoot.html":{},"classes/GrpcClient.html":{},"interfaces/GrpcClientOptions.html":{},"interfaces/Metadata.html":{},"interfaces/MetadataValue.html":{}}}],["grpcversion",{"_index":901,"title":{},"body":{"classes/ClientStub.html":{},"interfaces/ClientStubOptions.html":{},"classes/GoogleProtoFilesRoot.html":{},"classes/GrpcClient.html":{},"interfaces/GrpcClientOptions.html":{},"interfaces/Metadata.html":{},"interfaces/MetadataValue.html":{}}}],["gt",{"_index":1547,"title":{},"body":{"classes/OperationsClient.html":{}}}],["gts",{"_index":2041,"title":{},"body":{"changelog.html":{}}}],["guaranteed",{"_index":1477,"title":{},"body":{"classes/OperationsClient.html":{},"classes/OperationsClientBuilder.html":{},"interfaces/OperationsClientOptions.html":{}}}],["guide",{"_index":1962,"title":{},"body":{"changelog.html":{}}}],["handle",{"_index":201,"title":{},"body":{"interfaces/BackoffSettings.html":{},"interfaces/BundlingConfig.html":{},"interfaces/CallOptions.html":{},"classes/CallSettings.html":{},"interfaces/ClientConfig.html":{},"interfaces/GetOperationCallback.html":{},"interfaces/MethodConfig.html":{},"classes/Operation.html":{},"classes/RetryOptions.html":{},"interfaces/RetryParamsConfig.html":{},"interfaces/ServiceConfig.html":{}}}],["handled",{"_index":1245,"title":{},"body":{"interfaces/GetOperationCallback.html":{},"classes/Operation.html":{}}}],["handler",{"_index":1308,"title":{},"body":{"interfaces/GetOperationCallback.html":{},"classes/Operation.html":{}}}],["handling",{"_index":1870,"title":{},"body":{"changelog.html":{}}}],["hang",{"_index":1341,"title":{},"body":{"interfaces/GetOperationCallback.html":{},"classes/Operation.html":{},"changelog.html":{}}}],["hard",{"_index":252,"title":{},"body":{"interfaces/BackoffSettings.html":{},"interfaces/BundlingConfig.html":{},"interfaces/CallOptions.html":{},"classes/CallSettings.html":{},"interfaces/ClientConfig.html":{},"interfaces/MethodConfig.html":{},"classes/RetryOptions.html":{},"interfaces/RetryParamsConfig.html":{},"interfaces/ServiceConfig.html":{}}}],["has(bindings",{"_index":581,"title":{},"body":{"interfaces/Bindings.html":{},"interfaces/ParseResult.html":{},"classes/PathTemplate.html":{},"interfaces/Segment.html":{}}}],["hasactivelisteners",{"_index":1215,"title":{},"body":{"interfaces/GetOperationCallback.html":{},"classes/Operation.html":{}}}],["haven't",{"_index":2238,"title":{},"body":{"contributing.html":{}}}],["header",{"_index":1018,"title":{},"body":{"classes/ClientStub.html":{},"interfaces/ClientStubOptions.html":{},"classes/GoogleProtoFilesRoot.html":{},"classes/GrpcClient.html":{},"interfaces/GrpcClientOptions.html":{},"interfaces/Metadata.html":{},"interfaces/MetadataValue.html":{}}}],["headers",{"_index":991,"title":{},"body":{"classes/ClientStub.html":{},"interfaces/ClientStubOptions.html":{},"interfaces/GRPCCallOtherArgs.html":{},"interfaces/GRPCCallResult.html":{},"interfaces/GaxCall.html":{},"interfaces/GaxCallPromise.html":{},"interfaces/GaxCallStream.html":{},"classes/GoogleProtoFilesRoot.html":{},"classes/GrpcClient.html":{},"interfaces/GrpcClientOptions.html":{},"interfaces/Metadata.html":{},"interfaces/MetadataValue.html":{},"interfaces/RequestType.html":{},"interfaces/SimpleCallbackFunction.html":{},"miscellaneous/functions.html":{}}}],["headers[key",{"_index":992,"title":{},"body":{"classes/ClientStub.html":{},"interfaces/ClientStubOptions.html":{},"classes/GoogleProtoFilesRoot.html":{},"classes/GrpcClient.html":{},"interfaces/GrpcClientOptions.html":{},"interfaces/Metadata.html":{},"interfaces/MetadataValue.html":{}}}],["helper",{"_index":401,"title":{},"body":{"interfaces/BackoffSettings.html":{},"interfaces/BundlingConfig.html":{},"interfaces/CallOptions.html":{},"classes/CallSettings.html":{},"interfaces/ClientConfig.html":{},"interfaces/MethodConfig.html":{},"classes/RetryOptions.html":{},"interfaces/RetryParamsConfig.html":{},"interfaces/ServiceConfig.html":{}}}],["helpers",{"_index":2301,"title":{},"body":{"miscellaneous/functions.html":{}}}],["here",{"_index":879,"title":{},"body":{"classes/ClientStub.html":{},"interfaces/ClientStubOptions.html":{},"classes/GoogleProtoFilesRoot.html":{},"classes/GrpcClient.html":{},"interfaces/GrpcClientOptions.html":{},"interfaces/Metadata.html":{},"interfaces/MetadataValue.html":{}}}],["hidden",{"_index":1992,"title":{},"body":{"changelog.html":{}}}],["highly",{"_index":2341,"title":{},"body":{"index.html":{}}}],["history",{"_index":1837,"title":{},"body":{"changelog.html":{}}}],["hold",{"_index":378,"title":{},"body":{"interfaces/BackoffSettings.html":{},"interfaces/BundlingConfig.html":{},"interfaces/CallOptions.html":{},"classes/CallSettings.html":{},"interfaces/ClientConfig.html":{},"interfaces/MethodConfig.html":{},"classes/RetryOptions.html":{},"interfaces/RetryParamsConfig.html":{},"interfaces/ServiceConfig.html":{}}}],["holders",{"_index":2374,"title":{},"body":{"license.html":{}}}],["holds",{"_index":842,"title":{},"body":{"interfaces/CancellablePromise.html":{},"classes/LongrunningApiCaller.html":{},"classes/OngoingCall.html":{},"classes/OngoingCallPromise.html":{}}}],["hooking",{"_index":958,"title":{},"body":{"classes/ClientStub.html":{},"interfaces/ClientStubOptions.html":{},"classes/GoogleProtoFilesRoot.html":{},"classes/GrpcClient.html":{},"interfaces/GrpcClientOptions.html":{},"interfaces/Metadata.html":{},"interfaces/MetadataValue.html":{}}}],["host",{"_index":1639,"title":{},"body":{"classes/OperationsClient.html":{},"classes/OperationsClientBuilder.html":{},"interfaces/OperationsClientOptions.html":{}}}],["http",{"_index":867,"title":{},"body":{"classes/ClientStub.html":{},"interfaces/ClientStubOptions.html":{},"classes/GoogleProtoFilesRoot.html":{},"classes/GrpcClient.html":{},"interfaces/GrpcClientOptions.html":{},"interfaces/Metadata.html":{},"interfaces/MetadataValue.html":{}}}],["http/2",{"_index":2331,"title":{},"body":{"index.html":{}}}],["https://github.com/googleapis/gax",{"_index":933,"title":{},"body":{"classes/ClientStub.html":{},"interfaces/ClientStubOptions.html":{},"interfaces/Duplexify.html":{},"interfaces/DuplexifyConstructor.html":{},"interfaces/DuplexifyOptions.html":{},"classes/GoogleProtoFilesRoot.html":{},"classes/GrpcClient.html":{},"interfaces/GrpcClientOptions.html":{},"interfaces/Metadata.html":{},"interfaces/MetadataValue.html":{},"classes/StreamProxy.html":{}}}],["https://github.com/googlecloudplatform/google",{"_index":1149,"title":{},"body":{"interfaces/Duplexify.html":{},"interfaces/DuplexifyConstructor.html":{},"interfaces/DuplexifyOptions.html":{},"classes/StreamProxy.html":{}}}],["https://googleapis.github.io/gax",{"_index":1603,"title":{},"body":{"classes/OperationsClient.html":{},"classes/OperationsClientBuilder.html":{},"interfaces/OperationsClientOptions.html":{}}}],["https://nodejs.org/api/stream.html",{"_index":1620,"title":{},"body":{"classes/OperationsClient.html":{},"classes/OperationsClientBuilder.html":{},"interfaces/OperationsClientOptions.html":{}}}],["huge",{"_index":1869,"title":{},"body":{"changelog.html":{}}}],["hurdles",{"_index":2212,"title":{},"body":{"contributing.html":{}}}],["id",{"_index":683,"title":{},"body":{"classes/BundleExecutor.html":{},"interfaces/BundleOptions.html":{},"classes/OperationsClient.html":{},"classes/OperationsClientBuilder.html":{},"interfaces/OperationsClientOptions.html":{},"interfaces/SubResponseInfo.html":{},"classes/Task.html":{},"interfaces/TaskCallback.html":{},"interfaces/TaskData.html":{},"interfaces/TaskElement.html":{},"miscellaneous/functions.html":{}}}],["idempotent",{"_index":466,"title":{},"body":{"interfaces/BackoffSettings.html":{},"interfaces/BundlingConfig.html":{},"interfaces/CallOptions.html":{},"classes/CallSettings.html":{},"interfaces/ClientConfig.html":{},"interfaces/MethodConfig.html":{},"classes/RetryOptions.html":{},"interfaces/RetryParamsConfig.html":{},"interfaces/ServiceConfig.html":{},"miscellaneous/functions.html":{}}}],["identifier",{"_index":1824,"title":{},"body":{"classes/Task.html":{},"miscellaneous/functions.html":{}}}],["idiomatic",{"_index":2325,"title":{},"body":{"index.html":{}}}],["ids",{"_index":1832,"title":{},"body":{"classes/Task.html":{}}}],["ignore",{"_index":445,"title":{},"body":{"interfaces/BackoffSettings.html":{},"interfaces/BundlingConfig.html":{},"interfaces/CallOptions.html":{},"classes/CallSettings.html":{},"interfaces/ClientConfig.html":{},"interfaces/MethodConfig.html":{},"classes/RetryOptions.html":{},"interfaces/RetryParamsConfig.html":{},"interfaces/ServiceConfig.html":{},"changelog.html":{}}}],["ignored",{"_index":286,"title":{},"body":{"interfaces/BackoffSettings.html":{},"interfaces/BundlingConfig.html":{},"interfaces/CallOptions.html":{},"classes/CallSettings.html":{},"interfaces/ClientConfig.html":{},"interfaces/MethodConfig.html":{},"classes/OperationsClient.html":{},"classes/OperationsClientBuilder.html":{},"interfaces/OperationsClientOptions.html":{},"classes/RetryOptions.html":{},"interfaces/RetryParamsConfig.html":{},"interfaces/ServiceConfig.html":{}}}],["immediately",{"_index":740,"title":{},"body":{"classes/BundleExecutor.html":{},"interfaces/BundleOptions.html":{}}}],["implement",{"_index":1448,"title":{},"body":{"classes/OperationsClient.html":{},"classes/OperationsClientBuilder.html":{},"interfaces/OperationsClientOptions.html":{}}}],["implementation",{"_index":602,"title":{},"body":{"classes/BundleApiCaller.html":{},"changelog.html":{}}}],["implements",{"_index":100,"title":{},"body":{"interfaces/AnyDecoder.html":{},"interfaces/BackoffSettings.html":{},"classes/BundleApiCaller.html":{},"classes/BundleDescriptor.html":{},"interfaces/BundlingConfig.html":{},"interfaces/CallOptions.html":{},"classes/CallSettings.html":{},"interfaces/CancellablePromise.html":{},"interfaces/ClientConfig.html":{},"classes/ClientStub.html":{},"interfaces/ClientStubOptions.html":{},"interfaces/Duplexify.html":{},"interfaces/DuplexifyConstructor.html":{},"interfaces/DuplexifyOptions.html":{},"classes/GoogleProtoFilesRoot.html":{},"classes/GrpcClient.html":{},"interfaces/GrpcClientOptions.html":{},"classes/LongRunningDescriptor.html":{},"classes/LongrunningApiCaller.html":{},"interfaces/Metadata.html":{},"interfaces/MetadataValue.html":{},"interfaces/MethodConfig.html":{},"classes/NormalApiCaller.html":{},"classes/OngoingCall.html":{},"classes/OngoingCallPromise.html":{},"classes/PageDescriptor.html":{},"classes/PagedApiCaller.html":{},"classes/RetryOptions.html":{},"interfaces/RetryParamsConfig.html":{},"interfaces/ServiceConfig.html":{},"classes/StreamDescriptor.html":{},"classes/StreamProxy.html":{},"classes/StreamingApiCaller.html":{},"miscellaneous/functions.html":{}}}],["implied",{"_index":2376,"title":{},"body":{"license.html":{}}}],["import",{"_index":64,"title":{},"body":{"interfaces/APICaller.html":{},"interfaces/AnyDecoder.html":{},"interfaces/ApiCallerSettings.html":{},"interfaces/BackoffSettings.html":{},"interfaces/Bindings.html":{},"classes/BundleApiCaller.html":{},"classes/BundleDescriptor.html":{},"classes/BundleExecutor.html":{},"interfaces/BundleOptions.html":{},"interfaces/BundlingConfig.html":{},"interfaces/CallOptions.html":{},"classes/CallSettings.html":{},"interfaces/CancellablePromise.html":{},"interfaces/ClientConfig.html":{},"classes/ClientStub.html":{},"interfaces/ClientStubOptions.html":{},"interfaces/Descriptor.html":{},"interfaces/Duplexify.html":{},"interfaces/DuplexifyConstructor.html":{},"interfaces/DuplexifyOptions.html":{},"interfaces/GRPCCallOtherArgs.html":{},"interfaces/GRPCCallResult.html":{},"interfaces/GaxCall.html":{},"interfaces/GaxCallPromise.html":{},"interfaces/GaxCallStream.html":{},"interfaces/GetOperationCallback.html":{},"classes/GoogleError.html":{},"classes/GoogleProtoFilesRoot.html":{},"classes/GrpcClient.html":{},"interfaces/GrpcClientOptions.html":{},"classes/LongRunningDescriptor.html":{},"classes/LongrunningApiCaller.html":{},"interfaces/Metadata.html":{},"interfaces/MetadataValue.html":{},"interfaces/MethodConfig.html":{},"classes/NormalApiCaller.html":{},"classes/OngoingCall.html":{},"classes/OngoingCallPromise.html":{},"classes/Operation.html":{},"classes/OperationsClient.html":{},"classes/OperationsClientBuilder.html":{},"interfaces/OperationsClientOptions.html":{},"classes/PageDescriptor.html":{},"classes/PagedApiCaller.html":{},"interfaces/ParseResult.html":{},"classes/PathTemplate.html":{},"interfaces/RequestType.html":{},"classes/RetryOptions.html":{},"interfaces/RetryParamsConfig.html":{},"interfaces/Segment.html":{},"interfaces/ServiceConfig.html":{},"interfaces/SimpleCallbackFunction.html":{},"classes/StreamDescriptor.html":{},"classes/StreamProxy.html":{},"classes/StreamingApiCaller.html":{},"interfaces/SubResponseInfo.html":{},"classes/Task.html":{},"interfaces/TaskCallback.html":{},"interfaces/TaskData.html":{},"interfaces/TaskElement.html":{}}}],["improve",{"_index":2100,"title":{},"body":{"changelog.html":{}}}],["inabinding",{"_index":580,"title":{},"body":{"interfaces/Bindings.html":{},"interfaces/ParseResult.html":{},"classes/PathTemplate.html":{},"interfaces/Segment.html":{}}}],["inc",{"_index":2347,"title":{},"body":{"license.html":{}}}],["incidental",{"_index":2387,"title":{},"body":{"license.html":{}}}],["include",{"_index":635,"title":{},"body":{"classes/BundleDescriptor.html":{},"classes/ClientStub.html":{},"interfaces/ClientStubOptions.html":{},"classes/GoogleProtoFilesRoot.html":{},"classes/GrpcClient.html":{},"interfaces/GrpcClientOptions.html":{},"interfaces/Metadata.html":{},"interfaces/MetadataValue.html":{},"changelog.html":{},"miscellaneous/functions.html":{}}}],["include_dirs",{"_index":875,"title":{},"body":{"classes/ClientStub.html":{},"interfaces/ClientStubOptions.html":{},"classes/GoogleProtoFilesRoot.html":{},"classes/GrpcClient.html":{},"interfaces/GrpcClientOptions.html":{},"interfaces/Metadata.html":{},"interfaces/MetadataValue.html":{},"miscellaneous/variables.html":{}}}],["include_dirs.push(googleprotofilesdir",{"_index":876,"title":{},"body":{"classes/ClientStub.html":{},"interfaces/ClientStubOptions.html":{},"classes/GoogleProtoFilesRoot.html":{},"classes/GrpcClient.html":{},"interfaces/GrpcClientOptions.html":{},"interfaces/Metadata.html":{},"interfaces/MetadataValue.html":{}}}],["include_dirs.slice",{"_index":974,"title":{},"body":{"classes/ClientStub.html":{},"interfaces/ClientStubOptions.html":{},"classes/GoogleProtoFilesRoot.html":{},"classes/GrpcClient.html":{},"interfaces/GrpcClientOptions.html":{},"interfaces/Metadata.html":{},"interfaces/MetadataValue.html":{}}}],["included",{"_index":1063,"title":{},"body":{"classes/ClientStub.html":{},"interfaces/ClientStubOptions.html":{},"classes/GoogleProtoFilesRoot.html":{},"classes/GrpcClient.html":{},"interfaces/GrpcClientOptions.html":{},"interfaces/Metadata.html":{},"interfaces/MetadataValue.html":{}}}],["includedirs",{"_index":973,"title":{},"body":{"classes/ClientStub.html":{},"interfaces/ClientStubOptions.html":{},"classes/GoogleProtoFilesRoot.html":{},"classes/GrpcClient.html":{},"interfaces/GrpcClientOptions.html":{},"interfaces/Metadata.html":{},"interfaces/MetadataValue.html":{}}}],["includedirs.unshift(protopath",{"_index":975,"title":{},"body":{"classes/ClientStub.html":{},"interfaces/ClientStubOptions.html":{},"classes/GoogleProtoFilesRoot.html":{},"classes/GrpcClient.html":{},"interfaces/GrpcClientOptions.html":{},"interfaces/Metadata.html":{},"interfaces/MetadataValue.html":{}}}],["includepath",{"_index":1066,"title":{},"body":{"classes/ClientStub.html":{},"interfaces/ClientStubOptions.html":{},"classes/GoogleProtoFilesRoot.html":{},"classes/GrpcClient.html":{},"interfaces/GrpcClientOptions.html":{},"interfaces/Metadata.html":{},"interfaces/MetadataValue.html":{}}}],["includes",{"_index":1924,"title":{},"body":{"changelog.html":{}}}],["including",{"_index":2378,"title":{},"body":{"license.html":{}}}],["incomplete",{"_index":1267,"title":{},"body":{"interfaces/GetOperationCallback.html":{},"classes/Operation.html":{}}}],["increase",{"_index":225,"title":{},"body":{"interfaces/BackoffSettings.html":{},"interfaces/BundlingConfig.html":{},"interfaces/CallOptions.html":{},"classes/CallSettings.html":{},"interfaces/ClientConfig.html":{},"interfaces/MethodConfig.html":{},"classes/RetryOptions.html":{},"interfaces/RetryParamsConfig.html":{},"interfaces/ServiceConfig.html":{},"miscellaneous/functions.html":{}}}],["index",{"_index":20,"title":{"index.html":{}},"body":{"interfaces/APICaller.html":{},"interfaces/AnyDecoder.html":{},"interfaces/ApiCallerSettings.html":{},"interfaces/BackoffSettings.html":{},"interfaces/Bindings.html":{},"classes/BundleApiCaller.html":{},"classes/BundleDescriptor.html":{},"classes/BundleExecutor.html":{},"interfaces/BundleOptions.html":{},"interfaces/BundlingConfig.html":{},"interfaces/CallOptions.html":{},"classes/CallSettings.html":{},"interfaces/CancellablePromise.html":{},"interfaces/ClientConfig.html":{},"classes/ClientStub.html":{},"interfaces/ClientStubOptions.html":{},"interfaces/Descriptor.html":{},"interfaces/Duplexify.html":{},"interfaces/DuplexifyConstructor.html":{},"interfaces/DuplexifyOptions.html":{},"interfaces/GRPCCallOtherArgs.html":{},"interfaces/GRPCCallResult.html":{},"interfaces/GaxCall.html":{},"interfaces/GaxCallPromise.html":{},"interfaces/GaxCallStream.html":{},"interfaces/GetOperationCallback.html":{},"classes/GoogleError.html":{},"classes/GoogleProtoFilesRoot.html":{},"classes/GrpcClient.html":{},"interfaces/GrpcClientOptions.html":{},"classes/LongRunningDescriptor.html":{},"classes/LongrunningApiCaller.html":{},"interfaces/Metadata.html":{},"interfaces/MetadataValue.html":{},"interfaces/MethodConfig.html":{},"classes/NormalApiCaller.html":{},"classes/OngoingCall.html":{},"classes/OngoingCallPromise.html":{},"classes/Operation.html":{},"classes/OperationsClient.html":{},"classes/OperationsClientBuilder.html":{},"interfaces/OperationsClientOptions.html":{},"classes/PageDescriptor.html":{},"classes/PagedApiCaller.html":{},"interfaces/ParseResult.html":{},"classes/PathTemplate.html":{},"interfaces/RequestType.html":{},"classes/RetryOptions.html":{},"interfaces/RetryParamsConfig.html":{},"interfaces/Segment.html":{},"interfaces/ServiceConfig.html":{},"interfaces/SimpleCallbackFunction.html":{},"classes/StreamDescriptor.html":{},"classes/StreamProxy.html":{},"classes/StreamingApiCaller.html":{},"interfaces/SubResponseInfo.html":{},"classes/Task.html":{},"interfaces/TaskCallback.html":{},"interfaces/TaskData.html":{},"interfaces/TaskElement.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["index=%d",{"_index":567,"title":{},"body":{"interfaces/Bindings.html":{},"interfaces/ParseResult.html":{},"classes/PathTemplate.html":{},"interfaces/Segment.html":{}}}],["indexable",{"_index":518,"title":{},"body":{"interfaces/Bindings.html":{},"interfaces/BundlingConfig.html":{},"classes/ClientStub.html":{}}}],["indicate",{"_index":637,"title":{},"body":{"classes/BundleDescriptor.html":{},"miscellaneous/functions.html":{}}}],["indicates",{"_index":649,"title":{},"body":{"classes/BundleDescriptor.html":{},"classes/OperationsClient.html":{},"classes/OperationsClientBuilder.html":{},"interfaces/OperationsClientOptions.html":{},"classes/PagedApiCaller.html":{}}}],["indirect",{"_index":2386,"title":{},"body":{"license.html":{}}}],["individual",{"_index":2214,"title":{},"body":{"contributing.html":{}}}],["infinity",{"_index":1316,"title":{},"body":{"interfaces/GetOperationCallback.html":{},"classes/Operation.html":{}}}],["info",{"_index":3,"title":{},"body":{"interfaces/APICaller.html":{},"interfaces/AnyDecoder.html":{},"interfaces/ApiCallerSettings.html":{},"interfaces/BackoffSettings.html":{},"interfaces/Bindings.html":{},"classes/BundleApiCaller.html":{},"classes/BundleDescriptor.html":{},"classes/BundleExecutor.html":{},"interfaces/BundleOptions.html":{},"interfaces/BundlingConfig.html":{},"interfaces/CallOptions.html":{},"classes/CallSettings.html":{},"interfaces/CancellablePromise.html":{},"interfaces/ClientConfig.html":{},"classes/ClientStub.html":{},"interfaces/ClientStubOptions.html":{},"interfaces/Descriptor.html":{},"interfaces/Duplexify.html":{},"interfaces/DuplexifyConstructor.html":{},"interfaces/DuplexifyOptions.html":{},"interfaces/GRPCCallOtherArgs.html":{},"interfaces/GRPCCallResult.html":{},"interfaces/GaxCall.html":{},"interfaces/GaxCallPromise.html":{},"interfaces/GaxCallStream.html":{},"interfaces/GetOperationCallback.html":{},"classes/GoogleError.html":{},"classes/GoogleProtoFilesRoot.html":{},"classes/GrpcClient.html":{},"interfaces/GrpcClientOptions.html":{},"classes/LongRunningDescriptor.html":{},"classes/LongrunningApiCaller.html":{},"interfaces/Metadata.html":{},"interfaces/MetadataValue.html":{},"interfaces/MethodConfig.html":{},"classes/NormalApiCaller.html":{},"classes/OngoingCall.html":{},"classes/OngoingCallPromise.html":{},"classes/Operation.html":{},"classes/OperationsClient.html":{},"classes/OperationsClientBuilder.html":{},"interfaces/OperationsClientOptions.html":{},"classes/PageDescriptor.html":{},"classes/PagedApiCaller.html":{},"interfaces/ParseResult.html":{},"classes/PathTemplate.html":{},"interfaces/RequestType.html":{},"classes/RetryOptions.html":{},"interfaces/RetryParamsConfig.html":{},"interfaces/Segment.html":{},"interfaces/ServiceConfig.html":{},"interfaces/SimpleCallbackFunction.html":{},"classes/StreamDescriptor.html":{},"classes/StreamProxy.html":{},"classes/StreamingApiCaller.html":{},"interfaces/SubResponseInfo.html":{},"classes/Task.html":{},"interfaces/TaskCallback.html":{},"interfaces/TaskData.html":{},"interfaces/TaskElement.html":{}}}],["information",{"_index":409,"title":{},"body":{"interfaces/BackoffSettings.html":{},"classes/BundleExecutor.html":{},"interfaces/BundleOptions.html":{},"interfaces/BundlingConfig.html":{},"interfaces/CallOptions.html":{},"classes/CallSettings.html":{},"interfaces/ClientConfig.html":{},"interfaces/MethodConfig.html":{},"classes/RetryOptions.html":{},"interfaces/RetryParamsConfig.html":{},"interfaces/ServiceConfig.html":{},"interfaces/SubResponseInfo.html":{},"classes/Task.html":{},"interfaces/TaskCallback.html":{},"interfaces/TaskData.html":{},"interfaces/TaskElement.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["infrastructure",{"_index":2304,"title":{},"body":{"miscellaneous/functions.html":{}}}],["inherited",{"_index":1410,"title":{},"body":{"classes/OngoingCallPromise.html":{}}}],["init",{"_index":24,"title":{},"body":{"interfaces/APICaller.html":{},"interfaces/ApiCallerSettings.html":{},"classes/BundleApiCaller.html":{},"classes/LongrunningApiCaller.html":{},"classes/NormalApiCaller.html":{},"classes/PagedApiCaller.html":{},"classes/StreamingApiCaller.html":{}}}],["init(settings",{"_index":51,"title":{},"body":{"interfaces/APICaller.html":{},"classes/BundleApiCaller.html":{},"classes/LongrunningApiCaller.html":{},"classes/NormalApiCaller.html":{},"classes/PagedApiCaller.html":{},"classes/StreamingApiCaller.html":{}}}],["initial",{"_index":214,"title":{},"body":{"interfaces/BackoffSettings.html":{},"interfaces/BundlingConfig.html":{},"interfaces/CallOptions.html":{},"classes/CallSettings.html":{},"interfaces/ClientConfig.html":{},"interfaces/MethodConfig.html":{},"classes/RetryOptions.html":{},"interfaces/RetryParamsConfig.html":{},"interfaces/ServiceConfig.html":{},"miscellaneous/functions.html":{}}}],["initial_retry_delay_millis",{"_index":453,"title":{},"body":{"interfaces/BackoffSettings.html":{},"interfaces/BundlingConfig.html":{},"interfaces/CallOptions.html":{},"classes/CallSettings.html":{},"interfaces/ClientConfig.html":{},"interfaces/MethodConfig.html":{},"classes/RetryOptions.html":{},"interfaces/RetryParamsConfig.html":{},"interfaces/ServiceConfig.html":{},"miscellaneous/functions.html":{}}}],["initial_rpc_timeout_millis",{"_index":456,"title":{},"body":{"interfaces/BackoffSettings.html":{},"interfaces/BundlingConfig.html":{},"interfaces/CallOptions.html":{},"classes/CallSettings.html":{},"interfaces/ClientConfig.html":{},"interfaces/MethodConfig.html":{},"classes/RetryOptions.html":{},"interfaces/RetryParamsConfig.html":{},"interfaces/ServiceConfig.html":{},"miscellaneous/functions.html":{}}}],["initialization",{"_index":1307,"title":{},"body":{"interfaces/GetOperationCallback.html":{},"classes/Operation.html":{}}}],["initialize",{"_index":1456,"title":{},"body":{"classes/OperationsClient.html":{},"classes/OperationsClientBuilder.html":{},"interfaces/OperationsClientOptions.html":{}}}],["initialretrydelaymillis",{"_index":115,"title":{},"body":{"interfaces/BackoffSettings.html":{},"interfaces/BundlingConfig.html":{},"interfaces/CallOptions.html":{},"classes/CallSettings.html":{},"interfaces/ClientConfig.html":{},"interfaces/MethodConfig.html":{},"classes/RetryOptions.html":{},"interfaces/RetryParamsConfig.html":{},"interfaces/ServiceConfig.html":{},"miscellaneous/functions.html":{}}}],["initialrpctimeoutmillis",{"_index":116,"title":{},"body":{"interfaces/BackoffSettings.html":{},"interfaces/BundlingConfig.html":{},"interfaces/CallOptions.html":{},"classes/CallSettings.html":{},"interfaces/ClientConfig.html":{},"interfaces/MethodConfig.html":{},"classes/RetryOptions.html":{},"interfaces/RetryParamsConfig.html":{},"interfaces/ServiceConfig.html":{},"miscellaneous/functions.html":{}}}],["initiation",{"_index":223,"title":{},"body":{"interfaces/BackoffSettings.html":{},"interfaces/BundlingConfig.html":{},"interfaces/CallOptions.html":{},"classes/CallSettings.html":{},"interfaces/ClientConfig.html":{},"interfaces/MethodConfig.html":{},"classes/RetryOptions.html":{},"interfaces/RetryParamsConfig.html":{},"interfaces/ServiceConfig.html":{},"miscellaneous/functions.html":{}}}],["inject",{"_index":2047,"title":{},"body":{"changelog.html":{}}}],["inspect",{"_index":590,"title":{},"body":{"interfaces/Bindings.html":{},"interfaces/ParseResult.html":{},"classes/PathTemplate.html":{},"interfaces/Segment.html":{}}}],["install",{"_index":2052,"title":{},"body":{"changelog.html":{},"contributing.html":{},"index.html":{}}}],["installation",{"_index":2327,"title":{},"body":{"index.html":{}}}],["instance",{"_index":329,"title":{},"body":{"interfaces/BackoffSettings.html":{},"classes/BundleExecutor.html":{},"interfaces/BundleOptions.html":{},"interfaces/BundlingConfig.html":{},"interfaces/CallOptions.html":{},"classes/CallSettings.html":{},"interfaces/ClientConfig.html":{},"classes/ClientStub.html":{},"interfaces/ClientStubOptions.html":{},"classes/GoogleProtoFilesRoot.html":{},"classes/GrpcClient.html":{},"interfaces/GrpcClientOptions.html":{},"interfaces/Metadata.html":{},"interfaces/MetadataValue.html":{},"interfaces/MethodConfig.html":{},"classes/OperationsClient.html":{},"classes/OperationsClientBuilder.html":{},"interfaces/OperationsClientOptions.html":{},"classes/RetryOptions.html":{},"interfaces/RetryParamsConfig.html":{},"interfaces/ServiceConfig.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["instanceof",{"_index":1608,"title":{},"body":{"classes/OperationsClient.html":{},"classes/OperationsClientBuilder.html":{},"interfaces/OperationsClientOptions.html":{},"interfaces/SubResponseInfo.html":{},"classes/Task.html":{},"interfaces/TaskCallback.html":{},"interfaces/TaskData.html":{},"interfaces/TaskElement.html":{}}}],["instantiate",{"_index":571,"title":{},"body":{"interfaces/Bindings.html":{},"interfaces/ParseResult.html":{},"classes/PathTemplate.html":{},"interfaces/Segment.html":{}}}],["instead",{"_index":169,"title":{},"body":{"interfaces/BackoffSettings.html":{},"interfaces/BundlingConfig.html":{},"interfaces/CallOptions.html":{},"classes/CallSettings.html":{},"interfaces/ClientConfig.html":{},"classes/ClientStub.html":{},"interfaces/ClientStubOptions.html":{},"classes/GoogleProtoFilesRoot.html":{},"classes/GrpcClient.html":{},"interfaces/GrpcClientOptions.html":{},"interfaces/Metadata.html":{},"interfaces/MetadataValue.html":{},"interfaces/MethodConfig.html":{},"classes/OperationsClient.html":{},"classes/OperationsClientBuilder.html":{},"interfaces/OperationsClientOptions.html":{},"classes/RetryOptions.html":{},"interfaces/RetryParamsConfig.html":{},"interfaces/ServiceConfig.html":{},"changelog.html":{}}}],["instructions",{"_index":2229,"title":{},"body":{"contributing.html":{}}}],["intellectual",{"_index":2221,"title":{},"body":{"contributing.html":{}}}],["intended",{"_index":371,"title":{},"body":{"interfaces/BackoffSettings.html":{},"interfaces/BundlingConfig.html":{},"interfaces/CallOptions.html":{},"classes/CallSettings.html":{},"interfaces/ClientConfig.html":{},"interfaces/MethodConfig.html":{},"classes/RetryOptions.html":{},"interfaces/RetryParamsConfig.html":{},"interfaces/ServiceConfig.html":{},"miscellaneous/functions.html":{}}}],["interested",{"_index":1501,"title":{},"body":{"classes/OperationsClient.html":{},"classes/OperationsClientBuilder.html":{},"interfaces/OperationsClientOptions.html":{}}}],["interface",{"_index":0,"title":{"interfaces/APICaller.html":{},"interfaces/AnyDecoder.html":{},"interfaces/ApiCallerSettings.html":{},"interfaces/BackoffSettings.html":{},"interfaces/Bindings.html":{},"interfaces/BundleOptions.html":{},"interfaces/BundlingConfig.html":{},"interfaces/CallOptions.html":{},"interfaces/CancellablePromise.html":{},"interfaces/ClientConfig.html":{},"interfaces/ClientStubOptions.html":{},"interfaces/Descriptor.html":{},"interfaces/Duplexify.html":{},"interfaces/DuplexifyConstructor.html":{},"interfaces/DuplexifyOptions.html":{},"interfaces/GRPCCallOtherArgs.html":{},"interfaces/GRPCCallResult.html":{},"interfaces/GaxCall.html":{},"interfaces/GaxCallPromise.html":{},"interfaces/GaxCallStream.html":{},"interfaces/GetOperationCallback.html":{},"interfaces/GrpcClientOptions.html":{},"interfaces/Metadata.html":{},"interfaces/MetadataValue.html":{},"interfaces/MethodConfig.html":{},"interfaces/OperationsClientOptions.html":{},"interfaces/ParseResult.html":{},"interfaces/RequestType.html":{},"interfaces/RetryParamsConfig.html":{},"interfaces/Segment.html":{},"interfaces/ServiceConfig.html":{},"interfaces/SimpleCallbackFunction.html":{},"interfaces/SubResponseInfo.html":{},"interfaces/TaskCallback.html":{},"interfaces/TaskData.html":{},"interfaces/TaskElement.html":{}},"body":{"interfaces/APICaller.html":{},"interfaces/AnyDecoder.html":{},"interfaces/ApiCallerSettings.html":{},"interfaces/BackoffSettings.html":{},"interfaces/Bindings.html":{},"classes/BundleExecutor.html":{},"interfaces/BundleOptions.html":{},"interfaces/BundlingConfig.html":{},"interfaces/CallOptions.html":{},"classes/CallSettings.html":{},"interfaces/CancellablePromise.html":{},"interfaces/ClientConfig.html":{},"classes/ClientStub.html":{},"interfaces/ClientStubOptions.html":{},"interfaces/Descriptor.html":{},"interfaces/Duplexify.html":{},"interfaces/DuplexifyConstructor.html":{},"interfaces/DuplexifyOptions.html":{},"interfaces/GRPCCallOtherArgs.html":{},"interfaces/GRPCCallResult.html":{},"interfaces/GaxCall.html":{},"interfaces/GaxCallPromise.html":{},"interfaces/GaxCallStream.html":{},"interfaces/GetOperationCallback.html":{},"classes/GoogleProtoFilesRoot.html":{},"classes/GrpcClient.html":{},"interfaces/GrpcClientOptions.html":{},"classes/LongRunningDescriptor.html":{},"interfaces/Metadata.html":{},"interfaces/MetadataValue.html":{},"interfaces/MethodConfig.html":{},"classes/OngoingCall.html":{},"classes/OngoingCallPromise.html":{},"classes/Operation.html":{},"classes/OperationsClient.html":{},"classes/OperationsClientBuilder.html":{},"interfaces/OperationsClientOptions.html":{},"interfaces/ParseResult.html":{},"classes/PathTemplate.html":{},"interfaces/RequestType.html":{},"classes/RetryOptions.html":{},"interfaces/RetryParamsConfig.html":{},"interfaces/Segment.html":{},"interfaces/ServiceConfig.html":{},"interfaces/SimpleCallbackFunction.html":{},"classes/StreamProxy.html":{},"interfaces/SubResponseInfo.html":{},"classes/Task.html":{},"interfaces/TaskCallback.html":{},"interfaces/TaskData.html":{},"interfaces/TaskElement.html":{}}}],["interfaces",{"_index":2,"title":{},"body":{"interfaces/APICaller.html":{},"interfaces/AnyDecoder.html":{},"interfaces/ApiCallerSettings.html":{},"interfaces/BackoffSettings.html":{},"interfaces/Bindings.html":{},"interfaces/BundleOptions.html":{},"interfaces/BundlingConfig.html":{},"interfaces/CallOptions.html":{},"classes/CallSettings.html":{},"interfaces/CancellablePromise.html":{},"interfaces/ClientConfig.html":{},"interfaces/ClientStubOptions.html":{},"interfaces/Descriptor.html":{},"interfaces/Duplexify.html":{},"interfaces/DuplexifyConstructor.html":{},"interfaces/DuplexifyOptions.html":{},"interfaces/GRPCCallOtherArgs.html":{},"interfaces/GRPCCallResult.html":{},"interfaces/GaxCall.html":{},"interfaces/GaxCallPromise.html":{},"interfaces/GaxCallStream.html":{},"interfaces/GetOperationCallback.html":{},"interfaces/GrpcClientOptions.html":{},"interfaces/Metadata.html":{},"interfaces/MetadataValue.html":{},"interfaces/MethodConfig.html":{},"interfaces/OperationsClientOptions.html":{},"interfaces/ParseResult.html":{},"interfaces/RequestType.html":{},"classes/RetryOptions.html":{},"interfaces/RetryParamsConfig.html":{},"interfaces/Segment.html":{},"interfaces/ServiceConfig.html":{},"interfaces/SimpleCallbackFunction.html":{},"classes/StreamProxy.html":{},"interfaces/SubResponseInfo.html":{},"interfaces/TaskCallback.html":{},"interfaces/TaskData.html":{},"interfaces/TaskElement.html":{},"miscellaneous/functions.html":{},"overview.html":{}}}],["internal",{"_index":372,"title":{},"body":{"interfaces/BackoffSettings.html":{},"interfaces/BundlingConfig.html":{},"interfaces/CallOptions.html":{},"classes/CallSettings.html":{},"interfaces/ClientConfig.html":{},"interfaces/MethodConfig.html":{},"classes/RetryOptions.html":{},"interfaces/RetryParamsConfig.html":{},"interfaces/ServiceConfig.html":{},"changelog.html":{},"miscellaneous/functions.html":{}}}],["internally",{"_index":660,"title":{},"body":{"classes/BundleDescriptor.html":{}}}],["interruption",{"_index":2397,"title":{},"body":{"license.html":{}}}],["intervals",{"_index":1508,"title":{},"body":{"classes/OperationsClient.html":{},"classes/OperationsClientBuilder.html":{},"interfaces/OperationsClientOptions.html":{}}}],["invalid",{"_index":259,"title":{},"body":{"interfaces/BackoffSettings.html":{},"interfaces/BundlingConfig.html":{},"interfaces/CallOptions.html":{},"classes/CallSettings.html":{},"interfaces/ClientConfig.html":{},"interfaces/MethodConfig.html":{},"classes/RetryOptions.html":{},"interfaces/RetryParamsConfig.html":{},"interfaces/ServiceConfig.html":{}}}],["invocation",{"_index":721,"title":{},"body":{"classes/BundleExecutor.html":{},"interfaces/BundleOptions.html":{},"miscellaneous/functions.html":{}}}],["invocations",{"_index":1833,"title":{},"body":{"classes/Task.html":{}}}],["invokes",{"_index":713,"title":{},"body":{"classes/BundleExecutor.html":{},"interfaces/BundleOptions.html":{},"classes/OperationsClient.html":{},"classes/OperationsClientBuilder.html":{},"interfaces/OperationsClientOptions.html":{},"classes/Task.html":{}}}],["invoking",{"_index":739,"title":{},"body":{"classes/BundleExecutor.html":{},"interfaces/BundleOptions.html":{}}}],["isbrowser",{"_index":2269,"title":{},"body":{"miscellaneous/functions.html":{}}}],["isbundling",{"_index":184,"title":{},"body":{"interfaces/BackoffSettings.html":{},"classes/BundleApiCaller.html":{},"interfaces/BundlingConfig.html":{},"interfaces/CallOptions.html":{},"classes/CallSettings.html":{},"interfaces/ClientConfig.html":{},"interfaces/MethodConfig.html":{},"classes/RetryOptions.html":{},"interfaces/RetryParamsConfig.html":{},"interfaces/ServiceConfig.html":{}}}],["issue",{"_index":2130,"title":{},"body":{"changelog.html":{},"contributing.html":{}}}],["it's",{"_index":1158,"title":{},"body":{"interfaces/Duplexify.html":{},"interfaces/DuplexifyConstructor.html":{},"interfaces/DuplexifyOptions.html":{},"classes/StreamProxy.html":{},"interfaces/SubResponseInfo.html":{},"classes/Task.html":{},"interfaces/TaskCallback.html":{},"interfaces/TaskData.html":{},"interfaces/TaskElement.html":{},"changelog.html":{}}}],["iterate",{"_index":1526,"title":{},"body":{"classes/OperationsClient.html":{},"classes/OperationsClientBuilder.html":{},"interfaces/OperationsClientOptions.html":{}}}],["iteration",{"_index":165,"title":{},"body":{"interfaces/BackoffSettings.html":{},"interfaces/BundlingConfig.html":{},"interfaces/CallOptions.html":{},"classes/CallSettings.html":{},"interfaces/ClientConfig.html":{},"interfaces/MethodConfig.html":{},"classes/RetryOptions.html":{},"interfaces/RetryParamsConfig.html":{},"interfaces/ServiceConfig.html":{}}}],["jobs",{"_index":1933,"title":{},"body":{"changelog.html":{}}}],["js",{"_index":723,"title":{},"body":{"classes/BundleExecutor.html":{},"interfaces/BundleOptions.html":{},"interfaces/CancellablePromise.html":{},"classes/ClientStub.html":{},"interfaces/ClientStubOptions.html":{},"interfaces/GetOperationCallback.html":{},"classes/GoogleError.html":{},"classes/GoogleProtoFilesRoot.html":{},"classes/GrpcClient.html":{},"interfaces/GrpcClientOptions.html":{},"interfaces/Metadata.html":{},"interfaces/MetadataValue.html":{},"classes/OngoingCall.html":{},"classes/OngoingCallPromise.html":{},"classes/Operation.html":{},"interfaces/SubResponseInfo.html":{},"classes/Task.html":{},"interfaces/TaskCallback.html":{},"interfaces/TaskData.html":{},"interfaces/TaskElement.html":{},"changelog.html":{},"dependencies.html":{},"index.html":{}}}],["js/package.json').version",{"_index":922,"title":{},"body":{"classes/ClientStub.html":{},"interfaces/ClientStubOptions.html":{},"classes/GoogleProtoFilesRoot.html":{},"classes/GrpcClient.html":{},"interfaces/GrpcClientOptions.html":{},"interfaces/Metadata.html":{},"interfaces/MetadataValue.html":{}}}],["jshint",{"_index":2194,"title":{},"body":{"changelog.html":{}}}],["jsname",{"_index":501,"title":{},"body":{"interfaces/BackoffSettings.html":{},"interfaces/BundlingConfig.html":{},"interfaces/CallOptions.html":{},"classes/CallSettings.html":{},"interfaces/ClientConfig.html":{},"interfaces/MethodConfig.html":{},"classes/RetryOptions.html":{},"interfaces/RetryParamsConfig.html":{},"interfaces/ServiceConfig.html":{}}}],["json",{"_index":463,"title":{},"body":{"interfaces/BackoffSettings.html":{},"interfaces/BundlingConfig.html":{},"interfaces/CallOptions.html":{},"classes/CallSettings.html":{},"interfaces/ClientConfig.html":{},"interfaces/MethodConfig.html":{},"classes/RetryOptions.html":{},"interfaces/RetryParamsConfig.html":{},"interfaces/ServiceConfig.html":{},"miscellaneous/functions.html":{}}}],["json.stringify(request",{"_index":741,"title":{},"body":{"classes/BundleExecutor.html":{},"interfaces/BundleOptions.html":{}}}],["jump",{"_index":2209,"title":{},"body":{"contributing.html":{}}}],["keepcase",{"_index":976,"title":{},"body":{"classes/ClientStub.html":{},"interfaces/ClientStubOptions.html":{},"classes/GoogleProtoFilesRoot.html":{},"classes/GrpcClient.html":{},"interfaces/GrpcClientOptions.html":{},"interfaces/Metadata.html":{},"interfaces/MetadataValue.html":{}}}],["keeps",{"_index":902,"title":{},"body":{"classes/ClientStub.html":{},"interfaces/ClientStubOptions.html":{},"interfaces/GetOperationCallback.html":{},"classes/GoogleProtoFilesRoot.html":{},"classes/GrpcClient.html":{},"interfaces/GrpcClientOptions.html":{},"interfaces/Metadata.html":{},"interfaces/MetadataValue.html":{},"classes/Operation.html":{},"classes/OperationsClient.html":{},"classes/OperationsClientBuilder.html":{},"interfaces/OperationsClientOptions.html":{}}}],["key",{"_index":345,"title":{},"body":{"interfaces/BackoffSettings.html":{},"interfaces/Bindings.html":{},"interfaces/BundlingConfig.html":{},"interfaces/CallOptions.html":{},"classes/CallSettings.html":{},"interfaces/ClientConfig.html":{},"classes/ClientStub.html":{},"interfaces/ClientStubOptions.html":{},"classes/GoogleProtoFilesRoot.html":{},"classes/GrpcClient.html":{},"interfaces/GrpcClientOptions.html":{},"interfaces/Metadata.html":{},"interfaces/MetadataValue.html":{},"interfaces/MethodConfig.html":{},"interfaces/ParseResult.html":{},"classes/PathTemplate.html":{},"classes/RetryOptions.html":{},"interfaces/RetryParamsConfig.html":{},"interfaces/Segment.html":{},"interfaces/ServiceConfig.html":{},"interfaces/SubResponseInfo.html":{},"classes/Task.html":{},"interfaces/TaskCallback.html":{},"interfaces/TaskData.html":{},"interfaces/TaskElement.html":{},"changelog.html":{},"miscellaneous/functions.html":{}}}],["key.startswith('grpc",{"_index":1042,"title":{},"body":{"classes/ClientStub.html":{},"interfaces/ClientStubOptions.html":{},"classes/GoogleProtoFilesRoot.html":{},"classes/GrpcClient.html":{},"interfaces/GrpcClientOptions.html":{},"interfaces/Metadata.html":{},"interfaces/MetadataValue.html":{}}}],["key.tolowercase",{"_index":1005,"title":{},"body":{"classes/ClientStub.html":{},"interfaces/ClientStubOptions.html":{},"classes/GoogleProtoFilesRoot.html":{},"classes/GrpcClient.html":{},"interfaces/GrpcClientOptions.html":{},"interfaces/Metadata.html":{},"interfaces/MetadataValue.html":{}}}],["keyfile",{"_index":905,"title":{},"body":{"classes/ClientStub.html":{},"interfaces/ClientStubOptions.html":{},"classes/GoogleProtoFilesRoot.html":{},"classes/GrpcClient.html":{},"interfaces/GrpcClientOptions.html":{},"interfaces/Metadata.html":{},"interfaces/MetadataValue.html":{}}}],["kind",{"_index":529,"title":{},"body":{"interfaces/Bindings.html":{},"interfaces/ParseResult.html":{},"classes/PathTemplate.html":{},"interfaces/Segment.html":{}}}],["kinds",{"_index":8,"title":{},"body":{"interfaces/APICaller.html":{},"interfaces/ApiCallerSettings.html":{}}}],["know",{"_index":1997,"title":{},"body":{"changelog.html":{}}}],["kokoro",{"_index":1937,"title":{},"body":{"changelog.html":{}}}],["largely",{"_index":2097,"title":{},"body":{"changelog.html":{}}}],["last",{"_index":144,"title":{},"body":{"interfaces/BackoffSettings.html":{},"interfaces/BundlingConfig.html":{},"interfaces/CallOptions.html":{},"classes/CallSettings.html":{},"interfaces/ClientConfig.html":{},"interfaces/MethodConfig.html":{},"classes/RetryOptions.html":{},"interfaces/RetryParamsConfig.html":{},"interfaces/ServiceConfig.html":{}}}],["latest",{"_index":1506,"title":{},"body":{"classes/OperationsClient.html":{},"classes/OperationsClientBuilder.html":{},"interfaces/OperationsClientOptions.html":{},"changelog.html":{}}}],["latestresponse",{"_index":1216,"title":{},"body":{"interfaces/GetOperationCallback.html":{},"classes/Operation.html":{}}}],["leaking",{"_index":2158,"title":{},"body":{"changelog.html":{}}}],["legacy",{"_index":1873,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["legal",{"_index":2211,"title":{},"body":{"contributing.html":{}}}],["length",{"_index":654,"title":{},"body":{"classes/BundleDescriptor.html":{},"classes/ClientStub.html":{},"interfaces/ClientStubOptions.html":{},"classes/GoogleProtoFilesRoot.html":{},"classes/GrpcClient.html":{},"interfaces/GrpcClientOptions.html":{},"interfaces/Metadata.html":{},"interfaces/MetadataValue.html":{}}}],["liability",{"_index":2400,"title":{},"body":{"license.html":{}}}],["liable",{"_index":2385,"title":{},"body":{"license.html":{}}}],["libname",{"_index":1568,"title":{},"body":{"classes/OperationsClient.html":{},"classes/OperationsClientBuilder.html":{},"interfaces/OperationsClientOptions.html":{}}}],["library",{"_index":865,"title":{},"body":{"classes/ClientStub.html":{},"interfaces/ClientStubOptions.html":{},"classes/GoogleProtoFilesRoot.html":{},"classes/GrpcClient.html":{},"interfaces/GrpcClientOptions.html":{},"interfaces/Metadata.html":{},"interfaces/MetadataValue.html":{},"classes/OperationsClient.html":{},"classes/OperationsClientBuilder.html":{},"interfaces/OperationsClientOptions.html":{},"changelog.html":{},"contributing.html":{},"dependencies.html":{},"index.html":{}}}],["library/build/src/auth/googleauth",{"_index":1552,"title":{},"body":{"classes/OperationsClient.html":{},"classes/OperationsClientBuilder.html":{},"interfaces/OperationsClientOptions.html":{}}}],["libversion",{"_index":1569,"title":{},"body":{"classes/OperationsClient.html":{},"classes/OperationsClientBuilder.html":{},"interfaces/OperationsClientOptions.html":{}}}],["license",{"_index":2201,"title":{"license.html":{}},"body":{"contributing.html":{},"index.html":{}}}],["limit",{"_index":253,"title":{},"body":{"interfaces/BackoffSettings.html":{},"classes/BundleExecutor.html":{},"interfaces/BundleOptions.html":{},"interfaces/BundlingConfig.html":{},"interfaces/CallOptions.html":{},"classes/CallSettings.html":{},"interfaces/ClientConfig.html":{},"interfaces/MethodConfig.html":{},"classes/RetryOptions.html":{},"interfaces/RetryParamsConfig.html":{},"interfaces/ServiceConfig.html":{},"changelog.html":{}}}],["limited",{"_index":2379,"title":{},"body":{"license.html":{}}}],["line",{"_index":282,"title":{},"body":{"interfaces/BackoffSettings.html":{},"interfaces/BundlingConfig.html":{},"interfaces/CallOptions.html":{},"classes/CallSettings.html":{},"interfaces/CancellablePromise.html":{},"interfaces/ClientConfig.html":{},"classes/ClientStub.html":{},"interfaces/ClientStubOptions.html":{},"interfaces/GetOperationCallback.html":{},"classes/GoogleProtoFilesRoot.html":{},"classes/GrpcClient.html":{},"interfaces/GrpcClientOptions.html":{},"interfaces/Metadata.html":{},"interfaces/MetadataValue.html":{},"interfaces/MethodConfig.html":{},"classes/OngoingCall.html":{},"classes/OngoingCallPromise.html":{},"classes/Operation.html":{},"classes/OperationsClient.html":{},"classes/OperationsClientBuilder.html":{},"interfaces/OperationsClientOptions.html":{},"classes/RetryOptions.html":{},"interfaces/RetryParamsConfig.html":{},"interfaces/ServiceConfig.html":{},"interfaces/SubResponseInfo.html":{},"classes/Task.html":{},"interfaces/TaskCallback.html":{},"interfaces/TaskData.html":{},"interfaces/TaskElement.html":{}}}],["link",{"_index":376,"title":{},"body":{"interfaces/BackoffSettings.html":{},"interfaces/BundlingConfig.html":{},"interfaces/CallOptions.html":{},"classes/CallSettings.html":{},"interfaces/ClientConfig.html":{},"classes/ClientStub.html":{},"interfaces/ClientStubOptions.html":{},"classes/GoogleProtoFilesRoot.html":{},"classes/GrpcClient.html":{},"interfaces/GrpcClientOptions.html":{},"interfaces/Metadata.html":{},"interfaces/MetadataValue.html":{},"interfaces/MethodConfig.html":{},"classes/OperationsClient.html":{},"classes/OperationsClientBuilder.html":{},"interfaces/OperationsClientOptions.html":{},"classes/RetryOptions.html":{},"interfaces/RetryParamsConfig.html":{},"interfaces/ServiceConfig.html":{}}}],["linkinator",{"_index":1964,"title":{},"body":{"changelog.html":{}}}],["linking",{"_index":2192,"title":{},"body":{"changelog.html":{}}}],["links",{"_index":1960,"title":{},"body":{"changelog.html":{},"contributing.html":{}}}],["lint",{"_index":2079,"title":{},"body":{"changelog.html":{},"contributing.html":{}}}],["lint/fix",{"_index":2007,"title":{},"body":{"changelog.html":{}}}],["list",{"_index":183,"title":{},"body":{"interfaces/BackoffSettings.html":{},"classes/BundleDescriptor.html":{},"interfaces/BundlingConfig.html":{},"interfaces/CallOptions.html":{},"classes/CallSettings.html":{},"interfaces/ClientConfig.html":{},"interfaces/MethodConfig.html":{},"classes/OperationsClient.html":{},"classes/OperationsClientBuilder.html":{},"interfaces/OperationsClientOptions.html":{},"classes/RetryOptions.html":{},"interfaces/RetryParamsConfig.html":{},"interfaces/ServiceConfig.html":{},"classes/Task.html":{},"miscellaneous/functions.html":{},"license.html":{}}}],["listener",{"_index":1248,"title":{},"body":{"interfaces/GetOperationCallback.html":{},"classes/Operation.html":{}}}],["listeners",{"_index":1241,"title":{},"body":{"interfaces/GetOperationCallback.html":{},"classes/Operation.html":{}}}],["listening",{"_index":1237,"title":{},"body":{"interfaces/GetOperationCallback.html":{},"classes/Operation.html":{}}}],["listoperations",{"_index":1461,"title":{},"body":{"classes/OperationsClient.html":{},"classes/OperationsClientBuilder.html":{},"interfaces/OperationsClientOptions.html":{},"miscellaneous/variables.html":{}}}],["listoperations(request",{"_index":1518,"title":{},"body":{"classes/OperationsClient.html":{},"classes/OperationsClientBuilder.html":{},"interfaces/OperationsClientOptions.html":{}}}],["listoperationsstream",{"_index":1462,"title":{},"body":{"classes/OperationsClient.html":{}}}],["listoperationsstream(request",{"_index":1537,"title":{},"body":{"classes/OperationsClient.html":{},"classes/OperationsClientBuilder.html":{},"interfaces/OperationsClientOptions.html":{}}}],["lists",{"_index":1520,"title":{},"body":{"classes/OperationsClient.html":{},"classes/OperationsClientBuilder.html":{},"interfaces/OperationsClientOptions.html":{}}}],["literal",{"_index":30,"title":{},"body":{"interfaces/APICaller.html":{},"interfaces/AnyDecoder.html":{},"interfaces/Bindings.html":{},"classes/BundleApiCaller.html":{},"classes/BundleExecutor.html":{},"interfaces/CallOptions.html":{},"classes/CallSettings.html":{},"interfaces/ClientConfig.html":{},"interfaces/GRPCCallOtherArgs.html":{},"interfaces/GaxCall.html":{},"interfaces/GaxCallPromise.html":{},"interfaces/GaxCallStream.html":{},"interfaces/GetOperationCallback.html":{},"classes/GrpcClient.html":{},"classes/LongrunningApiCaller.html":{},"classes/NormalApiCaller.html":{},"classes/Operation.html":{},"classes/OperationsClient.html":{},"classes/PageDescriptor.html":{},"classes/PagedApiCaller.html":{},"interfaces/ParseResult.html":{},"classes/PathTemplate.html":{},"interfaces/Segment.html":{},"interfaces/ServiceConfig.html":{},"classes/StreamProxy.html":{},"classes/StreamingApiCaller.html":{},"classes/Task.html":{},"miscellaneous/typealiases.html":{}}}],["load",{"_index":912,"title":{},"body":{"classes/ClientStub.html":{},"interfaces/ClientStubOptions.html":{},"classes/GoogleProtoFilesRoot.html":{},"classes/GrpcClient.html":{},"interfaces/GrpcClientOptions.html":{},"interfaces/Metadata.html":{},"interfaces/MetadataValue.html":{},"changelog.html":{}}}],["loaded",{"_index":965,"title":{},"body":{"classes/ClientStub.html":{},"interfaces/ClientStubOptions.html":{},"classes/GoogleProtoFilesRoot.html":{},"classes/GrpcClient.html":{},"interfaces/GrpcClientOptions.html":{},"interfaces/Metadata.html":{},"interfaces/MetadataValue.html":{}}}],["loader",{"_index":860,"title":{},"body":{"classes/ClientStub.html":{},"interfaces/ClientStubOptions.html":{},"classes/GoogleProtoFilesRoot.html":{},"classes/GrpcClient.html":{},"interfaces/GrpcClientOptions.html":{},"interfaces/Metadata.html":{},"interfaces/MetadataValue.html":{},"changelog.html":{},"dependencies.html":{}}}],["loadfromproto",{"_index":1362,"title":{},"body":{"classes/GrpcClient.html":{}}}],["loadfromproto(filename",{"_index":953,"title":{},"body":{"classes/ClientStub.html":{},"interfaces/ClientStubOptions.html":{},"classes/GoogleProtoFilesRoot.html":{},"classes/GrpcClient.html":{},"interfaces/GrpcClientOptions.html":{},"interfaces/Metadata.html":{},"interfaces/MetadataValue.html":{}}}],["loading",{"_index":952,"title":{},"body":{"classes/ClientStub.html":{},"interfaces/ClientStubOptions.html":{},"classes/GoogleProtoFilesRoot.html":{},"classes/GrpcClient.html":{},"interfaces/GrpcClientOptions.html":{},"interfaces/Metadata.html":{},"interfaces/MetadataValue.html":{}}}],["loadobject",{"_index":1874,"title":{},"body":{"changelog.html":{}}}],["loadproto",{"_index":1363,"title":{},"body":{"classes/GrpcClient.html":{}}}],["loadproto(protopath",{"_index":968,"title":{},"body":{"classes/ClientStub.html":{},"interfaces/ClientStubOptions.html":{},"classes/GoogleProtoFilesRoot.html":{},"classes/GrpcClient.html":{},"interfaces/GrpcClientOptions.html":{},"interfaces/Metadata.html":{},"interfaces/MetadataValue.html":{}}}],["loads",{"_index":880,"title":{},"body":{"classes/ClientStub.html":{},"interfaces/ClientStubOptions.html":{},"classes/GoogleProtoFilesRoot.html":{},"classes/GrpcClient.html":{},"interfaces/GrpcClientOptions.html":{},"interfaces/Metadata.html":{},"interfaces/MetadataValue.html":{}}}],["lodash",{"_index":2125,"title":{},"body":{"changelog.html":{}}}],["lodash.at",{"_index":2252,"title":{},"body":{"dependencies.html":{}}}],["lodash.flatten",{"_index":2118,"title":{},"body":{"changelog.html":{}}}],["lodash.has",{"_index":2254,"title":{},"body":{"dependencies.html":{}}}],["logic",{"_index":878,"title":{},"body":{"classes/ClientStub.html":{},"interfaces/ClientStubOptions.html":{},"interfaces/Duplexify.html":{},"interfaces/DuplexifyConstructor.html":{},"interfaces/DuplexifyOptions.html":{},"classes/GoogleProtoFilesRoot.html":{},"classes/GrpcClient.html":{},"interfaces/GrpcClientOptions.html":{},"interfaces/Metadata.html":{},"interfaces/MetadataValue.html":{},"classes/StreamProxy.html":{}}}],["long",{"_index":15,"title":{},"body":{"interfaces/APICaller.html":{},"interfaces/AnyDecoder.html":{},"interfaces/ApiCallerSettings.html":{},"interfaces/GRPCCallOtherArgs.html":{},"interfaces/GRPCCallResult.html":{},"interfaces/GaxCall.html":{},"interfaces/GaxCallPromise.html":{},"interfaces/GaxCallStream.html":{},"interfaces/GetOperationCallback.html":{},"classes/LongRunningDescriptor.html":{},"classes/LongrunningApiCaller.html":{},"classes/Operation.html":{},"classes/OperationsClient.html":{},"classes/OperationsClientBuilder.html":{},"interfaces/OperationsClientOptions.html":{},"interfaces/RequestType.html":{},"interfaces/SimpleCallbackFunction.html":{}}}],["longer",{"_index":231,"title":{},"body":{"interfaces/BackoffSettings.html":{},"interfaces/BundlingConfig.html":{},"interfaces/CallOptions.html":{},"classes/CallSettings.html":{},"interfaces/ClientConfig.html":{},"interfaces/MethodConfig.html":{},"classes/OperationsClient.html":{},"classes/OperationsClientBuilder.html":{},"interfaces/OperationsClientOptions.html":{},"classes/RetryOptions.html":{},"interfaces/RetryParamsConfig.html":{},"interfaces/ServiceConfig.html":{},"changelog.html":{},"miscellaneous/functions.html":{}}}],["longrunning",{"_index":186,"title":{},"body":{"interfaces/BackoffSettings.html":{},"interfaces/BundlingConfig.html":{},"interfaces/CallOptions.html":{},"classes/CallSettings.html":{},"interfaces/ClientConfig.html":{},"classes/LongrunningApiCaller.html":{},"interfaces/MethodConfig.html":{},"classes/RetryOptions.html":{},"interfaces/RetryParamsConfig.html":{},"interfaces/ServiceConfig.html":{}}}],["longrunning.googleapis.com",{"_index":1557,"title":{},"body":{"classes/OperationsClient.html":{},"classes/OperationsClientBuilder.html":{},"interfaces/OperationsClientOptions.html":{},"miscellaneous/variables.html":{}}}],["longrunning.operationsclient",{"_index":1494,"title":{},"body":{"classes/OperationsClient.html":{},"classes/OperationsClientBuilder.html":{},"interfaces/OperationsClientOptions.html":{}}}],["longrunningapicaller",{"_index":96,"title":{"classes/LongrunningApiCaller.html":{}},"body":{"interfaces/AnyDecoder.html":{},"classes/LongRunningDescriptor.html":{},"classes/LongrunningApiCaller.html":{}}}],["longrunningapicaller(this",{"_index":108,"title":{},"body":{"interfaces/AnyDecoder.html":{},"classes/LongRunningDescriptor.html":{}}}],["longrunningcalls/longrunning",{"_index":1178,"title":{},"body":{"interfaces/GRPCCallOtherArgs.html":{},"interfaces/GRPCCallResult.html":{},"interfaces/GaxCall.html":{},"interfaces/GaxCallPromise.html":{},"interfaces/GaxCallStream.html":{},"interfaces/RequestType.html":{},"interfaces/SimpleCallbackFunction.html":{}}}],["longrunningcalls/longrunningdescriptor",{"_index":1085,"title":{},"body":{"interfaces/Descriptor.html":{}}}],["longrunningdescriptor",{"_index":99,"title":{"classes/LongRunningDescriptor.html":{}},"body":{"interfaces/AnyDecoder.html":{},"interfaces/Descriptor.html":{},"interfaces/GetOperationCallback.html":{},"classes/LongRunningDescriptor.html":{},"classes/LongrunningApiCaller.html":{},"classes/Operation.html":{},"miscellaneous/functions.html":{}}}],["longs",{"_index":977,"title":{},"body":{"classes/ClientStub.html":{},"interfaces/ClientStubOptions.html":{},"classes/GoogleProtoFilesRoot.html":{},"classes/GrpcClient.html":{},"interfaces/GrpcClientOptions.html":{},"interfaces/Metadata.html":{},"interfaces/MetadataValue.html":{}}}],["look",{"_index":1015,"title":{},"body":{"classes/ClientStub.html":{},"interfaces/ClientStubOptions.html":{},"classes/GoogleProtoFilesRoot.html":{},"classes/GrpcClient.html":{},"interfaces/GrpcClientOptions.html":{},"interfaces/Metadata.html":{},"interfaces/MetadataValue.html":{}}}],["loop",{"_index":1305,"title":{},"body":{"interfaces/GetOperationCallback.html":{},"classes/Operation.html":{}}}],["loss",{"_index":2394,"title":{},"body":{"license.html":{}}}],["love",{"_index":2205,"title":{},"body":{"contributing.html":{}}}],["lro",{"_index":1945,"title":{},"body":{"changelog.html":{},"miscellaneous/functions.html":{}}}],["lro(options",{"_index":2311,"title":{},"body":{"miscellaneous/functions.html":{}}}],["made",{"_index":241,"title":{},"body":{"interfaces/BackoffSettings.html":{},"interfaces/BundlingConfig.html":{},"interfaces/CallOptions.html":{},"classes/CallSettings.html":{},"interfaces/ClientConfig.html":{},"interfaces/MethodConfig.html":{},"classes/RetryOptions.html":{},"interfaces/RetryParamsConfig.html":{},"interfaces/ServiceConfig.html":{},"miscellaneous/functions.html":{}}}],["make",{"_index":295,"title":{},"body":{"interfaces/BackoffSettings.html":{},"interfaces/BundlingConfig.html":{},"interfaces/CallOptions.html":{},"classes/CallSettings.html":{},"interfaces/ClientConfig.html":{},"interfaces/MethodConfig.html":{},"classes/OperationsClient.html":{},"classes/OperationsClientBuilder.html":{},"interfaces/OperationsClientOptions.html":{},"classes/RetryOptions.html":{},"interfaces/RetryParamsConfig.html":{},"interfaces/ServiceConfig.html":{},"miscellaneous/functions.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["makes",{"_index":1473,"title":{},"body":{"classes/OperationsClient.html":{},"classes/OperationsClientBuilder.html":{},"interfaces/OperationsClientOptions.html":{}}}],["making",{"_index":1226,"title":{},"body":{"interfaces/GetOperationCallback.html":{},"classes/Operation.html":{},"miscellaneous/functions.html":{}}}],["manages",{"_index":822,"title":{},"body":{"interfaces/CancellablePromise.html":{},"classes/OngoingCall.html":{},"classes/OngoingCallPromise.html":{},"classes/OperationsClient.html":{},"classes/OperationsClientBuilder.html":{},"interfaces/OperationsClientOptions.html":{},"miscellaneous/functions.html":{}}}],["manner",{"_index":663,"title":{},"body":{"classes/BundleDescriptor.html":{}}}],["many",{"_index":1239,"title":{},"body":{"interfaces/GetOperationCallback.html":{},"classes/Operation.html":{}}}],["map",{"_index":1929,"title":{},"body":{"changelog.html":{}}}],["map(f",{"_index":886,"title":{},"body":{"classes/ClientStub.html":{},"interfaces/ClientStubOptions.html":{},"classes/GoogleProtoFilesRoot.html":{},"classes/GrpcClient.html":{},"interfaces/GrpcClientOptions.html":{},"interfaces/Metadata.html":{},"interfaces/MetadataValue.html":{},"miscellaneous/variables.html":{}}}],["map(name",{"_index":424,"title":{},"body":{"interfaces/BackoffSettings.html":{},"interfaces/BundlingConfig.html":{},"interfaces/CallOptions.html":{},"classes/CallSettings.html":{},"interfaces/ClientConfig.html":{},"interfaces/MethodConfig.html":{},"classes/RetryOptions.html":{},"interfaces/RetryParamsConfig.html":{},"interfaces/ServiceConfig.html":{}}}],["mapping",{"_index":416,"title":{},"body":{"interfaces/BackoffSettings.html":{},"interfaces/Bindings.html":{},"interfaces/BundlingConfig.html":{},"interfaces/CallOptions.html":{},"classes/CallSettings.html":{},"interfaces/ClientConfig.html":{},"classes/ClientStub.html":{},"interfaces/ClientStubOptions.html":{},"classes/GoogleProtoFilesRoot.html":{},"classes/GrpcClient.html":{},"interfaces/GrpcClientOptions.html":{},"interfaces/Metadata.html":{},"interfaces/MetadataValue.html":{},"interfaces/MethodConfig.html":{},"interfaces/ParseResult.html":{},"classes/PathTemplate.html":{},"classes/RetryOptions.html":{},"interfaces/RetryParamsConfig.html":{},"interfaces/Segment.html":{},"interfaces/ServiceConfig.html":{},"miscellaneous/functions.html":{}}}],["match",{"_index":570,"title":{},"body":{"interfaces/Bindings.html":{},"classes/OperationsClient.html":{},"classes/OperationsClientBuilder.html":{},"interfaces/OperationsClientOptions.html":{},"interfaces/ParseResult.html":{},"classes/PathTemplate.html":{},"interfaces/Segment.html":{}}}],["match(path",{"_index":547,"title":{},"body":{"interfaces/Bindings.html":{},"interfaces/ParseResult.html":{},"classes/PathTemplate.html":{},"interfaces/Segment.html":{}}}],["matched",{"_index":542,"title":{},"body":{"interfaces/Bindings.html":{},"interfaces/ParseResult.html":{},"classes/PathTemplate.html":{},"interfaces/Segment.html":{}}}],["matches",{"_index":539,"title":{},"body":{"interfaces/Bindings.html":{},"interfaces/ParseResult.html":{},"classes/PathTemplate.html":{},"interfaces/Segment.html":{}}}],["matching",{"_index":82,"title":{},"body":{"interfaces/APICaller.html":{},"interfaces/AnyDecoder.html":{},"interfaces/ApiCallerSettings.html":{},"interfaces/BackoffSettings.html":{},"interfaces/Bindings.html":{},"classes/BundleApiCaller.html":{},"classes/BundleDescriptor.html":{},"classes/BundleExecutor.html":{},"interfaces/BundleOptions.html":{},"interfaces/BundlingConfig.html":{},"interfaces/CallOptions.html":{},"classes/CallSettings.html":{},"interfaces/CancellablePromise.html":{},"interfaces/ClientConfig.html":{},"classes/ClientStub.html":{},"interfaces/ClientStubOptions.html":{},"interfaces/Descriptor.html":{},"interfaces/Duplexify.html":{},"interfaces/DuplexifyConstructor.html":{},"interfaces/DuplexifyOptions.html":{},"interfaces/GRPCCallOtherArgs.html":{},"interfaces/GRPCCallResult.html":{},"interfaces/GaxCall.html":{},"interfaces/GaxCallPromise.html":{},"interfaces/GaxCallStream.html":{},"interfaces/GetOperationCallback.html":{},"classes/GoogleError.html":{},"classes/GoogleProtoFilesRoot.html":{},"classes/GrpcClient.html":{},"interfaces/GrpcClientOptions.html":{},"classes/LongRunningDescriptor.html":{},"classes/LongrunningApiCaller.html":{},"interfaces/Metadata.html":{},"interfaces/MetadataValue.html":{},"interfaces/MethodConfig.html":{},"classes/NormalApiCaller.html":{},"classes/OngoingCall.html":{},"classes/OngoingCallPromise.html":{},"classes/Operation.html":{},"classes/OperationsClient.html":{},"classes/OperationsClientBuilder.html":{},"interfaces/OperationsClientOptions.html":{},"classes/PageDescriptor.html":{},"classes/PagedApiCaller.html":{},"interfaces/ParseResult.html":{},"classes/PathTemplate.html":{},"interfaces/RequestType.html":{},"classes/RetryOptions.html":{},"interfaces/RetryParamsConfig.html":{},"interfaces/Segment.html":{},"interfaces/ServiceConfig.html":{},"interfaces/SimpleCallbackFunction.html":{},"classes/StreamDescriptor.html":{},"classes/StreamProxy.html":{},"classes/StreamingApiCaller.html":{},"interfaces/SubResponseInfo.html":{},"classes/Task.html":{},"interfaces/TaskCallback.html":{},"interfaces/TaskData.html":{},"interfaces/TaskElement.html":{},"changelog.html":{},"contributing.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["materials",{"_index":2364,"title":{},"body":{"license.html":{}}}],["math.min(delay",{"_index":1345,"title":{},"body":{"interfaces/GetOperationCallback.html":{},"classes/Operation.html":{}}}],["max_retry_delay_millis",{"_index":455,"title":{},"body":{"interfaces/BackoffSettings.html":{},"interfaces/BundlingConfig.html":{},"interfaces/CallOptions.html":{},"classes/CallSettings.html":{},"interfaces/ClientConfig.html":{},"interfaces/MethodConfig.html":{},"classes/RetryOptions.html":{},"interfaces/RetryParamsConfig.html":{},"interfaces/ServiceConfig.html":{},"miscellaneous/functions.html":{}}}],["max_rpc_timeout_millis",{"_index":458,"title":{},"body":{"interfaces/BackoffSettings.html":{},"interfaces/BundlingConfig.html":{},"interfaces/CallOptions.html":{},"classes/CallSettings.html":{},"interfaces/ClientConfig.html":{},"interfaces/MethodConfig.html":{},"classes/RetryOptions.html":{},"interfaces/RetryParamsConfig.html":{},"interfaces/ServiceConfig.html":{},"miscellaneous/functions.html":{}}}],["maxdelay",{"_index":1313,"title":{},"body":{"interfaces/GetOperationCallback.html":{},"classes/Operation.html":{}}}],["maximum",{"_index":228,"title":{},"body":{"interfaces/BackoffSettings.html":{},"interfaces/BundlingConfig.html":{},"interfaces/CallOptions.html":{},"classes/CallSettings.html":{},"interfaces/ClientConfig.html":{},"interfaces/MethodConfig.html":{},"classes/OperationsClient.html":{},"classes/OperationsClientBuilder.html":{},"interfaces/OperationsClientOptions.html":{},"classes/RetryOptions.html":{},"interfaces/RetryParamsConfig.html":{},"interfaces/ServiceConfig.html":{},"miscellaneous/functions.html":{}}}],["maxresults",{"_index":174,"title":{},"body":{"interfaces/BackoffSettings.html":{},"interfaces/BundlingConfig.html":{},"interfaces/CallOptions.html":{},"classes/CallSettings.html":{},"interfaces/ClientConfig.html":{},"interfaces/MethodConfig.html":{},"classes/PageDescriptor.html":{},"classes/PagedApiCaller.html":{},"classes/RetryOptions.html":{},"interfaces/RetryParamsConfig.html":{},"interfaces/ServiceConfig.html":{}}}],["maxretries",{"_index":117,"title":{},"body":{"interfaces/BackoffSettings.html":{},"interfaces/BundlingConfig.html":{},"interfaces/CallOptions.html":{},"classes/CallSettings.html":{},"interfaces/ClientConfig.html":{},"interfaces/MethodConfig.html":{},"classes/RetryOptions.html":{},"interfaces/RetryParamsConfig.html":{},"interfaces/ServiceConfig.html":{},"miscellaneous/functions.html":{}}}],["maxretrydelaymillis",{"_index":118,"title":{},"body":{"interfaces/BackoffSettings.html":{},"interfaces/BundlingConfig.html":{},"interfaces/CallOptions.html":{},"classes/CallSettings.html":{},"interfaces/ClientConfig.html":{},"interfaces/MethodConfig.html":{},"classes/RetryOptions.html":{},"interfaces/RetryParamsConfig.html":{},"interfaces/ServiceConfig.html":{},"miscellaneous/functions.html":{}}}],["maxrpctimeoutmillis",{"_index":119,"title":{},"body":{"interfaces/BackoffSettings.html":{},"interfaces/BundlingConfig.html":{},"interfaces/CallOptions.html":{},"classes/CallSettings.html":{},"interfaces/ClientConfig.html":{},"interfaces/MethodConfig.html":{},"classes/RetryOptions.html":{},"interfaces/RetryParamsConfig.html":{},"interfaces/ServiceConfig.html":{},"miscellaneous/functions.html":{}}}],["maybe",{"_index":2248,"title":{},"body":{"contributing.html":{}}}],["meaning",{"_index":292,"title":{},"body":{"interfaces/BackoffSettings.html":{},"interfaces/BundlingConfig.html":{},"interfaces/CallOptions.html":{},"classes/CallSettings.html":{},"interfaces/ClientConfig.html":{},"classes/ClientStub.html":{},"interfaces/ClientStubOptions.html":{},"classes/GoogleProtoFilesRoot.html":{},"classes/GrpcClient.html":{},"interfaces/GrpcClientOptions.html":{},"interfaces/Metadata.html":{},"interfaces/MetadataValue.html":{},"interfaces/MethodConfig.html":{},"classes/RetryOptions.html":{},"interfaces/RetryParamsConfig.html":{},"interfaces/ServiceConfig.html":{}}}],["meanwhile",{"_index":242,"title":{},"body":{"interfaces/BackoffSettings.html":{},"interfaces/BundlingConfig.html":{},"interfaces/CallOptions.html":{},"classes/CallSettings.html":{},"interfaces/ClientConfig.html":{},"interfaces/MethodConfig.html":{},"classes/RetryOptions.html":{},"interfaces/RetryParamsConfig.html":{},"interfaces/ServiceConfig.html":{},"miscellaneous/functions.html":{}}}],["mechanisms",{"_index":1225,"title":{},"body":{"interfaces/GetOperationCallback.html":{},"classes/Operation.html":{},"miscellaneous/functions.html":{}}}],["merchantability",{"_index":2380,"title":{},"body":{"license.html":{}}}],["merge",{"_index":332,"title":{},"body":{"interfaces/BackoffSettings.html":{},"interfaces/BundlingConfig.html":{},"interfaces/CallOptions.html":{},"classes/CallSettings.html":{},"interfaces/ClientConfig.html":{},"interfaces/MethodConfig.html":{},"classes/RetryOptions.html":{},"interfaces/RetryParamsConfig.html":{},"interfaces/ServiceConfig.html":{}}}],["merge(options",{"_index":334,"title":{},"body":{"interfaces/BackoffSettings.html":{},"interfaces/BundlingConfig.html":{},"interfaces/CallOptions.html":{},"classes/CallSettings.html":{},"interfaces/ClientConfig.html":{},"interfaces/MethodConfig.html":{},"classes/RetryOptions.html":{},"interfaces/RetryParamsConfig.html":{},"interfaces/ServiceConfig.html":{}}}],["merged",{"_index":327,"title":{},"body":{"interfaces/BackoffSettings.html":{},"interfaces/BundlingConfig.html":{},"interfaces/CallOptions.html":{},"classes/CallSettings.html":{},"interfaces/ClientConfig.html":{},"interfaces/MethodConfig.html":{},"classes/RetryOptions.html":{},"interfaces/RetryParamsConfig.html":{},"interfaces/ServiceConfig.html":{}}}],["mergeretryoptions",{"_index":446,"title":{},"body":{"interfaces/BackoffSettings.html":{},"interfaces/BundlingConfig.html":{},"interfaces/CallOptions.html":{},"classes/CallSettings.html":{},"interfaces/ClientConfig.html":{},"interfaces/MethodConfig.html":{},"classes/RetryOptions.html":{},"interfaces/RetryParamsConfig.html":{},"interfaces/ServiceConfig.html":{}}}],["merges",{"_index":439,"title":{},"body":{"interfaces/BackoffSettings.html":{},"interfaces/BundlingConfig.html":{},"interfaces/CallOptions.html":{},"classes/CallSettings.html":{},"interfaces/ClientConfig.html":{},"interfaces/MethodConfig.html":{},"classes/RetryOptions.html":{},"interfaces/RetryParamsConfig.html":{},"interfaces/ServiceConfig.html":{}}}],["message",{"_index":88,"title":{},"body":{"interfaces/AnyDecoder.html":{},"classes/BundleDescriptor.html":{},"classes/BundleExecutor.html":{},"interfaces/BundleOptions.html":{},"classes/ClientStub.html":{},"interfaces/ClientStubOptions.html":{},"interfaces/Duplexify.html":{},"interfaces/DuplexifyConstructor.html":{},"interfaces/DuplexifyOptions.html":{},"classes/GoogleProtoFilesRoot.html":{},"classes/GrpcClient.html":{},"interfaces/GrpcClientOptions.html":{},"classes/LongRunningDescriptor.html":{},"interfaces/Metadata.html":{},"interfaces/MetadataValue.html":{},"classes/StreamProxy.html":{},"miscellaneous/functions.html":{}}}],["message.encode(obj).finish().length",{"_index":1058,"title":{},"body":{"classes/ClientStub.html":{},"interfaces/ClientStubOptions.html":{},"classes/GoogleProtoFilesRoot.html":{},"classes/GrpcClient.html":{},"interfaces/GrpcClientOptions.html":{},"interfaces/Metadata.html":{},"interfaces/MetadataValue.html":{}}}],["messages",{"_index":646,"title":{},"body":{"classes/BundleDescriptor.html":{}}}],["met",{"_index":2357,"title":{},"body":{"license.html":{}}}],["metadata",{"_index":93,"title":{"interfaces/Metadata.html":{}},"body":{"interfaces/AnyDecoder.html":{},"classes/ClientStub.html":{},"interfaces/ClientStubOptions.html":{},"interfaces/Duplexify.html":{},"interfaces/DuplexifyConstructor.html":{},"interfaces/DuplexifyOptions.html":{},"interfaces/GRPCCallOtherArgs.html":{},"interfaces/GRPCCallResult.html":{},"interfaces/GaxCall.html":{},"interfaces/GaxCallPromise.html":{},"interfaces/GaxCallStream.html":{},"interfaces/GetOperationCallback.html":{},"classes/GoogleProtoFilesRoot.html":{},"classes/GrpcClient.html":{},"interfaces/GrpcClientOptions.html":{},"classes/LongRunningDescriptor.html":{},"interfaces/Metadata.html":{},"interfaces/MetadataValue.html":{},"classes/Operation.html":{},"classes/PagedApiCaller.html":{},"interfaces/RequestType.html":{},"interfaces/SimpleCallbackFunction.html":{},"classes/StreamProxy.html":{},"classes/StreamingApiCaller.html":{},"changelog.html":{},"miscellaneous/functions.html":{}}}],["metadata.add(key",{"_index":1011,"title":{},"body":{"classes/ClientStub.html":{},"interfaces/ClientStubOptions.html":{},"classes/GoogleProtoFilesRoot.html":{},"classes/GrpcClient.html":{},"interfaces/GrpcClientOptions.html":{},"interfaces/Metadata.html":{},"interfaces/MetadataValue.html":{}}}],["metadata.clone",{"_index":1009,"title":{},"body":{"classes/ClientStub.html":{},"interfaces/ClientStubOptions.html":{},"classes/GoogleProtoFilesRoot.html":{},"classes/GrpcClient.html":{},"interfaces/GrpcClientOptions.html":{},"interfaces/Metadata.html":{},"interfaces/MetadataValue.html":{}}}],["metadata.set(key",{"_index":1012,"title":{},"body":{"classes/ClientStub.html":{},"interfaces/ClientStubOptions.html":{},"classes/GoogleProtoFilesRoot.html":{},"classes/GrpcClient.html":{},"interfaces/GrpcClientOptions.html":{},"interfaces/Metadata.html":{},"interfaces/MetadataValue.html":{}}}],["metadatabuilder",{"_index":1022,"title":{},"body":{"classes/ClientStub.html":{},"interfaces/ClientStubOptions.html":{},"interfaces/GRPCCallOtherArgs.html":{},"interfaces/GRPCCallResult.html":{},"interfaces/GaxCall.html":{},"interfaces/GaxCallPromise.html":{},"interfaces/GaxCallStream.html":{},"classes/GoogleProtoFilesRoot.html":{},"classes/GrpcClient.html":{},"interfaces/GrpcClientOptions.html":{},"interfaces/Metadata.html":{},"interfaces/MetadataValue.html":{},"interfaces/RequestType.html":{},"interfaces/SimpleCallbackFunction.html":{}}}],["metadatabuilder(headers",{"_index":988,"title":{},"body":{"classes/ClientStub.html":{},"interfaces/ClientStubOptions.html":{},"classes/GoogleProtoFilesRoot.html":{},"classes/GrpcClient.html":{},"interfaces/GrpcClientOptions.html":{},"interfaces/Metadata.html":{},"interfaces/MetadataValue.html":{}}}],["metadatadecoder",{"_index":102,"title":{},"body":{"interfaces/AnyDecoder.html":{},"interfaces/GetOperationCallback.html":{},"classes/LongRunningDescriptor.html":{},"classes/Operation.html":{}}}],["metadatadecoder(op.metadata.value",{"_index":1300,"title":{},"body":{"interfaces/GetOperationCallback.html":{},"classes/Operation.html":{}}}],["metadatavalue",{"_index":890,"title":{"interfaces/MetadataValue.html":{}},"body":{"classes/ClientStub.html":{},"interfaces/ClientStubOptions.html":{},"interfaces/GetOperationCallback.html":{},"classes/GoogleProtoFilesRoot.html":{},"classes/GrpcClient.html":{},"interfaces/GrpcClientOptions.html":{},"interfaces/Metadata.html":{},"interfaces/MetadataValue.html":{},"classes/Operation.html":{}}}],["method",{"_index":195,"title":{},"body":{"interfaces/BackoffSettings.html":{},"classes/BundleExecutor.html":{},"interfaces/BundleOptions.html":{},"interfaces/BundlingConfig.html":{},"interfaces/CallOptions.html":{},"classes/CallSettings.html":{},"interfaces/ClientConfig.html":{},"classes/ClientStub.html":{},"interfaces/ClientStubOptions.html":{},"interfaces/Duplexify.html":{},"interfaces/DuplexifyConstructor.html":{},"interfaces/DuplexifyOptions.html":{},"interfaces/GRPCCallOtherArgs.html":{},"interfaces/GRPCCallResult.html":{},"interfaces/GaxCall.html":{},"interfaces/GaxCallPromise.html":{},"interfaces/GaxCallStream.html":{},"interfaces/GetOperationCallback.html":{},"classes/GoogleProtoFilesRoot.html":{},"classes/GrpcClient.html":{},"interfaces/GrpcClientOptions.html":{},"interfaces/Metadata.html":{},"interfaces/MetadataValue.html":{},"interfaces/MethodConfig.html":{},"classes/Operation.html":{},"classes/OperationsClient.html":{},"classes/OperationsClientBuilder.html":{},"interfaces/OperationsClientOptions.html":{},"classes/PagedApiCaller.html":{},"interfaces/RequestType.html":{},"classes/RetryOptions.html":{},"interfaces/RetryParamsConfig.html":{},"interfaces/ServiceConfig.html":{},"interfaces/SimpleCallbackFunction.html":{},"classes/StreamProxy.html":{},"classes/StreamingApiCaller.html":{},"interfaces/SubResponseInfo.html":{},"classes/Task.html":{},"interfaces/TaskCallback.html":{},"interfaces/TaskData.html":{},"interfaces/TaskElement.html":{},"miscellaneous/functions.html":{}}}],["methodconfig",{"_index":403,"title":{"interfaces/MethodConfig.html":{}},"body":{"interfaces/BackoffSettings.html":{},"interfaces/BundlingConfig.html":{},"interfaces/CallOptions.html":{},"classes/CallSettings.html":{},"interfaces/ClientConfig.html":{},"interfaces/MethodConfig.html":{},"classes/RetryOptions.html":{},"interfaces/RetryParamsConfig.html":{},"interfaces/ServiceConfig.html":{},"changelog.html":{}}}],["methodconfig.bundling",{"_index":506,"title":{},"body":{"interfaces/BackoffSettings.html":{},"interfaces/BundlingConfig.html":{},"interfaces/CallOptions.html":{},"classes/CallSettings.html":{},"interfaces/ClientConfig.html":{},"interfaces/MethodConfig.html":{},"classes/RetryOptions.html":{},"interfaces/RetryParamsConfig.html":{},"interfaces/ServiceConfig.html":{}}}],["methodconfig.retry_params_name",{"_index":427,"title":{},"body":{"interfaces/BackoffSettings.html":{},"interfaces/BundlingConfig.html":{},"interfaces/CallOptions.html":{},"classes/CallSettings.html":{},"interfaces/ClientConfig.html":{},"interfaces/MethodConfig.html":{},"classes/RetryOptions.html":{},"interfaces/RetryParamsConfig.html":{},"interfaces/ServiceConfig.html":{}}}],["methodconfig.timeout_millis",{"_index":507,"title":{},"body":{"interfaces/BackoffSettings.html":{},"interfaces/BundlingConfig.html":{},"interfaces/CallOptions.html":{},"classes/CallSettings.html":{},"interfaces/ClientConfig.html":{},"interfaces/MethodConfig.html":{},"classes/RetryOptions.html":{},"interfaces/RetryParamsConfig.html":{},"interfaces/ServiceConfig.html":{}}}],["methodconfig['retry_codes_name",{"_index":422,"title":{},"body":{"interfaces/BackoffSettings.html":{},"interfaces/BundlingConfig.html":{},"interfaces/CallOptions.html":{},"classes/CallSettings.html":{},"interfaces/ClientConfig.html":{},"interfaces/MethodConfig.html":{},"classes/RetryOptions.html":{},"interfaces/RetryParamsConfig.html":{},"interfaces/ServiceConfig.html":{}}}],["methodname",{"_index":499,"title":{},"body":{"interfaces/BackoffSettings.html":{},"interfaces/BundlingConfig.html":{},"interfaces/CallOptions.html":{},"classes/CallSettings.html":{},"interfaces/ClientConfig.html":{},"interfaces/MethodConfig.html":{},"classes/OperationsClient.html":{},"classes/OperationsClientBuilder.html":{},"interfaces/OperationsClientOptions.html":{},"classes/RetryOptions.html":{},"interfaces/RetryParamsConfig.html":{},"interfaces/ServiceConfig.html":{}}}],["methodname.slice(1",{"_index":503,"title":{},"body":{"interfaces/BackoffSettings.html":{},"interfaces/BundlingConfig.html":{},"interfaces/CallOptions.html":{},"classes/CallSettings.html":{},"interfaces/ClientConfig.html":{},"interfaces/MethodConfig.html":{},"classes/RetryOptions.html":{},"interfaces/RetryParamsConfig.html":{},"interfaces/ServiceConfig.html":{}}}],["methodname[0].tolowercase",{"_index":502,"title":{},"body":{"interfaces/BackoffSettings.html":{},"interfaces/BundlingConfig.html":{},"interfaces/CallOptions.html":{},"classes/CallSettings.html":{},"interfaces/ClientConfig.html":{},"interfaces/MethodConfig.html":{},"classes/RetryOptions.html":{},"interfaces/RetryParamsConfig.html":{},"interfaces/ServiceConfig.html":{}}}],["methods",{"_index":21,"title":{},"body":{"interfaces/APICaller.html":{},"interfaces/BackoffSettings.html":{},"classes/BundleApiCaller.html":{},"classes/BundleDescriptor.html":{},"classes/BundleExecutor.html":{},"interfaces/BundlingConfig.html":{},"interfaces/CallOptions.html":{},"classes/CallSettings.html":{},"interfaces/CancellablePromise.html":{},"interfaces/ClientConfig.html":{},"interfaces/Descriptor.html":{},"interfaces/Duplexify.html":{},"interfaces/DuplexifyConstructor.html":{},"interfaces/GRPCCallResult.html":{},"classes/GoogleProtoFilesRoot.html":{},"classes/GrpcClient.html":{},"classes/LongRunningDescriptor.html":{},"classes/LongrunningApiCaller.html":{},"interfaces/MethodConfig.html":{},"classes/NormalApiCaller.html":{},"classes/OngoingCall.html":{},"classes/OngoingCallPromise.html":{},"classes/Operation.html":{},"classes/OperationsClient.html":{},"classes/OperationsClientBuilder.html":{},"interfaces/OperationsClientOptions.html":{},"classes/PageDescriptor.html":{},"classes/PagedApiCaller.html":{},"classes/PathTemplate.html":{},"classes/RetryOptions.html":{},"interfaces/RetryParamsConfig.html":{},"interfaces/ServiceConfig.html":{},"classes/StreamDescriptor.html":{},"classes/StreamProxy.html":{},"classes/StreamingApiCaller.html":{},"classes/Task.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["methods[methodname",{"_index":500,"title":{},"body":{"interfaces/BackoffSettings.html":{},"interfaces/BundlingConfig.html":{},"interfaces/CallOptions.html":{},"classes/CallSettings.html":{},"interfaces/ClientConfig.html":{},"interfaces/MethodConfig.html":{},"classes/RetryOptions.html":{},"interfaces/RetryParamsConfig.html":{},"interfaces/ServiceConfig.html":{}}}],["milliseconds",{"_index":217,"title":{},"body":{"interfaces/BackoffSettings.html":{},"interfaces/BundlingConfig.html":{},"interfaces/CallOptions.html":{},"classes/CallSettings.html":{},"interfaces/ClientConfig.html":{},"interfaces/MethodConfig.html":{},"classes/RetryOptions.html":{},"interfaces/RetryParamsConfig.html":{},"interfaces/ServiceConfig.html":{},"miscellaneous/functions.html":{}}}],["mimic",{"_index":1194,"title":{},"body":{"interfaces/GRPCCallOtherArgs.html":{},"interfaces/GRPCCallResult.html":{},"interfaces/GaxCall.html":{},"interfaces/GaxCallPromise.html":{},"interfaces/GaxCallStream.html":{},"interfaces/RequestType.html":{},"interfaces/SimpleCallbackFunction.html":{}}}],["minor",{"_index":2096,"title":{},"body":{"changelog.html":{}}}],["miscellaneous",{"_index":2258,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["mismatched",{"_index":566,"title":{},"body":{"interfaces/Bindings.html":{},"interfaces/ParseResult.html":{},"classes/PathTemplate.html":{},"interfaces/Segment.html":{}}}],["missing",{"_index":576,"title":{},"body":{"interfaces/Bindings.html":{},"interfaces/ParseResult.html":{},"classes/PathTemplate.html":{},"interfaces/Segment.html":{},"changelog.html":{}}}],["mocha",{"_index":1894,"title":{},"body":{"changelog.html":{}}}],["mocha.opts",{"_index":2183,"title":{},"body":{"changelog.html":{}}}],["modification",{"_index":2354,"title":{},"body":{"license.html":{}}}],["module",{"_index":911,"title":{},"body":{"classes/ClientStub.html":{},"interfaces/ClientStubOptions.html":{},"classes/GoogleProtoFilesRoot.html":{},"classes/GrpcClient.html":{},"interfaces/GrpcClientOptions.html":{},"interfaces/Metadata.html":{},"interfaces/MetadataValue.html":{},"classes/OperationsClient.html":{},"classes/OperationsClientBuilder.html":{},"interfaces/OperationsClientOptions.html":{},"changelog.html":{}}}],["modules",{"_index":2099,"title":{"modules.html":{}},"body":{"changelog.html":{},"index.html":{},"modules.html":{}}}],["monitoring",{"_index":1950,"title":{},"body":{"changelog.html":{}}}],["more",{"_index":1250,"title":{},"body":{"interfaces/GetOperationCallback.html":{},"classes/Operation.html":{},"classes/OperationsClient.html":{},"classes/OperationsClientBuilder.html":{},"interfaces/OperationsClientOptions.html":{},"index.html":{}}}],["moreheaders",{"_index":1000,"title":{},"body":{"classes/ClientStub.html":{},"interfaces/ClientStubOptions.html":{},"classes/GoogleProtoFilesRoot.html":{},"classes/GrpcClient.html":{},"interfaces/GrpcClientOptions.html":{},"interfaces/Metadata.html":{},"interfaces/MetadataValue.html":{}}}],["moreheaders!.hasownproperty(key",{"_index":1008,"title":{},"body":{"classes/ClientStub.html":{},"interfaces/ClientStubOptions.html":{},"classes/GoogleProtoFilesRoot.html":{},"classes/GrpcClient.html":{},"interfaces/GrpcClientOptions.html":{},"interfaces/Metadata.html":{},"interfaces/MetadataValue.html":{}}}],["moreheaders[key",{"_index":1010,"title":{},"body":{"classes/ClientStub.html":{},"interfaces/ClientStubOptions.html":{},"classes/GoogleProtoFilesRoot.html":{},"classes/GrpcClient.html":{},"interfaces/GrpcClientOptions.html":{},"interfaces/Metadata.html":{},"interfaces/MetadataValue.html":{}}}],["mostly",{"_index":2289,"title":{},"body":{"miscellaneous/functions.html":{}}}],["move",{"_index":2182,"title":{},"body":{"changelog.html":{}}}],["msg",{"_index":564,"title":{},"body":{"interfaces/Bindings.html":{},"interfaces/ParseResult.html":{},"classes/PathTemplate.html":{},"interfaces/Segment.html":{}}}],["multiple",{"_index":651,"title":{},"body":{"classes/BundleDescriptor.html":{}}}],["multiplier",{"_index":224,"title":{},"body":{"interfaces/BackoffSettings.html":{},"interfaces/BundlingConfig.html":{},"interfaces/CallOptions.html":{},"classes/CallSettings.html":{},"interfaces/ClientConfig.html":{},"interfaces/MethodConfig.html":{},"classes/RetryOptions.html":{},"interfaces/RetryParamsConfig.html":{},"interfaces/ServiceConfig.html":{},"miscellaneous/functions.html":{}}}],["name",{"_index":41,"title":{},"body":{"interfaces/APICaller.html":{},"interfaces/BackoffSettings.html":{},"classes/BundleApiCaller.html":{},"classes/BundleDescriptor.html":{},"classes/BundleExecutor.html":{},"interfaces/BundlingConfig.html":{},"interfaces/CallOptions.html":{},"classes/CallSettings.html":{},"interfaces/CancellablePromise.html":{},"interfaces/ClientConfig.html":{},"classes/ClientStub.html":{},"interfaces/ClientStubOptions.html":{},"interfaces/Descriptor.html":{},"interfaces/Duplexify.html":{},"interfaces/DuplexifyConstructor.html":{},"interfaces/GetOperationCallback.html":{},"classes/GoogleProtoFilesRoot.html":{},"classes/GrpcClient.html":{},"interfaces/GrpcClientOptions.html":{},"classes/LongRunningDescriptor.html":{},"classes/LongrunningApiCaller.html":{},"interfaces/Metadata.html":{},"interfaces/MetadataValue.html":{},"interfaces/MethodConfig.html":{},"classes/NormalApiCaller.html":{},"classes/OngoingCall.html":{},"classes/OngoingCallPromise.html":{},"classes/Operation.html":{},"classes/OperationsClient.html":{},"classes/OperationsClientBuilder.html":{},"interfaces/OperationsClientOptions.html":{},"classes/PageDescriptor.html":{},"classes/PagedApiCaller.html":{},"classes/PathTemplate.html":{},"classes/RetryOptions.html":{},"interfaces/RetryParamsConfig.html":{},"interfaces/ServiceConfig.html":{},"classes/StreamDescriptor.html":{},"classes/StreamProxy.html":{},"classes/StreamingApiCaller.html":{},"interfaces/SubResponseInfo.html":{},"classes/Task.html":{},"interfaces/TaskCallback.html":{},"interfaces/TaskData.html":{},"interfaces/TaskElement.html":{},"miscellaneous/functions.html":{},"license.html":{}}}],["named",{"_index":1497,"title":{},"body":{"classes/OperationsClient.html":{},"classes/OperationsClientBuilder.html":{},"interfaces/OperationsClientOptions.html":{}}}],["names",{"_index":417,"title":{},"body":{"interfaces/BackoffSettings.html":{},"interfaces/Bindings.html":{},"interfaces/BundlingConfig.html":{},"interfaces/CallOptions.html":{},"classes/CallSettings.html":{},"interfaces/ClientConfig.html":{},"classes/ClientStub.html":{},"interfaces/ClientStubOptions.html":{},"classes/GoogleProtoFilesRoot.html":{},"classes/GrpcClient.html":{},"interfaces/GrpcClientOptions.html":{},"interfaces/Metadata.html":{},"interfaces/MetadataValue.html":{},"interfaces/MethodConfig.html":{},"interfaces/ParseResult.html":{},"classes/PathTemplate.html":{},"classes/RetryOptions.html":{},"interfaces/RetryParamsConfig.html":{},"interfaces/Segment.html":{},"interfaces/ServiceConfig.html":{},"miscellaneous/functions.html":{},"license.html":{}}}],["namespace",{"_index":967,"title":{},"body":{"classes/ClientStub.html":{},"interfaces/ClientStubOptions.html":{},"classes/GoogleProtoFilesRoot.html":{},"classes/GrpcClient.html":{},"interfaces/GrpcClientOptions.html":{},"interfaces/Metadata.html":{},"interfaces/MetadataValue.html":{}}}],["native",{"_index":192,"title":{},"body":{"interfaces/BackoffSettings.html":{},"interfaces/BundlingConfig.html":{},"interfaces/CallOptions.html":{},"classes/CallSettings.html":{},"interfaces/ClientConfig.html":{},"classes/ClientStub.html":{},"interfaces/ClientStubOptions.html":{},"classes/GoogleProtoFilesRoot.html":{},"classes/GrpcClient.html":{},"interfaces/GrpcClientOptions.html":{},"interfaces/Metadata.html":{},"interfaces/MetadataValue.html":{},"interfaces/MethodConfig.html":{},"classes/RetryOptions.html":{},"interfaces/RetryParamsConfig.html":{},"interfaces/ServiceConfig.html":{},"miscellaneous/functions.html":{}}}],["necessary",{"_index":665,"title":{},"body":{"classes/BundleDescriptor.html":{},"classes/ClientStub.html":{},"interfaces/ClientStubOptions.html":{},"classes/GoogleProtoFilesRoot.html":{},"classes/GrpcClient.html":{},"interfaces/GrpcClientOptions.html":{},"interfaces/Metadata.html":{},"interfaces/MetadataValue.html":{}}}],["need",{"_index":930,"title":{},"body":{"classes/ClientStub.html":{},"interfaces/ClientStubOptions.html":{},"classes/GoogleProtoFilesRoot.html":{},"classes/GrpcClient.html":{},"interfaces/GrpcClientOptions.html":{},"interfaces/Metadata.html":{},"interfaces/MetadataValue.html":{},"contributing.html":{},"index.html":{}}}],["needed",{"_index":1566,"title":{},"body":{"classes/OperationsClient.html":{},"classes/OperationsClientBuilder.html":{},"interfaces/OperationsClientOptions.html":{},"miscellaneous/variables.html":{}}}],["needs",{"_index":786,"title":{},"body":{"classes/BundleExecutor.html":{},"interfaces/BundleOptions.html":{}}}],["negligence",{"_index":2403,"title":{},"body":{"license.html":{}}}],["nested",{"_index":641,"title":{},"body":{"classes/BundleDescriptor.html":{}}}],["new",{"_index":80,"title":{},"body":{"interfaces/APICaller.html":{},"interfaces/AnyDecoder.html":{},"interfaces/ApiCallerSettings.html":{},"interfaces/BackoffSettings.html":{},"interfaces/Bindings.html":{},"classes/BundleApiCaller.html":{},"classes/BundleDescriptor.html":{},"classes/BundleExecutor.html":{},"interfaces/BundleOptions.html":{},"interfaces/BundlingConfig.html":{},"interfaces/CallOptions.html":{},"classes/CallSettings.html":{},"interfaces/CancellablePromise.html":{},"interfaces/ClientConfig.html":{},"classes/ClientStub.html":{},"interfaces/ClientStubOptions.html":{},"interfaces/Duplexify.html":{},"interfaces/DuplexifyConstructor.html":{},"interfaces/DuplexifyOptions.html":{},"interfaces/GetOperationCallback.html":{},"classes/GoogleProtoFilesRoot.html":{},"classes/GrpcClient.html":{},"interfaces/GrpcClientOptions.html":{},"classes/LongRunningDescriptor.html":{},"classes/LongrunningApiCaller.html":{},"interfaces/Metadata.html":{},"interfaces/MetadataValue.html":{},"interfaces/MethodConfig.html":{},"classes/NormalApiCaller.html":{},"classes/OngoingCall.html":{},"classes/OngoingCallPromise.html":{},"classes/Operation.html":{},"classes/OperationsClient.html":{},"classes/OperationsClientBuilder.html":{},"interfaces/OperationsClientOptions.html":{},"classes/PageDescriptor.html":{},"classes/PagedApiCaller.html":{},"interfaces/ParseResult.html":{},"classes/PathTemplate.html":{},"classes/RetryOptions.html":{},"interfaces/RetryParamsConfig.html":{},"interfaces/Segment.html":{},"interfaces/ServiceConfig.html":{},"classes/StreamDescriptor.html":{},"classes/StreamProxy.html":{},"classes/StreamingApiCaller.html":{},"classes/Task.html":{},"changelog.html":{},"miscellaneous/functions.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["newer",{"_index":927,"title":{},"body":{"classes/ClientStub.html":{},"interfaces/ClientStubOptions.html":{},"classes/GoogleProtoFilesRoot.html":{},"classes/GrpcClient.html":{},"interfaces/GrpcClientOptions.html":{},"interfaces/Metadata.html":{},"interfaces/MetadataValue.html":{},"index.html":{}}}],["next",{"_index":281,"title":{},"body":{"interfaces/BackoffSettings.html":{},"interfaces/BundlingConfig.html":{},"interfaces/CallOptions.html":{},"classes/CallSettings.html":{},"interfaces/CancellablePromise.html":{},"interfaces/ClientConfig.html":{},"classes/ClientStub.html":{},"interfaces/ClientStubOptions.html":{},"interfaces/GRPCCallOtherArgs.html":{},"interfaces/GRPCCallResult.html":{},"interfaces/GaxCall.html":{},"interfaces/GaxCallPromise.html":{},"interfaces/GaxCallStream.html":{},"interfaces/GetOperationCallback.html":{},"classes/GoogleProtoFilesRoot.html":{},"classes/GrpcClient.html":{},"interfaces/GrpcClientOptions.html":{},"interfaces/Metadata.html":{},"interfaces/MetadataValue.html":{},"interfaces/MethodConfig.html":{},"classes/OngoingCall.html":{},"classes/OngoingCallPromise.html":{},"classes/Operation.html":{},"classes/OperationsClient.html":{},"classes/OperationsClientBuilder.html":{},"interfaces/OperationsClientOptions.html":{},"classes/PageDescriptor.html":{},"classes/PagedApiCaller.html":{},"interfaces/RequestType.html":{},"classes/RetryOptions.html":{},"interfaces/RetryParamsConfig.html":{},"interfaces/ServiceConfig.html":{},"interfaces/SimpleCallbackFunction.html":{},"interfaces/SubResponseInfo.html":{},"classes/Task.html":{},"interfaces/TaskCallback.html":{},"interfaces/TaskData.html":{},"interfaces/TaskElement.html":{}}}],["nextpagerequesttype",{"_index":816,"title":{},"body":{"interfaces/CancellablePromise.html":{},"interfaces/GRPCCallOtherArgs.html":{},"interfaces/GRPCCallResult.html":{},"interfaces/GaxCall.html":{},"interfaces/GaxCallPromise.html":{},"interfaces/GaxCallStream.html":{},"classes/OngoingCall.html":{},"classes/OngoingCallPromise.html":{},"classes/PagedApiCaller.html":{},"interfaces/RequestType.html":{},"interfaces/SimpleCallbackFunction.html":{},"miscellaneous/typealiases.html":{}}}],["nextpagetoken",{"_index":1564,"title":{},"body":{"classes/OperationsClient.html":{},"classes/OperationsClientBuilder.html":{},"interfaces/OperationsClientOptions.html":{},"miscellaneous/variables.html":{}}}],["nextrequest",{"_index":1530,"title":{},"body":{"classes/OperationsClient.html":{},"classes/OperationsClientBuilder.html":{},"interfaces/OperationsClientOptions.html":{}}}],["nocallbackpromise",{"_index":1286,"title":{},"body":{"interfaces/GetOperationCallback.html":{},"classes/Operation.html":{}}}],["node",{"_index":1147,"title":{},"body":{"interfaces/Duplexify.html":{},"interfaces/DuplexifyConstructor.html":{},"interfaces/DuplexifyOptions.html":{},"classes/OperationsClient.html":{},"classes/OperationsClientBuilder.html":{},"interfaces/OperationsClientOptions.html":{},"classes/StreamProxy.html":{},"changelog.html":{}}}],["node.js",{"_index":656,"title":{},"body":{"classes/BundleDescriptor.html":{},"classes/ClientStub.html":{},"interfaces/ClientStubOptions.html":{},"classes/GoogleProtoFilesRoot.html":{},"classes/GrpcClient.html":{},"interfaces/GrpcClientOptions.html":{},"interfaces/Metadata.html":{},"interfaces/MetadataValue.html":{},"changelog.html":{},"contributing.html":{},"index.html":{}}}],["node/blob/116436fa789d8b0f7fc5100b19b424e3ec63e6bf/packages/common/src/grpc",{"_index":1152,"title":{},"body":{"interfaces/Duplexify.html":{},"interfaces/DuplexifyConstructor.html":{},"interfaces/DuplexifyOptions.html":{},"classes/StreamProxy.html":{}}}],["node/pull/1775#issuecomment",{"_index":1150,"title":{},"body":{"interfaces/Duplexify.html":{},"interfaces/DuplexifyConstructor.html":{},"interfaces/DuplexifyOptions.html":{},"classes/StreamProxy.html":{}}}],["node10",{"_index":1935,"title":{},"body":{"changelog.html":{}}}],["node11",{"_index":2135,"title":{},"body":{"changelog.html":{}}}],["nodejs",{"_index":1541,"title":{},"body":{"classes/OperationsClient.html":{},"classes/OperationsClientBuilder.html":{},"interfaces/OperationsClientOptions.html":{},"index.html":{}}}],["nodejs.timer",{"_index":729,"title":{},"body":{"classes/BundleExecutor.html":{},"interfaces/BundleOptions.html":{}}}],["nodejs/blob/master/readme.md",{"_index":934,"title":{},"body":{"classes/ClientStub.html":{},"interfaces/ClientStubOptions.html":{},"classes/GoogleProtoFilesRoot.html":{},"classes/GrpcClient.html":{},"interfaces/GrpcClientOptions.html":{},"interfaces/Metadata.html":{},"interfaces/MetadataValue.html":{}}}],["nodejs/global.html#calloptions",{"_index":1604,"title":{},"body":{"classes/OperationsClient.html":{},"classes/OperationsClientBuilder.html":{},"interfaces/OperationsClientOptions.html":{}}}],["nodejs/issues/65",{"_index":1159,"title":{},"body":{"interfaces/Duplexify.html":{},"interfaces/DuplexifyConstructor.html":{},"interfaces/DuplexifyOptions.html":{},"classes/StreamProxy.html":{}}}],["noimplicitthis",{"_index":2115,"title":{},"body":{"changelog.html":{}}}],["non",{"_index":492,"title":{},"body":{"interfaces/BackoffSettings.html":{},"interfaces/BundlingConfig.html":{},"interfaces/CallOptions.html":{},"classes/CallSettings.html":{},"interfaces/ClientConfig.html":{},"interfaces/MethodConfig.html":{},"classes/RetryOptions.html":{},"interfaces/RetryParamsConfig.html":{},"interfaces/ServiceConfig.html":{},"miscellaneous/functions.html":{}}}],["non_idempotent",{"_index":469,"title":{},"body":{"interfaces/BackoffSettings.html":{},"interfaces/BundlingConfig.html":{},"interfaces/CallOptions.html":{},"classes/CallSettings.html":{},"interfaces/ClientConfig.html":{},"interfaces/MethodConfig.html":{},"classes/RetryOptions.html":{},"interfaces/RetryParamsConfig.html":{},"interfaces/ServiceConfig.html":{},"miscellaneous/functions.html":{}}}],["noop",{"_index":728,"title":{},"body":{"classes/BundleExecutor.html":{},"interfaces/BundleOptions.html":{},"miscellaneous/functions.html":{}}}],["normal",{"_index":11,"title":{},"body":{"interfaces/APICaller.html":{},"interfaces/ApiCallerSettings.html":{}}}],["normalapicaller",{"_index":70,"title":{"classes/NormalApiCaller.html":{}},"body":{"interfaces/APICaller.html":{},"interfaces/ApiCallerSettings.html":{},"classes/BundleDescriptor.html":{},"classes/NormalApiCaller.html":{},"classes/PageDescriptor.html":{}}}],["normalcalls/normalapicaller",{"_index":71,"title":{},"body":{"interfaces/APICaller.html":{},"interfaces/ApiCallerSettings.html":{},"classes/BundleDescriptor.html":{},"classes/PageDescriptor.html":{}}}],["normally",{"_index":1440,"title":{},"body":{"classes/OperationsClient.html":{},"classes/OperationsClientBuilder.html":{},"interfaces/OperationsClientOptions.html":{}}}],["note",{"_index":263,"title":{},"body":{"interfaces/BackoffSettings.html":{},"interfaces/BundlingConfig.html":{},"interfaces/CallOptions.html":{},"classes/CallSettings.html":{},"interfaces/ClientConfig.html":{},"interfaces/GetOperationCallback.html":{},"classes/GoogleError.html":{},"interfaces/MethodConfig.html":{},"classes/Operation.html":{},"classes/OperationsClient.html":{},"classes/OperationsClientBuilder.html":{},"interfaces/OperationsClientOptions.html":{},"classes/RetryOptions.html":{},"interfaces/RetryParamsConfig.html":{},"interfaces/ServiceConfig.html":{},"interfaces/SubResponseInfo.html":{},"classes/Task.html":{},"interfaces/TaskCallback.html":{},"interfaces/TaskData.html":{},"interfaces/TaskElement.html":{}}}],["nothing",{"_index":1757,"title":{},"body":{"interfaces/SubResponseInfo.html":{},"classes/Task.html":{},"interfaces/TaskCallback.html":{},"interfaces/TaskData.html":{},"interfaces/TaskElement.html":{},"changelog.html":{}}}],["notice",{"_index":2360,"title":{},"body":{"license.html":{}}}],["now",{"_index":1310,"title":{},"body":{"interfaces/GetOperationCallback.html":{},"classes/Operation.html":{},"classes/StreamDescriptor.html":{}}}],["now.gettime",{"_index":1318,"title":{},"body":{"interfaces/GetOperationCallback.html":{},"classes/Operation.html":{}}}],["npm",{"_index":1836,"title":{},"body":{"changelog.html":{},"contributing.html":{},"index.html":{}}}],["null",{"_index":124,"title":{},"body":{"interfaces/BackoffSettings.html":{},"classes/BundleDescriptor.html":{},"interfaces/BundlingConfig.html":{},"interfaces/CallOptions.html":{},"classes/CallSettings.html":{},"interfaces/CancellablePromise.html":{},"interfaces/ClientConfig.html":{},"classes/ClientStub.html":{},"interfaces/ClientStubOptions.html":{},"interfaces/Duplexify.html":{},"interfaces/DuplexifyConstructor.html":{},"interfaces/DuplexifyOptions.html":{},"interfaces/GRPCCallOtherArgs.html":{},"interfaces/GRPCCallResult.html":{},"interfaces/GaxCall.html":{},"interfaces/GaxCallPromise.html":{},"interfaces/GaxCallStream.html":{},"interfaces/GetOperationCallback.html":{},"classes/GoogleProtoFilesRoot.html":{},"classes/GrpcClient.html":{},"interfaces/GrpcClientOptions.html":{},"classes/LongrunningApiCaller.html":{},"interfaces/Metadata.html":{},"interfaces/MetadataValue.html":{},"interfaces/MethodConfig.html":{},"classes/OngoingCall.html":{},"classes/OngoingCallPromise.html":{},"classes/Operation.html":{},"classes/OperationsClient.html":{},"classes/OperationsClientBuilder.html":{},"interfaces/OperationsClientOptions.html":{},"classes/PageDescriptor.html":{},"classes/PagedApiCaller.html":{},"interfaces/RequestType.html":{},"classes/RetryOptions.html":{},"interfaces/RetryParamsConfig.html":{},"interfaces/ServiceConfig.html":{},"interfaces/SimpleCallbackFunction.html":{},"classes/StreamDescriptor.html":{},"classes/StreamProxy.html":{},"interfaces/SubResponseInfo.html":{},"classes/Task.html":{},"interfaces/TaskCallback.html":{},"interfaces/TaskData.html":{},"interfaces/TaskElement.html":{},"miscellaneous/typealiases.html":{}}}],["number",{"_index":123,"title":{},"body":{"interfaces/BackoffSettings.html":{},"interfaces/Bindings.html":{},"classes/BundleExecutor.html":{},"interfaces/BundleOptions.html":{},"interfaces/BundlingConfig.html":{},"interfaces/CallOptions.html":{},"classes/CallSettings.html":{},"interfaces/ClientConfig.html":{},"classes/ClientStub.html":{},"interfaces/ClientStubOptions.html":{},"interfaces/Duplexify.html":{},"interfaces/DuplexifyConstructor.html":{},"interfaces/DuplexifyOptions.html":{},"interfaces/GetOperationCallback.html":{},"classes/GoogleProtoFilesRoot.html":{},"classes/GrpcClient.html":{},"interfaces/GrpcClientOptions.html":{},"interfaces/Metadata.html":{},"interfaces/MetadataValue.html":{},"interfaces/MethodConfig.html":{},"classes/Operation.html":{},"classes/OperationsClient.html":{},"classes/OperationsClientBuilder.html":{},"interfaces/OperationsClientOptions.html":{},"interfaces/ParseResult.html":{},"classes/PathTemplate.html":{},"classes/RetryOptions.html":{},"interfaces/RetryParamsConfig.html":{},"interfaces/Segment.html":{},"interfaces/ServiceConfig.html":{},"classes/StreamProxy.html":{},"interfaces/SubResponseInfo.html":{},"classes/Task.html":{},"interfaces/TaskCallback.html":{},"interfaces/TaskData.html":{},"interfaces/TaskElement.html":{},"changelog.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["number(retrynames[name",{"_index":425,"title":{},"body":{"interfaces/BackoffSettings.html":{},"interfaces/BundlingConfig.html":{},"interfaces/CallOptions.html":{},"classes/CallSettings.html":{},"interfaces/ClientConfig.html":{},"interfaces/MethodConfig.html":{},"classes/RetryOptions.html":{},"interfaces/RetryParamsConfig.html":{},"interfaces/ServiceConfig.html":{}}}],["nyc",{"_index":1888,"title":{},"body":{"changelog.html":{}}}],["nycrc",{"_index":1903,"title":{},"body":{"changelog.html":{}}}],["obj",{"_index":1055,"title":{},"body":{"classes/ClientStub.html":{},"interfaces/ClientStubOptions.html":{},"interfaces/Duplexify.html":{},"interfaces/DuplexifyConstructor.html":{},"interfaces/DuplexifyOptions.html":{},"classes/GoogleProtoFilesRoot.html":{},"classes/GrpcClient.html":{},"interfaces/GrpcClientOptions.html":{},"interfaces/Metadata.html":{},"interfaces/MetadataValue.html":{},"classes/StreamProxy.html":{},"interfaces/SubResponseInfo.html":{},"classes/Task.html":{},"interfaces/TaskCallback.html":{},"interfaces/TaskData.html":{},"interfaces/TaskElement.html":{},"miscellaneous/functions.html":{}}}],["obj(writable",{"_index":1173,"title":{},"body":{"interfaces/DuplexifyConstructor.html":{}}}],["obj.copy",{"_index":1771,"title":{},"body":{"interfaces/SubResponseInfo.html":{},"classes/Task.html":{},"interfaces/TaskCallback.html":{},"interfaces/TaskData.html":{},"interfaces/TaskElement.html":{}}}],["obj.foreach(element",{"_index":1768,"title":{},"body":{"interfaces/SubResponseInfo.html":{},"classes/Task.html":{},"interfaces/TaskCallback.html":{},"interfaces/TaskData.html":{},"interfaces/TaskElement.html":{}}}],["obj[key].slice",{"_index":1782,"title":{},"body":{"interfaces/SubResponseInfo.html":{},"classes/Task.html":{},"interfaces/TaskCallback.html":{},"interfaces/TaskData.html":{},"interfaces/TaskElement.html":{}}}],["object",{"_index":149,"title":{},"body":{"interfaces/BackoffSettings.html":{},"interfaces/Bindings.html":{},"classes/BundleDescriptor.html":{},"classes/BundleExecutor.html":{},"interfaces/BundleOptions.html":{},"interfaces/BundlingConfig.html":{},"interfaces/CallOptions.html":{},"classes/CallSettings.html":{},"interfaces/CancellablePromise.html":{},"interfaces/ClientConfig.html":{},"classes/ClientStub.html":{},"interfaces/ClientStubOptions.html":{},"interfaces/Duplexify.html":{},"interfaces/DuplexifyConstructor.html":{},"interfaces/DuplexifyOptions.html":{},"interfaces/GRPCCallOtherArgs.html":{},"interfaces/GRPCCallResult.html":{},"interfaces/GaxCall.html":{},"interfaces/GaxCallPromise.html":{},"interfaces/GaxCallStream.html":{},"interfaces/GetOperationCallback.html":{},"classes/GoogleProtoFilesRoot.html":{},"classes/GrpcClient.html":{},"interfaces/GrpcClientOptions.html":{},"interfaces/Metadata.html":{},"interfaces/MetadataValue.html":{},"interfaces/MethodConfig.html":{},"classes/OngoingCall.html":{},"classes/OngoingCallPromise.html":{},"classes/Operation.html":{},"classes/OperationsClient.html":{},"classes/OperationsClientBuilder.html":{},"interfaces/OperationsClientOptions.html":{},"classes/PageDescriptor.html":{},"interfaces/ParseResult.html":{},"classes/PathTemplate.html":{},"interfaces/RequestType.html":{},"classes/RetryOptions.html":{},"interfaces/RetryParamsConfig.html":{},"interfaces/Segment.html":{},"interfaces/ServiceConfig.html":{},"interfaces/SimpleCallbackFunction.html":{},"classes/StreamProxy.html":{},"interfaces/SubResponseInfo.html":{},"classes/Task.html":{},"interfaces/TaskCallback.html":{},"interfaces/TaskData.html":{},"interfaces/TaskElement.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["object.assign",{"_index":1574,"title":{},"body":{"classes/OperationsClient.html":{},"classes/OperationsClientBuilder.html":{},"interfaces/OperationsClientOptions.html":{},"classes/PageDescriptor.html":{},"classes/PagedApiCaller.html":{}}}],["object.assign(this",{"_index":1633,"title":{},"body":{"classes/OperationsClient.html":{},"classes/OperationsClientBuilder.html":{},"interfaces/OperationsClientOptions.html":{}}}],["object.assign(this.operationsclient",{"_index":1647,"title":{},"body":{"classes/OperationsClient.html":{},"classes/OperationsClientBuilder.html":{},"interfaces/OperationsClientOptions.html":{}}}],["object.keys(obj).foreach(key",{"_index":1775,"title":{},"body":{"interfaces/SubResponseInfo.html":{},"classes/Task.html":{},"interfaces/TaskCallback.html":{},"interfaces/TaskData.html":{},"interfaces/TaskElement.html":{}}}],["object.keys(options).foreach(key",{"_index":1041,"title":{},"body":{"classes/ClientStub.html":{},"interfaces/ClientStubOptions.html":{},"classes/GoogleProtoFilesRoot.html":{},"classes/GrpcClient.html":{},"interfaces/GrpcClientOptions.html":{},"interfaces/Metadata.html":{},"interfaces/MetadataValue.html":{}}}],["objectmode",{"_index":1127,"title":{},"body":{"interfaces/Duplexify.html":{},"interfaces/DuplexifyConstructor.html":{},"interfaces/DuplexifyOptions.html":{},"classes/StreamProxy.html":{}}}],["objects",{"_index":491,"title":{},"body":{"interfaces/BackoffSettings.html":{},"classes/BundleDescriptor.html":{},"interfaces/BundlingConfig.html":{},"interfaces/CallOptions.html":{},"classes/CallSettings.html":{},"interfaces/ClientConfig.html":{},"interfaces/Duplexify.html":{},"interfaces/DuplexifyConstructor.html":{},"interfaces/DuplexifyOptions.html":{},"interfaces/GetOperationCallback.html":{},"interfaces/MethodConfig.html":{},"classes/Operation.html":{},"classes/RetryOptions.html":{},"interfaces/RetryParamsConfig.html":{},"interfaces/ServiceConfig.html":{},"classes/StreamProxy.html":{},"interfaces/SubResponseInfo.html":{},"classes/Task.html":{},"interfaces/TaskCallback.html":{},"interfaces/TaskData.html":{},"interfaces/TaskElement.html":{},"miscellaneous/functions.html":{}}}],["obtain",{"_index":652,"title":{},"body":{"classes/BundleDescriptor.html":{},"classes/OperationsClient.html":{},"classes/OperationsClientBuilder.html":{},"interfaces/OperationsClientOptions.html":{}}}],["obtained",{"_index":1455,"title":{},"body":{"classes/OperationsClient.html":{},"classes/OperationsClientBuilder.html":{},"interfaces/OperationsClientOptions.html":{}}}],["obtaining",{"_index":2293,"title":{},"body":{"miscellaneous/functions.html":{}}}],["offset",{"_index":1760,"title":{},"body":{"interfaces/SubResponseInfo.html":{},"classes/Task.html":{},"interfaces/TaskCallback.html":{},"interfaces/TaskData.html":{},"interfaces/TaskElement.html":{}}}],["ok",{"_index":1162,"title":{},"body":{"interfaces/Duplexify.html":{},"interfaces/DuplexifyConstructor.html":{},"interfaces/DuplexifyOptions.html":{},"classes/StreamProxy.html":{}}}],["okay",{"_index":1696,"title":{},"body":{"classes/PagedApiCaller.html":{}}}],["old",{"_index":2133,"title":{},"body":{"changelog.html":{}}}],["older",{"_index":931,"title":{},"body":{"classes/ClientStub.html":{},"interfaces/ClientStubOptions.html":{},"classes/GoogleProtoFilesRoot.html":{},"classes/GrpcClient.html":{},"interfaces/GrpcClientOptions.html":{},"interfaces/Metadata.html":{},"interfaces/MetadataValue.html":{},"index.html":{}}}],["on(&#39;data&#39",{"_index":1546,"title":{},"body":{"classes/OperationsClient.html":{}}}],["on(&#39;error&#39",{"_index":1549,"title":{},"body":{"classes/OperationsClient.html":{}}}],["on('data",{"_index":1621,"title":{},"body":{"classes/OperationsClient.html":{},"classes/OperationsClientBuilder.html":{},"interfaces/OperationsClientOptions.html":{}}}],["on('error",{"_index":1622,"title":{},"body":{"classes/OperationsClient.html":{},"classes/OperationsClientBuilder.html":{},"interfaces/OperationsClientOptions.html":{}}}],["once",{"_index":245,"title":{},"body":{"interfaces/BackoffSettings.html":{},"interfaces/BundlingConfig.html":{},"interfaces/CallOptions.html":{},"classes/CallSettings.html":{},"interfaces/ClientConfig.html":{},"interfaces/GetOperationCallback.html":{},"interfaces/MethodConfig.html":{},"classes/Operation.html":{},"classes/PagedApiCaller.html":{},"classes/RetryOptions.html":{},"interfaces/RetryParamsConfig.html":{},"interfaces/ServiceConfig.html":{},"contributing.html":{}}}],["one",{"_index":626,"title":{},"body":{"classes/BundleDescriptor.html":{},"classes/ClientStub.html":{},"interfaces/ClientStubOptions.html":{},"interfaces/GetOperationCallback.html":{},"classes/GoogleProtoFilesRoot.html":{},"classes/GrpcClient.html":{},"interfaces/GrpcClientOptions.html":{},"interfaces/Metadata.html":{},"interfaces/MetadataValue.html":{},"classes/Operation.html":{}}}],["oneofs",{"_index":979,"title":{},"body":{"classes/ClientStub.html":{},"interfaces/ClientStubOptions.html":{},"classes/GoogleProtoFilesRoot.html":{},"classes/GrpcClient.html":{},"interfaces/GrpcClientOptions.html":{},"interfaces/Metadata.html":{},"interfaces/MetadataValue.html":{}}}],["ones",{"_index":14,"title":{},"body":{"interfaces/APICaller.html":{},"interfaces/ApiCallerSettings.html":{}}}],["ongoing",{"_index":829,"title":{},"body":{"interfaces/CancellablePromise.html":{},"interfaces/GRPCCallOtherArgs.html":{},"interfaces/GRPCCallResult.html":{},"interfaces/GaxCall.html":{},"interfaces/GaxCallPromise.html":{},"interfaces/GaxCallStream.html":{},"classes/OngoingCall.html":{},"classes/OngoingCallPromise.html":{},"classes/OperationsClient.html":{},"classes/OperationsClientBuilder.html":{},"interfaces/OperationsClientOptions.html":{},"interfaces/RequestType.html":{},"interfaces/SimpleCallbackFunction.html":{}}}],["ongoingcall",{"_index":36,"title":{"classes/OngoingCall.html":{}},"body":{"interfaces/APICaller.html":{},"interfaces/ApiCallerSettings.html":{},"classes/BundleApiCaller.html":{},"interfaces/CancellablePromise.html":{},"classes/LongrunningApiCaller.html":{},"classes/NormalApiCaller.html":{},"classes/OngoingCall.html":{},"classes/OngoingCallPromise.html":{},"classes/PagedApiCaller.html":{}}}],["ongoingcall(callback",{"_index":616,"title":{},"body":{"classes/BundleApiCaller.html":{},"classes/LongrunningApiCaller.html":{},"classes/NormalApiCaller.html":{},"classes/PagedApiCaller.html":{}}}],["ongoingcall:46",{"_index":1411,"title":{},"body":{"classes/OngoingCallPromise.html":{}}}],["ongoingcall:47",{"_index":1412,"title":{},"body":{"classes/OngoingCallPromise.html":{}}}],["ongoingcall:48",{"_index":1413,"title":{},"body":{"classes/OngoingCallPromise.html":{}}}],["ongoingcall:69",{"_index":1415,"title":{},"body":{"classes/OngoingCallPromise.html":{}}}],["ongoingcall:92",{"_index":1414,"title":{},"body":{"classes/OngoingCallPromise.html":{}}}],["ongoingcallpromise",{"_index":34,"title":{"classes/OngoingCallPromise.html":{}},"body":{"interfaces/APICaller.html":{},"interfaces/ApiCallerSettings.html":{},"classes/BundleApiCaller.html":{},"interfaces/CancellablePromise.html":{},"classes/LongrunningApiCaller.html":{},"classes/NormalApiCaller.html":{},"classes/OngoingCall.html":{},"classes/OngoingCallPromise.html":{},"classes/PagedApiCaller.html":{}}}],["ongoingcallpromise(settings.promise",{"_index":617,"title":{},"body":{"classes/BundleApiCaller.html":{},"classes/LongrunningApiCaller.html":{},"classes/NormalApiCaller.html":{},"classes/PagedApiCaller.html":{}}}],["op",{"_index":1301,"title":{},"body":{"interfaces/GetOperationCallback.html":{},"classes/Operation.html":{},"miscellaneous/functions.html":{}}}],["op.done",{"_index":1293,"title":{},"body":{"interfaces/GetOperationCallback.html":{},"classes/Operation.html":{}}}],["op.error!.code",{"_index":1296,"title":{},"body":{"interfaces/GetOperationCallback.html":{},"classes/Operation.html":{}}}],["op.metadata",{"_index":1299,"title":{},"body":{"interfaces/GetOperationCallback.html":{},"classes/Operation.html":{}}}],["op.response",{"_index":1297,"title":{},"body":{"interfaces/GetOperationCallback.html":{},"classes/Operation.html":{}}}],["op.result",{"_index":1294,"title":{},"body":{"interfaces/GetOperationCallback.html":{},"classes/Operation.html":{}}}],["open",{"_index":1249,"title":{},"body":{"interfaces/GetOperationCallback.html":{},"classes/Operation.html":{}}}],["openssl",{"_index":2071,"title":{},"body":{"changelog.html":{}}}],["operation",{"_index":1177,"title":{"classes/Operation.html":{}},"body":{"interfaces/GRPCCallOtherArgs.html":{},"interfaces/GRPCCallResult.html":{},"interfaces/GaxCall.html":{},"interfaces/GaxCallPromise.html":{},"interfaces/GaxCallStream.html":{},"interfaces/GetOperationCallback.html":{},"classes/LongrunningApiCaller.html":{},"classes/Operation.html":{},"classes/OperationsClient.html":{},"classes/OperationsClientBuilder.html":{},"interfaces/OperationsClientOptions.html":{},"interfaces/RequestType.html":{},"interfaces/SimpleCallbackFunction.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["operation's",{"_index":1303,"title":{},"body":{"interfaces/GetOperationCallback.html":{},"classes/Operation.html":{}}}],["operation(op",{"_index":1350,"title":{},"body":{"interfaces/GetOperationCallback.html":{},"classes/Operation.html":{},"miscellaneous/functions.html":{}}}],["operation.error",{"_index":1486,"title":{},"body":{"classes/OperationsClient.html":{},"classes/OperationsClientBuilder.html":{},"interfaces/OperationsClientOptions.html":{}}}],["operations",{"_index":97,"title":{},"body":{"interfaces/AnyDecoder.html":{},"interfaces/GetOperationCallback.html":{},"classes/LongRunningDescriptor.html":{},"classes/Operation.html":{},"classes/OperationsClient.html":{},"classes/OperationsClientBuilder.html":{},"interfaces/OperationsClientOptions.html":{},"changelog.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["operations.getoperation",{"_index":1480,"title":{},"body":{"classes/OperationsClient.html":{},"classes/OperationsClientBuilder.html":{},"interfaces/OperationsClientOptions.html":{}}}],["operations_client.ts",{"_index":2075,"title":{},"body":{"changelog.html":{}}}],["operationsclient",{"_index":95,"title":{"classes/OperationsClient.html":{}},"body":{"interfaces/AnyDecoder.html":{},"interfaces/GetOperationCallback.html":{},"classes/LongRunningDescriptor.html":{},"classes/LongrunningApiCaller.html":{},"classes/Operation.html":{},"classes/OperationsClient.html":{},"classes/OperationsClientBuilder.html":{},"interfaces/OperationsClientOptions.html":{}}}],["operationsclient#canceloperation",{"_index":1256,"title":{},"body":{"interfaces/GetOperationCallback.html":{},"classes/Operation.html":{}}}],["operationsclient(gaxgrpc",{"_index":1646,"title":{},"body":{"classes/OperationsClient.html":{},"classes/OperationsClientBuilder.html":{},"interfaces/OperationsClientOptions.html":{}}}],["operationsclient.canceloperation",{"_index":1260,"title":{},"body":{"interfaces/GetOperationCallback.html":{},"classes/Operation.html":{}}}],["operationsclient.getoperation",{"_index":1285,"title":{},"body":{"interfaces/GetOperationCallback.html":{},"classes/Operation.html":{}}}],["operationsclient.google.longrunning",{"_index":1634,"title":{},"body":{"classes/OperationsClient.html":{},"classes/OperationsClientBuilder.html":{},"interfaces/OperationsClientOptions.html":{}}}],["operationsclientbuilder",{"_index":1628,"title":{"classes/OperationsClientBuilder.html":{}},"body":{"classes/OperationsClient.html":{},"classes/OperationsClientBuilder.html":{},"interfaces/OperationsClientOptions.html":{}}}],["operationsclientoptions",{"_index":1465,"title":{"interfaces/OperationsClientOptions.html":{}},"body":{"classes/OperationsClient.html":{},"classes/OperationsClientBuilder.html":{},"interfaces/OperationsClientOptions.html":{}}}],["operationsstub",{"_index":1588,"title":{},"body":{"classes/OperationsClient.html":{},"classes/OperationsClientBuilder.html":{},"interfaces/OperationsClientOptions.html":{}}}],["operationsstub.then(operationsstub",{"_index":1594,"title":{},"body":{"classes/OperationsClient.html":{},"classes/OperationsClientBuilder.html":{},"interfaces/OperationsClientOptions.html":{}}}],["operationsstub[methodname].apply(operationsstub",{"_index":1595,"title":{},"body":{"classes/OperationsClient.html":{},"classes/OperationsClientBuilder.html":{},"interfaces/OperationsClientOptions.html":{}}}],["operationsstubmethods",{"_index":1591,"title":{},"body":{"classes/OperationsClient.html":{},"classes/OperationsClientBuilder.html":{},"interfaces/OperationsClientOptions.html":{}}}],["operationsstubmethods.foreach(methodname",{"_index":1592,"title":{},"body":{"classes/OperationsClient.html":{},"classes/OperationsClientBuilder.html":{},"interfaces/OperationsClientOptions.html":{}}}],["option",{"_index":1544,"title":{},"body":{"classes/OperationsClient.html":{},"classes/OperationsClientBuilder.html":{},"interfaces/OperationsClientOptions.html":{}}}],["optional",{"_index":42,"title":{},"body":{"interfaces/APICaller.html":{},"interfaces/BackoffSettings.html":{},"classes/BundleApiCaller.html":{},"classes/BundleDescriptor.html":{},"classes/BundleExecutor.html":{},"interfaces/BundlingConfig.html":{},"interfaces/CallOptions.html":{},"classes/CallSettings.html":{},"interfaces/ClientConfig.html":{},"classes/ClientStub.html":{},"interfaces/ClientStubOptions.html":{},"interfaces/Descriptor.html":{},"interfaces/Duplexify.html":{},"interfaces/DuplexifyConstructor.html":{},"interfaces/DuplexifyOptions.html":{},"interfaces/GRPCCallOtherArgs.html":{},"classes/GoogleError.html":{},"classes/GoogleProtoFilesRoot.html":{},"classes/GrpcClient.html":{},"interfaces/GrpcClientOptions.html":{},"classes/LongRunningDescriptor.html":{},"classes/LongrunningApiCaller.html":{},"interfaces/Metadata.html":{},"interfaces/MetadataValue.html":{},"interfaces/MethodConfig.html":{},"classes/NormalApiCaller.html":{},"classes/OngoingCall.html":{},"classes/OngoingCallPromise.html":{},"classes/Operation.html":{},"classes/OperationsClient.html":{},"classes/OperationsClientBuilder.html":{},"interfaces/OperationsClientOptions.html":{},"classes/PageDescriptor.html":{},"classes/PagedApiCaller.html":{},"classes/PathTemplate.html":{},"classes/RetryOptions.html":{},"interfaces/RetryParamsConfig.html":{},"interfaces/ServiceConfig.html":{},"classes/StreamDescriptor.html":{},"classes/StreamProxy.html":{},"classes/StreamingApiCaller.html":{},"interfaces/SubResponseInfo.html":{},"classes/Task.html":{},"interfaces/TaskCallback.html":{},"interfaces/TaskData.html":{},"changelog.html":{},"miscellaneous/functions.html":{}}}],["optionally",{"_index":2296,"title":{},"body":{"miscellaneous/functions.html":{}}}],["options",{"_index":328,"title":{},"body":{"interfaces/BackoffSettings.html":{},"classes/BundleExecutor.html":{},"interfaces/BundleOptions.html":{},"interfaces/BundlingConfig.html":{},"interfaces/CallOptions.html":{},"classes/CallSettings.html":{},"interfaces/ClientConfig.html":{},"classes/ClientStub.html":{},"interfaces/ClientStubOptions.html":{},"interfaces/Duplexify.html":{},"interfaces/DuplexifyConstructor.html":{},"interfaces/DuplexifyOptions.html":{},"interfaces/GRPCCallOtherArgs.html":{},"interfaces/GRPCCallResult.html":{},"interfaces/GaxCall.html":{},"interfaces/GaxCallPromise.html":{},"interfaces/GaxCallStream.html":{},"classes/GoogleProtoFilesRoot.html":{},"classes/GrpcClient.html":{},"interfaces/GrpcClientOptions.html":{},"interfaces/Metadata.html":{},"interfaces/MetadataValue.html":{},"interfaces/MethodConfig.html":{},"classes/OperationsClient.html":{},"classes/OperationsClientBuilder.html":{},"interfaces/OperationsClientOptions.html":{},"classes/PageDescriptor.html":{},"classes/PagedApiCaller.html":{},"interfaces/RequestType.html":{},"classes/RetryOptions.html":{},"interfaces/RetryParamsConfig.html":{},"interfaces/ServiceConfig.html":{},"interfaces/SimpleCallbackFunction.html":{},"classes/StreamProxy.html":{},"classes/StreamingApiCaller.html":{},"changelog.html":{},"miscellaneous/functions.html":{}}}],["options.auth",{"_index":908,"title":{},"body":{"classes/ClientStub.html":{},"interfaces/ClientStubOptions.html":{},"classes/GoogleProtoFilesRoot.html":{},"classes/GrpcClient.html":{},"interfaces/GrpcClientOptions.html":{},"interfaces/Metadata.html":{},"interfaces/MetadataValue.html":{}}}],["options.autopaginate",{"_index":339,"title":{},"body":{"interfaces/BackoffSettings.html":{},"interfaces/BundlingConfig.html":{},"interfaces/CallOptions.html":{},"classes/CallSettings.html":{},"interfaces/ClientConfig.html":{},"interfaces/MethodConfig.html":{},"classes/RetryOptions.html":{},"interfaces/RetryParamsConfig.html":{},"interfaces/ServiceConfig.html":{}}}],["options.delay_threshold_millis",{"_index":398,"title":{},"body":{"interfaces/BackoffSettings.html":{},"interfaces/BundlingConfig.html":{},"interfaces/CallOptions.html":{},"classes/CallSettings.html":{},"interfaces/ClientConfig.html":{},"interfaces/MethodConfig.html":{},"classes/RetryOptions.html":{},"interfaces/RetryParamsConfig.html":{},"interfaces/ServiceConfig.html":{}}}],["options.element_count_limit",{"_index":395,"title":{},"body":{"interfaces/BackoffSettings.html":{},"interfaces/BundlingConfig.html":{},"interfaces/CallOptions.html":{},"classes/CallSettings.html":{},"interfaces/ClientConfig.html":{},"interfaces/MethodConfig.html":{},"classes/RetryOptions.html":{},"interfaces/RetryParamsConfig.html":{},"interfaces/ServiceConfig.html":{}}}],["options.element_count_threshold",{"_index":393,"title":{},"body":{"interfaces/BackoffSettings.html":{},"interfaces/BundlingConfig.html":{},"interfaces/CallOptions.html":{},"classes/CallSettings.html":{},"interfaces/ClientConfig.html":{},"interfaces/MethodConfig.html":{},"classes/RetryOptions.html":{},"interfaces/RetryParamsConfig.html":{},"interfaces/ServiceConfig.html":{}}}],["options.grpc",{"_index":910,"title":{},"body":{"classes/ClientStub.html":{},"interfaces/ClientStubOptions.html":{},"classes/GoogleProtoFilesRoot.html":{},"classes/GrpcClient.html":{},"interfaces/GrpcClientOptions.html":{},"interfaces/Metadata.html":{},"interfaces/MetadataValue.html":{}}}],["options.isbundling",{"_index":352,"title":{},"body":{"interfaces/BackoffSettings.html":{},"interfaces/BundlingConfig.html":{},"interfaces/CallOptions.html":{},"classes/CallSettings.html":{},"interfaces/ClientConfig.html":{},"interfaces/MethodConfig.html":{},"classes/RetryOptions.html":{},"interfaces/RetryParamsConfig.html":{},"interfaces/ServiceConfig.html":{}}}],["options.longrunning",{"_index":357,"title":{},"body":{"interfaces/BackoffSettings.html":{},"interfaces/BundlingConfig.html":{},"interfaces/CallOptions.html":{},"classes/CallSettings.html":{},"interfaces/ClientConfig.html":{},"interfaces/MethodConfig.html":{},"classes/RetryOptions.html":{},"interfaces/RetryParamsConfig.html":{},"interfaces/ServiceConfig.html":{}}}],["options.maxresults",{"_index":342,"title":{},"body":{"interfaces/BackoffSettings.html":{},"interfaces/BundlingConfig.html":{},"interfaces/CallOptions.html":{},"classes/CallSettings.html":{},"interfaces/ClientConfig.html":{},"interfaces/MethodConfig.html":{},"classes/PageDescriptor.html":{},"classes/RetryOptions.html":{},"interfaces/RetryParamsConfig.html":{},"interfaces/ServiceConfig.html":{}}}],["options.maxretries",{"_index":354,"title":{},"body":{"interfaces/BackoffSettings.html":{},"interfaces/BundlingConfig.html":{},"interfaces/CallOptions.html":{},"classes/CallSettings.html":{},"interfaces/ClientConfig.html":{},"interfaces/MethodConfig.html":{},"classes/RetryOptions.html":{},"interfaces/RetryParamsConfig.html":{},"interfaces/ServiceConfig.html":{}}}],["options.otherargs",{"_index":349,"title":{},"body":{"interfaces/BackoffSettings.html":{},"interfaces/BundlingConfig.html":{},"interfaces/CallOptions.html":{},"classes/CallSettings.html":{},"interfaces/ClientConfig.html":{},"interfaces/MethodConfig.html":{},"classes/RetryOptions.html":{},"interfaces/RetryParamsConfig.html":{},"interfaces/ServiceConfig.html":{}}}],["options.otherargs![optionskey",{"_index":351,"title":{},"body":{"interfaces/BackoffSettings.html":{},"interfaces/BundlingConfig.html":{},"interfaces/CallOptions.html":{},"classes/CallSettings.html":{},"interfaces/ClientConfig.html":{},"interfaces/MethodConfig.html":{},"classes/RetryOptions.html":{},"interfaces/RetryParamsConfig.html":{},"interfaces/ServiceConfig.html":{}}}],["options.pagesize",{"_index":341,"title":{},"body":{"interfaces/BackoffSettings.html":{},"interfaces/BundlingConfig.html":{},"interfaces/CallOptions.html":{},"classes/CallSettings.html":{},"interfaces/ClientConfig.html":{},"interfaces/MethodConfig.html":{},"classes/RetryOptions.html":{},"interfaces/RetryParamsConfig.html":{},"interfaces/ServiceConfig.html":{}}}],["options.pagetoken",{"_index":340,"title":{},"body":{"interfaces/BackoffSettings.html":{},"interfaces/BundlingConfig.html":{},"interfaces/CallOptions.html":{},"classes/CallSettings.html":{},"interfaces/ClientConfig.html":{},"interfaces/MethodConfig.html":{},"classes/RetryOptions.html":{},"interfaces/RetryParamsConfig.html":{},"interfaces/ServiceConfig.html":{}}}],["options.port",{"_index":1030,"title":{},"body":{"classes/ClientStub.html":{},"interfaces/ClientStubOptions.html":{},"classes/GoogleProtoFilesRoot.html":{},"classes/GrpcClient.html":{},"interfaces/GrpcClientOptions.html":{},"interfaces/Metadata.html":{},"interfaces/MetadataValue.html":{}}}],["options.promise",{"_index":358,"title":{},"body":{"interfaces/BackoffSettings.html":{},"interfaces/BundlingConfig.html":{},"interfaces/CallOptions.html":{},"classes/CallSettings.html":{},"interfaces/ClientConfig.html":{},"classes/ClientStub.html":{},"interfaces/ClientStubOptions.html":{},"classes/GoogleProtoFilesRoot.html":{},"classes/GrpcClient.html":{},"interfaces/GrpcClientOptions.html":{},"interfaces/Metadata.html":{},"interfaces/MetadataValue.html":{},"interfaces/MethodConfig.html":{},"classes/RetryOptions.html":{},"interfaces/RetryParamsConfig.html":{},"interfaces/ServiceConfig.html":{}}}],["options.request_byte_limit",{"_index":397,"title":{},"body":{"interfaces/BackoffSettings.html":{},"interfaces/BundlingConfig.html":{},"interfaces/CallOptions.html":{},"classes/CallSettings.html":{},"interfaces/ClientConfig.html":{},"interfaces/MethodConfig.html":{},"classes/RetryOptions.html":{},"interfaces/RetryParamsConfig.html":{},"interfaces/ServiceConfig.html":{}}}],["options.request_byte_threshold",{"_index":396,"title":{},"body":{"interfaces/BackoffSettings.html":{},"interfaces/BundlingConfig.html":{},"interfaces/CallOptions.html":{},"classes/CallSettings.html":{},"interfaces/ClientConfig.html":{},"interfaces/MethodConfig.html":{},"classes/RetryOptions.html":{},"interfaces/RetryParamsConfig.html":{},"interfaces/ServiceConfig.html":{}}}],["options.retry",{"_index":338,"title":{},"body":{"interfaces/BackoffSettings.html":{},"interfaces/BundlingConfig.html":{},"interfaces/CallOptions.html":{},"classes/CallSettings.html":{},"interfaces/ClientConfig.html":{},"interfaces/MethodConfig.html":{},"classes/RetryOptions.html":{},"interfaces/RetryParamsConfig.html":{},"interfaces/ServiceConfig.html":{}}}],["options.servicepath",{"_index":1028,"title":{},"body":{"classes/ClientStub.html":{},"interfaces/ClientStubOptions.html":{},"classes/GoogleProtoFilesRoot.html":{},"classes/GrpcClient.html":{},"interfaces/GrpcClientOptions.html":{},"interfaces/Metadata.html":{},"interfaces/MetadataValue.html":{}}}],["options.sslcreds",{"_index":1032,"title":{},"body":{"classes/ClientStub.html":{},"interfaces/ClientStubOptions.html":{},"classes/GoogleProtoFilesRoot.html":{},"classes/GrpcClient.html":{},"interfaces/GrpcClientOptions.html":{},"interfaces/Metadata.html":{},"interfaces/MetadataValue.html":{}}}],["options.timeout",{"_index":337,"title":{},"body":{"interfaces/BackoffSettings.html":{},"interfaces/BundlingConfig.html":{},"interfaces/CallOptions.html":{},"classes/CallSettings.html":{},"interfaces/ClientConfig.html":{},"interfaces/MethodConfig.html":{},"classes/RetryOptions.html":{},"interfaces/RetryParamsConfig.html":{},"interfaces/ServiceConfig.html":{}}}],["options[key",{"_index":1044,"title":{},"body":{"classes/ClientStub.html":{},"interfaces/ClientStubOptions.html":{},"classes/GoogleProtoFilesRoot.html":{},"classes/GrpcClient.html":{},"interfaces/GrpcClientOptions.html":{},"interfaces/Metadata.html":{},"interfaces/MetadataValue.html":{}}}],["options[param",{"_index":390,"title":{},"body":{"interfaces/BackoffSettings.html":{},"interfaces/BundlingConfig.html":{},"interfaces/CallOptions.html":{},"classes/CallSettings.html":{},"interfaces/ClientConfig.html":{},"interfaces/MethodConfig.html":{},"classes/RetryOptions.html":{},"interfaces/RetryParamsConfig.html":{},"interfaces/ServiceConfig.html":{}}}],["optionskey",{"_index":348,"title":{},"body":{"interfaces/BackoffSettings.html":{},"interfaces/BundlingConfig.html":{},"interfaces/CallOptions.html":{},"classes/CallSettings.html":{},"interfaces/ClientConfig.html":{},"interfaces/MethodConfig.html":{},"classes/RetryOptions.html":{},"interfaces/RetryParamsConfig.html":{},"interfaces/ServiceConfig.html":{}}}],["optparam",{"_index":198,"title":{},"body":{"interfaces/BackoffSettings.html":{},"interfaces/BundlingConfig.html":{},"interfaces/CallOptions.html":{},"classes/CallSettings.html":{},"interfaces/ClientConfig.html":{},"interfaces/MethodConfig.html":{},"classes/RetryOptions.html":{},"interfaces/RetryParamsConfig.html":{},"interfaces/ServiceConfig.html":{}}}],["opts",{"_index":937,"title":{},"body":{"classes/ClientStub.html":{},"interfaces/ClientStubOptions.html":{},"classes/GoogleProtoFilesRoot.html":{},"classes/GrpcClient.html":{},"interfaces/GrpcClientOptions.html":{},"interfaces/Metadata.html":{},"interfaces/MetadataValue.html":{},"classes/OperationsClient.html":{},"classes/OperationsClientBuilder.html":{},"interfaces/OperationsClientOptions.html":{}}}],["opts.clientconfig",{"_index":1585,"title":{},"body":{"classes/OperationsClient.html":{},"classes/OperationsClientBuilder.html":{},"interfaces/OperationsClientOptions.html":{}}}],["opts.libname",{"_index":1578,"title":{},"body":{"classes/OperationsClient.html":{},"classes/OperationsClientBuilder.html":{},"interfaces/OperationsClientOptions.html":{}}}],["opts.libversion",{"_index":1579,"title":{},"body":{"classes/OperationsClient.html":{},"classes/OperationsClientBuilder.html":{},"interfaces/OperationsClientOptions.html":{}}}],["opts.port",{"_index":1640,"title":{},"body":{"classes/OperationsClient.html":{},"classes/OperationsClientBuilder.html":{},"interfaces/OperationsClientOptions.html":{}}}],["opts.servicepath",{"_index":1636,"title":{},"body":{"classes/OperationsClient.html":{},"classes/OperationsClientBuilder.html":{},"interfaces/OperationsClientOptions.html":{}}}],["opts.sslcreds",{"_index":939,"title":{},"body":{"classes/ClientStub.html":{},"interfaces/ClientStubOptions.html":{},"classes/GoogleProtoFilesRoot.html":{},"classes/GrpcClient.html":{},"interfaces/GrpcClientOptions.html":{},"interfaces/Metadata.html":{},"interfaces/MetadataValue.html":{},"classes/OperationsClient.html":{},"classes/OperationsClientBuilder.html":{},"interfaces/OperationsClientOptions.html":{}}}],["organizes",{"_index":701,"title":{},"body":{"classes/BundleExecutor.html":{},"interfaces/BundleOptions.html":{}}}],["original",{"_index":2219,"title":{},"body":{"contributing.html":{}}}],["originpath",{"_index":1067,"title":{},"body":{"classes/ClientStub.html":{},"interfaces/ClientStubOptions.html":{},"classes/GoogleProtoFilesRoot.html":{},"classes/GrpcClient.html":{},"interfaces/GrpcClientOptions.html":{},"interfaces/Metadata.html":{},"interfaces/MetadataValue.html":{}}}],["otherargs",{"_index":283,"title":{},"body":{"interfaces/BackoffSettings.html":{},"interfaces/BundlingConfig.html":{},"interfaces/CallOptions.html":{},"classes/CallSettings.html":{},"interfaces/ClientConfig.html":{},"interfaces/MethodConfig.html":{},"classes/RetryOptions.html":{},"interfaces/RetryParamsConfig.html":{},"interfaces/ServiceConfig.html":{},"miscellaneous/functions.html":{}}}],["otherargs[key",{"_index":346,"title":{},"body":{"interfaces/BackoffSettings.html":{},"interfaces/BundlingConfig.html":{},"interfaces/CallOptions.html":{},"classes/CallSettings.html":{},"interfaces/ClientConfig.html":{},"interfaces/MethodConfig.html":{},"classes/RetryOptions.html":{},"interfaces/RetryParamsConfig.html":{},"interfaces/ServiceConfig.html":{}}}],["otherargs[optionskey",{"_index":350,"title":{},"body":{"interfaces/BackoffSettings.html":{},"interfaces/BundlingConfig.html":{},"interfaces/CallOptions.html":{},"classes/CallSettings.html":{},"interfaces/ClientConfig.html":{},"interfaces/MethodConfig.html":{},"classes/RetryOptions.html":{},"interfaces/RetryParamsConfig.html":{},"interfaces/ServiceConfig.html":{}}}],["others",{"_index":717,"title":{},"body":{"classes/BundleExecutor.html":{},"interfaces/BundleOptions.html":{}}}],["otherwise",{"_index":293,"title":{},"body":{"interfaces/BackoffSettings.html":{},"interfaces/BundlingConfig.html":{},"interfaces/CallOptions.html":{},"classes/CallSettings.html":{},"interfaces/ClientConfig.html":{},"interfaces/MethodConfig.html":{},"classes/RetryOptions.html":{},"interfaces/RetryParamsConfig.html":{},"interfaces/ServiceConfig.html":{},"license.html":{}}}],["out",{"_index":579,"title":{},"body":{"interfaces/Bindings.html":{},"interfaces/ParseResult.html":{},"classes/PathTemplate.html":{},"interfaces/Segment.html":{},"contributing.html":{},"index.html":{},"license.html":{}}}],["out.push(segment",{"_index":587,"title":{},"body":{"interfaces/Bindings.html":{},"interfaces/ParseResult.html":{},"classes/PathTemplate.html":{},"interfaces/Segment.html":{}}}],["out.substring(1",{"_index":598,"title":{},"body":{"interfaces/Bindings.html":{},"interfaces/ParseResult.html":{},"classes/PathTemplate.html":{},"interfaces/Segment.html":{}}}],["outgoinghttpheaders",{"_index":866,"title":{},"body":{"classes/ClientStub.html":{},"interfaces/ClientStubOptions.html":{},"classes/GoogleProtoFilesRoot.html":{},"classes/GrpcClient.html":{},"interfaces/GrpcClientOptions.html":{},"interfaces/Metadata.html":{},"interfaces/MetadataValue.html":{}}}],["outstanding",{"_index":247,"title":{},"body":{"interfaces/BackoffSettings.html":{},"interfaces/BundlingConfig.html":{},"interfaces/CallOptions.html":{},"classes/CallSettings.html":{},"interfaces/ClientConfig.html":{},"interfaces/MethodConfig.html":{},"classes/RetryOptions.html":{},"interfaces/RetryParamsConfig.html":{},"interfaces/ServiceConfig.html":{}}}],["over",{"_index":1108,"title":{},"body":{"interfaces/Duplexify.html":{},"interfaces/DuplexifyConstructor.html":{},"interfaces/DuplexifyOptions.html":{},"classes/OperationsClient.html":{},"classes/OperationsClientBuilder.html":{},"interfaces/OperationsClientOptions.html":{},"classes/StreamProxy.html":{}}}],["overridable",{"_index":128,"title":{},"body":{"interfaces/BackoffSettings.html":{},"interfaces/BundlingConfig.html":{},"interfaces/CallOptions.html":{},"classes/CallSettings.html":{},"interfaces/ClientConfig.html":{},"interfaces/MethodConfig.html":{},"classes/RetryOptions.html":{},"interfaces/RetryParamsConfig.html":{},"interfaces/ServiceConfig.html":{}}}],["override",{"_index":137,"title":{},"body":{"interfaces/BackoffSettings.html":{},"interfaces/BundlingConfig.html":{},"interfaces/CallOptions.html":{},"classes/CallSettings.html":{},"interfaces/ClientConfig.html":{},"interfaces/MethodConfig.html":{},"classes/OperationsClient.html":{},"classes/OperationsClientBuilder.html":{},"interfaces/OperationsClientOptions.html":{},"classes/RetryOptions.html":{},"interfaces/RetryParamsConfig.html":{},"interfaces/ServiceConfig.html":{},"miscellaneous/functions.html":{}}}],["overrides",{"_index":442,"title":{},"body":{"interfaces/BackoffSettings.html":{},"interfaces/BundlingConfig.html":{},"interfaces/CallOptions.html":{},"classes/CallSettings.html":{},"interfaces/ClientConfig.html":{},"interfaces/MethodConfig.html":{},"classes/RetryOptions.html":{},"interfaces/RetryParamsConfig.html":{},"interfaces/ServiceConfig.html":{}}}],["overrides.backoffsettings",{"_index":448,"title":{},"body":{"interfaces/BackoffSettings.html":{},"interfaces/BundlingConfig.html":{},"interfaces/CallOptions.html":{},"classes/CallSettings.html":{},"interfaces/ClientConfig.html":{},"interfaces/MethodConfig.html":{},"classes/RetryOptions.html":{},"interfaces/RetryParamsConfig.html":{},"interfaces/ServiceConfig.html":{}}}],["overrides.methods",{"_index":498,"title":{},"body":{"interfaces/BackoffSettings.html":{},"interfaces/BundlingConfig.html":{},"interfaces/CallOptions.html":{},"classes/CallSettings.html":{},"interfaces/ClientConfig.html":{},"interfaces/MethodConfig.html":{},"classes/RetryOptions.html":{},"interfaces/RetryParamsConfig.html":{},"interfaces/ServiceConfig.html":{}}}],["overrides.retry_codes",{"_index":512,"title":{},"body":{"interfaces/BackoffSettings.html":{},"interfaces/BundlingConfig.html":{},"interfaces/CallOptions.html":{},"classes/CallSettings.html":{},"interfaces/ClientConfig.html":{},"interfaces/MethodConfig.html":{},"classes/RetryOptions.html":{},"interfaces/RetryParamsConfig.html":{},"interfaces/ServiceConfig.html":{}}}],["overrides.retry_params",{"_index":513,"title":{},"body":{"interfaces/BackoffSettings.html":{},"interfaces/BundlingConfig.html":{},"interfaces/CallOptions.html":{},"classes/CallSettings.html":{},"interfaces/ClientConfig.html":{},"interfaces/MethodConfig.html":{},"classes/RetryOptions.html":{},"interfaces/RetryParamsConfig.html":{},"interfaces/ServiceConfig.html":{}}}],["overrides.retrycodes",{"_index":447,"title":{},"body":{"interfaces/BackoffSettings.html":{},"interfaces/BundlingConfig.html":{},"interfaces/CallOptions.html":{},"classes/CallSettings.html":{},"interfaces/ClientConfig.html":{},"interfaces/MethodConfig.html":{},"classes/RetryOptions.html":{},"interfaces/RetryParamsConfig.html":{},"interfaces/ServiceConfig.html":{}}}],["overriding",{"_index":443,"title":{},"body":{"interfaces/BackoffSettings.html":{},"interfaces/BundlingConfig.html":{},"interfaces/CallOptions.html":{},"classes/CallSettings.html":{},"interfaces/ClientConfig.html":{},"classes/ClientStub.html":{},"interfaces/ClientStubOptions.html":{},"classes/GoogleProtoFilesRoot.html":{},"classes/GrpcClient.html":{},"interfaces/GrpcClientOptions.html":{},"interfaces/Metadata.html":{},"interfaces/MetadataValue.html":{},"interfaces/MethodConfig.html":{},"classes/RetryOptions.html":{},"interfaces/RetryParamsConfig.html":{},"interfaces/ServiceConfig.html":{}}}],["overridingmethod",{"_index":508,"title":{},"body":{"interfaces/BackoffSettings.html":{},"interfaces/BundlingConfig.html":{},"interfaces/CallOptions.html":{},"classes/CallSettings.html":{},"interfaces/ClientConfig.html":{},"interfaces/MethodConfig.html":{},"classes/RetryOptions.html":{},"interfaces/RetryParamsConfig.html":{},"interfaces/ServiceConfig.html":{}}}],["overridingmethod.bundling",{"_index":510,"title":{},"body":{"interfaces/BackoffSettings.html":{},"interfaces/BundlingConfig.html":{},"interfaces/CallOptions.html":{},"classes/CallSettings.html":{},"interfaces/ClientConfig.html":{},"interfaces/MethodConfig.html":{},"classes/RetryOptions.html":{},"interfaces/RetryParamsConfig.html":{},"interfaces/ServiceConfig.html":{}}}],["overridingmethod.timeout_millis",{"_index":511,"title":{},"body":{"interfaces/BackoffSettings.html":{},"interfaces/BundlingConfig.html":{},"interfaces/CallOptions.html":{},"classes/CallSettings.html":{},"interfaces/ClientConfig.html":{},"interfaces/MethodConfig.html":{},"classes/RetryOptions.html":{},"interfaces/RetryParamsConfig.html":{},"interfaces/ServiceConfig.html":{}}}],["overridingmethods",{"_index":497,"title":{},"body":{"interfaces/BackoffSettings.html":{},"interfaces/BundlingConfig.html":{},"interfaces/CallOptions.html":{},"classes/CallSettings.html":{},"interfaces/ClientConfig.html":{},"interfaces/MethodConfig.html":{},"classes/RetryOptions.html":{},"interfaces/RetryParamsConfig.html":{},"interfaces/ServiceConfig.html":{}}}],["overridingmethods[methodname",{"_index":509,"title":{},"body":{"interfaces/BackoffSettings.html":{},"interfaces/BundlingConfig.html":{},"interfaces/CallOptions.html":{},"classes/CallSettings.html":{},"interfaces/ClientConfig.html":{},"interfaces/MethodConfig.html":{},"classes/RetryOptions.html":{},"interfaces/RetryParamsConfig.html":{},"interfaces/ServiceConfig.html":{}}}],["overview",{"_index":2409,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["owner",{"_index":2234,"title":{},"body":{"contributing.html":{},"license.html":{}}}],["package",{"_index":1925,"title":{"dependencies.html":{}},"body":{"changelog.html":{},"index.html":{}}}],["packagedef",{"_index":955,"title":{},"body":{"classes/ClientStub.html":{},"interfaces/ClientStubOptions.html":{},"classes/GoogleProtoFilesRoot.html":{},"classes/GrpcClient.html":{},"interfaces/GrpcClientOptions.html":{},"interfaces/Metadata.html":{},"interfaces/MetadataValue.html":{}}}],["page",{"_index":166,"title":{},"body":{"interfaces/BackoffSettings.html":{},"interfaces/BundlingConfig.html":{},"interfaces/CallOptions.html":{},"classes/CallSettings.html":{},"interfaces/ClientConfig.html":{},"interfaces/GRPCCallOtherArgs.html":{},"interfaces/GRPCCallResult.html":{},"interfaces/GaxCall.html":{},"interfaces/GaxCallPromise.html":{},"interfaces/GaxCallStream.html":{},"interfaces/MethodConfig.html":{},"classes/OperationsClient.html":{},"classes/OperationsClientBuilder.html":{},"interfaces/OperationsClientOptions.html":{},"classes/PagedApiCaller.html":{},"interfaces/RequestType.html":{},"classes/RetryOptions.html":{},"interfaces/RetryParamsConfig.html":{},"interfaces/ServiceConfig.html":{},"interfaces/SimpleCallbackFunction.html":{},"index.html":{}}}],["page_descriptors",{"_index":1563,"title":{},"body":{"classes/OperationsClient.html":{},"classes/OperationsClientBuilder.html":{},"interfaces/OperationsClientOptions.html":{},"miscellaneous/variables.html":{}}}],["page_descriptors.listoperations.createstream",{"_index":1623,"title":{},"body":{"classes/OperationsClient.html":{},"classes/OperationsClientBuilder.html":{},"interfaces/OperationsClientOptions.html":{}}}],["page_descriptors[methodname",{"_index":1597,"title":{},"body":{"classes/OperationsClient.html":{},"classes/OperationsClientBuilder.html":{},"interfaces/OperationsClientOptions.html":{}}}],["paged",{"_index":164,"title":{},"body":{"interfaces/BackoffSettings.html":{},"interfaces/BundlingConfig.html":{},"interfaces/CallOptions.html":{},"classes/CallSettings.html":{},"interfaces/ClientConfig.html":{},"interfaces/MethodConfig.html":{},"classes/OperationsClient.html":{},"classes/OperationsClientBuilder.html":{},"interfaces/OperationsClientOptions.html":{},"classes/RetryOptions.html":{},"interfaces/RetryParamsConfig.html":{},"interfaces/ServiceConfig.html":{}}}],["pagedapicaller",{"_index":1666,"title":{"classes/PagedApiCaller.html":{}},"body":{"classes/PageDescriptor.html":{},"classes/PagedApiCaller.html":{}}}],["pagedapicaller(this",{"_index":1674,"title":{},"body":{"classes/PageDescriptor.html":{}}}],["pagedescriptor",{"_index":290,"title":{"classes/PageDescriptor.html":{}},"body":{"interfaces/BackoffSettings.html":{},"interfaces/BundlingConfig.html":{},"interfaces/CallOptions.html":{},"classes/CallSettings.html":{},"interfaces/ClientConfig.html":{},"interfaces/Descriptor.html":{},"interfaces/MethodConfig.html":{},"classes/OperationsClient.html":{},"classes/OperationsClientBuilder.html":{},"interfaces/OperationsClientOptions.html":{},"classes/PageDescriptor.html":{},"classes/PagedApiCaller.html":{},"classes/RetryOptions.html":{},"interfaces/RetryParamsConfig.html":{},"interfaces/ServiceConfig.html":{},"miscellaneous/variables.html":{}}}],["pagesize",{"_index":279,"title":{},"body":{"interfaces/BackoffSettings.html":{},"interfaces/BundlingConfig.html":{},"interfaces/CallOptions.html":{},"classes/CallSettings.html":{},"interfaces/ClientConfig.html":{},"interfaces/MethodConfig.html":{},"classes/RetryOptions.html":{},"interfaces/RetryParamsConfig.html":{},"interfaces/ServiceConfig.html":{}}}],["pagetoken",{"_index":172,"title":{},"body":{"interfaces/BackoffSettings.html":{},"interfaces/BundlingConfig.html":{},"interfaces/CallOptions.html":{},"classes/CallSettings.html":{},"interfaces/ClientConfig.html":{},"interfaces/MethodConfig.html":{},"classes/OperationsClient.html":{},"classes/OperationsClientBuilder.html":{},"interfaces/OperationsClientOptions.html":{},"classes/PagedApiCaller.html":{},"classes/RetryOptions.html":{},"interfaces/RetryParamsConfig.html":{},"interfaces/ServiceConfig.html":{},"miscellaneous/variables.html":{}}}],["paginated",{"_index":17,"title":{},"body":{"interfaces/APICaller.html":{},"interfaces/ApiCallerSettings.html":{},"interfaces/GRPCCallOtherArgs.html":{},"interfaces/GRPCCallResult.html":{},"interfaces/GaxCall.html":{},"interfaces/GaxCallPromise.html":{},"interfaces/GaxCallStream.html":{},"interfaces/RequestType.html":{},"interfaces/SimpleCallbackFunction.html":{}}}],["pagination",{"_index":1185,"title":{},"body":{"interfaces/GRPCCallOtherArgs.html":{},"interfaces/GRPCCallResult.html":{},"interfaces/GaxCall.html":{},"interfaces/GaxCallPromise.html":{},"interfaces/GaxCallStream.html":{},"classes/PageDescriptor.html":{},"classes/PagedApiCaller.html":{},"interfaces/RequestType.html":{},"interfaces/SimpleCallbackFunction.html":{}}}],["paginationcalls/pagedescriptor",{"_index":1086,"title":{},"body":{"interfaces/Descriptor.html":{}}}],["paginations",{"_index":1491,"title":{},"body":{"classes/OperationsClient.html":{},"classes/OperationsClientBuilder.html":{},"interfaces/OperationsClientOptions.html":{}}}],["param",{"_index":197,"title":{},"body":{"interfaces/BackoffSettings.html":{},"interfaces/Bindings.html":{},"classes/BundleDescriptor.html":{},"classes/BundleExecutor.html":{},"interfaces/BundleOptions.html":{},"interfaces/BundlingConfig.html":{},"interfaces/CallOptions.html":{},"classes/CallSettings.html":{},"interfaces/CancellablePromise.html":{},"interfaces/ClientConfig.html":{},"classes/ClientStub.html":{},"interfaces/ClientStubOptions.html":{},"interfaces/Duplexify.html":{},"interfaces/DuplexifyConstructor.html":{},"interfaces/DuplexifyOptions.html":{},"interfaces/GetOperationCallback.html":{},"classes/GoogleProtoFilesRoot.html":{},"classes/GrpcClient.html":{},"interfaces/GrpcClientOptions.html":{},"classes/LongrunningApiCaller.html":{},"interfaces/Metadata.html":{},"interfaces/MetadataValue.html":{},"interfaces/MethodConfig.html":{},"classes/OngoingCall.html":{},"classes/OngoingCallPromise.html":{},"classes/Operation.html":{},"classes/OperationsClient.html":{},"classes/OperationsClientBuilder.html":{},"interfaces/OperationsClientOptions.html":{},"classes/PagedApiCaller.html":{},"interfaces/ParseResult.html":{},"classes/PathTemplate.html":{},"classes/RetryOptions.html":{},"interfaces/RetryParamsConfig.html":{},"interfaces/Segment.html":{},"interfaces/ServiceConfig.html":{},"classes/StreamProxy.html":{},"classes/StreamingApiCaller.html":{},"interfaces/SubResponseInfo.html":{},"classes/Task.html":{},"interfaces/TaskCallback.html":{},"interfaces/TaskData.html":{},"interfaces/TaskElement.html":{}}}],["parameter",{"_index":232,"title":{},"body":{"interfaces/BackoffSettings.html":{},"interfaces/BundlingConfig.html":{},"interfaces/CallOptions.html":{},"classes/CallSettings.html":{},"interfaces/ClientConfig.html":{},"interfaces/GRPCCallOtherArgs.html":{},"interfaces/GRPCCallResult.html":{},"interfaces/GaxCall.html":{},"interfaces/GaxCallPromise.html":{},"interfaces/GaxCallStream.html":{},"interfaces/MethodConfig.html":{},"classes/OperationsClient.html":{},"classes/OperationsClientBuilder.html":{},"interfaces/OperationsClientOptions.html":{},"interfaces/RequestType.html":{},"classes/RetryOptions.html":{},"interfaces/RetryParamsConfig.html":{},"interfaces/ServiceConfig.html":{},"interfaces/SimpleCallbackFunction.html":{},"miscellaneous/functions.html":{}}}],["parameters",{"_index":40,"title":{},"body":{"interfaces/APICaller.html":{},"interfaces/BackoffSettings.html":{},"classes/BundleApiCaller.html":{},"classes/BundleDescriptor.html":{},"classes/BundleExecutor.html":{},"interfaces/BundlingConfig.html":{},"interfaces/CallOptions.html":{},"classes/CallSettings.html":{},"interfaces/ClientConfig.html":{},"classes/ClientStub.html":{},"interfaces/ClientStubOptions.html":{},"interfaces/Descriptor.html":{},"interfaces/Duplexify.html":{},"interfaces/DuplexifyConstructor.html":{},"classes/GoogleProtoFilesRoot.html":{},"classes/GrpcClient.html":{},"interfaces/GrpcClientOptions.html":{},"classes/LongRunningDescriptor.html":{},"classes/LongrunningApiCaller.html":{},"interfaces/Metadata.html":{},"interfaces/MetadataValue.html":{},"interfaces/MethodConfig.html":{},"classes/NormalApiCaller.html":{},"classes/OngoingCall.html":{},"classes/OngoingCallPromise.html":{},"classes/Operation.html":{},"classes/OperationsClient.html":{},"classes/OperationsClientBuilder.html":{},"interfaces/OperationsClientOptions.html":{},"classes/PageDescriptor.html":{},"classes/PagedApiCaller.html":{},"classes/PathTemplate.html":{},"classes/RetryOptions.html":{},"interfaces/RetryParamsConfig.html":{},"interfaces/ServiceConfig.html":{},"classes/StreamDescriptor.html":{},"classes/StreamProxy.html":{},"classes/StreamingApiCaller.html":{},"classes/Task.html":{},"miscellaneous/functions.html":{}}}],["params",{"_index":382,"title":{},"body":{"interfaces/BackoffSettings.html":{},"interfaces/BundlingConfig.html":{},"interfaces/CallOptions.html":{},"classes/CallSettings.html":{},"interfaces/ClientConfig.html":{},"interfaces/MethodConfig.html":{},"classes/RetryOptions.html":{},"interfaces/RetryParamsConfig.html":{},"interfaces/ServiceConfig.html":{},"miscellaneous/functions.html":{}}}],["params.foreach(param",{"_index":388,"title":{},"body":{"interfaces/BackoffSettings.html":{},"interfaces/BundlingConfig.html":{},"interfaces/CallOptions.html":{},"classes/CallSettings.html":{},"interfaces/ClientConfig.html":{},"interfaces/MethodConfig.html":{},"classes/RetryOptions.html":{},"interfaces/RetryParamsConfig.html":{},"interfaces/ServiceConfig.html":{}}}],["params.initial_retry_delay_millis",{"_index":429,"title":{},"body":{"interfaces/BackoffSettings.html":{},"interfaces/BundlingConfig.html":{},"interfaces/CallOptions.html":{},"classes/CallSettings.html":{},"interfaces/ClientConfig.html":{},"interfaces/MethodConfig.html":{},"classes/RetryOptions.html":{},"interfaces/RetryParamsConfig.html":{},"interfaces/ServiceConfig.html":{}}}],["params.initial_rpc_timeout_millis",{"_index":432,"title":{},"body":{"interfaces/BackoffSettings.html":{},"interfaces/BundlingConfig.html":{},"interfaces/CallOptions.html":{},"classes/CallSettings.html":{},"interfaces/ClientConfig.html":{},"interfaces/MethodConfig.html":{},"classes/RetryOptions.html":{},"interfaces/RetryParamsConfig.html":{},"interfaces/ServiceConfig.html":{}}}],["params.max_retry_delay_millis",{"_index":431,"title":{},"body":{"interfaces/BackoffSettings.html":{},"interfaces/BundlingConfig.html":{},"interfaces/CallOptions.html":{},"classes/CallSettings.html":{},"interfaces/ClientConfig.html":{},"interfaces/MethodConfig.html":{},"classes/RetryOptions.html":{},"interfaces/RetryParamsConfig.html":{},"interfaces/ServiceConfig.html":{}}}],["params.max_rpc_timeout_millis",{"_index":434,"title":{},"body":{"interfaces/BackoffSettings.html":{},"interfaces/BundlingConfig.html":{},"interfaces/CallOptions.html":{},"classes/CallSettings.html":{},"interfaces/ClientConfig.html":{},"interfaces/MethodConfig.html":{},"classes/RetryOptions.html":{},"interfaces/RetryParamsConfig.html":{},"interfaces/ServiceConfig.html":{}}}],["params.retry_delay_multiplier",{"_index":430,"title":{},"body":{"interfaces/BackoffSettings.html":{},"interfaces/BundlingConfig.html":{},"interfaces/CallOptions.html":{},"classes/CallSettings.html":{},"interfaces/ClientConfig.html":{},"interfaces/MethodConfig.html":{},"classes/RetryOptions.html":{},"interfaces/RetryParamsConfig.html":{},"interfaces/ServiceConfig.html":{}}}],["params.rpc_timeout_multiplier",{"_index":433,"title":{},"body":{"interfaces/BackoffSettings.html":{},"interfaces/BundlingConfig.html":{},"interfaces/CallOptions.html":{},"classes/CallSettings.html":{},"interfaces/ClientConfig.html":{},"interfaces/MethodConfig.html":{},"classes/RetryOptions.html":{},"interfaces/RetryParamsConfig.html":{},"interfaces/ServiceConfig.html":{}}}],["params.total_timeout_millis",{"_index":435,"title":{},"body":{"interfaces/BackoffSettings.html":{},"interfaces/BundlingConfig.html":{},"interfaces/CallOptions.html":{},"classes/CallSettings.html":{},"interfaces/ClientConfig.html":{},"interfaces/MethodConfig.html":{},"classes/RetryOptions.html":{},"interfaces/RetryParamsConfig.html":{},"interfaces/ServiceConfig.html":{}}}],["parsed",{"_index":411,"title":{},"body":{"interfaces/BackoffSettings.html":{},"interfaces/Bindings.html":{},"interfaces/BundlingConfig.html":{},"interfaces/CallOptions.html":{},"classes/CallSettings.html":{},"interfaces/ClientConfig.html":{},"interfaces/MethodConfig.html":{},"interfaces/ParseResult.html":{},"classes/PathTemplate.html":{},"classes/RetryOptions.html":{},"interfaces/RetryParamsConfig.html":{},"interfaces/Segment.html":{},"interfaces/ServiceConfig.html":{},"miscellaneous/functions.html":{}}}],["parser",{"_index":524,"title":{},"body":{"interfaces/Bindings.html":{},"interfaces/ParseResult.html":{},"classes/PathTemplate.html":{},"interfaces/Segment.html":{},"miscellaneous/variables.html":{}}}],["parseresult",{"_index":526,"title":{"interfaces/ParseResult.html":{}},"body":{"interfaces/Bindings.html":{},"interfaces/ParseResult.html":{},"classes/PathTemplate.html":{},"interfaces/Segment.html":{}}}],["parserextras",{"_index":523,"title":{},"body":{"interfaces/Bindings.html":{},"interfaces/ParseResult.html":{},"classes/PathTemplate.html":{},"interfaces/Segment.html":{}}}],["part",{"_index":1823,"title":{},"body":{"classes/Task.html":{}}}],["particular",{"_index":129,"title":{},"body":{"interfaces/BackoffSettings.html":{},"interfaces/BundlingConfig.html":{},"interfaces/CallOptions.html":{},"classes/CallSettings.html":{},"interfaces/ClientConfig.html":{},"interfaces/MethodConfig.html":{},"classes/RetryOptions.html":{},"interfaces/RetryParamsConfig.html":{},"interfaces/ServiceConfig.html":{},"changelog.html":{},"license.html":{}}}],["pass",{"_index":1445,"title":{},"body":{"classes/OperationsClient.html":{},"classes/OperationsClientBuilder.html":{},"interfaces/OperationsClientOptions.html":{},"contributing.html":{},"index.html":{}}}],["passed",{"_index":307,"title":{},"body":{"interfaces/BackoffSettings.html":{},"classes/BundleExecutor.html":{},"interfaces/BundleOptions.html":{},"interfaces/BundlingConfig.html":{},"interfaces/CallOptions.html":{},"classes/CallSettings.html":{},"interfaces/ClientConfig.html":{},"classes/ClientStub.html":{},"interfaces/ClientStubOptions.html":{},"interfaces/Duplexify.html":{},"interfaces/DuplexifyConstructor.html":{},"interfaces/DuplexifyOptions.html":{},"classes/GoogleProtoFilesRoot.html":{},"classes/GrpcClient.html":{},"interfaces/GrpcClientOptions.html":{},"interfaces/Metadata.html":{},"interfaces/MetadataValue.html":{},"interfaces/MethodConfig.html":{},"classes/RetryOptions.html":{},"interfaces/RetryParamsConfig.html":{},"interfaces/ServiceConfig.html":{},"classes/StreamProxy.html":{},"interfaces/SubResponseInfo.html":{},"classes/Task.html":{},"interfaces/TaskCallback.html":{},"interfaces/TaskData.html":{},"interfaces/TaskElement.html":{},"miscellaneous/functions.html":{}}}],["passthrough",{"_index":1665,"title":{},"body":{"classes/PageDescriptor.html":{}}}],["passthrough({objectmode",{"_index":1670,"title":{},"body":{"classes/PageDescriptor.html":{}}}],["patch",{"_index":1986,"title":{},"body":{"changelog.html":{},"contributing.html":{}}}],["patches",{"_index":2208,"title":{},"body":{"contributing.html":{}}}],["path",{"_index":540,"title":{},"body":{"interfaces/Bindings.html":{},"classes/ClientStub.html":{},"interfaces/ClientStubOptions.html":{},"classes/GoogleProtoFilesRoot.html":{},"classes/GrpcClient.html":{},"interfaces/GrpcClientOptions.html":{},"interfaces/Metadata.html":{},"interfaces/MetadataValue.html":{},"classes/OperationsClient.html":{},"classes/OperationsClientBuilder.html":{},"interfaces/OperationsClientOptions.html":{},"interfaces/ParseResult.html":{},"classes/PathTemplate.html":{},"interfaces/Segment.html":{},"miscellaneous/functions.html":{}}}],["path.extname(f",{"_index":884,"title":{},"body":{"classes/ClientStub.html":{},"interfaces/ClientStubOptions.html":{},"classes/GoogleProtoFilesRoot.html":{},"classes/GrpcClient.html":{},"interfaces/GrpcClientOptions.html":{},"interfaces/Metadata.html":{},"interfaces/MetadataValue.html":{},"miscellaneous/variables.html":{}}}],["path.isabsolute(includepath",{"_index":1072,"title":{},"body":{"classes/ClientStub.html":{},"interfaces/ClientStubOptions.html":{},"classes/GoogleProtoFilesRoot.html":{},"classes/GrpcClient.html":{},"interfaces/GrpcClientOptions.html":{},"interfaces/Metadata.html":{},"interfaces/MetadataValue.html":{}}}],["path.join(__dirname",{"_index":873,"title":{},"body":{"classes/ClientStub.html":{},"interfaces/ClientStubOptions.html":{},"classes/GoogleProtoFilesRoot.html":{},"classes/GrpcClient.html":{},"interfaces/GrpcClientOptions.html":{},"interfaces/Metadata.html":{},"interfaces/MetadataValue.html":{},"classes/OperationsClient.html":{},"classes/OperationsClientBuilder.html":{},"interfaces/OperationsClientOptions.html":{},"miscellaneous/variables.html":{}}}],["path.join(current",{"_index":1082,"title":{},"body":{"classes/ClientStub.html":{},"interfaces/ClientStubOptions.html":{},"classes/GoogleProtoFilesRoot.html":{},"classes/GrpcClient.html":{},"interfaces/GrpcClientOptions.html":{},"interfaces/Metadata.html":{},"interfaces/MetadataValue.html":{}}}],["path.join(googleprotofilesdir",{"_index":986,"title":{},"body":{"classes/ClientStub.html":{},"interfaces/ClientStubOptions.html":{},"classes/GoogleProtoFilesRoot.html":{},"classes/GrpcClient.html":{},"interfaces/GrpcClientOptions.html":{},"interfaces/Metadata.html":{},"interfaces/MetadataValue.html":{}}}],["path.join(protopath",{"_index":984,"title":{},"body":{"classes/ClientStub.html":{},"interfaces/ClientStubOptions.html":{},"classes/GoogleProtoFilesRoot.html":{},"classes/GrpcClient.html":{},"interfaces/GrpcClientOptions.html":{},"interfaces/Metadata.html":{},"interfaces/MetadataValue.html":{}}}],["path.normalize(f).substring(googleprotofilesdir.length",{"_index":887,"title":{},"body":{"classes/ClientStub.html":{},"interfaces/ClientStubOptions.html":{},"classes/GoogleProtoFilesRoot.html":{},"classes/GrpcClient.html":{},"interfaces/GrpcClientOptions.html":{},"interfaces/Metadata.html":{},"interfaces/MetadataValue.html":{},"miscellaneous/variables.html":{}}}],["path.normalize(includepath",{"_index":1069,"title":{},"body":{"classes/ClientStub.html":{},"interfaces/ClientStubOptions.html":{},"classes/GoogleProtoFilesRoot.html":{},"classes/GrpcClient.html":{},"interfaces/GrpcClientOptions.html":{},"interfaces/Metadata.html":{},"interfaces/MetadataValue.html":{}}}],["path.normalize(originpath",{"_index":1068,"title":{},"body":{"classes/ClientStub.html":{},"interfaces/ClientStubOptions.html":{},"classes/GoogleProtoFilesRoot.html":{},"classes/GrpcClient.html":{},"interfaces/GrpcClientOptions.html":{},"interfaces/Metadata.html":{},"interfaces/MetadataValue.html":{}}}],["path.split",{"_index":549,"title":{},"body":{"interfaces/Bindings.html":{},"interfaces/ParseResult.html":{},"classes/PathTemplate.html":{},"interfaces/Segment.html":{}}}],["paths",{"_index":1070,"title":{},"body":{"classes/ClientStub.html":{},"interfaces/ClientStubOptions.html":{},"classes/GoogleProtoFilesRoot.html":{},"classes/GrpcClient.html":{},"interfaces/GrpcClientOptions.html":{},"interfaces/Metadata.html":{},"interfaces/MetadataValue.html":{}}}],["pathsegments",{"_index":548,"title":{},"body":{"interfaces/Bindings.html":{},"interfaces/ParseResult.html":{},"classes/PathTemplate.html":{},"interfaces/Segment.html":{}}}],["pathsegments.length",{"_index":554,"title":{},"body":{"interfaces/Bindings.html":{},"interfaces/ParseResult.html":{},"classes/PathTemplate.html":{},"interfaces/Segment.html":{}}}],["pathsegments.slice(index",{"_index":562,"title":{},"body":{"interfaces/Bindings.html":{},"interfaces/ParseResult.html":{},"classes/PathTemplate.html":{},"interfaces/Segment.html":{}}}],["pathsegments[index",{"_index":560,"title":{},"body":{"interfaces/Bindings.html":{},"interfaces/ParseResult.html":{},"classes/PathTemplate.html":{},"interfaces/Segment.html":{}}}],["pathtemplate",{"_index":530,"title":{"classes/PathTemplate.html":{}},"body":{"interfaces/Bindings.html":{},"interfaces/ParseResult.html":{},"classes/PathTemplate.html":{},"interfaces/Segment.html":{}}}],["pathtemplate(bindings[segment.literal",{"_index":583,"title":{},"body":{"interfaces/Bindings.html":{},"interfaces/ParseResult.html":{},"classes/PathTemplate.html":{},"interfaces/Segment.html":{}}}],["pdt",{"_index":1867,"title":{},"body":{"changelog.html":{}}}],["per",{"_index":205,"title":{},"body":{"interfaces/BackoffSettings.html":{},"interfaces/BundlingConfig.html":{},"interfaces/CallOptions.html":{},"classes/CallSettings.html":{},"interfaces/ClientConfig.html":{},"interfaces/MethodConfig.html":{},"classes/OperationsClient.html":{},"classes/OperationsClientBuilder.html":{},"interfaces/OperationsClientOptions.html":{},"classes/RetryOptions.html":{},"interfaces/RetryParamsConfig.html":{},"interfaces/ServiceConfig.html":{},"changelog.html":{},"miscellaneous/functions.html":{}}}],["performed",{"_index":168,"title":{},"body":{"interfaces/BackoffSettings.html":{},"interfaces/BundlingConfig.html":{},"interfaces/CallOptions.html":{},"classes/CallSettings.html":{},"interfaces/ClientConfig.html":{},"interfaces/MethodConfig.html":{},"classes/OperationsClient.html":{},"classes/OperationsClientBuilder.html":{},"interfaces/OperationsClientOptions.html":{},"classes/PagedApiCaller.html":{},"classes/RetryOptions.html":{},"interfaces/RetryParamsConfig.html":{},"interfaces/ServiceConfig.html":{}}}],["performs",{"_index":1386,"title":{},"body":{"classes/LongrunningApiCaller.html":{},"classes/PagedApiCaller.html":{}}}],["permission",{"_index":2057,"title":{},"body":{"changelog.html":{},"license.html":{}}}],["permitted",{"_index":2355,"title":{},"body":{"license.html":{}}}],["pessimistically",{"_index":264,"title":{},"body":{"interfaces/BackoffSettings.html":{},"interfaces/BundlingConfig.html":{},"interfaces/CallOptions.html":{},"classes/CallSettings.html":{},"interfaces/ClientConfig.html":{},"interfaces/MethodConfig.html":{},"classes/RetryOptions.html":{},"interfaces/RetryParamsConfig.html":{},"interfaces/ServiceConfig.html":{}}}],["pin",{"_index":1885,"title":{},"body":{"changelog.html":{}}}],["ping",{"_index":1306,"title":{},"body":{"interfaces/GetOperationCallback.html":{},"classes/Operation.html":{}}}],["please",{"_index":928,"title":{},"body":{"classes/ClientStub.html":{},"interfaces/ClientStubOptions.html":{},"classes/GoogleProtoFilesRoot.html":{},"classes/GrpcClient.html":{},"interfaces/GrpcClientOptions.html":{},"interfaces/Metadata.html":{},"interfaces/MetadataValue.html":{},"contributing.html":{},"index.html":{}}}],["poll",{"_index":1302,"title":{},"body":{"interfaces/GetOperationCallback.html":{},"classes/Operation.html":{},"classes/OperationsClient.html":{},"classes/OperationsClientBuilder.html":{},"interfaces/OperationsClientOptions.html":{}}}],["polled",{"_index":1268,"title":{},"body":{"interfaces/GetOperationCallback.html":{},"classes/Operation.html":{}}}],["polling",{"_index":187,"title":{},"body":{"interfaces/BackoffSettings.html":{},"interfaces/BundlingConfig.html":{},"interfaces/CallOptions.html":{},"classes/CallSettings.html":{},"interfaces/ClientConfig.html":{},"interfaces/GetOperationCallback.html":{},"classes/LongrunningApiCaller.html":{},"interfaces/MethodConfig.html":{},"classes/Operation.html":{},"classes/OperationsClient.html":{},"classes/OperationsClientBuilder.html":{},"interfaces/OperationsClientOptions.html":{},"classes/RetryOptions.html":{},"interfaces/RetryParamsConfig.html":{},"interfaces/ServiceConfig.html":{},"miscellaneous/functions.html":{}}}],["port",{"_index":895,"title":{},"body":{"classes/ClientStub.html":{},"interfaces/ClientStubOptions.html":{},"classes/GoogleProtoFilesRoot.html":{},"classes/GrpcClient.html":{},"interfaces/GrpcClientOptions.html":{},"interfaces/Metadata.html":{},"interfaces/MetadataValue.html":{},"classes/OperationsClient.html":{},"classes/OperationsClientBuilder.html":{},"interfaces/OperationsClientOptions.html":{}}}],["possibility",{"_index":2407,"title":{},"body":{"license.html":{}}}],["post",{"_index":1182,"title":{},"body":{"interfaces/GRPCCallOtherArgs.html":{},"interfaces/GRPCCallResult.html":{},"interfaces/GaxCall.html":{},"interfaces/GaxCallPromise.html":{},"interfaces/GaxCallStream.html":{},"interfaces/RequestType.html":{},"interfaces/SimpleCallbackFunction.html":{}}}],["prefer",{"_index":2163,"title":{},"body":{"changelog.html":{}}}],["prepare",{"_index":2246,"title":{},"body":{"contributing.html":{}}}],["present",{"_index":648,"title":{},"body":{"classes/BundleDescriptor.html":{},"classes/BundleExecutor.html":{},"interfaces/BundleOptions.html":{}}}],["prettier",{"_index":2020,"title":{},"body":{"changelog.html":{}}}],["prevent",{"_index":2156,"title":{},"body":{"changelog.html":{}}}],["previously",{"_index":1263,"title":{},"body":{"interfaces/GetOperationCallback.html":{},"classes/Operation.html":{}}}],["previousmetadatabytes",{"_index":1319,"title":{},"body":{"interfaces/GetOperationCallback.html":{},"classes/Operation.html":{}}}],["prior",{"_index":2372,"title":{},"body":{"license.html":{}}}],["private",{"_index":377,"title":{},"body":{"interfaces/BackoffSettings.html":{},"interfaces/Bindings.html":{},"classes/BundleExecutor.html":{},"interfaces/BundleOptions.html":{},"interfaces/BundlingConfig.html":{},"interfaces/CallOptions.html":{},"classes/CallSettings.html":{},"interfaces/CancellablePromise.html":{},"interfaces/ClientConfig.html":{},"classes/ClientStub.html":{},"interfaces/ClientStubOptions.html":{},"interfaces/Duplexify.html":{},"interfaces/DuplexifyConstructor.html":{},"interfaces/DuplexifyOptions.html":{},"interfaces/GetOperationCallback.html":{},"classes/GoogleProtoFilesRoot.html":{},"classes/GrpcClient.html":{},"interfaces/GrpcClientOptions.html":{},"classes/LongrunningApiCaller.html":{},"interfaces/Metadata.html":{},"interfaces/MetadataValue.html":{},"interfaces/MethodConfig.html":{},"classes/OngoingCall.html":{},"classes/OngoingCallPromise.html":{},"classes/Operation.html":{},"classes/OperationsClient.html":{},"classes/OperationsClientBuilder.html":{},"interfaces/OperationsClientOptions.html":{},"classes/PagedApiCaller.html":{},"interfaces/ParseResult.html":{},"classes/PathTemplate.html":{},"classes/RetryOptions.html":{},"interfaces/RetryParamsConfig.html":{},"interfaces/Segment.html":{},"interfaces/ServiceConfig.html":{},"classes/StreamProxy.html":{},"classes/StreamingApiCaller.html":{},"interfaces/SubResponseInfo.html":{},"classes/Task.html":{},"interfaces/TaskCallback.html":{},"interfaces/TaskData.html":{},"interfaces/TaskElement.html":{}}}],["process.versions.node",{"_index":1577,"title":{},"body":{"classes/OperationsClient.html":{},"classes/OperationsClientBuilder.html":{},"interfaces/OperationsClientOptions.html":{}}}],["processed",{"_index":1183,"title":{},"body":{"interfaces/GRPCCallOtherArgs.html":{},"interfaces/GRPCCallResult.html":{},"interfaces/GaxCall.html":{},"interfaces/GaxCallPromise.html":{},"interfaces/GaxCallStream.html":{},"interfaces/RequestType.html":{},"interfaces/SimpleCallbackFunction.html":{}}}],["procurement",{"_index":2391,"title":{},"body":{"license.html":{}}}],["production",{"_index":1991,"title":{},"body":{"changelog.html":{}}}],["products",{"_index":2369,"title":{},"body":{"license.html":{}}}],["profits",{"_index":2395,"title":{},"body":{"license.html":{}}}],["progress",{"_index":1334,"title":{},"body":{"interfaces/GetOperationCallback.html":{},"classes/Operation.html":{}}}],["project",{"_index":1513,"title":{},"body":{"classes/OperationsClient.html":{},"classes/OperationsClientBuilder.html":{},"interfaces/OperationsClientOptions.html":{}}}],["projectidcallback",{"_index":1515,"title":{},"body":{"classes/OperationsClient.html":{},"classes/OperationsClientBuilder.html":{},"interfaces/OperationsClientOptions.html":{}}}],["promise",{"_index":74,"title":{},"body":{"interfaces/APICaller.html":{},"interfaces/ApiCallerSettings.html":{},"interfaces/BackoffSettings.html":{},"interfaces/BundlingConfig.html":{},"interfaces/CallOptions.html":{},"classes/CallSettings.html":{},"interfaces/CancellablePromise.html":{},"interfaces/ClientConfig.html":{},"classes/ClientStub.html":{},"interfaces/ClientStubOptions.html":{},"interfaces/GRPCCallOtherArgs.html":{},"interfaces/GRPCCallResult.html":{},"interfaces/GaxCall.html":{},"interfaces/GaxCallPromise.html":{},"interfaces/GaxCallStream.html":{},"interfaces/GetOperationCallback.html":{},"classes/GoogleProtoFilesRoot.html":{},"classes/GrpcClient.html":{},"interfaces/GrpcClientOptions.html":{},"interfaces/Metadata.html":{},"interfaces/MetadataValue.html":{},"interfaces/MethodConfig.html":{},"classes/OngoingCall.html":{},"classes/OngoingCallPromise.html":{},"classes/Operation.html":{},"classes/OperationsClient.html":{},"classes/OperationsClientBuilder.html":{},"interfaces/OperationsClientOptions.html":{},"interfaces/RequestType.html":{},"classes/RetryOptions.html":{},"interfaces/RetryParamsConfig.html":{},"interfaces/ServiceConfig.html":{},"interfaces/SimpleCallbackFunction.html":{},"miscellaneous/functions.html":{}}}],["promiseconstructor",{"_index":75,"title":{},"body":{"interfaces/APICaller.html":{},"interfaces/ApiCallerSettings.html":{},"interfaces/BackoffSettings.html":{},"interfaces/BundlingConfig.html":{},"interfaces/CallOptions.html":{},"classes/CallSettings.html":{},"interfaces/CancellablePromise.html":{},"interfaces/ClientConfig.html":{},"classes/ClientStub.html":{},"interfaces/ClientStubOptions.html":{},"classes/GoogleProtoFilesRoot.html":{},"classes/GrpcClient.html":{},"interfaces/GrpcClientOptions.html":{},"interfaces/Metadata.html":{},"interfaces/MetadataValue.html":{},"interfaces/MethodConfig.html":{},"classes/OngoingCall.html":{},"classes/OngoingCallPromise.html":{},"classes/RetryOptions.html":{},"interfaces/RetryParamsConfig.html":{},"interfaces/ServiceConfig.html":{}}}],["promisector",{"_index":843,"title":{},"body":{"interfaces/CancellablePromise.html":{},"interfaces/GetOperationCallback.html":{},"classes/OngoingCall.html":{},"classes/OngoingCallPromise.html":{},"classes/Operation.html":{}}}],["promisector((resolve",{"_index":847,"title":{},"body":{"interfaces/CancellablePromise.html":{},"interfaces/GetOperationCallback.html":{},"classes/OngoingCall.html":{},"classes/OngoingCallPromise.html":{},"classes/Operation.html":{}}}],["promises",{"_index":191,"title":{},"body":{"interfaces/BackoffSettings.html":{},"interfaces/BundlingConfig.html":{},"interfaces/CallOptions.html":{},"classes/CallSettings.html":{},"interfaces/ClientConfig.html":{},"classes/ClientStub.html":{},"interfaces/ClientStubOptions.html":{},"classes/GoogleProtoFilesRoot.html":{},"classes/GrpcClient.html":{},"interfaces/GrpcClientOptions.html":{},"interfaces/Metadata.html":{},"interfaces/MetadataValue.html":{},"interfaces/MethodConfig.html":{},"classes/RetryOptions.html":{},"interfaces/RetryParamsConfig.html":{},"interfaces/ServiceConfig.html":{},"miscellaneous/functions.html":{}}}],["promise|undefined",{"_index":1269,"title":{},"body":{"interfaces/GetOperationCallback.html":{},"classes/Operation.html":{}}}],["promisifyresponse",{"_index":1274,"title":{},"body":{"interfaces/GetOperationCallback.html":{},"classes/Operation.html":{}}}],["promote",{"_index":2368,"title":{},"body":{"license.html":{}}}],["promptly",{"_index":2236,"title":{},"body":{"contributing.html":{}}}],["promse",{"_index":1034,"title":{},"body":{"classes/ClientStub.html":{},"interfaces/ClientStubOptions.html":{},"classes/GoogleProtoFilesRoot.html":{},"classes/GrpcClient.html":{},"interfaces/GrpcClientOptions.html":{},"interfaces/Metadata.html":{},"interfaces/MetadataValue.html":{}}}],["properties",{"_index":89,"title":{},"body":{"interfaces/AnyDecoder.html":{},"interfaces/ApiCallerSettings.html":{},"interfaces/BackoffSettings.html":{},"classes/BundleApiCaller.html":{},"classes/BundleDescriptor.html":{},"classes/BundleExecutor.html":{},"interfaces/BundleOptions.html":{},"interfaces/BundlingConfig.html":{},"interfaces/CallOptions.html":{},"classes/CallSettings.html":{},"interfaces/ClientConfig.html":{},"interfaces/ClientStubOptions.html":{},"interfaces/Duplexify.html":{},"interfaces/DuplexifyConstructor.html":{},"interfaces/DuplexifyOptions.html":{},"interfaces/GRPCCallOtherArgs.html":{},"interfaces/GaxCall.html":{},"interfaces/GaxCallPromise.html":{},"interfaces/GaxCallStream.html":{},"interfaces/GetOperationCallback.html":{},"classes/GoogleError.html":{},"classes/GrpcClient.html":{},"interfaces/GrpcClientOptions.html":{},"classes/LongRunningDescriptor.html":{},"classes/LongrunningApiCaller.html":{},"interfaces/Metadata.html":{},"interfaces/MetadataValue.html":{},"interfaces/MethodConfig.html":{},"classes/OngoingCall.html":{},"classes/OngoingCallPromise.html":{},"classes/Operation.html":{},"classes/OperationsClient.html":{},"classes/OperationsClientBuilder.html":{},"interfaces/OperationsClientOptions.html":{},"classes/PageDescriptor.html":{},"classes/PagedApiCaller.html":{},"interfaces/ParseResult.html":{},"classes/RetryOptions.html":{},"interfaces/RetryParamsConfig.html":{},"interfaces/Segment.html":{},"interfaces/ServiceConfig.html":{},"interfaces/SimpleCallbackFunction.html":{},"classes/StreamDescriptor.html":{},"classes/StreamProxy.html":{},"classes/StreamingApiCaller.html":{},"interfaces/SubResponseInfo.html":{},"classes/Task.html":{},"interfaces/TaskCallback.html":{},"interfaces/TaskData.html":{}}}],["property",{"_index":91,"title":{},"body":{"interfaces/AnyDecoder.html":{},"interfaces/BackoffSettings.html":{},"classes/BundleDescriptor.html":{},"interfaces/BundlingConfig.html":{},"interfaces/CallOptions.html":{},"classes/CallSettings.html":{},"interfaces/CancellablePromise.html":{},"interfaces/ClientConfig.html":{},"interfaces/DuplexifyConstructor.html":{},"interfaces/GaxCall.html":{},"interfaces/GaxCallPromise.html":{},"interfaces/GaxCallStream.html":{},"interfaces/GetOperationCallback.html":{},"interfaces/MethodConfig.html":{},"classes/OngoingCall.html":{},"classes/OngoingCallPromise.html":{},"classes/RetryOptions.html":{},"interfaces/RetryParamsConfig.html":{},"interfaces/ServiceConfig.html":{},"interfaces/SimpleCallbackFunction.html":{},"contributing.html":{}}}],["propetry",{"_index":233,"title":{},"body":{"interfaces/BackoffSettings.html":{},"interfaces/BundlingConfig.html":{},"interfaces/CallOptions.html":{},"classes/CallSettings.html":{},"interfaces/ClientConfig.html":{},"interfaces/MethodConfig.html":{},"classes/RetryOptions.html":{},"interfaces/RetryParamsConfig.html":{},"interfaces/ServiceConfig.html":{}}}],["proposed",{"_index":2232,"title":{},"body":{"contributing.html":{}}}],["proto",{"_index":885,"title":{},"body":{"classes/ClientStub.html":{},"interfaces/ClientStubOptions.html":{},"classes/GoogleProtoFilesRoot.html":{},"classes/GrpcClient.html":{},"interfaces/GrpcClientOptions.html":{},"interfaces/Metadata.html":{},"interfaces/MetadataValue.html":{},"changelog.html":{},"miscellaneous/variables.html":{}}}],["protobuf",{"_index":662,"title":{},"body":{"classes/BundleDescriptor.html":{},"classes/ClientStub.html":{},"interfaces/ClientStubOptions.html":{},"classes/GoogleProtoFilesRoot.html":{},"classes/GrpcClient.html":{},"interfaces/GrpcClientOptions.html":{},"interfaces/Metadata.html":{},"interfaces/MetadataValue.html":{}}}],["protobuf.js",{"_index":1048,"title":{},"body":{"classes/ClientStub.html":{},"interfaces/ClientStubOptions.html":{},"classes/GoogleProtoFilesRoot.html":{},"classes/GrpcClient.html":{},"interfaces/GrpcClientOptions.html":{},"interfaces/Metadata.html":{},"interfaces/MetadataValue.html":{}}}],["protobuf.js/grpc",{"_index":657,"title":{},"body":{"classes/BundleDescriptor.html":{}}}],["protobuf.root",{"_index":1059,"title":{},"body":{"classes/ClientStub.html":{},"interfaces/ClientStubOptions.html":{},"classes/GoogleProtoFilesRoot.html":{},"classes/GrpcClient.html":{},"interfaces/GrpcClientOptions.html":{},"interfaces/Metadata.html":{},"interfaces/MetadataValue.html":{}}}],["protobufjs",{"_index":868,"title":{},"body":{"classes/ClientStub.html":{},"interfaces/ClientStubOptions.html":{},"classes/GoogleProtoFilesRoot.html":{},"classes/GrpcClient.html":{},"interfaces/GrpcClientOptions.html":{},"interfaces/Metadata.html":{},"interfaces/MetadataValue.html":{},"dependencies.html":{}}}],["protofile",{"_index":964,"title":{},"body":{"classes/ClientStub.html":{},"interfaces/ClientStubOptions.html":{},"classes/GoogleProtoFilesRoot.html":{},"classes/GrpcClient.html":{},"interfaces/GrpcClientOptions.html":{},"interfaces/Metadata.html":{},"interfaces/MetadataValue.html":{}}}],["protofilesroot",{"_index":1630,"title":{},"body":{"classes/OperationsClient.html":{},"classes/OperationsClientBuilder.html":{},"interfaces/OperationsClientOptions.html":{}}}],["protopath",{"_index":961,"title":{},"body":{"classes/ClientStub.html":{},"interfaces/ClientStubOptions.html":{},"classes/GoogleProtoFilesRoot.html":{},"classes/GrpcClient.html":{},"interfaces/GrpcClientOptions.html":{},"interfaces/Metadata.html":{},"interfaces/MetadataValue.html":{}}}],["protos",{"_index":874,"title":{},"body":{"classes/ClientStub.html":{},"interfaces/ClientStubOptions.html":{},"classes/GoogleProtoFilesRoot.html":{},"classes/GrpcClient.html":{},"interfaces/GrpcClientOptions.html":{},"interfaces/Metadata.html":{},"interfaces/MetadataValue.html":{},"miscellaneous/variables.html":{}}}],["provide",{"_index":2323,"title":{},"body":{"index.html":{}}}],["provided",{"_index":135,"title":{},"body":{"interfaces/BackoffSettings.html":{},"interfaces/Bindings.html":{},"interfaces/BundlingConfig.html":{},"interfaces/CallOptions.html":{},"classes/CallSettings.html":{},"interfaces/ClientConfig.html":{},"classes/ClientStub.html":{},"interfaces/ClientStubOptions.html":{},"classes/GoogleProtoFilesRoot.html":{},"classes/GrpcClient.html":{},"interfaces/GrpcClientOptions.html":{},"interfaces/Metadata.html":{},"interfaces/MetadataValue.html":{},"interfaces/MethodConfig.html":{},"interfaces/ParseResult.html":{},"classes/PathTemplate.html":{},"classes/RetryOptions.html":{},"interfaces/RetryParamsConfig.html":{},"interfaces/Segment.html":{},"interfaces/ServiceConfig.html":{},"miscellaneous/functions.html":{},"license.html":{}}}],["provides",{"_index":2295,"title":{},"body":{"miscellaneous/functions.html":{}}}],["proxy",{"_index":1123,"title":{},"body":{"interfaces/Duplexify.html":{},"interfaces/DuplexifyConstructor.html":{},"interfaces/DuplexifyOptions.html":{},"classes/StreamProxy.html":{}}}],["pst",{"_index":1944,"title":{},"body":{"changelog.html":{}}}],["pub/sub",{"_index":1447,"title":{},"body":{"classes/OperationsClient.html":{},"classes/OperationsClientBuilder.html":{},"interfaces/OperationsClientOptions.html":{},"changelog.html":{}}}],["publish",{"_index":477,"title":{},"body":{"interfaces/BackoffSettings.html":{},"interfaces/BundlingConfig.html":{},"interfaces/CallOptions.html":{},"classes/CallSettings.html":{},"interfaces/ClientConfig.html":{},"interfaces/MethodConfig.html":{},"classes/RetryOptions.html":{},"interfaces/RetryParamsConfig.html":{},"interfaces/ServiceConfig.html":{},"changelog.html":{},"miscellaneous/functions.html":{}}}],["publish.sh",{"_index":2056,"title":{},"body":{"changelog.html":{}}}],["pull",{"_index":2230,"title":{},"body":{"contributing.html":{}}}],["purpose",{"_index":2382,"title":{},"body":{"license.html":{}}}],["pushcount",{"_index":1671,"title":{},"body":{"classes/PageDescriptor.html":{}}}],["pushresources(err",{"_index":1698,"title":{},"body":{"classes/PagedApiCaller.html":{}}}],["pythonistas",{"_index":1975,"title":{},"body":{"changelog.html":{}}}],["qualified",{"_index":484,"title":{},"body":{"interfaces/BackoffSettings.html":{},"interfaces/Bindings.html":{},"interfaces/BundlingConfig.html":{},"interfaces/CallOptions.html":{},"classes/CallSettings.html":{},"interfaces/ClientConfig.html":{},"classes/ClientStub.html":{},"interfaces/ClientStubOptions.html":{},"classes/GoogleProtoFilesRoot.html":{},"classes/GrpcClient.html":{},"interfaces/GrpcClientOptions.html":{},"interfaces/Metadata.html":{},"interfaces/MetadataValue.html":{},"interfaces/MethodConfig.html":{},"interfaces/ParseResult.html":{},"classes/PathTemplate.html":{},"classes/RetryOptions.html":{},"interfaces/RetryParamsConfig.html":{},"interfaces/Segment.html":{},"interfaces/ServiceConfig.html":{},"miscellaneous/functions.html":{}}}],["question",{"_index":2233,"title":{},"body":{"contributing.html":{}}}],["rarely",{"_index":2320,"title":{},"body":{"index.html":{}}}],["raw",{"_index":1187,"title":{},"body":{"interfaces/GRPCCallOtherArgs.html":{},"interfaces/GRPCCallResult.html":{},"interfaces/GaxCall.html":{},"interfaces/GaxCallPromise.html":{},"interfaces/GaxCallStream.html":{},"interfaces/GetOperationCallback.html":{},"classes/Operation.html":{},"classes/OperationsClient.html":{},"classes/OperationsClientBuilder.html":{},"interfaces/OperationsClientOptions.html":{},"interfaces/RequestType.html":{},"interfaces/SimpleCallbackFunction.html":{}}}],["rawresponse",{"_index":849,"title":{},"body":{"interfaces/CancellablePromise.html":{},"interfaces/GRPCCallOtherArgs.html":{},"interfaces/GRPCCallResult.html":{},"interfaces/GaxCall.html":{},"interfaces/GaxCallPromise.html":{},"interfaces/GaxCallStream.html":{},"interfaces/GetOperationCallback.html":{},"classes/LongrunningApiCaller.html":{},"classes/OngoingCall.html":{},"classes/OngoingCallPromise.html":{},"classes/Operation.html":{},"classes/OperationsClient.html":{},"classes/OperationsClientBuilder.html":{},"interfaces/OperationsClientOptions.html":{},"interfaces/RequestType.html":{},"interfaces/SimpleCallbackFunction.html":{}}}],["rawresponse!.done",{"_index":1343,"title":{},"body":{"interfaces/GetOperationCallback.html":{},"classes/Operation.html":{}}}],["rawresponse!.metadata",{"_index":1332,"title":{},"body":{"interfaces/GetOperationCallback.html":{},"classes/Operation.html":{}}}],["rawresponse!.metadata!.value",{"_index":1335,"title":{},"body":{"interfaces/GetOperationCallback.html":{},"classes/Operation.html":{}}}],["rawresponse!.metadata!.value.equals(previousmetadatabytes",{"_index":1333,"title":{},"body":{"interfaces/GetOperationCallback.html":{},"classes/Operation.html":{}}}],["rawresponsetype",{"_index":817,"title":{},"body":{"interfaces/CancellablePromise.html":{},"interfaces/GRPCCallOtherArgs.html":{},"interfaces/GRPCCallResult.html":{},"interfaces/GaxCall.html":{},"interfaces/GaxCallPromise.html":{},"interfaces/GaxCallStream.html":{},"classes/OngoingCall.html":{},"classes/OngoingCallPromise.html":{},"interfaces/RequestType.html":{},"interfaces/SimpleCallbackFunction.html":{},"miscellaneous/typealiases.html":{}}}],["reached",{"_index":230,"title":{},"body":{"interfaces/BackoffSettings.html":{},"interfaces/BundlingConfig.html":{},"interfaces/CallOptions.html":{},"classes/CallSettings.html":{},"interfaces/ClientConfig.html":{},"interfaces/MethodConfig.html":{},"classes/RetryOptions.html":{},"interfaces/RetryParamsConfig.html":{},"interfaces/ServiceConfig.html":{},"miscellaneous/functions.html":{}}}],["reaches",{"_index":177,"title":{},"body":{"interfaces/BackoffSettings.html":{},"interfaces/BundlingConfig.html":{},"interfaces/CallOptions.html":{},"classes/CallSettings.html":{},"interfaces/ClientConfig.html":{},"interfaces/MethodConfig.html":{},"classes/RetryOptions.html":{},"interfaces/RetryParamsConfig.html":{},"interfaces/ServiceConfig.html":{}}}],["readable",{"_index":1097,"title":{},"body":{"interfaces/Duplexify.html":{},"interfaces/DuplexifyConstructor.html":{},"interfaces/DuplexifyOptions.html":{},"classes/StreamProxy.html":{}}}],["readme",{"_index":929,"title":{},"body":{"classes/ClientStub.html":{},"interfaces/ClientStubOptions.html":{},"classes/GoogleProtoFilesRoot.html":{},"classes/GrpcClient.html":{},"interfaces/GrpcClientOptions.html":{},"interfaces/Metadata.html":{},"interfaces/MetadataValue.html":{}}}],["readonly",{"_index":531,"title":{},"body":{"interfaces/Bindings.html":{},"interfaces/Duplexify.html":{},"interfaces/DuplexifyConstructor.html":{},"interfaces/DuplexifyOptions.html":{},"interfaces/ParseResult.html":{},"classes/PathTemplate.html":{},"interfaces/Segment.html":{},"classes/StreamProxy.html":{}}}],["ready",{"_index":1998,"title":{},"body":{"changelog.html":{}}}],["real",{"_index":1443,"title":{},"body":{"classes/OperationsClient.html":{},"classes/OperationsClientBuilder.html":{},"interfaces/OperationsClientOptions.html":{}}}],["receive",{"_index":1442,"title":{},"body":{"classes/OperationsClient.html":{},"classes/OperationsClientBuilder.html":{},"interfaces/OperationsClientOptions.html":{},"contributing.html":{}}}],["received",{"_index":1328,"title":{},"body":{"interfaces/GetOperationCallback.html":{},"classes/Operation.html":{}}}],["recommended",{"_index":1509,"title":{},"body":{"classes/OperationsClient.html":{},"classes/OperationsClientBuilder.html":{},"interfaces/OperationsClientOptions.html":{}}}],["redistribution",{"_index":2350,"title":{},"body":{"license.html":{}}}],["redistributions",{"_index":2358,"title":{},"body":{"license.html":{}}}],["refactor",{"_index":1868,"title":{},"body":{"changelog.html":{}}}],["referring",{"_index":490,"title":{},"body":{"interfaces/BackoffSettings.html":{},"interfaces/BundlingConfig.html":{},"interfaces/CallOptions.html":{},"classes/CallSettings.html":{},"interfaces/ClientConfig.html":{},"interfaces/MethodConfig.html":{},"classes/RetryOptions.html":{},"interfaces/RetryParamsConfig.html":{},"interfaces/ServiceConfig.html":{},"miscellaneous/functions.html":{}}}],["regardless",{"_index":239,"title":{},"body":{"interfaces/BackoffSettings.html":{},"interfaces/BundlingConfig.html":{},"interfaces/CallOptions.html":{},"classes/CallSettings.html":{},"interfaces/ClientConfig.html":{},"interfaces/MethodConfig.html":{},"classes/RetryOptions.html":{},"interfaces/RetryParamsConfig.html":{},"interfaces/ServiceConfig.html":{},"miscellaneous/functions.html":{}}}],["region",{"_index":1764,"title":{},"body":{"interfaces/SubResponseInfo.html":{},"classes/Task.html":{},"interfaces/TaskCallback.html":{},"interfaces/TaskData.html":{},"interfaces/TaskElement.html":{}}}],["regional",{"_index":2307,"title":{},"body":{"miscellaneous/functions.html":{}}}],["registered",{"_index":1242,"title":{},"body":{"interfaces/GetOperationCallback.html":{},"classes/Operation.html":{},"classes/OperationsClient.html":{},"classes/OperationsClientBuilder.html":{},"interfaces/OperationsClientOptions.html":{}}}],["regular",{"_index":1196,"title":{},"body":{"interfaces/GRPCCallOtherArgs.html":{},"interfaces/GRPCCallResult.html":{},"interfaces/GaxCall.html":{},"interfaces/GaxCallPromise.html":{},"interfaces/GaxCallStream.html":{},"classes/NormalApiCaller.html":{},"interfaces/RequestType.html":{},"interfaces/SimpleCallbackFunction.html":{},"changelog.html":{}}}],["reject",{"_index":848,"title":{},"body":{"interfaces/CancellablePromise.html":{},"interfaces/GetOperationCallback.html":{},"classes/OngoingCall.html":{},"classes/OngoingCallPromise.html":{},"classes/Operation.html":{}}}],["reject(err",{"_index":850,"title":{},"body":{"interfaces/CancellablePromise.html":{},"classes/OngoingCall.html":{},"classes/OngoingCallPromise.html":{}}}],["reject(error",{"_index":1279,"title":{},"body":{"interfaces/GetOperationCallback.html":{},"classes/Operation.html":{}}}],["reject).on",{"_index":1348,"title":{},"body":{"interfaces/GetOperationCallback.html":{},"classes/Operation.html":{}}}],["rejects",{"_index":1271,"title":{},"body":{"interfaces/GetOperationCallback.html":{},"classes/Operation.html":{}}}],["release",{"_index":1987,"title":{},"body":{"changelog.html":{}}}],["releasing",{"_index":2203,"title":{},"body":{"contributing.html":{}}}],["remote",{"_index":1638,"title":{},"body":{"classes/OperationsClient.html":{},"classes/OperationsClientBuilder.html":{},"interfaces/OperationsClientOptions.html":{}}}],["remove",{"_index":2112,"title":{},"body":{"changelog.html":{}}}],["removed",{"_index":1243,"title":{},"body":{"interfaces/GetOperationCallback.html":{},"classes/Operation.html":{}}}],["render",{"_index":1699,"title":{},"body":{"classes/PathTemplate.html":{}}}],["render(bindings",{"_index":578,"title":{},"body":{"interfaces/Bindings.html":{},"interfaces/ParseResult.html":{},"classes/PathTemplate.html":{},"interfaces/Segment.html":{}}}],["rendered",{"_index":574,"title":{},"body":{"interfaces/Bindings.html":{},"interfaces/ParseResult.html":{},"classes/PathTemplate.html":{},"interfaces/Segment.html":{}}}],["renders",{"_index":572,"title":{},"body":{"interfaces/Bindings.html":{},"interfaces/ParseResult.html":{},"classes/PathTemplate.html":{},"interfaces/Segment.html":{}}}],["renovate",{"_index":2188,"title":{},"body":{"changelog.html":{}}}],["repeated",{"_index":248,"title":{},"body":{"interfaces/BackoffSettings.html":{},"classes/BundleDescriptor.html":{},"interfaces/BundlingConfig.html":{},"interfaces/CallOptions.html":{},"classes/CallSettings.html":{},"interfaces/ClientConfig.html":{},"interfaces/MethodConfig.html":{},"classes/RetryOptions.html":{},"interfaces/RetryParamsConfig.html":{},"interfaces/ServiceConfig.html":{}}}],["repo",{"_index":1919,"title":{},"body":{"changelog.html":{},"contributing.html":{}}}],["report",{"_index":2064,"title":{},"body":{"changelog.html":{}}}],["representation",{"_index":575,"title":{},"body":{"interfaces/Bindings.html":{},"interfaces/ParseResult.html":{},"classes/PathTemplate.html":{},"interfaces/Segment.html":{}}}],["representattion",{"_index":592,"title":{},"body":{"interfaces/Bindings.html":{},"interfaces/ParseResult.html":{},"classes/PathTemplate.html":{},"interfaces/Segment.html":{},"miscellaneous/functions.html":{}}}],["representing",{"_index":405,"title":{},"body":{"interfaces/BackoffSettings.html":{},"interfaces/Bindings.html":{},"interfaces/BundlingConfig.html":{},"interfaces/CallOptions.html":{},"classes/CallSettings.html":{},"interfaces/ClientConfig.html":{},"interfaces/MethodConfig.html":{},"classes/OperationsClient.html":{},"classes/OperationsClientBuilder.html":{},"interfaces/OperationsClientOptions.html":{},"interfaces/ParseResult.html":{},"classes/PathTemplate.html":{},"classes/RetryOptions.html":{},"interfaces/RetryParamsConfig.html":{},"interfaces/Segment.html":{},"interfaces/ServiceConfig.html":{},"miscellaneous/functions.html":{}}}],["represents",{"_index":251,"title":{},"body":{"interfaces/BackoffSettings.html":{},"interfaces/BundlingConfig.html":{},"interfaces/CallOptions.html":{},"classes/CallSettings.html":{},"interfaces/ClientConfig.html":{},"interfaces/MethodConfig.html":{},"classes/RetryOptions.html":{},"interfaces/RetryParamsConfig.html":{},"interfaces/ServiceConfig.html":{}}}],["reproduce",{"_index":2362,"title":{},"body":{"license.html":{}}}],["request",{"_index":222,"title":{},"body":{"interfaces/BackoffSettings.html":{},"classes/BundleDescriptor.html":{},"classes/BundleExecutor.html":{},"interfaces/BundleOptions.html":{},"interfaces/BundlingConfig.html":{},"interfaces/CallOptions.html":{},"classes/CallSettings.html":{},"interfaces/CancellablePromise.html":{},"interfaces/ClientConfig.html":{},"interfaces/Duplexify.html":{},"interfaces/DuplexifyConstructor.html":{},"interfaces/DuplexifyOptions.html":{},"interfaces/GRPCCallOtherArgs.html":{},"interfaces/GRPCCallResult.html":{},"interfaces/GaxCall.html":{},"interfaces/GaxCallPromise.html":{},"interfaces/GaxCallStream.html":{},"interfaces/GetOperationCallback.html":{},"interfaces/MethodConfig.html":{},"classes/OngoingCall.html":{},"classes/OngoingCallPromise.html":{},"classes/Operation.html":{},"classes/OperationsClient.html":{},"classes/OperationsClientBuilder.html":{},"interfaces/OperationsClientOptions.html":{},"classes/PageDescriptor.html":{},"classes/PagedApiCaller.html":{},"interfaces/RequestType.html":{},"classes/RetryOptions.html":{},"interfaces/RetryParamsConfig.html":{},"interfaces/ServiceConfig.html":{},"interfaces/SimpleCallbackFunction.html":{},"classes/StreamProxy.html":{},"interfaces/SubResponseInfo.html":{},"classes/Task.html":{},"interfaces/TaskCallback.html":{},"interfaces/TaskData.html":{},"interfaces/TaskElement.html":{},"contributing.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["request![self.pagedescriptor.requestpagetokenfield",{"_index":1689,"title":{},"body":{"classes/PagedApiCaller.html":{}}}],["request.filter",{"_index":1611,"title":{},"body":{"classes/OperationsClient.html":{},"classes/OperationsClientBuilder.html":{},"interfaces/OperationsClientOptions.html":{}}}],["request.name",{"_index":1601,"title":{},"body":{"classes/OperationsClient.html":{},"classes/OperationsClientBuilder.html":{},"interfaces/OperationsClientOptions.html":{}}}],["request.pagesize",{"_index":1612,"title":{},"body":{"classes/OperationsClient.html":{},"classes/OperationsClientBuilder.html":{},"interfaces/OperationsClientOptions.html":{}}}],["request[this._descriptor.bundledfield",{"_index":744,"title":{},"body":{"classes/BundleExecutor.html":{},"interfaces/BundleOptions.html":{}}}],["request_byte_limit",{"_index":386,"title":{},"body":{"interfaces/BackoffSettings.html":{},"interfaces/BundlingConfig.html":{},"interfaces/CallOptions.html":{},"classes/CallSettings.html":{},"interfaces/ClientConfig.html":{},"interfaces/MethodConfig.html":{},"classes/RetryOptions.html":{},"interfaces/RetryParamsConfig.html":{},"interfaces/ServiceConfig.html":{},"miscellaneous/functions.html":{}}}],["request_byte_threshold",{"_index":385,"title":{},"body":{"interfaces/BackoffSettings.html":{},"interfaces/BundlingConfig.html":{},"interfaces/CallOptions.html":{},"classes/CallSettings.html":{},"interfaces/ClientConfig.html":{},"interfaces/MethodConfig.html":{},"classes/RetryOptions.html":{},"interfaces/RetryParamsConfig.html":{},"interfaces/ServiceConfig.html":{},"miscellaneous/functions.html":{}}}],["requestbytelimit",{"_index":271,"title":{},"body":{"interfaces/BackoffSettings.html":{},"classes/BundleExecutor.html":{},"interfaces/BundleOptions.html":{},"interfaces/BundlingConfig.html":{},"interfaces/CallOptions.html":{},"classes/CallSettings.html":{},"interfaces/ClientConfig.html":{},"interfaces/MethodConfig.html":{},"classes/RetryOptions.html":{},"interfaces/RetryParamsConfig.html":{},"interfaces/ServiceConfig.html":{}}}],["requestbytes",{"_index":755,"title":{},"body":{"classes/BundleExecutor.html":{},"interfaces/BundleOptions.html":{}}}],["requestbytethreshold",{"_index":261,"title":{},"body":{"interfaces/BackoffSettings.html":{},"classes/BundleExecutor.html":{},"interfaces/BundleOptions.html":{},"interfaces/BundlingConfig.html":{},"interfaces/CallOptions.html":{},"classes/CallSettings.html":{},"interfaces/ClientConfig.html":{},"interfaces/MethodConfig.html":{},"classes/RetryOptions.html":{},"interfaces/RetryParamsConfig.html":{},"interfaces/ServiceConfig.html":{}}}],["requestdiscriminatorfields",{"_index":629,"title":{},"body":{"classes/BundleDescriptor.html":{}}}],["requested",{"_index":173,"title":{},"body":{"interfaces/BackoffSettings.html":{},"interfaces/BundlingConfig.html":{},"interfaces/CallOptions.html":{},"classes/CallSettings.html":{},"interfaces/ClientConfig.html":{},"interfaces/MethodConfig.html":{},"classes/RetryOptions.html":{},"interfaces/RetryParamsConfig.html":{},"interfaces/ServiceConfig.html":{}}}],["requestpagesizefield",{"_index":1650,"title":{},"body":{"classes/PageDescriptor.html":{}}}],["requestpagetokenfield",{"_index":1651,"title":{},"body":{"classes/PageDescriptor.html":{}}}],["requests",{"_index":226,"title":{},"body":{"interfaces/BackoffSettings.html":{},"classes/BundleExecutor.html":{},"interfaces/BundleOptions.html":{},"interfaces/BundlingConfig.html":{},"interfaces/CallOptions.html":{},"classes/CallSettings.html":{},"interfaces/ClientConfig.html":{},"interfaces/Duplexify.html":{},"interfaces/DuplexifyConstructor.html":{},"interfaces/DuplexifyOptions.html":{},"interfaces/GetOperationCallback.html":{},"interfaces/MethodConfig.html":{},"classes/Operation.html":{},"classes/RetryOptions.html":{},"interfaces/RetryParamsConfig.html":{},"interfaces/ServiceConfig.html":{},"classes/StreamProxy.html":{},"contributing.html":{},"miscellaneous/functions.html":{}}}],["requesttype",{"_index":818,"title":{"interfaces/RequestType.html":{}},"body":{"interfaces/CancellablePromise.html":{},"interfaces/GRPCCallOtherArgs.html":{},"interfaces/GRPCCallResult.html":{},"interfaces/GaxCall.html":{},"interfaces/GaxCallPromise.html":{},"interfaces/GaxCallStream.html":{},"classes/OngoingCall.html":{},"classes/OngoingCallPromise.html":{},"interfaces/RequestType.html":{},"interfaces/SimpleCallbackFunction.html":{}}}],["require('../../package.json').version",{"_index":1558,"title":{},"body":{"classes/OperationsClient.html":{},"classes/OperationsClientBuilder.html":{},"interfaces/OperationsClientOptions.html":{},"miscellaneous/variables.html":{}}}],["require('./operations_client_config",{"_index":1555,"title":{},"body":{"classes/OperationsClient.html":{},"classes/OperationsClientBuilder.html":{},"interfaces/OperationsClientOptions.html":{},"miscellaneous/variables.html":{}}}],["require('./pathtemplateparser",{"_index":525,"title":{},"body":{"interfaces/Bindings.html":{},"interfaces/ParseResult.html":{},"classes/PathTemplate.html":{},"interfaces/Segment.html":{},"miscellaneous/variables.html":{}}}],["require('@grpc/grpc",{"_index":921,"title":{},"body":{"classes/ClientStub.html":{},"interfaces/ClientStubOptions.html":{},"classes/GoogleProtoFilesRoot.html":{},"classes/GrpcClient.html":{},"interfaces/GrpcClientOptions.html":{},"interfaces/Metadata.html":{},"interfaces/MetadataValue.html":{}}}],["require('duplexify",{"_index":1105,"title":{},"body":{"interfaces/Duplexify.html":{},"interfaces/DuplexifyConstructor.html":{},"interfaces/DuplexifyOptions.html":{},"classes/StreamProxy.html":{},"miscellaneous/variables.html":{}}}],["require('grpc",{"_index":2336,"title":{},"body":{"index.html":{}}}],["require('lodash.has",{"_index":520,"title":{},"body":{"interfaces/Bindings.html":{},"interfaces/ParseResult.html":{},"classes/PathTemplate.html":{},"interfaces/Segment.html":{}}}],["require('retry",{"_index":1107,"title":{},"body":{"interfaces/Duplexify.html":{},"interfaces/DuplexifyConstructor.html":{},"interfaces/DuplexifyOptions.html":{},"classes/StreamProxy.html":{},"miscellaneous/variables.html":{}}}],["required",{"_index":764,"title":{},"body":{"classes/BundleExecutor.html":{},"interfaces/BundleOptions.html":{},"classes/OperationsClient.html":{},"classes/OperationsClientBuilder.html":{},"interfaces/OperationsClientOptions.html":{},"classes/Task.html":{}}}],["requires",{"_index":702,"title":{},"body":{"classes/BundleExecutor.html":{},"interfaces/BundleOptions.html":{}}}],["reserved",{"_index":2349,"title":{},"body":{"license.html":{}}}],["resolve([response",{"_index":851,"title":{},"body":{"interfaces/CancellablePromise.html":{},"classes/OngoingCall.html":{},"classes/OngoingCallPromise.html":{}}}],["resolve([result",{"_index":1349,"title":{},"body":{"interfaces/GetOperationCallback.html":{},"classes/Operation.html":{}}}],["resolve([self.result",{"_index":1280,"title":{},"body":{"interfaces/GetOperationCallback.html":{},"classes/Operation.html":{}}}],["resolved",{"_index":941,"title":{},"body":{"classes/ClientStub.html":{},"interfaces/ClientStubOptions.html":{},"classes/GoogleProtoFilesRoot.html":{},"classes/GrpcClient.html":{},"interfaces/GrpcClientOptions.html":{},"interfaces/Metadata.html":{},"interfaces/MetadataValue.html":{}}}],["resolvepath",{"_index":1355,"title":{},"body":{"classes/GoogleProtoFilesRoot.html":{}}}],["resolvepath(originpath",{"_index":1065,"title":{},"body":{"classes/ClientStub.html":{},"interfaces/ClientStubOptions.html":{},"classes/GoogleProtoFilesRoot.html":{},"classes/GrpcClient.html":{},"interfaces/GrpcClientOptions.html":{},"interfaces/Metadata.html":{},"interfaces/MetadataValue.html":{}}}],["resolves",{"_index":1035,"title":{},"body":{"classes/ClientStub.html":{},"interfaces/ClientStubOptions.html":{},"interfaces/GetOperationCallback.html":{},"classes/GoogleProtoFilesRoot.html":{},"classes/GrpcClient.html":{},"interfaces/GrpcClientOptions.html":{},"interfaces/Metadata.html":{},"interfaces/MetadataValue.html":{},"classes/Operation.html":{},"classes/OperationsClient.html":{},"classes/OperationsClientBuilder.html":{},"interfaces/OperationsClientOptions.html":{}}}],["resource",{"_index":1444,"title":{},"body":{"classes/OperationsClient.html":{},"classes/OperationsClientBuilder.html":{},"interfaces/OperationsClientOptions.html":{},"classes/PageDescriptor.html":{}}}],["resourcefield",{"_index":1652,"title":{},"body":{"classes/PageDescriptor.html":{}}}],["resources",{"_index":1527,"title":{},"body":{"classes/OperationsClient.html":{},"classes/OperationsClientBuilder.html":{},"interfaces/OperationsClientOptions.html":{},"classes/PageDescriptor.html":{},"classes/PagedApiCaller.html":{}}}],["respond",{"_index":2235,"title":{},"body":{"contributing.html":{}}}],["response",{"_index":171,"title":{},"body":{"interfaces/BackoffSettings.html":{},"classes/BundleDescriptor.html":{},"interfaces/BundlingConfig.html":{},"interfaces/CallOptions.html":{},"classes/CallSettings.html":{},"interfaces/CancellablePromise.html":{},"interfaces/ClientConfig.html":{},"interfaces/Duplexify.html":{},"interfaces/DuplexifyConstructor.html":{},"interfaces/DuplexifyOptions.html":{},"interfaces/GRPCCallOtherArgs.html":{},"interfaces/GRPCCallResult.html":{},"interfaces/GaxCall.html":{},"interfaces/GaxCallPromise.html":{},"interfaces/GaxCallStream.html":{},"interfaces/GetOperationCallback.html":{},"interfaces/MethodConfig.html":{},"classes/OngoingCall.html":{},"classes/OngoingCallPromise.html":{},"classes/Operation.html":{},"classes/OperationsClient.html":{},"classes/OperationsClientBuilder.html":{},"interfaces/OperationsClientOptions.html":{},"classes/PagedApiCaller.html":{},"interfaces/RequestType.html":{},"classes/RetryOptions.html":{},"interfaces/RetryParamsConfig.html":{},"interfaces/ServiceConfig.html":{},"interfaces/SimpleCallbackFunction.html":{},"classes/StreamProxy.html":{},"interfaces/SubResponseInfo.html":{},"classes/Task.html":{},"interfaces/TaskCallback.html":{},"interfaces/TaskData.html":{},"interfaces/TaskElement.html":{},"miscellaneous/functions.html":{}}}],["response[0",{"_index":1533,"title":{},"body":{"classes/OperationsClient.html":{},"classes/OperationsClientBuilder.html":{},"interfaces/OperationsClientOptions.html":{}}}],["response[1",{"_index":1534,"title":{},"body":{"classes/OperationsClient.html":{},"classes/OperationsClientBuilder.html":{},"interfaces/OperationsClientOptions.html":{}}}],["response[2",{"_index":1535,"title":{},"body":{"classes/OperationsClient.html":{},"classes/OperationsClientBuilder.html":{},"interfaces/OperationsClientOptions.html":{}}}],["response[self.pagedescriptor.resourcefield",{"_index":1687,"title":{},"body":{"classes/PagedApiCaller.html":{}}}],["response[self.pagedescriptor.responsepagetokenfield",{"_index":1688,"title":{},"body":{"classes/PagedApiCaller.html":{}}}],["responsedecoder",{"_index":101,"title":{},"body":{"interfaces/AnyDecoder.html":{},"interfaces/GetOperationCallback.html":{},"classes/LongRunningDescriptor.html":{},"classes/Operation.html":{}}}],["responsedecoder(op.response.value",{"_index":1298,"title":{},"body":{"interfaces/GetOperationCallback.html":{},"classes/Operation.html":{}}}],["responsepagetokenfield",{"_index":1653,"title":{},"body":{"classes/PageDescriptor.html":{}}}],["responses",{"_index":1114,"title":{},"body":{"interfaces/Duplexify.html":{},"interfaces/DuplexifyConstructor.html":{},"interfaces/DuplexifyOptions.html":{},"classes/LongrunningApiCaller.html":{},"classes/OperationsClient.html":{},"classes/OperationsClientBuilder.html":{},"interfaces/OperationsClientOptions.html":{},"classes/StreamProxy.html":{},"interfaces/SubResponseInfo.html":{},"classes/Task.html":{},"interfaces/TaskCallback.html":{},"interfaces/TaskData.html":{},"interfaces/TaskElement.html":{}}}],["responses.push(deepcopyforresponse(response",{"_index":1807,"title":{},"body":{"interfaces/SubResponseInfo.html":{},"classes/Task.html":{},"interfaces/TaskCallback.html":{},"interfaces/TaskData.html":{},"interfaces/TaskElement.html":{}}}],["responses.push(undefined",{"_index":1803,"title":{},"body":{"interfaces/SubResponseInfo.html":{},"classes/Task.html":{},"interfaces/TaskCallback.html":{},"interfaces/TaskData.html":{},"interfaces/TaskElement.html":{}}}],["responses[0",{"_index":1288,"title":{},"body":{"interfaces/GetOperationCallback.html":{},"classes/Operation.html":{}}}],["responsetype",{"_index":819,"title":{},"body":{"interfaces/CancellablePromise.html":{},"interfaces/GRPCCallOtherArgs.html":{},"interfaces/GRPCCallResult.html":{},"interfaces/GaxCall.html":{},"interfaces/GaxCallPromise.html":{},"interfaces/GaxCallStream.html":{},"classes/OngoingCall.html":{},"classes/OngoingCallPromise.html":{},"interfaces/RequestType.html":{},"interfaces/SimpleCallbackFunction.html":{},"miscellaneous/typealiases.html":{}}}],["restarted",{"_index":690,"title":{},"body":{"classes/BundleExecutor.html":{},"interfaces/BundleOptions.html":{}}}],["result",{"_index":25,"title":{},"body":{"interfaces/APICaller.html":{},"interfaces/AnyDecoder.html":{},"interfaces/ApiCallerSettings.html":{},"interfaces/BackoffSettings.html":{},"interfaces/Bindings.html":{},"classes/BundleApiCaller.html":{},"classes/BundleDescriptor.html":{},"classes/BundleExecutor.html":{},"interfaces/BundleOptions.html":{},"interfaces/BundlingConfig.html":{},"interfaces/CallOptions.html":{},"classes/CallSettings.html":{},"interfaces/CancellablePromise.html":{},"interfaces/ClientConfig.html":{},"classes/ClientStub.html":{},"interfaces/ClientStubOptions.html":{},"interfaces/Descriptor.html":{},"interfaces/Duplexify.html":{},"interfaces/DuplexifyConstructor.html":{},"interfaces/DuplexifyOptions.html":{},"interfaces/GRPCCallOtherArgs.html":{},"interfaces/GRPCCallResult.html":{},"interfaces/GaxCall.html":{},"interfaces/GaxCallPromise.html":{},"interfaces/GaxCallStream.html":{},"interfaces/GetOperationCallback.html":{},"classes/GoogleError.html":{},"classes/GoogleProtoFilesRoot.html":{},"classes/GrpcClient.html":{},"interfaces/GrpcClientOptions.html":{},"classes/LongRunningDescriptor.html":{},"classes/LongrunningApiCaller.html":{},"interfaces/Metadata.html":{},"interfaces/MetadataValue.html":{},"interfaces/MethodConfig.html":{},"classes/NormalApiCaller.html":{},"classes/OngoingCall.html":{},"classes/OngoingCallPromise.html":{},"classes/Operation.html":{},"classes/OperationsClient.html":{},"classes/OperationsClientBuilder.html":{},"interfaces/OperationsClientOptions.html":{},"classes/PageDescriptor.html":{},"classes/PagedApiCaller.html":{},"interfaces/ParseResult.html":{},"classes/PathTemplate.html":{},"interfaces/RequestType.html":{},"classes/RetryOptions.html":{},"interfaces/RetryParamsConfig.html":{},"interfaces/Segment.html":{},"interfaces/ServiceConfig.html":{},"interfaces/SimpleCallbackFunction.html":{},"classes/StreamDescriptor.html":{},"classes/StreamProxy.html":{},"classes/StreamingApiCaller.html":{},"interfaces/SubResponseInfo.html":{},"classes/Task.html":{},"interfaces/TaskCallback.html":{},"interfaces/TaskData.html":{},"interfaces/TaskElement.html":{},"changelog.html":{},"contributing.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["result(canceller",{"_index":57,"title":{},"body":{"interfaces/APICaller.html":{},"classes/BundleApiCaller.html":{},"classes/LongrunningApiCaller.html":{},"classes/NormalApiCaller.html":{},"classes/PagedApiCaller.html":{}}}],["result(stream",{"_index":1735,"title":{},"body":{"classes/StreamingApiCaller.html":{}}}],["result.push(deepcopyforresponse(element",{"_index":1769,"title":{},"body":{"interfaces/SubResponseInfo.html":{},"classes/Task.html":{},"interfaces/TaskCallback.html":{},"interfaces/TaskData.html":{},"interfaces/TaskElement.html":{}}}],["result[key",{"_index":1781,"title":{},"body":{"interfaces/SubResponseInfo.html":{},"classes/Task.html":{},"interfaces/TaskCallback.html":{},"interfaces/TaskData.html":{},"interfaces/TaskElement.html":{}}}],["resulting",{"_index":275,"title":{},"body":{"interfaces/BackoffSettings.html":{},"interfaces/BundlingConfig.html":{},"interfaces/CallOptions.html":{},"classes/CallSettings.html":{},"interfaces/ClientConfig.html":{},"interfaces/MethodConfig.html":{},"classes/RetryOptions.html":{},"interfaces/RetryParamsConfig.html":{},"interfaces/ServiceConfig.html":{}}}],["results",{"_index":83,"title":{},"body":{"interfaces/APICaller.html":{},"interfaces/AnyDecoder.html":{},"interfaces/ApiCallerSettings.html":{},"interfaces/BackoffSettings.html":{},"interfaces/Bindings.html":{},"classes/BundleApiCaller.html":{},"classes/BundleDescriptor.html":{},"classes/BundleExecutor.html":{},"interfaces/BundleOptions.html":{},"interfaces/BundlingConfig.html":{},"interfaces/CallOptions.html":{},"classes/CallSettings.html":{},"interfaces/CancellablePromise.html":{},"interfaces/ClientConfig.html":{},"classes/ClientStub.html":{},"interfaces/ClientStubOptions.html":{},"interfaces/Descriptor.html":{},"interfaces/Duplexify.html":{},"interfaces/DuplexifyConstructor.html":{},"interfaces/DuplexifyOptions.html":{},"interfaces/GRPCCallOtherArgs.html":{},"interfaces/GRPCCallResult.html":{},"interfaces/GaxCall.html":{},"interfaces/GaxCallPromise.html":{},"interfaces/GaxCallStream.html":{},"interfaces/GetOperationCallback.html":{},"classes/GoogleError.html":{},"classes/GoogleProtoFilesRoot.html":{},"classes/GrpcClient.html":{},"interfaces/GrpcClientOptions.html":{},"classes/LongRunningDescriptor.html":{},"classes/LongrunningApiCaller.html":{},"interfaces/Metadata.html":{},"interfaces/MetadataValue.html":{},"interfaces/MethodConfig.html":{},"classes/NormalApiCaller.html":{},"classes/OngoingCall.html":{},"classes/OngoingCallPromise.html":{},"classes/Operation.html":{},"classes/OperationsClient.html":{},"classes/OperationsClientBuilder.html":{},"interfaces/OperationsClientOptions.html":{},"classes/PageDescriptor.html":{},"classes/PagedApiCaller.html":{},"interfaces/ParseResult.html":{},"classes/PathTemplate.html":{},"interfaces/RequestType.html":{},"classes/RetryOptions.html":{},"interfaces/RetryParamsConfig.html":{},"interfaces/Segment.html":{},"interfaces/ServiceConfig.html":{},"interfaces/SimpleCallbackFunction.html":{},"classes/StreamDescriptor.html":{},"classes/StreamProxy.html":{},"classes/StreamingApiCaller.html":{},"interfaces/SubResponseInfo.html":{},"classes/Task.html":{},"interfaces/TaskCallback.html":{},"interfaces/TaskData.html":{},"interfaces/TaskElement.html":{},"changelog.html":{},"contributing.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["resulttuple",{"_index":65,"title":{},"body":{"interfaces/APICaller.html":{},"interfaces/ApiCallerSettings.html":{},"interfaces/CancellablePromise.html":{},"interfaces/GRPCCallOtherArgs.html":{},"interfaces/GRPCCallResult.html":{},"interfaces/GaxCall.html":{},"interfaces/GaxCallPromise.html":{},"interfaces/GaxCallStream.html":{},"interfaces/GetOperationCallback.html":{},"classes/OngoingCall.html":{},"classes/OngoingCallPromise.html":{},"classes/Operation.html":{},"interfaces/RequestType.html":{},"interfaces/SimpleCallbackFunction.html":{},"miscellaneous/typealiases.html":{}}}],["ret",{"_index":775,"title":{},"body":{"classes/BundleExecutor.html":{},"interfaces/BundleOptions.html":{}}}],["retain",{"_index":2359,"title":{},"body":{"license.html":{}}}],["retries",{"_index":1490,"title":{},"body":{"classes/OperationsClient.html":{},"classes/OperationsClientBuilder.html":{},"interfaces/OperationsClientOptions.html":{}}}],["retry",{"_index":154,"title":{},"body":{"interfaces/BackoffSettings.html":{},"interfaces/BundlingConfig.html":{},"interfaces/CallOptions.html":{},"classes/CallSettings.html":{},"interfaces/ClientConfig.html":{},"interfaces/GetOperationCallback.html":{},"interfaces/MethodConfig.html":{},"classes/Operation.html":{},"classes/RetryOptions.html":{},"interfaces/RetryParamsConfig.html":{},"interfaces/ServiceConfig.html":{},"changelog.html":{},"dependencies.html":{},"miscellaneous/functions.html":{}}}],["retry!.backoffsettings!.maxretries",{"_index":353,"title":{},"body":{"interfaces/BackoffSettings.html":{},"interfaces/BundlingConfig.html":{},"interfaces/CallOptions.html":{},"classes/CallSettings.html":{},"interfaces/ClientConfig.html":{},"interfaces/MethodConfig.html":{},"classes/RetryOptions.html":{},"interfaces/RetryParamsConfig.html":{},"interfaces/ServiceConfig.html":{}}}],["retry!.backoffsettings!.totaltimeoutmillis",{"_index":356,"title":{},"body":{"interfaces/BackoffSettings.html":{},"interfaces/BundlingConfig.html":{},"interfaces/CallOptions.html":{},"classes/CallSettings.html":{},"interfaces/ClientConfig.html":{},"interfaces/MethodConfig.html":{},"classes/RetryOptions.html":{},"interfaces/RetryParamsConfig.html":{},"interfaces/ServiceConfig.html":{}}}],["retry.backoffsettings",{"_index":450,"title":{},"body":{"interfaces/BackoffSettings.html":{},"interfaces/BundlingConfig.html":{},"interfaces/CallOptions.html":{},"classes/CallSettings.html":{},"interfaces/ClientConfig.html":{},"interfaces/MethodConfig.html":{},"classes/RetryOptions.html":{},"interfaces/RetryParamsConfig.html":{},"interfaces/ServiceConfig.html":{}}}],["retry.retrycodes",{"_index":449,"title":{},"body":{"interfaces/BackoffSettings.html":{},"interfaces/BundlingConfig.html":{},"interfaces/CallOptions.html":{},"classes/CallSettings.html":{},"interfaces/ClientConfig.html":{},"interfaces/MethodConfig.html":{},"classes/RetryOptions.html":{},"interfaces/RetryParamsConfig.html":{},"interfaces/ServiceConfig.html":{}}}],["retry_codes",{"_index":452,"title":{},"body":{"interfaces/BackoffSettings.html":{},"interfaces/BundlingConfig.html":{},"interfaces/CallOptions.html":{},"classes/CallSettings.html":{},"interfaces/ClientConfig.html":{},"interfaces/MethodConfig.html":{},"classes/RetryOptions.html":{},"interfaces/RetryParamsConfig.html":{},"interfaces/ServiceConfig.html":{},"miscellaneous/functions.html":{}}}],["retry_codes_def",{"_index":412,"title":{},"body":{"interfaces/BackoffSettings.html":{},"interfaces/BundlingConfig.html":{},"interfaces/CallOptions.html":{},"classes/CallSettings.html":{},"interfaces/ClientConfig.html":{},"interfaces/MethodConfig.html":{},"classes/RetryOptions.html":{},"interfaces/RetryParamsConfig.html":{},"interfaces/ServiceConfig.html":{}}}],["retry_codes_name",{"_index":420,"title":{},"body":{"interfaces/BackoffSettings.html":{},"interfaces/BundlingConfig.html":{},"interfaces/CallOptions.html":{},"classes/CallSettings.html":{},"interfaces/ClientConfig.html":{},"interfaces/MethodConfig.html":{},"classes/RetryOptions.html":{},"interfaces/RetryParamsConfig.html":{},"interfaces/ServiceConfig.html":{},"miscellaneous/functions.html":{}}}],["retry_delay_multiplier",{"_index":454,"title":{},"body":{"interfaces/BackoffSettings.html":{},"interfaces/BundlingConfig.html":{},"interfaces/CallOptions.html":{},"classes/CallSettings.html":{},"interfaces/ClientConfig.html":{},"interfaces/MethodConfig.html":{},"classes/RetryOptions.html":{},"interfaces/RetryParamsConfig.html":{},"interfaces/ServiceConfig.html":{},"miscellaneous/functions.html":{}}}],["retry_params",{"_index":414,"title":{},"body":{"interfaces/BackoffSettings.html":{},"interfaces/BundlingConfig.html":{},"interfaces/CallOptions.html":{},"classes/CallSettings.html":{},"interfaces/ClientConfig.html":{},"interfaces/MethodConfig.html":{},"classes/RetryOptions.html":{},"interfaces/RetryParamsConfig.html":{},"interfaces/ServiceConfig.html":{},"miscellaneous/functions.html":{}}}],["retry_params_name",{"_index":426,"title":{},"body":{"interfaces/BackoffSettings.html":{},"interfaces/BundlingConfig.html":{},"interfaces/CallOptions.html":{},"classes/CallSettings.html":{},"interfaces/ClientConfig.html":{},"interfaces/MethodConfig.html":{},"classes/RetryOptions.html":{},"interfaces/RetryParamsConfig.html":{},"interfaces/ServiceConfig.html":{},"miscellaneous/functions.html":{}}}],["retryable",{"_index":1718,"title":{},"body":{"classes/StreamDescriptor.html":{}}}],["retrycodes",{"_index":210,"title":{},"body":{"interfaces/BackoffSettings.html":{},"interfaces/BundlingConfig.html":{},"interfaces/CallOptions.html":{},"classes/CallSettings.html":{},"interfaces/ClientConfig.html":{},"interfaces/MethodConfig.html":{},"classes/RetryOptions.html":{},"interfaces/RetryParamsConfig.html":{},"interfaces/ServiceConfig.html":{},"changelog.html":{},"miscellaneous/functions.html":{}}}],["retrycodes[retrycodesname",{"_index":423,"title":{},"body":{"interfaces/BackoffSettings.html":{},"interfaces/BundlingConfig.html":{},"interfaces/CallOptions.html":{},"classes/CallSettings.html":{},"interfaces/ClientConfig.html":{},"interfaces/MethodConfig.html":{},"classes/RetryOptions.html":{},"interfaces/RetryParamsConfig.html":{},"interfaces/ServiceConfig.html":{}}}],["retrycodesname",{"_index":421,"title":{},"body":{"interfaces/BackoffSettings.html":{},"interfaces/BundlingConfig.html":{},"interfaces/CallOptions.html":{},"classes/CallSettings.html":{},"interfaces/ClientConfig.html":{},"interfaces/MethodConfig.html":{},"classes/RetryOptions.html":{},"interfaces/RetryParamsConfig.html":{},"interfaces/ServiceConfig.html":{}}}],["retrydelaymultiplier",{"_index":120,"title":{},"body":{"interfaces/BackoffSettings.html":{},"interfaces/BundlingConfig.html":{},"interfaces/CallOptions.html":{},"classes/CallSettings.html":{},"interfaces/ClientConfig.html":{},"interfaces/MethodConfig.html":{},"classes/RetryOptions.html":{},"interfaces/RetryParamsConfig.html":{},"interfaces/ServiceConfig.html":{},"miscellaneous/functions.html":{}}}],["retrying",{"_index":114,"title":{},"body":{"interfaces/BackoffSettings.html":{},"interfaces/BundlingConfig.html":{},"interfaces/CallOptions.html":{},"classes/CallSettings.html":{},"interfaces/ClientConfig.html":{},"interfaces/MethodConfig.html":{},"classes/RetryOptions.html":{},"interfaces/RetryParamsConfig.html":{},"interfaces/ServiceConfig.html":{},"classes/StreamDescriptor.html":{},"miscellaneous/functions.html":{}}}],["retrynames",{"_index":415,"title":{},"body":{"interfaces/BackoffSettings.html":{},"interfaces/BundlingConfig.html":{},"interfaces/CallOptions.html":{},"classes/CallSettings.html":{},"interfaces/ClientConfig.html":{},"interfaces/MethodConfig.html":{},"classes/RetryOptions.html":{},"interfaces/RetryParamsConfig.html":{},"interfaces/ServiceConfig.html":{},"miscellaneous/functions.html":{}}}],["retryoption",{"_index":440,"title":{},"body":{"interfaces/BackoffSettings.html":{},"interfaces/BundlingConfig.html":{},"interfaces/CallOptions.html":{},"classes/CallSettings.html":{},"interfaces/ClientConfig.html":{},"interfaces/MethodConfig.html":{},"classes/RetryOptions.html":{},"interfaces/RetryParamsConfig.html":{},"interfaces/ServiceConfig.html":{}}}],["retryoptions",{"_index":153,"title":{"classes/RetryOptions.html":{}},"body":{"interfaces/BackoffSettings.html":{},"interfaces/BundlingConfig.html":{},"interfaces/CallOptions.html":{},"classes/CallSettings.html":{},"interfaces/ClientConfig.html":{},"interfaces/MethodConfig.html":{},"classes/RetryOptions.html":{},"interfaces/RetryParamsConfig.html":{},"interfaces/ServiceConfig.html":{},"changelog.html":{},"miscellaneous/functions.html":{}}}],["retryparams",{"_index":413,"title":{},"body":{"interfaces/BackoffSettings.html":{},"interfaces/BundlingConfig.html":{},"interfaces/CallOptions.html":{},"classes/CallSettings.html":{},"interfaces/ClientConfig.html":{},"interfaces/MethodConfig.html":{},"classes/RetryOptions.html":{},"interfaces/RetryParamsConfig.html":{},"interfaces/ServiceConfig.html":{}}}],["retryparamsconfig",{"_index":428,"title":{"interfaces/RetryParamsConfig.html":{}},"body":{"interfaces/BackoffSettings.html":{},"interfaces/BundlingConfig.html":{},"interfaces/CallOptions.html":{},"classes/CallSettings.html":{},"interfaces/ClientConfig.html":{},"interfaces/MethodConfig.html":{},"classes/RetryOptions.html":{},"interfaces/RetryParamsConfig.html":{},"interfaces/ServiceConfig.html":{}}}],["retryrequest",{"_index":1106,"title":{},"body":{"interfaces/Duplexify.html":{},"interfaces/DuplexifyConstructor.html":{},"interfaces/DuplexifyOptions.html":{},"classes/StreamProxy.html":{},"miscellaneous/variables.html":{}}}],["retryrequest(null",{"_index":1166,"title":{},"body":{"interfaces/Duplexify.html":{},"interfaces/DuplexifyConstructor.html":{},"interfaces/DuplexifyOptions.html":{},"classes/StreamProxy.html":{}}}],["retrystream",{"_index":1165,"title":{},"body":{"interfaces/Duplexify.html":{},"interfaces/DuplexifyConstructor.html":{},"interfaces/DuplexifyOptions.html":{},"classes/StreamProxy.html":{}}}],["return",{"_index":79,"title":{},"body":{"interfaces/APICaller.html":{},"interfaces/AnyDecoder.html":{},"interfaces/ApiCallerSettings.html":{},"interfaces/BackoffSettings.html":{},"interfaces/Bindings.html":{},"classes/BundleApiCaller.html":{},"classes/BundleDescriptor.html":{},"classes/BundleExecutor.html":{},"interfaces/BundleOptions.html":{},"interfaces/BundlingConfig.html":{},"interfaces/CallOptions.html":{},"classes/CallSettings.html":{},"interfaces/CancellablePromise.html":{},"interfaces/ClientConfig.html":{},"classes/ClientStub.html":{},"interfaces/ClientStubOptions.html":{},"interfaces/Duplexify.html":{},"interfaces/DuplexifyConstructor.html":{},"interfaces/DuplexifyOptions.html":{},"interfaces/GRPCCallOtherArgs.html":{},"interfaces/GRPCCallResult.html":{},"interfaces/GaxCall.html":{},"interfaces/GaxCallPromise.html":{},"interfaces/GaxCallStream.html":{},"interfaces/GetOperationCallback.html":{},"classes/GoogleProtoFilesRoot.html":{},"classes/GrpcClient.html":{},"interfaces/GrpcClientOptions.html":{},"classes/LongRunningDescriptor.html":{},"classes/LongrunningApiCaller.html":{},"interfaces/Metadata.html":{},"interfaces/MetadataValue.html":{},"interfaces/MethodConfig.html":{},"classes/NormalApiCaller.html":{},"classes/OngoingCall.html":{},"classes/OngoingCallPromise.html":{},"classes/Operation.html":{},"classes/OperationsClient.html":{},"classes/OperationsClientBuilder.html":{},"interfaces/OperationsClientOptions.html":{},"classes/PageDescriptor.html":{},"classes/PagedApiCaller.html":{},"interfaces/ParseResult.html":{},"classes/PathTemplate.html":{},"interfaces/RequestType.html":{},"classes/RetryOptions.html":{},"interfaces/RetryParamsConfig.html":{},"interfaces/Segment.html":{},"interfaces/ServiceConfig.html":{},"interfaces/SimpleCallbackFunction.html":{},"classes/StreamDescriptor.html":{},"classes/StreamProxy.html":{},"classes/StreamingApiCaller.html":{},"interfaces/SubResponseInfo.html":{},"classes/Task.html":{},"interfaces/TaskCallback.html":{},"interfaces/TaskData.html":{},"interfaces/TaskElement.html":{},"changelog.html":{},"contributing.html":{}}}],["returned",{"_index":238,"title":{},"body":{"interfaces/BackoffSettings.html":{},"interfaces/BundlingConfig.html":{},"interfaces/CallOptions.html":{},"classes/CallSettings.html":{},"interfaces/ClientConfig.html":{},"interfaces/MethodConfig.html":{},"classes/OperationsClient.html":{},"classes/OperationsClientBuilder.html":{},"interfaces/OperationsClientOptions.html":{},"classes/RetryOptions.html":{},"interfaces/RetryParamsConfig.html":{},"interfaces/ServiceConfig.html":{},"changelog.html":{},"miscellaneous/functions.html":{}}}],["returning",{"_index":203,"title":{},"body":{"interfaces/BackoffSettings.html":{},"interfaces/BundlingConfig.html":{},"interfaces/CallOptions.html":{},"classes/CallSettings.html":{},"interfaces/ClientConfig.html":{},"interfaces/MethodConfig.html":{},"classes/RetryOptions.html":{},"interfaces/RetryParamsConfig.html":{},"interfaces/ServiceConfig.html":{}}}],["returns",{"_index":44,"title":{},"body":{"interfaces/APICaller.html":{},"interfaces/AnyDecoder.html":{},"interfaces/BackoffSettings.html":{},"classes/BundleApiCaller.html":{},"classes/BundleDescriptor.html":{},"classes/BundleExecutor.html":{},"interfaces/BundlingConfig.html":{},"interfaces/CallOptions.html":{},"classes/CallSettings.html":{},"interfaces/CancellablePromise.html":{},"interfaces/ClientConfig.html":{},"interfaces/Descriptor.html":{},"interfaces/Duplexify.html":{},"interfaces/DuplexifyConstructor.html":{},"interfaces/DuplexifyOptions.html":{},"interfaces/GRPCCallResult.html":{},"interfaces/GaxCall.html":{},"interfaces/GaxCallPromise.html":{},"interfaces/GaxCallStream.html":{},"interfaces/GetOperationCallback.html":{},"classes/GoogleProtoFilesRoot.html":{},"classes/GrpcClient.html":{},"classes/LongRunningDescriptor.html":{},"classes/LongrunningApiCaller.html":{},"interfaces/MethodConfig.html":{},"classes/NormalApiCaller.html":{},"classes/OngoingCall.html":{},"classes/OngoingCallPromise.html":{},"classes/Operation.html":{},"classes/OperationsClient.html":{},"classes/OperationsClientBuilder.html":{},"interfaces/OperationsClientOptions.html":{},"classes/PageDescriptor.html":{},"classes/PagedApiCaller.html":{},"classes/PathTemplate.html":{},"classes/RetryOptions.html":{},"interfaces/RetryParamsConfig.html":{},"interfaces/ServiceConfig.html":{},"interfaces/SimpleCallbackFunction.html":{},"classes/StreamDescriptor.html":{},"classes/StreamProxy.html":{},"classes/StreamingApiCaller.html":{},"interfaces/SubResponseInfo.html":{},"classes/Task.html":{},"interfaces/TaskCallback.html":{},"interfaces/TaskData.html":{},"interfaces/TaskElement.html":{},"miscellaneous/functions.html":{}}}],["right",{"_index":1716,"title":{},"body":{"classes/StreamDescriptor.html":{}}}],["rights",{"_index":2348,"title":{},"body":{"license.html":{}}}],["route",{"_index":2305,"title":{},"body":{"miscellaneous/functions.html":{}}}],["routing",{"_index":2303,"title":{},"body":{"miscellaneous/functions.html":{}}}],["rpc",{"_index":2284,"title":{},"body":{"miscellaneous/functions.html":{}}}],["rpc_timeout_multiplier",{"_index":457,"title":{},"body":{"interfaces/BackoffSettings.html":{},"interfaces/BundlingConfig.html":{},"interfaces/CallOptions.html":{},"classes/CallSettings.html":{},"interfaces/ClientConfig.html":{},"interfaces/MethodConfig.html":{},"classes/RetryOptions.html":{},"interfaces/RetryParamsConfig.html":{},"interfaces/ServiceConfig.html":{},"miscellaneous/functions.html":{}}}],["rpctimeoutmultiplier",{"_index":121,"title":{},"body":{"interfaces/BackoffSettings.html":{},"interfaces/BundlingConfig.html":{},"interfaces/CallOptions.html":{},"classes/CallSettings.html":{},"interfaces/ClientConfig.html":{},"interfaces/MethodConfig.html":{},"classes/RetryOptions.html":{},"interfaces/RetryParamsConfig.html":{},"interfaces/ServiceConfig.html":{},"miscellaneous/functions.html":{}}}],["run",{"_index":924,"title":{},"body":{"classes/ClientStub.html":{},"interfaces/ClientStubOptions.html":{},"classes/GoogleProtoFilesRoot.html":{},"classes/GrpcClient.html":{},"interfaces/GrpcClientOptions.html":{},"interfaces/Metadata.html":{},"interfaces/MetadataValue.html":{},"classes/Task.html":{},"changelog.html":{},"contributing.html":{}}}],["running",{"_index":16,"title":{},"body":{"interfaces/APICaller.html":{},"interfaces/AnyDecoder.html":{},"interfaces/ApiCallerSettings.html":{},"interfaces/GRPCCallOtherArgs.html":{},"interfaces/GRPCCallResult.html":{},"interfaces/GaxCall.html":{},"interfaces/GaxCallPromise.html":{},"interfaces/GaxCallStream.html":{},"interfaces/GetOperationCallback.html":{},"classes/LongRunningDescriptor.html":{},"classes/LongrunningApiCaller.html":{},"classes/Operation.html":{},"classes/OperationsClient.html":{},"classes/OperationsClientBuilder.html":{},"interfaces/OperationsClientOptions.html":{},"interfaces/RequestType.html":{},"interfaces/SimpleCallbackFunction.html":{},"contributing.html":{}}}],["runs",{"_index":1304,"title":{},"body":{"interfaces/GetOperationCallback.html":{},"classes/Operation.html":{}}}],["s",{"_index":568,"title":{},"body":{"interfaces/Bindings.html":{},"interfaces/ParseResult.html":{},"classes/PathTemplate.html":{},"interfaces/Segment.html":{}}}],["safe",{"_index":1778,"title":{},"body":{"interfaces/SubResponseInfo.html":{},"classes/Task.html":{},"interfaces/TaskCallback.html":{},"interfaces/TaskData.html":{},"interfaces/TaskElement.html":{}}}],["same",{"_index":487,"title":{},"body":{"interfaces/BackoffSettings.html":{},"classes/BundleExecutor.html":{},"interfaces/BundleOptions.html":{},"interfaces/BundlingConfig.html":{},"interfaces/CallOptions.html":{},"classes/CallSettings.html":{},"interfaces/ClientConfig.html":{},"interfaces/MethodConfig.html":{},"classes/RetryOptions.html":{},"interfaces/RetryParamsConfig.html":{},"interfaces/ServiceConfig.html":{},"miscellaneous/functions.html":{}}}],["sample",{"_index":2206,"title":{},"body":{"contributing.html":{}}}],["samples",{"_index":1936,"title":{},"body":{"changelog.html":{}}}],["savagery",{"_index":1974,"title":{},"body":{"changelog.html":{}}}],["schedule",{"_index":698,"title":{},"body":{"classes/BundleExecutor.html":{},"interfaces/BundleOptions.html":{}}}],["schedule(apicall",{"_index":715,"title":{},"body":{"classes/BundleExecutor.html":{}}}],["scheduled",{"_index":720,"title":{},"body":{"classes/BundleExecutor.html":{},"interfaces/BundleOptions.html":{}}}],["schemes",{"_index":1525,"title":{},"body":{"classes/OperationsClient.html":{},"classes/OperationsClientBuilder.html":{},"interfaces/OperationsClientOptions.html":{}}}],["scopes",{"_index":1565,"title":{},"body":{"classes/OperationsClient.html":{},"classes/OperationsClientBuilder.html":{},"interfaces/OperationsClientOptions.html":{},"miscellaneous/variables.html":{}}}],["script",{"_index":2060,"title":{},"body":{"changelog.html":{}}}],["scripts",{"_index":1981,"title":{},"body":{"changelog.html":{}}}],["search",{"_index":963,"title":{},"body":{"classes/ClientStub.html":{},"interfaces/ClientStubOptions.html":{},"classes/GoogleProtoFilesRoot.html":{},"classes/GrpcClient.html":{},"interfaces/GrpcClientOptions.html":{},"interfaces/Metadata.html":{},"interfaces/MetadataValue.html":{}}}],["second",{"_index":143,"title":{},"body":{"interfaces/BackoffSettings.html":{},"interfaces/BundlingConfig.html":{},"interfaces/CallOptions.html":{},"classes/CallSettings.html":{},"interfaces/ClientConfig.html":{},"interfaces/GRPCCallOtherArgs.html":{},"interfaces/GRPCCallResult.html":{},"interfaces/GaxCall.html":{},"interfaces/GaxCallPromise.html":{},"interfaces/GaxCallStream.html":{},"interfaces/GetOperationCallback.html":{},"interfaces/MethodConfig.html":{},"classes/Operation.html":{},"classes/OperationsClient.html":{},"classes/OperationsClientBuilder.html":{},"interfaces/OperationsClientOptions.html":{},"interfaces/RequestType.html":{},"classes/RetryOptions.html":{},"interfaces/RetryParamsConfig.html":{},"interfaces/ServiceConfig.html":{},"interfaces/SimpleCallbackFunction.html":{}}}],["secret",{"_index":1994,"title":{},"body":{"changelog.html":{}}}],["see",{"_index":145,"title":{},"body":{"interfaces/BackoffSettings.html":{},"interfaces/BundlingConfig.html":{},"interfaces/CallOptions.html":{},"classes/CallSettings.html":{},"interfaces/ClientConfig.html":{},"classes/ClientStub.html":{},"interfaces/ClientStubOptions.html":{},"interfaces/Duplexify.html":{},"interfaces/DuplexifyConstructor.html":{},"interfaces/DuplexifyOptions.html":{},"classes/GoogleProtoFilesRoot.html":{},"classes/GrpcClient.html":{},"interfaces/GrpcClientOptions.html":{},"interfaces/Metadata.html":{},"interfaces/MetadataValue.html":{},"interfaces/MethodConfig.html":{},"classes/OperationsClient.html":{},"classes/OperationsClientBuilder.html":{},"interfaces/OperationsClientOptions.html":{},"classes/RetryOptions.html":{},"interfaces/RetryParamsConfig.html":{},"interfaces/ServiceConfig.html":{},"classes/StreamProxy.html":{},"contributing.html":{},"index.html":{}}}],["segment",{"_index":528,"title":{"interfaces/Segment.html":{}},"body":{"interfaces/Bindings.html":{},"interfaces/ParseResult.html":{},"classes/PathTemplate.html":{},"interfaces/Segment.html":{}}}],["segment.kind",{"_index":555,"title":{},"body":{"interfaces/Bindings.html":{},"interfaces/ParseResult.html":{},"classes/PathTemplate.html":{},"interfaces/Segment.html":{}}}],["segment.literal",{"_index":557,"title":{},"body":{"interfaces/Bindings.html":{},"interfaces/ParseResult.html":{},"classes/PathTemplate.html":{},"interfaces/Segment.html":{}}}],["segmentcount",{"_index":550,"title":{},"body":{"interfaces/Bindings.html":{},"interfaces/ParseResult.html":{},"classes/PathTemplate.html":{},"interfaces/Segment.html":{}}}],["segments",{"_index":527,"title":{},"body":{"interfaces/Bindings.html":{},"interfaces/ParseResult.html":{},"classes/PathTemplate.html":{},"interfaces/Segment.html":{},"miscellaneous/functions.html":{}}}],["segments.foreach(segment",{"_index":597,"title":{},"body":{"interfaces/Bindings.html":{},"interfaces/ParseResult.html":{},"classes/PathTemplate.html":{},"interfaces/Segment.html":{}}}],["self",{"_index":756,"title":{},"body":{"classes/BundleExecutor.html":{},"interfaces/BundleOptions.html":{},"interfaces/GetOperationCallback.html":{},"classes/Operation.html":{},"classes/PagedApiCaller.html":{}}}],["self._calloptions!.promise",{"_index":1275,"title":{},"body":{"interfaces/GetOperationCallback.html":{},"classes/Operation.html":{}}}],["self._cancel(callback!.id",{"_index":776,"title":{},"body":{"classes/BundleExecutor.html":{},"interfaces/BundleOptions.html":{}}}],["self._data.foreach",{"_index":1802,"title":{},"body":{"interfaces/SubResponseInfo.html":{},"classes/Task.html":{},"interfaces/TaskCallback.html":{},"interfaces/TaskData.html":{},"interfaces/TaskElement.html":{}}}],["self._data.foreach(data",{"_index":1805,"title":{},"body":{"interfaces/SubResponseInfo.html":{},"classes/Task.html":{},"interfaces/TaskCallback.html":{},"interfaces/TaskData.html":{},"interfaces/TaskElement.html":{}}}],["self._subresponsefield",{"_index":1804,"title":{},"body":{"interfaces/SubResponseInfo.html":{},"classes/Task.html":{},"interfaces/TaskCallback.html":{},"interfaces/TaskData.html":{},"interfaces/TaskElement.html":{}}}],["self._unpackresponse(responses[0",{"_index":1289,"title":{},"body":{"interfaces/GetOperationCallback.html":{},"classes/Operation.html":{}}}],["self.createactualcallback(argument",{"_index":1691,"title":{},"body":{"classes/PagedApiCaller.html":{}}}],["self.emit(event",{"_index":1324,"title":{},"body":{"interfaces/GetOperationCallback.html":{},"classes/Operation.html":{}}}],["self.getoperation((err",{"_index":1331,"title":{},"body":{"interfaces/GetOperationCallback.html":{},"classes/Operation.html":{}}}],["self.hasactivelisteners",{"_index":1325,"title":{},"body":{"interfaces/GetOperationCallback.html":{},"classes/Operation.html":{}}}],["self.latestresponse",{"_index":1282,"title":{},"body":{"interfaces/GetOperationCallback.html":{},"classes/Operation.html":{}}}],["self.latestresponse.error",{"_index":1276,"title":{},"body":{"interfaces/GetOperationCallback.html":{},"classes/Operation.html":{}}}],["self.latestresponse.error.code",{"_index":1278,"title":{},"body":{"interfaces/GetOperationCallback.html":{},"classes/Operation.html":{}}}],["self.metadata",{"_index":1281,"title":{},"body":{"interfaces/GetOperationCallback.html":{},"classes/Operation.html":{}}}],["semver",{"_index":869,"title":{},"body":{"classes/ClientStub.html":{},"interfaces/ClientStubOptions.html":{},"classes/GoogleProtoFilesRoot.html":{},"classes/GrpcClient.html":{},"interfaces/GrpcClientOptions.html":{},"interfaces/Metadata.html":{},"interfaces/MetadataValue.html":{},"changelog.html":{},"dependencies.html":{}}}],["semver.gte(process.version",{"_index":919,"title":{},"body":{"classes/ClientStub.html":{},"interfaces/ClientStubOptions.html":{},"classes/GoogleProtoFilesRoot.html":{},"classes/GrpcClient.html":{},"interfaces/GrpcClientOptions.html":{},"interfaces/Metadata.html":{},"interfaces/MetadataValue.html":{}}}],["sends",{"_index":687,"title":{},"body":{"classes/BundleExecutor.html":{},"interfaces/BundleOptions.html":{},"interfaces/Duplexify.html":{},"interfaces/DuplexifyConstructor.html":{},"interfaces/DuplexifyOptions.html":{},"classes/StreamProxy.html":{}}}],["sent",{"_index":236,"title":{},"body":{"interfaces/BackoffSettings.html":{},"interfaces/BundlingConfig.html":{},"interfaces/CallOptions.html":{},"classes/CallSettings.html":{},"interfaces/ClientConfig.html":{},"interfaces/MethodConfig.html":{},"classes/OperationsClient.html":{},"classes/OperationsClientBuilder.html":{},"interfaces/OperationsClientOptions.html":{},"classes/RetryOptions.html":{},"interfaces/RetryParamsConfig.html":{},"interfaces/ServiceConfig.html":{},"miscellaneous/functions.html":{}}}],["separator",{"_index":636,"title":{},"body":{"classes/BundleDescriptor.html":{},"miscellaneous/functions.html":{}}}],["server",{"_index":1029,"title":{},"body":{"classes/ClientStub.html":{},"interfaces/ClientStubOptions.html":{},"interfaces/Duplexify.html":{},"interfaces/DuplexifyConstructor.html":{},"interfaces/DuplexifyOptions.html":{},"classes/GoogleProtoFilesRoot.html":{},"classes/GrpcClient.html":{},"interfaces/GrpcClientOptions.html":{},"interfaces/Metadata.html":{},"interfaces/MetadataValue.html":{},"classes/OperationsClient.html":{},"classes/OperationsClientBuilder.html":{},"interfaces/OperationsClientOptions.html":{},"classes/StreamProxy.html":{},"index.html":{}}}],["server_streaming",{"_index":1115,"title":{},"body":{"interfaces/Duplexify.html":{},"interfaces/DuplexifyConstructor.html":{},"interfaces/DuplexifyOptions.html":{},"classes/StreamProxy.html":{},"miscellaneous/enumerations.html":{}}}],["servers",{"_index":2317,"title":{},"body":{"index.html":{}}}],["serverstreamingcall",{"_index":1198,"title":{},"body":{"interfaces/GRPCCallOtherArgs.html":{},"interfaces/GRPCCallResult.html":{},"interfaces/GaxCall.html":{},"interfaces/GaxCallPromise.html":{},"interfaces/GaxCallStream.html":{},"interfaces/RequestType.html":{},"interfaces/SimpleCallbackFunction.html":{},"classes/StreamingApiCaller.html":{},"miscellaneous/typealiases.html":{}}}],["serverstreamingcall)(argument",{"_index":1742,"title":{},"body":{"classes/StreamingApiCaller.html":{}}}],["service",{"_index":138,"title":{},"body":{"interfaces/BackoffSettings.html":{},"classes/BundleExecutor.html":{},"interfaces/BundleOptions.html":{},"interfaces/BundlingConfig.html":{},"interfaces/CallOptions.html":{},"classes/CallSettings.html":{},"interfaces/ClientConfig.html":{},"classes/ClientStub.html":{},"interfaces/ClientStubOptions.html":{},"interfaces/GetOperationCallback.html":{},"classes/GoogleProtoFilesRoot.html":{},"classes/GrpcClient.html":{},"interfaces/GrpcClientOptions.html":{},"interfaces/Metadata.html":{},"interfaces/MetadataValue.html":{},"interfaces/MethodConfig.html":{},"classes/Operation.html":{},"classes/OperationsClient.html":{},"classes/OperationsClientBuilder.html":{},"interfaces/OperationsClientOptions.html":{},"classes/RetryOptions.html":{},"interfaces/RetryParamsConfig.html":{},"interfaces/ServiceConfig.html":{},"changelog.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["service.js#l355",{"_index":1153,"title":{},"body":{"interfaces/Duplexify.html":{},"interfaces/DuplexifyConstructor.html":{},"interfaces/DuplexifyOptions.html":{},"classes/StreamProxy.html":{}}}],["service_address",{"_index":1556,"title":{},"body":{"classes/OperationsClient.html":{},"classes/OperationsClientBuilder.html":{},"interfaces/OperationsClientOptions.html":{},"miscellaneous/variables.html":{}}}],["serviceaddress",{"_index":1037,"title":{},"body":{"classes/ClientStub.html":{},"interfaces/ClientStubOptions.html":{},"classes/GoogleProtoFilesRoot.html":{},"classes/GrpcClient.html":{},"interfaces/GrpcClientOptions.html":{},"interfaces/Metadata.html":{},"interfaces/MetadataValue.html":{}}}],["serviceconfig",{"_index":451,"title":{"interfaces/ServiceConfig.html":{}},"body":{"interfaces/BackoffSettings.html":{},"interfaces/BundlingConfig.html":{},"interfaces/CallOptions.html":{},"classes/CallSettings.html":{},"interfaces/ClientConfig.html":{},"interfaces/MethodConfig.html":{},"classes/RetryOptions.html":{},"interfaces/RetryParamsConfig.html":{},"interfaces/ServiceConfig.html":{}}}],["serviceconfig.methods",{"_index":496,"title":{},"body":{"interfaces/BackoffSettings.html":{},"interfaces/BundlingConfig.html":{},"interfaces/CallOptions.html":{},"classes/CallSettings.html":{},"interfaces/ClientConfig.html":{},"interfaces/MethodConfig.html":{},"classes/RetryOptions.html":{},"interfaces/RetryParamsConfig.html":{},"interfaces/ServiceConfig.html":{}}}],["serviceconfig.retry_codes",{"_index":504,"title":{},"body":{"interfaces/BackoffSettings.html":{},"interfaces/BundlingConfig.html":{},"interfaces/CallOptions.html":{},"classes/CallSettings.html":{},"interfaces/ClientConfig.html":{},"interfaces/MethodConfig.html":{},"classes/RetryOptions.html":{},"interfaces/RetryParamsConfig.html":{},"interfaces/ServiceConfig.html":{}}}],["serviceconfig.retry_params",{"_index":505,"title":{},"body":{"interfaces/BackoffSettings.html":{},"interfaces/BundlingConfig.html":{},"interfaces/CallOptions.html":{},"classes/CallSettings.html":{},"interfaces/ClientConfig.html":{},"interfaces/MethodConfig.html":{},"classes/RetryOptions.html":{},"interfaces/RetryParamsConfig.html":{},"interfaces/ServiceConfig.html":{}}}],["servicename",{"_index":482,"title":{},"body":{"interfaces/BackoffSettings.html":{},"interfaces/BundlingConfig.html":{},"interfaces/CallOptions.html":{},"classes/CallSettings.html":{},"interfaces/ClientConfig.html":{},"classes/ClientStub.html":{},"interfaces/ClientStubOptions.html":{},"classes/GoogleProtoFilesRoot.html":{},"classes/GrpcClient.html":{},"interfaces/GrpcClientOptions.html":{},"interfaces/Metadata.html":{},"interfaces/MetadataValue.html":{},"interfaces/MethodConfig.html":{},"classes/RetryOptions.html":{},"interfaces/RetryParamsConfig.html":{},"interfaces/ServiceConfig.html":{},"miscellaneous/functions.html":{}}}],["servicepath",{"_index":894,"title":{},"body":{"classes/ClientStub.html":{},"interfaces/ClientStubOptions.html":{},"classes/GoogleProtoFilesRoot.html":{},"classes/GrpcClient.html":{},"interfaces/GrpcClientOptions.html":{},"interfaces/Metadata.html":{},"interfaces/MetadataValue.html":{},"classes/OperationsClient.html":{},"classes/OperationsClientBuilder.html":{},"interfaces/OperationsClientOptions.html":{}}}],["services",{"_index":1523,"title":{},"body":{"classes/OperationsClient.html":{},"classes/OperationsClientBuilder.html":{},"interfaces/OperationsClientOptions.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{}}}],["set",{"_index":159,"title":{},"body":{"interfaces/BackoffSettings.html":{},"interfaces/BundlingConfig.html":{},"interfaces/CallOptions.html":{},"classes/CallSettings.html":{},"interfaces/ClientConfig.html":{},"classes/ClientStub.html":{},"interfaces/ClientStubOptions.html":{},"interfaces/GetOperationCallback.html":{},"classes/GoogleProtoFilesRoot.html":{},"classes/GrpcClient.html":{},"interfaces/GrpcClientOptions.html":{},"interfaces/Metadata.html":{},"interfaces/MetadataValue.html":{},"interfaces/MethodConfig.html":{},"classes/Operation.html":{},"classes/OperationsClient.html":{},"classes/OperationsClientBuilder.html":{},"interfaces/OperationsClientOptions.html":{},"classes/RetryOptions.html":{},"interfaces/RetryParamsConfig.html":{},"interfaces/ServiceConfig.html":{},"contributing.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["setimmediate(emit",{"_index":1330,"title":{},"body":{"interfaces/GetOperationCallback.html":{},"classes/Operation.html":{}}}],["setimmediate(this.callback",{"_index":838,"title":{},"body":{"interfaces/CancellablePromise.html":{},"classes/OngoingCall.html":{},"classes/OngoingCallPromise.html":{}}}],["setreadable",{"_index":1094,"title":{},"body":{"interfaces/Duplexify.html":{}}}],["setreadable(readable",{"_index":1096,"title":{},"body":{"interfaces/Duplexify.html":{},"interfaces/DuplexifyConstructor.html":{},"interfaces/DuplexifyOptions.html":{},"classes/StreamProxy.html":{}}}],["setstream",{"_index":1722,"title":{},"body":{"classes/StreamProxy.html":{}}}],["setstream(apicall",{"_index":1164,"title":{},"body":{"interfaces/Duplexify.html":{},"interfaces/DuplexifyConstructor.html":{},"interfaces/DuplexifyOptions.html":{},"classes/StreamProxy.html":{}}}],["settimeout",{"_index":783,"title":{},"body":{"classes/BundleExecutor.html":{},"interfaces/BundleOptions.html":{},"interfaces/GetOperationCallback.html":{},"classes/Operation.html":{}}}],["settings",{"_index":32,"title":{},"body":{"interfaces/APICaller.html":{},"interfaces/ApiCallerSettings.html":{},"interfaces/BackoffSettings.html":{},"classes/BundleApiCaller.html":{},"classes/BundleDescriptor.html":{},"interfaces/BundlingConfig.html":{},"interfaces/CallOptions.html":{},"classes/CallSettings.html":{},"interfaces/ClientConfig.html":{},"interfaces/Descriptor.html":{},"interfaces/GetOperationCallback.html":{},"classes/LongRunningDescriptor.html":{},"classes/LongrunningApiCaller.html":{},"interfaces/MethodConfig.html":{},"classes/NormalApiCaller.html":{},"classes/Operation.html":{},"classes/OperationsClient.html":{},"classes/OperationsClientBuilder.html":{},"interfaces/OperationsClientOptions.html":{},"classes/PageDescriptor.html":{},"classes/PagedApiCaller.html":{},"classes/RetryOptions.html":{},"interfaces/RetryParamsConfig.html":{},"interfaces/ServiceConfig.html":{},"classes/StreamDescriptor.html":{},"classes/StreamingApiCaller.html":{},"miscellaneous/functions.html":{}}}],["settings.autopaginate",{"_index":289,"title":{},"body":{"interfaces/BackoffSettings.html":{},"interfaces/BundlingConfig.html":{},"interfaces/CallOptions.html":{},"classes/CallSettings.html":{},"interfaces/ClientConfig.html":{},"interfaces/MethodConfig.html":{},"classes/PageDescriptor.html":{},"classes/PagedApiCaller.html":{},"classes/RetryOptions.html":{},"interfaces/RetryParamsConfig.html":{},"interfaces/ServiceConfig.html":{}}}],["settings.bundleoptions",{"_index":321,"title":{},"body":{"interfaces/BackoffSettings.html":{},"interfaces/BundlingConfig.html":{},"interfaces/CallOptions.html":{},"classes/CallSettings.html":{},"interfaces/ClientConfig.html":{},"interfaces/MethodConfig.html":{},"classes/RetryOptions.html":{},"interfaces/RetryParamsConfig.html":{},"interfaces/ServiceConfig.html":{}}}],["settings.isbundling",{"_index":323,"title":{},"body":{"interfaces/BackoffSettings.html":{},"classes/BundleApiCaller.html":{},"classes/BundleDescriptor.html":{},"interfaces/BundlingConfig.html":{},"interfaces/CallOptions.html":{},"classes/CallSettings.html":{},"interfaces/ClientConfig.html":{},"interfaces/MethodConfig.html":{},"classes/RetryOptions.html":{},"interfaces/RetryParamsConfig.html":{},"interfaces/ServiceConfig.html":{}}}],["settings.longrunning",{"_index":325,"title":{},"body":{"interfaces/BackoffSettings.html":{},"interfaces/BundlingConfig.html":{},"interfaces/CallOptions.html":{},"classes/CallSettings.html":{},"interfaces/ClientConfig.html":{},"classes/LongrunningApiCaller.html":{},"interfaces/MethodConfig.html":{},"classes/RetryOptions.html":{},"interfaces/RetryParamsConfig.html":{},"interfaces/ServiceConfig.html":{}}}],["settings.maxresults",{"_index":318,"title":{},"body":{"interfaces/BackoffSettings.html":{},"interfaces/BundlingConfig.html":{},"interfaces/CallOptions.html":{},"classes/CallSettings.html":{},"interfaces/ClientConfig.html":{},"interfaces/MethodConfig.html":{},"classes/PagedApiCaller.html":{},"classes/RetryOptions.html":{},"interfaces/RetryParamsConfig.html":{},"interfaces/ServiceConfig.html":{}}}],["settings.otherargs",{"_index":304,"title":{},"body":{"interfaces/BackoffSettings.html":{},"interfaces/BundlingConfig.html":{},"interfaces/CallOptions.html":{},"classes/CallSettings.html":{},"interfaces/ClientConfig.html":{},"interfaces/MethodConfig.html":{},"classes/RetryOptions.html":{},"interfaces/RetryParamsConfig.html":{},"interfaces/ServiceConfig.html":{}}}],["settings.pagesize",{"_index":1693,"title":{},"body":{"classes/PagedApiCaller.html":{}}}],["settings.pagetoken",{"_index":301,"title":{},"body":{"interfaces/BackoffSettings.html":{},"interfaces/BundlingConfig.html":{},"interfaces/CallOptions.html":{},"classes/CallSettings.html":{},"interfaces/ClientConfig.html":{},"interfaces/MethodConfig.html":{},"classes/PagedApiCaller.html":{},"classes/RetryOptions.html":{},"interfaces/RetryParamsConfig.html":{},"interfaces/ServiceConfig.html":{}}}],["settings.promise",{"_index":308,"title":{},"body":{"interfaces/BackoffSettings.html":{},"interfaces/BundlingConfig.html":{},"interfaces/CallOptions.html":{},"classes/CallSettings.html":{},"interfaces/ClientConfig.html":{},"interfaces/MethodConfig.html":{},"classes/RetryOptions.html":{},"interfaces/RetryParamsConfig.html":{},"interfaces/ServiceConfig.html":{}}}],["settings.retry",{"_index":287,"title":{},"body":{"interfaces/BackoffSettings.html":{},"interfaces/BundlingConfig.html":{},"interfaces/CallOptions.html":{},"classes/CallSettings.html":{},"interfaces/ClientConfig.html":{},"interfaces/MethodConfig.html":{},"classes/RetryOptions.html":{},"interfaces/RetryParamsConfig.html":{},"interfaces/ServiceConfig.html":{},"classes/StreamDescriptor.html":{}}}],["settings.timeout",{"_index":285,"title":{},"body":{"interfaces/BackoffSettings.html":{},"interfaces/BundlingConfig.html":{},"interfaces/CallOptions.html":{},"classes/CallSettings.html":{},"interfaces/ClientConfig.html":{},"interfaces/MethodConfig.html":{},"classes/RetryOptions.html":{},"interfaces/RetryParamsConfig.html":{},"interfaces/ServiceConfig.html":{}}}],["setup",{"_index":2247,"title":{},"body":{"contributing.html":{}}}],["setwritable",{"_index":1095,"title":{},"body":{"interfaces/Duplexify.html":{}}}],["setwritable(writable",{"_index":1099,"title":{},"body":{"interfaces/Duplexify.html":{},"interfaces/DuplexifyConstructor.html":{},"interfaces/DuplexifyOptions.html":{},"classes/StreamProxy.html":{}}}],["several",{"_index":678,"title":{},"body":{"classes/BundleExecutor.html":{},"interfaces/BundleOptions.html":{}}}],["sh",{"_index":2328,"title":{},"body":{"index.html":{}}}],["shall",{"_index":2384,"title":{},"body":{"license.html":{}}}],["shared",{"_index":1779,"title":{},"body":{"interfaces/SubResponseInfo.html":{},"classes/Task.html":{},"interfaces/TaskCallback.html":{},"interfaces/TaskData.html":{},"interfaces/TaskElement.html":{}}}],["side",{"_index":152,"title":{},"body":{"interfaces/BackoffSettings.html":{},"interfaces/BundlingConfig.html":{},"interfaces/CallOptions.html":{},"classes/CallSettings.html":{},"interfaces/ClientConfig.html":{},"interfaces/MethodConfig.html":{},"classes/RetryOptions.html":{},"interfaces/RetryParamsConfig.html":{},"interfaces/ServiceConfig.html":{}}}],["sign",{"_index":2223,"title":{},"body":{"contributing.html":{}}}],["signature",{"_index":92,"title":{},"body":{"interfaces/AnyDecoder.html":{},"interfaces/DuplexifyConstructor.html":{},"interfaces/GaxCall.html":{},"interfaces/GaxCallPromise.html":{},"interfaces/GaxCallStream.html":{},"interfaces/GetOperationCallback.html":{},"interfaces/SimpleCallbackFunction.html":{}}}],["silent",{"_index":1340,"title":{},"body":{"interfaces/GetOperationCallback.html":{},"classes/Operation.html":{}}}],["simplecallbackfunction",{"_index":28,"title":{"interfaces/SimpleCallbackFunction.html":{}},"body":{"interfaces/APICaller.html":{},"interfaces/ApiCallerSettings.html":{},"classes/BundleApiCaller.html":{},"classes/BundleExecutor.html":{},"interfaces/BundleOptions.html":{},"interfaces/CancellablePromise.html":{},"interfaces/Duplexify.html":{},"interfaces/DuplexifyConstructor.html":{},"interfaces/DuplexifyOptions.html":{},"interfaces/GRPCCallOtherArgs.html":{},"interfaces/GRPCCallResult.html":{},"interfaces/GaxCall.html":{},"interfaces/GaxCallPromise.html":{},"interfaces/GaxCallStream.html":{},"classes/LongrunningApiCaller.html":{},"classes/NormalApiCaller.html":{},"classes/OngoingCall.html":{},"classes/OngoingCallPromise.html":{},"classes/PagedApiCaller.html":{},"interfaces/RequestType.html":{},"interfaces/SimpleCallbackFunction.html":{},"classes/StreamProxy.html":{},"classes/StreamingApiCaller.html":{},"interfaces/SubResponseInfo.html":{},"classes/Task.html":{},"interfaces/TaskCallback.html":{},"interfaces/TaskData.html":{},"interfaces/TaskElement.html":{}}}],["single",{"_index":260,"title":{},"body":{"interfaces/BackoffSettings.html":{},"interfaces/BundlingConfig.html":{},"interfaces/CallOptions.html":{},"classes/CallSettings.html":{},"interfaces/ClientConfig.html":{},"interfaces/Duplexify.html":{},"interfaces/DuplexifyConstructor.html":{},"interfaces/DuplexifyOptions.html":{},"interfaces/MethodConfig.html":{},"classes/OperationsClient.html":{},"classes/OperationsClientBuilder.html":{},"interfaces/OperationsClientOptions.html":{},"classes/RetryOptions.html":{},"interfaces/RetryParamsConfig.html":{},"interfaces/ServiceConfig.html":{},"classes/StreamProxy.html":{},"interfaces/SubResponseInfo.html":{},"classes/Task.html":{},"interfaces/TaskCallback.html":{},"interfaces/TaskData.html":{},"interfaces/TaskElement.html":{}}}],["sinon",{"_index":2150,"title":{},"body":{"changelog.html":{}}}],["size",{"_index":179,"title":{},"body":{"interfaces/BackoffSettings.html":{},"interfaces/Bindings.html":{},"interfaces/BundlingConfig.html":{},"interfaces/CallOptions.html":{},"classes/CallSettings.html":{},"interfaces/ClientConfig.html":{},"interfaces/MethodConfig.html":{},"interfaces/ParseResult.html":{},"classes/PathTemplate.html":{},"classes/RetryOptions.html":{},"interfaces/RetryParamsConfig.html":{},"interfaces/Segment.html":{},"interfaces/ServiceConfig.html":{},"classes/Task.html":{}}}],["size).join",{"_index":563,"title":{},"body":{"interfaces/Bindings.html":{},"interfaces/ParseResult.html":{},"classes/PathTemplate.html":{},"interfaces/Segment.html":{}}}],["sizethreshold",{"_index":779,"title":{},"body":{"classes/BundleExecutor.html":{},"interfaces/BundleOptions.html":{}}}],["slash",{"_index":596,"title":{},"body":{"interfaces/Bindings.html":{},"interfaces/ParseResult.html":{},"classes/PathTemplate.html":{},"interfaces/Segment.html":{}}}],["slice",{"_index":1773,"title":{},"body":{"interfaces/SubResponseInfo.html":{},"classes/Task.html":{},"interfaces/TaskCallback.html":{},"interfaces/TaskData.html":{},"interfaces/TaskElement.html":{}}}],["snake",{"_index":1973,"title":{},"body":{"changelog.html":{}}}],["software",{"_index":2371,"title":{},"body":{"license.html":{}}}],["source",{"_index":4,"title":{},"body":{"interfaces/APICaller.html":{},"interfaces/AnyDecoder.html":{},"interfaces/ApiCallerSettings.html":{},"interfaces/BackoffSettings.html":{},"interfaces/Bindings.html":{},"classes/BundleApiCaller.html":{},"classes/BundleDescriptor.html":{},"classes/BundleExecutor.html":{},"interfaces/BundleOptions.html":{},"interfaces/BundlingConfig.html":{},"interfaces/CallOptions.html":{},"classes/CallSettings.html":{},"interfaces/CancellablePromise.html":{},"interfaces/ClientConfig.html":{},"classes/ClientStub.html":{},"interfaces/ClientStubOptions.html":{},"interfaces/Descriptor.html":{},"interfaces/Duplexify.html":{},"interfaces/DuplexifyConstructor.html":{},"interfaces/DuplexifyOptions.html":{},"interfaces/GRPCCallOtherArgs.html":{},"interfaces/GRPCCallResult.html":{},"interfaces/GaxCall.html":{},"interfaces/GaxCallPromise.html":{},"interfaces/GaxCallStream.html":{},"interfaces/GetOperationCallback.html":{},"classes/GoogleError.html":{},"classes/GoogleProtoFilesRoot.html":{},"classes/GrpcClient.html":{},"interfaces/GrpcClientOptions.html":{},"classes/LongRunningDescriptor.html":{},"classes/LongrunningApiCaller.html":{},"interfaces/Metadata.html":{},"interfaces/MetadataValue.html":{},"interfaces/MethodConfig.html":{},"classes/NormalApiCaller.html":{},"classes/OngoingCall.html":{},"classes/OngoingCallPromise.html":{},"classes/Operation.html":{},"classes/OperationsClient.html":{},"classes/OperationsClientBuilder.html":{},"interfaces/OperationsClientOptions.html":{},"classes/PageDescriptor.html":{},"classes/PagedApiCaller.html":{},"interfaces/ParseResult.html":{},"classes/PathTemplate.html":{},"interfaces/RequestType.html":{},"classes/RetryOptions.html":{},"interfaces/RetryParamsConfig.html":{},"interfaces/Segment.html":{},"interfaces/ServiceConfig.html":{},"interfaces/SimpleCallbackFunction.html":{},"classes/StreamDescriptor.html":{},"classes/StreamProxy.html":{},"classes/StreamingApiCaller.html":{},"interfaces/SubResponseInfo.html":{},"classes/Task.html":{},"interfaces/TaskCallback.html":{},"interfaces/TaskData.html":{},"interfaces/TaskElement.html":{},"contributing.html":{},"license.html":{}}}],["special",{"_index":13,"title":{},"body":{"interfaces/APICaller.html":{},"interfaces/ApiCallerSettings.html":{},"interfaces/GRPCCallOtherArgs.html":{},"interfaces/GRPCCallResult.html":{},"interfaces/GaxCall.html":{},"interfaces/GaxCallPromise.html":{},"interfaces/GaxCallStream.html":{},"interfaces/GetOperationCallback.html":{},"classes/Operation.html":{},"interfaces/RequestType.html":{},"interfaces/SimpleCallbackFunction.html":{},"license.html":{}}}],["specific",{"_index":134,"title":{},"body":{"interfaces/BackoffSettings.html":{},"interfaces/BundlingConfig.html":{},"interfaces/CallOptions.html":{},"classes/CallSettings.html":{},"interfaces/ClientConfig.html":{},"interfaces/MethodConfig.html":{},"classes/RetryOptions.html":{},"interfaces/RetryParamsConfig.html":{},"interfaces/ServiceConfig.html":{},"license.html":{}}}],["specification",{"_index":189,"title":{},"body":{"interfaces/BackoffSettings.html":{},"interfaces/BundlingConfig.html":{},"interfaces/CallOptions.html":{},"classes/CallSettings.html":{},"interfaces/CancellablePromise.html":{},"interfaces/ClientConfig.html":{},"classes/ClientStub.html":{},"interfaces/ClientStubOptions.html":{},"classes/GoogleProtoFilesRoot.html":{},"classes/GrpcClient.html":{},"interfaces/GrpcClientOptions.html":{},"interfaces/Metadata.html":{},"interfaces/MetadataValue.html":{},"interfaces/MethodConfig.html":{},"classes/OngoingCall.html":{},"classes/OngoingCallPromise.html":{},"classes/RetryOptions.html":{},"interfaces/RetryParamsConfig.html":{},"interfaces/ServiceConfig.html":{},"miscellaneous/functions.html":{}}}],["specified",{"_index":178,"title":{},"body":{"interfaces/BackoffSettings.html":{},"interfaces/BundlingConfig.html":{},"interfaces/CallOptions.html":{},"classes/CallSettings.html":{},"interfaces/CancellablePromise.html":{},"interfaces/ClientConfig.html":{},"classes/ClientStub.html":{},"interfaces/ClientStubOptions.html":{},"interfaces/GetOperationCallback.html":{},"classes/GoogleProtoFilesRoot.html":{},"classes/GrpcClient.html":{},"interfaces/GrpcClientOptions.html":{},"interfaces/Metadata.html":{},"interfaces/MetadataValue.html":{},"interfaces/MethodConfig.html":{},"classes/OngoingCall.html":{},"classes/OngoingCallPromise.html":{},"classes/Operation.html":{},"classes/OperationsClient.html":{},"classes/OperationsClientBuilder.html":{},"interfaces/OperationsClientOptions.html":{},"classes/RetryOptions.html":{},"interfaces/RetryParamsConfig.html":{},"interfaces/ServiceConfig.html":{},"miscellaneous/functions.html":{}}}],["specifies",{"_index":1163,"title":{},"body":{"interfaces/Duplexify.html":{},"interfaces/DuplexifyConstructor.html":{},"interfaces/DuplexifyOptions.html":{},"classes/StreamProxy.html":{}}}],["specify",{"_index":2297,"title":{},"body":{"miscellaneous/functions.html":{}}}],["speech",{"_index":1339,"title":{},"body":{"interfaces/GetOperationCallback.html":{},"classes/Operation.html":{}}}],["speechclient",{"_index":2338,"title":{},"body":{"index.html":{}}}],["sponge.xml",{"_index":2141,"title":{},"body":{"changelog.html":{}}}],["src/.../apicaller.ts",{"_index":2264,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../apitypes.ts",{"_index":2413,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/.../bundleexecutor.ts",{"_index":2272,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../bundlingutils.ts",{"_index":2261,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../createapicall.ts",{"_index":2263,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../gax.ts",{"_index":2262,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../grpc.ts",{"_index":2414,"title":{},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/.../index.ts",{"_index":2271,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["src/.../isbrowser.ts",{"_index":2270,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../longrunning.ts",{"_index":2273,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../operationsclient.ts",{"_index":2416,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../parserextras.ts",{"_index":2417,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../pathtemplate.ts",{"_index":2266,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["src/.../routingheader.ts",{"_index":2268,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../streaming.ts",{"_index":2260,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["src/.../warnings.ts",{"_index":2274,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["src/apicaller.ts",{"_index":6,"title":{},"body":{"interfaces/APICaller.html":{},"interfaces/ApiCallerSettings.html":{},"miscellaneous/functions.html":{}}}],["src/apicaller.ts:55",{"_index":55,"title":{},"body":{"interfaces/APICaller.html":{}}}],["src/apicaller.ts:59",{"_index":62,"title":{},"body":{"interfaces/APICaller.html":{}}}],["src/apicaller.ts:60",{"_index":39,"title":{},"body":{"interfaces/APICaller.html":{}}}],["src/apicaller.ts:66",{"_index":50,"title":{},"body":{"interfaces/APICaller.html":{}}}],["src/apicaller.ts:70",{"_index":58,"title":{},"body":{"interfaces/APICaller.html":{}}}],["src/apitypes.ts",{"_index":1176,"title":{},"body":{"interfaces/GRPCCallOtherArgs.html":{},"interfaces/GRPCCallResult.html":{},"interfaces/GaxCall.html":{},"interfaces/GaxCallPromise.html":{},"interfaces/GaxCallStream.html":{},"interfaces/RequestType.html":{},"interfaces/SimpleCallbackFunction.html":{},"miscellaneous/typealiases.html":{}}}],["src/apitypes.ts:42",{"_index":1209,"title":{},"body":{"interfaces/GRPCCallResult.html":{}}}],["src/bundlingcalls/bundleapicaller.ts",{"_index":601,"title":{},"body":{"classes/BundleApiCaller.html":{}}}],["src/bundlingcalls/bundleapicaller.ts:46",{"_index":607,"title":{},"body":{"classes/BundleApiCaller.html":{}}}],["src/bundlingcalls/bundleapicaller.ts:52",{"_index":610,"title":{},"body":{"classes/BundleApiCaller.html":{}}}],["src/bundlingcalls/bundleapicaller.ts:62",{"_index":612,"title":{},"body":{"classes/BundleApiCaller.html":{}}}],["src/bundlingcalls/bundleapicaller.ts:66",{"_index":608,"title":{},"body":{"classes/BundleApiCaller.html":{}}}],["src/bundlingcalls/bundleapicaller.ts:82",{"_index":609,"title":{},"body":{"classes/BundleApiCaller.html":{}}}],["src/bundlingcalls/bundleapicaller.ts:86",{"_index":611,"title":{},"body":{"classes/BundleApiCaller.html":{}}}],["src/bundlingcalls/bundledescriptor.ts",{"_index":625,"title":{},"body":{"classes/BundleDescriptor.html":{}}}],["src/bundlingcalls/bundledescriptor.ts:43",{"_index":667,"title":{},"body":{"classes/BundleDescriptor.html":{}}}],["src/bundlingcalls/bundledescriptor.ts:44",{"_index":668,"title":{},"body":{"classes/BundleDescriptor.html":{}}}],["src/bundlingcalls/bundledescriptor.ts:45",{"_index":669,"title":{},"body":{"classes/BundleDescriptor.html":{}}}],["src/bundlingcalls/bundledescriptor.ts:46",{"_index":633,"title":{},"body":{"classes/BundleDescriptor.html":{}}}],["src/bundlingcalls/bundledescriptor.ts:91",{"_index":670,"title":{},"body":{"classes/BundleDescriptor.html":{}}}],["src/bundlingcalls/bundleexecutor.ts",{"_index":676,"title":{},"body":{"classes/BundleExecutor.html":{},"interfaces/BundleOptions.html":{},"miscellaneous/functions.html":{}}}],["src/bundlingcalls/bundleexecutor.ts:261",{"_index":712,"title":{},"body":{"classes/BundleExecutor.html":{}}}],["src/bundlingcalls/bundleexecutor.ts:60",{"_index":708,"title":{},"body":{"classes/BundleExecutor.html":{}}}],["src/bundlingcalls/bundleexecutor.ts:61",{"_index":706,"title":{},"body":{"classes/BundleExecutor.html":{}}}],["src/bundlingcalls/bundleexecutor.ts:62",{"_index":709,"title":{},"body":{"classes/BundleExecutor.html":{}}}],["src/bundlingcalls/bundleexecutor.ts:63",{"_index":710,"title":{},"body":{"classes/BundleExecutor.html":{}}}],["src/bundlingcalls/bundleexecutor.ts:64",{"_index":707,"title":{},"body":{"classes/BundleExecutor.html":{}}}],["src/bundlingcalls/bundleexecutor.ts:65",{"_index":700,"title":{},"body":{"classes/BundleExecutor.html":{}}}],["src/bundlingcalls/bundleexecutor.ts:94",{"_index":716,"title":{},"body":{"classes/BundleExecutor.html":{}}}],["src/bundlingcalls/bundlingutils.ts",{"_index":2275,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/bundlingcalls/task.ts",{"_index":1749,"title":{},"body":{"interfaces/SubResponseInfo.html":{},"classes/Task.html":{},"interfaces/TaskCallback.html":{},"interfaces/TaskData.html":{},"interfaces/TaskElement.html":{}}}],["src/bundlingcalls/task.ts:123",{"_index":1816,"title":{},"body":{"classes/Task.html":{}}}],["src/bundlingcalls/task.ts:124",{"_index":1819,"title":{},"body":{"classes/Task.html":{}}}],["src/bundlingcalls/task.ts:125",{"_index":1817,"title":{},"body":{"classes/Task.html":{}}}],["src/bundlingcalls/task.ts:126",{"_index":1820,"title":{},"body":{"classes/Task.html":{}}}],["src/bundlingcalls/task.ts:127",{"_index":1818,"title":{},"body":{"classes/Task.html":{}}}],["src/bundlingcalls/task.ts:128",{"_index":1815,"title":{},"body":{"classes/Task.html":{}}}],["src/bundlingcalls/task.ts:158",{"_index":1829,"title":{},"body":{"classes/Task.html":{}}}],["src/bundlingcalls/task.ts:169",{"_index":1830,"title":{},"body":{"classes/Task.html":{}}}],["src/bundlingcalls/task.ts:180",{"_index":1831,"title":{},"body":{"classes/Task.html":{}}}],["src/bundlingcalls/task.ts:239",{"_index":1827,"title":{},"body":{"classes/Task.html":{}}}],["src/bundlingcalls/task.ts:251",{"_index":1822,"title":{},"body":{"classes/Task.html":{}}}],["src/call.ts",{"_index":813,"title":{},"body":{"interfaces/CancellablePromise.html":{},"classes/OngoingCall.html":{},"classes/OngoingCallPromise.html":{}}}],["src/call.ts:106",{"_index":815,"title":{},"body":{"interfaces/CancellablePromise.html":{}}}],["src/call.ts:110",{"_index":1409,"title":{},"body":{"classes/OngoingCallPromise.html":{}}}],["src/call.ts:46",{"_index":1405,"title":{},"body":{"classes/OngoingCall.html":{}}}],["src/call.ts:47",{"_index":1406,"title":{},"body":{"classes/OngoingCall.html":{}}}],["src/call.ts:48",{"_index":1404,"title":{},"body":{"classes/OngoingCall.html":{}}}],["src/call.ts:69",{"_index":1408,"title":{},"body":{"classes/OngoingCall.html":{}}}],["src/call.ts:92",{"_index":1407,"title":{},"body":{"classes/OngoingCall.html":{}}}],["src/createapicall.ts",{"_index":2281,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/descriptor.ts",{"_index":1083,"title":{},"body":{"interfaces/Descriptor.html":{}}}],["src/descriptor.ts:42",{"_index":1084,"title":{},"body":{"interfaces/Descriptor.html":{}}}],["src/gax.ts",{"_index":110,"title":{},"body":{"interfaces/BackoffSettings.html":{},"interfaces/BundlingConfig.html":{},"interfaces/CallOptions.html":{},"classes/CallSettings.html":{},"interfaces/ClientConfig.html":{},"interfaces/MethodConfig.html":{},"classes/RetryOptions.html":{},"interfaces/RetryParamsConfig.html":{},"interfaces/ServiceConfig.html":{},"miscellaneous/functions.html":{}}}],["src/gax.ts:178",{"_index":811,"title":{},"body":{"classes/CallSettings.html":{}}}],["src/gax.ts:179",{"_index":810,"title":{},"body":{"classes/CallSettings.html":{}}}],["src/gax.ts:180",{"_index":802,"title":{},"body":{"classes/CallSettings.html":{}}}],["src/gax.ts:181",{"_index":809,"title":{},"body":{"classes/CallSettings.html":{}}}],["src/gax.ts:182",{"_index":808,"title":{},"body":{"classes/CallSettings.html":{}}}],["src/gax.ts:183",{"_index":806,"title":{},"body":{"classes/CallSettings.html":{}}}],["src/gax.ts:185",{"_index":807,"title":{},"body":{"classes/CallSettings.html":{}}}],["src/gax.ts:186",{"_index":803,"title":{},"body":{"classes/CallSettings.html":{}}}],["src/gax.ts:187",{"_index":804,"title":{},"body":{"classes/CallSettings.html":{}}}],["src/gax.ts:188",{"_index":805,"title":{},"body":{"classes/CallSettings.html":{}}}],["src/gax.ts:189",{"_index":801,"title":{},"body":{"classes/CallSettings.html":{}}}],["src/gax.ts:236",{"_index":812,"title":{},"body":{"classes/CallSettings.html":{}}}],["src/gax.ts:591",{"_index":800,"title":{},"body":{"interfaces/BundlingConfig.html":{}}}],["src/gax.ts:90",{"_index":1710,"title":{},"body":{"classes/RetryOptions.html":{}}}],["src/gax.ts:91",{"_index":1709,"title":{},"body":{"classes/RetryOptions.html":{}}}],["src/googleerror.ts",{"_index":1351,"title":{},"body":{"classes/GoogleError.html":{}}}],["src/googleerror.ts:35",{"_index":1352,"title":{},"body":{"classes/GoogleError.html":{}}}],["src/googleerror.ts:36",{"_index":1353,"title":{},"body":{"classes/GoogleError.html":{}}}],["src/grpc.ts",{"_index":856,"title":{},"body":{"classes/ClientStub.html":{},"interfaces/ClientStubOptions.html":{},"classes/GoogleProtoFilesRoot.html":{},"classes/GrpcClient.html":{},"interfaces/GrpcClientOptions.html":{},"interfaces/Metadata.html":{},"interfaces/MetadataValue.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/grpc.ts:141",{"_index":1368,"title":{},"body":{"classes/GrpcClient.html":{}}}],["src/grpc.ts:161",{"_index":1374,"title":{},"body":{"classes/GrpcClient.html":{}}}],["src/grpc.ts:174",{"_index":1375,"title":{},"body":{"classes/GrpcClient.html":{}}}],["src/grpc.ts:190",{"_index":1369,"title":{},"body":{"classes/GrpcClient.html":{}}}],["src/grpc.ts:199",{"_index":1376,"title":{},"body":{"classes/GrpcClient.html":{}}}],["src/grpc.ts:252",{"_index":1371,"title":{},"body":{"classes/GrpcClient.html":{}}}],["src/grpc.ts:281",{"_index":1373,"title":{},"body":{"classes/GrpcClient.html":{}}}],["src/grpc.ts:304",{"_index":1372,"title":{},"body":{"classes/GrpcClient.html":{}}}],["src/grpc.ts:315",{"_index":1356,"title":{},"body":{"classes/GoogleProtoFilesRoot.html":{}}}],["src/grpc.ts:322",{"_index":1358,"title":{},"body":{"classes/GoogleProtoFilesRoot.html":{}}}],["src/grpc.ts:341",{"_index":1357,"title":{},"body":{"classes/GoogleProtoFilesRoot.html":{}}}],["src/grpc.ts:86",{"_index":857,"title":{},"body":{"classes/ClientStub.html":{}}}],["src/grpc.ts:91",{"_index":1365,"title":{},"body":{"classes/GrpcClient.html":{}}}],["src/grpc.ts:92",{"_index":1367,"title":{},"body":{"classes/GrpcClient.html":{}}}],["src/grpc.ts:93",{"_index":1366,"title":{},"body":{"classes/GrpcClient.html":{}}}],["src/grpc.ts:94",{"_index":1364,"title":{},"body":{"classes/GrpcClient.html":{}}}],["src/index.ts",{"_index":2310,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["src/isbrowser.ts",{"_index":2309,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/longrunningcalls/longrunning.ts",{"_index":1211,"title":{},"body":{"interfaces/GetOperationCallback.html":{},"classes/Operation.html":{},"miscellaneous/functions.html":{}}}],["src/longrunningcalls/longrunning.ts:116",{"_index":1431,"title":{},"body":{"classes/Operation.html":{}}}],["src/longrunningcalls/longrunning.ts:141",{"_index":1433,"title":{},"body":{"classes/Operation.html":{}}}],["src/longrunningcalls/longrunning.ts:167",{"_index":1434,"title":{},"body":{"classes/Operation.html":{}}}],["src/longrunningcalls/longrunning.ts:168",{"_index":1435,"title":{},"body":{"classes/Operation.html":{}}}],["src/longrunningcalls/longrunning.ts:169",{"_index":1436,"title":{},"body":{"classes/Operation.html":{}}}],["src/longrunningcalls/longrunning.ts:211",{"_index":1432,"title":{},"body":{"classes/Operation.html":{}}}],["src/longrunningcalls/longrunning.ts:251",{"_index":1438,"title":{},"body":{"classes/Operation.html":{}}}],["src/longrunningcalls/longrunning.ts:332",{"_index":1437,"title":{},"body":{"classes/Operation.html":{}}}],["src/longrunningcalls/longrunning.ts:60",{"_index":1421,"title":{},"body":{"classes/Operation.html":{}}}],["src/longrunningcalls/longrunning.ts:61",{"_index":1425,"title":{},"body":{"classes/Operation.html":{}}}],["src/longrunningcalls/longrunning.ts:62",{"_index":1426,"title":{},"body":{"classes/Operation.html":{}}}],["src/longrunningcalls/longrunning.ts:63",{"_index":1427,"title":{},"body":{"classes/Operation.html":{}}}],["src/longrunningcalls/longrunning.ts:64",{"_index":1430,"title":{},"body":{"classes/Operation.html":{}}}],["src/longrunningcalls/longrunning.ts:65",{"_index":1428,"title":{},"body":{"classes/Operation.html":{}}}],["src/longrunningcalls/longrunning.ts:66",{"_index":1420,"title":{},"body":{"classes/Operation.html":{}}}],["src/longrunningcalls/longrunning.ts:67",{"_index":1419,"title":{},"body":{"classes/Operation.html":{}}}],["src/longrunningcalls/longrunning.ts:68",{"_index":1422,"title":{},"body":{"classes/Operation.html":{}}}],["src/longrunningcalls/longrunning.ts:69",{"_index":1429,"title":{},"body":{"classes/Operation.html":{}}}],["src/longrunningcalls/longrunning.ts:70",{"_index":1423,"title":{},"body":{"classes/Operation.html":{}}}],["src/longrunningcalls/longrunning.ts:71",{"_index":1424,"title":{},"body":{"classes/Operation.html":{}}}],["src/longrunningcalls/longrunning.ts:72",{"_index":1418,"title":{},"body":{"classes/Operation.html":{}}}],["src/longrunningcalls/longrunningapicaller.ts",{"_index":1382,"title":{},"body":{"classes/LongrunningApiCaller.html":{}}}],["src/longrunningcalls/longrunningapicaller.ts:119",{"_index":1389,"title":{},"body":{"classes/LongrunningApiCaller.html":{}}}],["src/longrunningcalls/longrunningapicaller.ts:123",{"_index":1391,"title":{},"body":{"classes/LongrunningApiCaller.html":{}}}],["src/longrunningcalls/longrunningapicaller.ts:48",{"_index":1384,"title":{},"body":{"classes/LongrunningApiCaller.html":{}}}],["src/longrunningcalls/longrunningapicaller.ts:62",{"_index":1390,"title":{},"body":{"classes/LongrunningApiCaller.html":{}}}],["src/longrunningcalls/longrunningapicaller.ts:72",{"_index":1392,"title":{},"body":{"classes/LongrunningApiCaller.html":{}}}],["src/longrunningcalls/longrunningapicaller.ts:76",{"_index":1388,"title":{},"body":{"classes/LongrunningApiCaller.html":{}}}],["src/longrunningcalls/longrunningdescriptor.ts",{"_index":85,"title":{},"body":{"interfaces/AnyDecoder.html":{},"classes/LongRunningDescriptor.html":{}}}],["src/longrunningcalls/longrunningdescriptor.ts:50",{"_index":1379,"title":{},"body":{"classes/LongRunningDescriptor.html":{}}}],["src/longrunningcalls/longrunningdescriptor.ts:51",{"_index":1380,"title":{},"body":{"classes/LongRunningDescriptor.html":{}}}],["src/longrunningcalls/longrunningdescriptor.ts:52",{"_index":1378,"title":{},"body":{"classes/LongRunningDescriptor.html":{}}}],["src/longrunningcalls/longrunningdescriptor.ts:64",{"_index":1381,"title":{},"body":{"classes/LongRunningDescriptor.html":{}}}],["src/normalcalls/normalapicaller.ts",{"_index":1396,"title":{},"body":{"classes/NormalApiCaller.html":{}}}],["src/normalcalls/normalapicaller.ts:40",{"_index":1400,"title":{},"body":{"classes/NormalApiCaller.html":{}}}],["src/normalcalls/normalapicaller.ts:50",{"_index":1402,"title":{},"body":{"classes/NormalApiCaller.html":{}}}],["src/normalcalls/normalapicaller.ts:54",{"_index":1398,"title":{},"body":{"classes/NormalApiCaller.html":{}}}],["src/normalcalls/normalapicaller.ts:63",{"_index":1399,"title":{},"body":{"classes/NormalApiCaller.html":{}}}],["src/normalcalls/normalapicaller.ts:67",{"_index":1401,"title":{},"body":{"classes/NormalApiCaller.html":{}}}],["src/operationsclient.ts",{"_index":1439,"title":{},"body":{"classes/OperationsClient.html":{},"classes/OperationsClientBuilder.html":{},"interfaces/OperationsClientOptions.html":{},"miscellaneous/variables.html":{}}}],["src/operationsclient.ts:155",{"_index":1512,"title":{},"body":{"classes/OperationsClient.html":{}}}],["src/operationsclient.ts:156",{"_index":1516,"title":{},"body":{"classes/OperationsClient.html":{}}}],["src/operationsclient.ts:157",{"_index":1517,"title":{},"body":{"classes/OperationsClient.html":{}}}],["src/operationsclient.ts:194",{"_index":1504,"title":{},"body":{"classes/OperationsClient.html":{}}}],["src/operationsclient.ts:280",{"_index":1519,"title":{},"body":{"classes/OperationsClient.html":{}}}],["src/operationsclient.ts:333",{"_index":1539,"title":{},"body":{"classes/OperationsClient.html":{}}}],["src/operationsclient.ts:371",{"_index":1470,"title":{},"body":{"classes/OperationsClient.html":{}}}],["src/operationsclient.ts:404",{"_index":1499,"title":{},"body":{"classes/OperationsClient.html":{}}}],["src/operationsclient.ts:415",{"_index":1648,"title":{},"body":{"classes/OperationsClientBuilder.html":{}}}],["src/operationsclient.ts:88",{"_index":1468,"title":{},"body":{"classes/OperationsClient.html":{}}}],["src/operationsclient.ts:92",{"_index":1466,"title":{},"body":{"classes/OperationsClient.html":{}}}],["src/paginationcalls/pagedapicaller.ts",{"_index":1675,"title":{},"body":{"classes/PagedApiCaller.html":{}}}],["src/paginationcalls/pagedapicaller.ts:103",{"_index":1680,"title":{},"body":{"classes/PagedApiCaller.html":{}}}],["src/paginationcalls/pagedapicaller.ts:110",{"_index":1678,"title":{},"body":{"classes/PagedApiCaller.html":{}}}],["src/paginationcalls/pagedapicaller.ts:154",{"_index":1679,"title":{},"body":{"classes/PagedApiCaller.html":{}}}],["src/paginationcalls/pagedapicaller.ts:158",{"_index":1681,"title":{},"body":{"classes/PagedApiCaller.html":{}}}],["src/paginationcalls/pagedapicaller.ts:48",{"_index":1677,"title":{},"body":{"classes/PagedApiCaller.html":{}}}],["src/paginationcalls/pagedapicaller.ts:91",{"_index":1682,"title":{},"body":{"classes/PagedApiCaller.html":{}}}],["src/paginationcalls/pagedescriptor.ts",{"_index":1649,"title":{},"body":{"classes/PageDescriptor.html":{}}}],["src/paginationcalls/pagedescriptor.ts:121",{"_index":1663,"title":{},"body":{"classes/PageDescriptor.html":{}}}],["src/paginationcalls/pagedescriptor.ts:47",{"_index":1658,"title":{},"body":{"classes/PageDescriptor.html":{}}}],["src/paginationcalls/pagedescriptor.ts:48",{"_index":1659,"title":{},"body":{"classes/PageDescriptor.html":{}}}],["src/paginationcalls/pagedescriptor.ts:49",{"_index":1657,"title":{},"body":{"classes/PageDescriptor.html":{}}}],["src/paginationcalls/pagedescriptor.ts:50",{"_index":1656,"title":{},"body":{"classes/PageDescriptor.html":{}}}],["src/paginationcalls/pagedescriptor.ts:65",{"_index":1661,"title":{},"body":{"classes/PageDescriptor.html":{}}}],["src/parserextras.ts",{"_index":2421,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/pathtemplate.ts",{"_index":517,"title":{},"body":{"interfaces/Bindings.html":{},"interfaces/ParseResult.html":{},"classes/PathTemplate.html":{},"interfaces/Segment.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["src/pathtemplate.ts:134",{"_index":1704,"title":{},"body":{"classes/PathTemplate.html":{}}}],["src/pathtemplate.ts:169",{"_index":1702,"title":{},"body":{"classes/PathTemplate.html":{}}}],["src/pathtemplate.ts:51",{"_index":519,"title":{},"body":{"interfaces/Bindings.html":{}}}],["src/pathtemplate.ts:58",{"_index":1706,"title":{},"body":{"classes/PathTemplate.html":{}}}],["src/pathtemplate.ts:62",{"_index":1708,"title":{},"body":{"classes/PathTemplate.html":{}}}],["src/pathtemplate.ts:64",{"_index":1701,"title":{},"body":{"classes/PathTemplate.html":{}}}],["src/pathtemplate.ts:82",{"_index":1703,"title":{},"body":{"classes/PathTemplate.html":{}}}],["src/routingheader.ts",{"_index":2299,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/streamingcalls/streamdescriptor.ts",{"_index":1711,"title":{},"body":{"classes/StreamDescriptor.html":{}}}],["src/streamingcalls/streamdescriptor.ts:43",{"_index":1713,"title":{},"body":{"classes/StreamDescriptor.html":{}}}],["src/streamingcalls/streamdescriptor.ts:49",{"_index":1714,"title":{},"body":{"classes/StreamDescriptor.html":{}}}],["src/streamingcalls/streaming.ts",{"_index":1091,"title":{},"body":{"interfaces/Duplexify.html":{},"interfaces/DuplexifyConstructor.html":{},"interfaces/DuplexifyOptions.html":{},"classes/StreamProxy.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["src/streamingcalls/streaming.ts:115",{"_index":1725,"title":{},"body":{"classes/StreamProxy.html":{}}}],["src/streamingcalls/streaming.ts:127",{"_index":1726,"title":{},"body":{"classes/StreamProxy.html":{}}}],["src/streamingcalls/streaming.ts:157",{"_index":1727,"title":{},"body":{"classes/StreamProxy.html":{}}}],["src/streamingcalls/streaming.ts:54",{"_index":1101,"title":{},"body":{"interfaces/Duplexify.html":{}}}],["src/streamingcalls/streaming.ts:55",{"_index":1098,"title":{},"body":{"interfaces/Duplexify.html":{}}}],["src/streamingcalls/streaming.ts:59",{"_index":1174,"title":{},"body":{"interfaces/DuplexifyConstructor.html":{}}}],["src/streamingcalls/streaming.ts:92",{"_index":1724,"title":{},"body":{"classes/StreamProxy.html":{}}}],["src/streamingcalls/streaming.ts:95",{"_index":1723,"title":{},"body":{"classes/StreamProxy.html":{}}}],["src/streamingcalls/streamingapicaller.ts",{"_index":1728,"title":{},"body":{"classes/StreamingApiCaller.html":{}}}],["src/streamingcalls/streamingapicaller.ts:101",{"_index":1733,"title":{},"body":{"classes/StreamingApiCaller.html":{}}}],["src/streamingcalls/streamingapicaller.ts:105",{"_index":1736,"title":{},"body":{"classes/StreamingApiCaller.html":{}}}],["src/streamingcalls/streamingapicaller.ts:48",{"_index":1730,"title":{},"body":{"classes/StreamingApiCaller.html":{}}}],["src/streamingcalls/streamingapicaller.ts:60",{"_index":1734,"title":{},"body":{"classes/StreamingApiCaller.html":{}}}],["src/streamingcalls/streamingapicaller.ts:64",{"_index":1737,"title":{},"body":{"classes/StreamingApiCaller.html":{}}}],["src/streamingcalls/streamingapicaller.ts:92",{"_index":1731,"title":{},"body":{"classes/StreamingApiCaller.html":{}}}],["src/warnings.ts",{"_index":2312,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["ssl",{"_index":1644,"title":{},"body":{"classes/OperationsClient.html":{},"classes/OperationsClientBuilder.html":{},"interfaces/OperationsClientOptions.html":{}}}],["sslcreds",{"_index":897,"title":{},"body":{"classes/ClientStub.html":{},"interfaces/ClientStubOptions.html":{},"classes/GoogleProtoFilesRoot.html":{},"classes/GrpcClient.html":{},"interfaces/GrpcClientOptions.html":{},"interfaces/Metadata.html":{},"interfaces/MetadataValue.html":{}}}],["standard",{"_index":407,"title":{},"body":{"interfaces/BackoffSettings.html":{},"interfaces/BundlingConfig.html":{},"interfaces/CallOptions.html":{},"classes/CallSettings.html":{},"interfaces/ClientConfig.html":{},"classes/ClientStub.html":{},"interfaces/ClientStubOptions.html":{},"classes/GoogleProtoFilesRoot.html":{},"classes/GrpcClient.html":{},"interfaces/GrpcClientOptions.html":{},"interfaces/Metadata.html":{},"interfaces/MetadataValue.html":{},"interfaces/MethodConfig.html":{},"classes/OperationsClient.html":{},"classes/OperationsClientBuilder.html":{},"interfaces/OperationsClientOptions.html":{},"classes/RetryOptions.html":{},"interfaces/RetryParamsConfig.html":{},"interfaces/ServiceConfig.html":{},"miscellaneous/functions.html":{}}}],["start",{"_index":1750,"title":{},"body":{"interfaces/SubResponseInfo.html":{},"classes/Task.html":{},"interfaces/TaskCallback.html":{},"interfaces/TaskData.html":{},"interfaces/TaskElement.html":{}}}],["started",{"_index":1672,"title":{"changelog.html":{},"contributing.html":{},"index.html":{},"license.html":{}},"body":{"classes/PageDescriptor.html":{},"index.html":{}}}],["starting",{"_index":235,"title":{},"body":{"interfaces/BackoffSettings.html":{},"interfaces/BundlingConfig.html":{},"interfaces/CallOptions.html":{},"classes/CallSettings.html":{},"interfaces/ClientConfig.html":{},"interfaces/MethodConfig.html":{},"classes/RetryOptions.html":{},"interfaces/RetryParamsConfig.html":{},"interfaces/ServiceConfig.html":{},"miscellaneous/functions.html":{}}}],["startpolling_",{"_index":1309,"title":{},"body":{"interfaces/GetOperationCallback.html":{},"classes/Operation.html":{}}}],["starts",{"_index":1471,"title":{},"body":{"classes/OperationsClient.html":{},"classes/OperationsClientBuilder.html":{},"interfaces/OperationsClientOptions.html":{},"interfaces/SubResponseInfo.html":{},"classes/Task.html":{},"interfaces/TaskCallback.html":{},"interfaces/TaskData.html":{},"interfaces/TaskElement.html":{}}}],["state",{"_index":1507,"title":{},"body":{"classes/OperationsClient.html":{},"classes/OperationsClientBuilder.html":{},"interfaces/OperationsClientOptions.html":{}}}],["static",{"_index":981,"title":{},"body":{"classes/ClientStub.html":{},"interfaces/ClientStubOptions.html":{},"classes/GoogleProtoFilesRoot.html":{},"classes/GrpcClient.html":{},"interfaces/GrpcClientOptions.html":{},"interfaces/Metadata.html":{},"interfaces/MetadataValue.html":{}}}],["status",{"_index":418,"title":{},"body":{"interfaces/BackoffSettings.html":{},"classes/BundleApiCaller.html":{},"classes/BundleExecutor.html":{},"interfaces/BundleOptions.html":{},"interfaces/BundlingConfig.html":{},"interfaces/CallOptions.html":{},"classes/CallSettings.html":{},"interfaces/CancellablePromise.html":{},"interfaces/ClientConfig.html":{},"interfaces/Duplexify.html":{},"interfaces/DuplexifyConstructor.html":{},"interfaces/DuplexifyOptions.html":{},"interfaces/GetOperationCallback.html":{},"classes/GoogleError.html":{},"interfaces/MethodConfig.html":{},"classes/OngoingCall.html":{},"classes/OngoingCallPromise.html":{},"classes/Operation.html":{},"classes/RetryOptions.html":{},"interfaces/RetryParamsConfig.html":{},"interfaces/ServiceConfig.html":{},"classes/StreamProxy.html":{},"interfaces/SubResponseInfo.html":{},"classes/Task.html":{},"interfaces/TaskCallback.html":{},"interfaces/TaskData.html":{},"interfaces/TaskElement.html":{},"changelog.html":{},"miscellaneous/functions.html":{}}}],["status.call((argument",{"_index":620,"title":{},"body":{"classes/BundleApiCaller.html":{}}}],["status.cancelled",{"_index":832,"title":{},"body":{"interfaces/CancellablePromise.html":{},"classes/OngoingCall.html":{},"classes/OngoingCallPromise.html":{}}}],["status.deadline_exceeded",{"_index":1329,"title":{},"body":{"interfaces/GetOperationCallback.html":{},"classes/Operation.html":{}}}],["status.invalid_argument",{"_index":767,"title":{},"body":{"classes/BundleExecutor.html":{},"interfaces/BundleOptions.html":{}}}],["status.unknown",{"_index":1344,"title":{},"body":{"interfaces/GetOperationCallback.html":{},"classes/Operation.html":{}}}],["stop",{"_index":175,"title":{},"body":{"interfaces/BackoffSettings.html":{},"interfaces/BundlingConfig.html":{},"interfaces/CallOptions.html":{},"classes/CallSettings.html":{},"interfaces/ClientConfig.html":{},"interfaces/MethodConfig.html":{},"classes/RetryOptions.html":{},"interfaces/RetryParamsConfig.html":{},"interfaces/ServiceConfig.html":{}}}],["stops",{"_index":1251,"title":{},"body":{"interfaces/GetOperationCallback.html":{},"classes/Operation.html":{}}}],["stores",{"_index":677,"title":{},"body":{"classes/BundleExecutor.html":{},"interfaces/BundleOptions.html":{},"interfaces/GRPCCallOtherArgs.html":{},"interfaces/GRPCCallResult.html":{},"interfaces/GaxCall.html":{},"interfaces/GaxCallPromise.html":{},"interfaces/GaxCallStream.html":{},"interfaces/RequestType.html":{},"interfaces/SimpleCallbackFunction.html":{}}}],["strategy",{"_index":703,"title":{},"body":{"classes/BundleExecutor.html":{},"interfaces/BundleOptions.html":{},"interfaces/GetOperationCallback.html":{},"classes/Operation.html":{}}}],["stream",{"_index":204,"title":{},"body":{"interfaces/BackoffSettings.html":{},"interfaces/BundlingConfig.html":{},"interfaces/CallOptions.html":{},"classes/CallSettings.html":{},"interfaces/ClientConfig.html":{},"interfaces/Duplexify.html":{},"interfaces/DuplexifyConstructor.html":{},"interfaces/DuplexifyOptions.html":{},"interfaces/GRPCCallOtherArgs.html":{},"interfaces/GRPCCallResult.html":{},"interfaces/GaxCall.html":{},"interfaces/GaxCallPromise.html":{},"interfaces/GaxCallStream.html":{},"interfaces/MethodConfig.html":{},"classes/OperationsClient.html":{},"classes/OperationsClientBuilder.html":{},"interfaces/OperationsClientOptions.html":{},"classes/PageDescriptor.html":{},"classes/PagedApiCaller.html":{},"interfaces/RequestType.html":{},"classes/RetryOptions.html":{},"interfaces/RetryParamsConfig.html":{},"interfaces/ServiceConfig.html":{},"interfaces/SimpleCallbackFunction.html":{},"classes/StreamDescriptor.html":{},"classes/StreamProxy.html":{},"classes/StreamingApiCaller.html":{},"dependencies.html":{}}}],["stream.emit('error",{"_index":1673,"title":{},"body":{"classes/PageDescriptor.html":{},"classes/StreamingApiCaller.html":{}}}],["stream.emit('response",{"_index":1160,"title":{},"body":{"interfaces/Duplexify.html":{},"interfaces/DuplexifyConstructor.html":{},"interfaces/DuplexifyOptions.html":{},"classes/StreamProxy.html":{}}}],["stream.on('metadata",{"_index":1154,"title":{},"body":{"interfaces/Duplexify.html":{},"interfaces/DuplexifyConstructor.html":{},"interfaces/DuplexifyOptions.html":{},"classes/StreamProxy.html":{}}}],["stream.on(event",{"_index":1141,"title":{},"body":{"interfaces/Duplexify.html":{},"interfaces/DuplexifyConstructor.html":{},"interfaces/DuplexifyOptions.html":{},"classes/StreamProxy.html":{}}}],["stream.setstream(apicall",{"_index":1747,"title":{},"body":{"classes/StreamingApiCaller.html":{}}}],["streamdescriptor",{"_index":1087,"title":{"classes/StreamDescriptor.html":{}},"body":{"interfaces/Descriptor.html":{},"classes/StreamDescriptor.html":{},"classes/StreamingApiCaller.html":{}}}],["streamed",{"_index":294,"title":{},"body":{"interfaces/BackoffSettings.html":{},"interfaces/BundlingConfig.html":{},"interfaces/CallOptions.html":{},"classes/CallSettings.html":{},"interfaces/ClientConfig.html":{},"interfaces/MethodConfig.html":{},"classes/RetryOptions.html":{},"interfaces/RetryParamsConfig.html":{},"interfaces/ServiceConfig.html":{}}}],["streaming",{"_index":19,"title":{},"body":{"interfaces/APICaller.html":{},"interfaces/ApiCallerSettings.html":{},"interfaces/BackoffSettings.html":{},"interfaces/BundlingConfig.html":{},"interfaces/CallOptions.html":{},"classes/CallSettings.html":{},"interfaces/ClientConfig.html":{},"interfaces/Duplexify.html":{},"interfaces/DuplexifyConstructor.html":{},"interfaces/DuplexifyOptions.html":{},"interfaces/GRPCCallOtherArgs.html":{},"interfaces/GRPCCallResult.html":{},"interfaces/GaxCall.html":{},"interfaces/GaxCallPromise.html":{},"interfaces/GaxCallStream.html":{},"interfaces/MethodConfig.html":{},"classes/OperationsClient.html":{},"classes/OperationsClientBuilder.html":{},"interfaces/OperationsClientOptions.html":{},"classes/PagedApiCaller.html":{},"interfaces/RequestType.html":{},"classes/RetryOptions.html":{},"interfaces/RetryParamsConfig.html":{},"interfaces/ServiceConfig.html":{},"interfaces/SimpleCallbackFunction.html":{},"classes/StreamDescriptor.html":{},"classes/StreamProxy.html":{},"classes/StreamingApiCaller.html":{},"miscellaneous/enumerations.html":{},"index.html":{}}}],["streaming_wrap_unknown_stream_type",{"_index":1745,"title":{},"body":{"classes/StreamingApiCaller.html":{}}}],["streamingapicaller",{"_index":1715,"title":{"classes/StreamingApiCaller.html":{}},"body":{"classes/StreamDescriptor.html":{},"classes/StreamingApiCaller.html":{}}}],["streamingapicaller(this",{"_index":1720,"title":{},"body":{"classes/StreamDescriptor.html":{}}}],["streamingcalls/streamdescriptor",{"_index":1088,"title":{},"body":{"interfaces/Descriptor.html":{}}}],["streamingcalls/streaming",{"_index":72,"title":{},"body":{"interfaces/APICaller.html":{},"interfaces/ApiCallerSettings.html":{}}}],["streamproxy",{"_index":37,"title":{"classes/StreamProxy.html":{}},"body":{"interfaces/APICaller.html":{},"interfaces/ApiCallerSettings.html":{},"interfaces/Duplexify.html":{},"interfaces/DuplexifyConstructor.html":{},"interfaces/DuplexifyOptions.html":{},"classes/StreamProxy.html":{},"classes/StreamingApiCaller.html":{}}}],["streamproxy(this.descriptor.type",{"_index":1739,"title":{},"body":{"classes/StreamingApiCaller.html":{}}}],["streams",{"_index":1113,"title":{},"body":{"interfaces/Duplexify.html":{},"interfaces/DuplexifyConstructor.html":{},"interfaces/DuplexifyOptions.html":{},"classes/StreamProxy.html":{}}}],["streamtype",{"_index":1112,"title":{},"body":{"interfaces/Duplexify.html":{},"interfaces/DuplexifyConstructor.html":{},"interfaces/DuplexifyOptions.html":{},"classes/StreamDescriptor.html":{},"classes/StreamProxy.html":{},"classes/StreamingApiCaller.html":{},"miscellaneous/enumerations.html":{}}}],["streamtype.bidi_streaming",{"_index":1171,"title":{},"body":{"interfaces/Duplexify.html":{},"interfaces/DuplexifyConstructor.html":{},"interfaces/DuplexifyOptions.html":{},"classes/StreamProxy.html":{},"classes/StreamingApiCaller.html":{}}}],["streamtype.client_streaming",{"_index":1128,"title":{},"body":{"interfaces/Duplexify.html":{},"interfaces/DuplexifyConstructor.html":{},"interfaces/DuplexifyOptions.html":{},"classes/StreamProxy.html":{},"classes/StreamingApiCaller.html":{}}}],["streamtype.server_streaming",{"_index":1129,"title":{},"body":{"interfaces/Duplexify.html":{},"interfaces/DuplexifyConstructor.html":{},"interfaces/DuplexifyOptions.html":{},"classes/StreamProxy.html":{},"classes/StreamingApiCaller.html":{}}}],["strict",{"_index":2126,"title":{},"body":{"changelog.html":{},"license.html":{}}}],["string",{"_index":209,"title":{},"body":{"interfaces/BackoffSettings.html":{},"interfaces/Bindings.html":{},"classes/BundleDescriptor.html":{},"classes/BundleExecutor.html":{},"interfaces/BundleOptions.html":{},"interfaces/BundlingConfig.html":{},"interfaces/CallOptions.html":{},"classes/CallSettings.html":{},"interfaces/ClientConfig.html":{},"classes/ClientStub.html":{},"interfaces/ClientStubOptions.html":{},"interfaces/GRPCCallOtherArgs.html":{},"interfaces/GRPCCallResult.html":{},"interfaces/GaxCall.html":{},"interfaces/GaxCallPromise.html":{},"interfaces/GaxCallStream.html":{},"interfaces/GetOperationCallback.html":{},"classes/GoogleError.html":{},"classes/GoogleProtoFilesRoot.html":{},"classes/GrpcClient.html":{},"interfaces/GrpcClientOptions.html":{},"interfaces/Metadata.html":{},"interfaces/MetadataValue.html":{},"interfaces/MethodConfig.html":{},"classes/Operation.html":{},"classes/OperationsClient.html":{},"classes/OperationsClientBuilder.html":{},"interfaces/OperationsClientOptions.html":{},"classes/PageDescriptor.html":{},"classes/PagedApiCaller.html":{},"interfaces/ParseResult.html":{},"classes/PathTemplate.html":{},"interfaces/RequestType.html":{},"classes/RetryOptions.html":{},"interfaces/RetryParamsConfig.html":{},"interfaces/Segment.html":{},"interfaces/ServiceConfig.html":{},"interfaces/SimpleCallbackFunction.html":{},"interfaces/SubResponseInfo.html":{},"classes/Task.html":{},"interfaces/TaskCallback.html":{},"interfaces/TaskData.html":{},"interfaces/TaskElement.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["string(this._invocationid",{"_index":751,"title":{},"body":{"classes/BundleExecutor.html":{},"interfaces/BundleOptions.html":{}}}],["strings",{"_index":489,"title":{},"body":{"interfaces/BackoffSettings.html":{},"interfaces/Bindings.html":{},"interfaces/BundlingConfig.html":{},"interfaces/CallOptions.html":{},"classes/CallSettings.html":{},"interfaces/ClientConfig.html":{},"interfaces/MethodConfig.html":{},"interfaces/ParseResult.html":{},"classes/PathTemplate.html":{},"classes/RetryOptions.html":{},"interfaces/RetryParamsConfig.html":{},"interfaces/Segment.html":{},"interfaces/ServiceConfig.html":{},"miscellaneous/functions.html":{}}}],["structure",{"_index":296,"title":{},"body":{"interfaces/BackoffSettings.html":{},"classes/BundleDescriptor.html":{},"interfaces/BundlingConfig.html":{},"interfaces/CallOptions.html":{},"classes/CallSettings.html":{},"interfaces/ClientConfig.html":{},"interfaces/MethodConfig.html":{},"classes/PagedApiCaller.html":{},"classes/RetryOptions.html":{},"interfaces/RetryParamsConfig.html":{},"interfaces/ServiceConfig.html":{},"classes/StreamingApiCaller.html":{},"miscellaneous/functions.html":{}}}],["stub",{"_index":1024,"title":{},"body":{"classes/ClientStub.html":{},"interfaces/ClientStubOptions.html":{},"classes/GoogleProtoFilesRoot.html":{},"classes/GrpcClient.html":{},"interfaces/GrpcClientOptions.html":{},"interfaces/Metadata.html":{},"interfaces/MetadataValue.html":{},"miscellaneous/functions.html":{}}}],["style",{"_index":2245,"title":{},"body":{"contributing.html":{}}}],["sub",{"_index":577,"title":{},"body":{"interfaces/Bindings.html":{},"interfaces/ParseResult.html":{},"classes/PathTemplate.html":{},"interfaces/Segment.html":{}}}],["submit",{"_index":2198,"title":{},"body":{"contributing.html":{}}}],["subresponse",{"_index":1755,"title":{},"body":{"interfaces/SubResponseInfo.html":{},"classes/Task.html":{},"interfaces/TaskCallback.html":{},"interfaces/TaskData.html":{},"interfaces/TaskElement.html":{}}}],["subresponsefield",{"_index":630,"title":{},"body":{"classes/BundleDescriptor.html":{},"interfaces/SubResponseInfo.html":{},"classes/Task.html":{},"interfaces/TaskCallback.html":{},"interfaces/TaskData.html":{},"interfaces/TaskElement.html":{}}}],["subresponseinfo",{"_index":1748,"title":{"interfaces/SubResponseInfo.html":{}},"body":{"interfaces/SubResponseInfo.html":{},"classes/Task.html":{},"interfaces/TaskCallback.html":{},"interfaces/TaskData.html":{},"interfaces/TaskElement.html":{}}}],["subresponseinfo.end",{"_index":1762,"title":{},"body":{"interfaces/SubResponseInfo.html":{},"classes/Task.html":{},"interfaces/TaskCallback.html":{},"interfaces/TaskData.html":{},"interfaces/TaskElement.html":{}}}],["subresponseinfo.field",{"_index":1758,"title":{},"body":{"interfaces/SubResponseInfo.html":{},"classes/Task.html":{},"interfaces/TaskCallback.html":{},"interfaces/TaskData.html":{},"interfaces/TaskElement.html":{}}}],["subresponseinfo.start",{"_index":1759,"title":{},"body":{"interfaces/SubResponseInfo.html":{},"classes/Task.html":{},"interfaces/TaskCallback.html":{},"interfaces/TaskData.html":{},"interfaces/TaskElement.html":{}}}],["subresponses",{"_index":1777,"title":{},"body":{"interfaces/SubResponseInfo.html":{},"classes/Task.html":{},"interfaces/TaskCallback.html":{},"interfaces/TaskData.html":{},"interfaces/TaskElement.html":{}}}],["subsequent",{"_index":227,"title":{},"body":{"interfaces/BackoffSettings.html":{},"interfaces/BundlingConfig.html":{},"interfaces/CallOptions.html":{},"classes/CallSettings.html":{},"interfaces/ClientConfig.html":{},"interfaces/MethodConfig.html":{},"classes/RetryOptions.html":{},"interfaces/RetryParamsConfig.html":{},"interfaces/ServiceConfig.html":{},"miscellaneous/functions.html":{}}}],["subset",{"_index":1756,"title":{},"body":{"interfaces/SubResponseInfo.html":{},"classes/Task.html":{},"interfaces/TaskCallback.html":{},"interfaces/TaskData.html":{},"interfaces/TaskElement.html":{}}}],["substitute",{"_index":2392,"title":{},"body":{"license.html":{}}}],["succeeded",{"_index":1481,"title":{},"body":{"classes/OperationsClient.html":{},"classes/OperationsClientBuilder.html":{},"interfaces/OperationsClientOptions.html":{}}}],["succeeds",{"_index":1155,"title":{},"body":{"interfaces/Duplexify.html":{},"interfaces/DuplexifyConstructor.html":{},"interfaces/DuplexifyOptions.html":{},"classes/StreamProxy.html":{}}}],["success",{"_index":1476,"title":{},"body":{"classes/OperationsClient.html":{},"classes/OperationsClientBuilder.html":{},"interfaces/OperationsClientOptions.html":{}}}],["successful",{"_index":1483,"title":{},"body":{"classes/OperationsClient.html":{},"classes/OperationsClientBuilder.html":{},"interfaces/OperationsClientOptions.html":{}}}],["such",{"_index":798,"title":{},"body":{"classes/BundleExecutor.html":{},"interfaces/BundleOptions.html":{},"interfaces/GRPCCallOtherArgs.html":{},"interfaces/GRPCCallResult.html":{},"interfaces/GaxCall.html":{},"interfaces/GaxCallPromise.html":{},"interfaces/GaxCallStream.html":{},"classes/OperationsClient.html":{},"classes/OperationsClientBuilder.html":{},"interfaces/OperationsClientOptions.html":{},"interfaces/RequestType.html":{},"interfaces/SimpleCallbackFunction.html":{},"interfaces/SubResponseInfo.html":{},"classes/Task.html":{},"interfaces/TaskCallback.html":{},"interfaces/TaskData.html":{},"interfaces/TaskElement.html":{},"index.html":{},"license.html":{}}}],["summing",{"_index":266,"title":{},"body":{"interfaces/BackoffSettings.html":{},"interfaces/BundlingConfig.html":{},"interfaces/CallOptions.html":{},"classes/CallSettings.html":{},"interfaces/ClientConfig.html":{},"interfaces/MethodConfig.html":{},"classes/RetryOptions.html":{},"interfaces/RetryParamsConfig.html":{},"interfaces/ServiceConfig.html":{}}}],["super",{"_index":846,"title":{},"body":{"interfaces/CancellablePromise.html":{},"interfaces/GetOperationCallback.html":{},"classes/OngoingCall.html":{},"classes/OngoingCallPromise.html":{},"classes/Operation.html":{}}}],["super(...args",{"_index":1061,"title":{},"body":{"classes/ClientStub.html":{},"interfaces/ClientStubOptions.html":{},"classes/GoogleProtoFilesRoot.html":{},"classes/GrpcClient.html":{},"interfaces/GrpcClientOptions.html":{},"interfaces/Metadata.html":{},"interfaces/MetadataValue.html":{}}}],["super(undefined",{"_index":1126,"title":{},"body":{"interfaces/Duplexify.html":{},"interfaces/DuplexifyConstructor.html":{},"interfaces/DuplexifyOptions.html":{},"classes/StreamProxy.html":{}}}],["supply",{"_index":1144,"title":{},"body":{"interfaces/Duplexify.html":{},"interfaces/DuplexifyConstructor.html":{},"interfaces/DuplexifyOptions.html":{},"classes/StreamProxy.html":{}}}],["support",{"_index":1145,"title":{},"body":{"interfaces/Duplexify.html":{},"interfaces/DuplexifyConstructor.html":{},"interfaces/DuplexifyOptions.html":{},"classes/OperationsClient.html":{},"classes/OperationsClientBuilder.html":{},"interfaces/OperationsClientOptions.html":{},"classes/PageDescriptor.html":{},"classes/StreamDescriptor.html":{},"classes/StreamProxy.html":{},"changelog.html":{}}}],["supporting",{"_index":2329,"title":{},"body":{"index.html":{}}}],["supposed",{"_index":1990,"title":{},"body":{"changelog.html":{}}}],["suppress",{"_index":194,"title":{},"body":{"interfaces/BackoffSettings.html":{},"interfaces/BundlingConfig.html":{},"interfaces/CallOptions.html":{},"classes/CallSettings.html":{},"interfaces/ClientConfig.html":{},"interfaces/MethodConfig.html":{},"classes/RetryOptions.html":{},"interfaces/RetryParamsConfig.html":{},"interfaces/ServiceConfig.html":{}}}],["sure",{"_index":1244,"title":{},"body":{"interfaces/GetOperationCallback.html":{},"classes/Operation.html":{},"contributing.html":{}}}],["surface",{"_index":2326,"title":{},"body":{"index.html":{}}}],["switch",{"_index":1740,"title":{},"body":{"classes/StreamingApiCaller.html":{}}}],["symbol",{"_index":1323,"title":{},"body":{"interfaces/GetOperationCallback.html":{},"classes/Operation.html":{}}}],["sync(googleprotofilesdir",{"_index":882,"title":{},"body":{"classes/ClientStub.html":{},"interfaces/ClientStubOptions.html":{},"classes/GoogleProtoFilesRoot.html":{},"classes/GrpcClient.html":{},"interfaces/GrpcClientOptions.html":{},"interfaces/Metadata.html":{},"interfaces/MetadataValue.html":{},"miscellaneous/variables.html":{}}}],["synth",{"_index":2069,"title":{},"body":{"changelog.html":{}}}],["synth.metadata",{"_index":2082,"title":{},"body":{"changelog.html":{}}}],["system",{"_index":1853,"title":{},"body":{"changelog.html":{}}}],["system/sample",{"_index":2157,"title":{},"body":{"changelog.html":{}}}],["table",{"_index":2199,"title":{},"body":{"contributing.html":{}}}],["take",{"_index":1014,"title":{},"body":{"classes/ClientStub.html":{},"interfaces/ClientStubOptions.html":{},"interfaces/GRPCCallOtherArgs.html":{},"interfaces/GRPCCallResult.html":{},"interfaces/GaxCall.html":{},"interfaces/GaxCallPromise.html":{},"interfaces/GaxCallStream.html":{},"classes/GoogleProtoFilesRoot.html":{},"classes/GrpcClient.html":{},"interfaces/GrpcClientOptions.html":{},"interfaces/Metadata.html":{},"interfaces/MetadataValue.html":{},"interfaces/RequestType.html":{},"interfaces/SimpleCallbackFunction.html":{},"contributing.html":{}}}],["takes",{"_index":437,"title":{},"body":{"interfaces/BackoffSettings.html":{},"interfaces/BundlingConfig.html":{},"interfaces/CallOptions.html":{},"classes/CallSettings.html":{},"interfaces/ClientConfig.html":{},"interfaces/MethodConfig.html":{},"classes/OperationsClient.html":{},"classes/OperationsClientBuilder.html":{},"interfaces/OperationsClientOptions.html":{},"classes/RetryOptions.html":{},"interfaces/RetryParamsConfig.html":{},"interfaces/ServiceConfig.html":{}}}],["target",{"_index":644,"title":{},"body":{"classes/BundleDescriptor.html":{},"interfaces/Duplexify.html":{},"interfaces/DuplexifyConstructor.html":{},"interfaces/DuplexifyOptions.html":{},"classes/StreamProxy.html":{}}}],["task",{"_index":614,"title":{"classes/Task.html":{}},"body":{"classes/BundleApiCaller.html":{},"classes/BundleExecutor.html":{},"interfaces/BundleOptions.html":{},"interfaces/SubResponseInfo.html":{},"classes/Task.html":{},"interfaces/TaskCallback.html":{},"interfaces/TaskData.html":{},"interfaces/TaskElement.html":{}}}],["task.cancel(id",{"_index":795,"title":{},"body":{"classes/BundleExecutor.html":{},"interfaces/BundleOptions.html":{}}}],["task.extend(bundledfield",{"_index":774,"title":{},"body":{"classes/BundleExecutor.html":{},"interfaces/BundleOptions.html":{}}}],["task.getelementcount",{"_index":770,"title":{},"body":{"classes/BundleExecutor.html":{},"interfaces/BundleOptions.html":{}}}],["task.getrequestbytesize",{"_index":772,"title":{},"body":{"classes/BundleExecutor.html":{},"interfaces/BundleOptions.html":{}}}],["task.run().foreach(id",{"_index":799,"title":{},"body":{"classes/BundleExecutor.html":{},"interfaces/BundleOptions.html":{}}}],["taskcallback",{"_index":613,"title":{"interfaces/TaskCallback.html":{}},"body":{"classes/BundleApiCaller.html":{},"classes/BundleExecutor.html":{},"interfaces/BundleOptions.html":{},"interfaces/SubResponseInfo.html":{},"classes/Task.html":{},"interfaces/TaskCallback.html":{},"interfaces/TaskData.html":{},"interfaces/TaskElement.html":{}}}],["taskdata",{"_index":1752,"title":{"interfaces/TaskData.html":{}},"body":{"interfaces/SubResponseInfo.html":{},"classes/Task.html":{},"interfaces/TaskCallback.html":{},"interfaces/TaskData.html":{},"interfaces/TaskElement.html":{}}}],["taskelement",{"_index":1751,"title":{"interfaces/TaskElement.html":{}},"body":{"interfaces/SubResponseInfo.html":{},"classes/Task.html":{},"interfaces/TaskCallback.html":{},"interfaces/TaskData.html":{},"interfaces/TaskElement.html":{}}}],["template",{"_index":535,"title":{},"body":{"interfaces/Bindings.html":{},"interfaces/ParseResult.html":{},"classes/PathTemplate.html":{},"interfaces/Segment.html":{},"changelog.html":{},"miscellaneous/functions.html":{}}}],["templates",{"_index":2131,"title":{},"body":{"changelog.html":{}}}],["temporary",{"_index":2120,"title":{},"body":{"changelog.html":{}}}],["terminal",{"_index":2420,"title":{},"body":{"miscellaneous/variables.html":{}}}],["test",{"_index":1901,"title":{},"body":{"changelog.html":{},"contributing.html":{}}}],["testing",{"_index":1003,"title":{},"body":{"classes/ClientStub.html":{},"interfaces/ClientStubOptions.html":{},"classes/GoogleProtoFilesRoot.html":{},"classes/GrpcClient.html":{},"interfaces/GrpcClientOptions.html":{},"interfaces/Metadata.html":{},"interfaces/MetadataValue.html":{},"changelog.html":{}}}],["tests",{"_index":1939,"title":{},"body":{"changelog.html":{},"contributing.html":{}}}],["theory",{"_index":2399,"title":{},"body":{"license.html":{}}}],["therefore",{"_index":268,"title":{},"body":{"interfaces/BackoffSettings.html":{},"interfaces/BundlingConfig.html":{},"interfaces/CallOptions.html":{},"classes/CallSettings.html":{},"interfaces/ClientConfig.html":{},"interfaces/MethodConfig.html":{},"classes/RetryOptions.html":{},"interfaces/RetryParamsConfig.html":{},"interfaces/ServiceConfig.html":{}}}],["thing",{"_index":2053,"title":{},"body":{"changelog.html":{}}}],["third",{"_index":1186,"title":{},"body":{"interfaces/GRPCCallOtherArgs.html":{},"interfaces/GRPCCallResult.html":{},"interfaces/GaxCall.html":{},"interfaces/GaxCallPromise.html":{},"interfaces/GaxCallStream.html":{},"interfaces/GetOperationCallback.html":{},"classes/Operation.html":{},"classes/OperationsClient.html":{},"classes/OperationsClientBuilder.html":{},"interfaces/OperationsClientOptions.html":{},"interfaces/RequestType.html":{},"interfaces/SimpleCallbackFunction.html":{}}}],["this._apicall",{"_index":1796,"title":{},"body":{"interfaces/SubResponseInfo.html":{},"classes/Task.html":{},"interfaces/TaskCallback.html":{},"interfaces/TaskData.html":{},"interfaces/TaskElement.html":{}}}],["this._bundledfield",{"_index":1798,"title":{},"body":{"interfaces/SubResponseInfo.html":{},"classes/Task.html":{},"interfaces/TaskCallback.html":{},"interfaces/TaskData.html":{},"interfaces/TaskElement.html":{}}}],["this._callback",{"_index":1131,"title":{},"body":{"interfaces/Duplexify.html":{},"interfaces/DuplexifyConstructor.html":{},"interfaces/DuplexifyOptions.html":{},"classes/StreamProxy.html":{}}}],["this._calloptions",{"_index":1235,"title":{},"body":{"interfaces/GetOperationCallback.html":{},"classes/Operation.html":{}}}],["this._calloptions!.promise",{"_index":1346,"title":{},"body":{"interfaces/GetOperationCallback.html":{},"classes/Operation.html":{}}}],["this._canceloperation(request",{"_index":1626,"title":{},"body":{"classes/OperationsClient.html":{},"classes/OperationsClientBuilder.html":{},"interfaces/OperationsClientOptions.html":{}}}],["this._data",{"_index":1800,"title":{},"body":{"interfaces/SubResponseInfo.html":{},"classes/Task.html":{},"interfaces/TaskCallback.html":{},"interfaces/TaskData.html":{},"interfaces/TaskElement.html":{}}}],["this._deleteoperation(request",{"_index":1627,"title":{},"body":{"classes/OperationsClient.html":{},"classes/OperationsClientBuilder.html":{},"interfaces/OperationsClientOptions.html":{}}}],["this._descriptor",{"_index":731,"title":{},"body":{"classes/BundleExecutor.html":{},"interfaces/BundleOptions.html":{}}}],["this._descriptor.bundledfield",{"_index":747,"title":{},"body":{"classes/BundleExecutor.html":{},"interfaces/BundleOptions.html":{}}}],["this._descriptor.bytelengthfunction(obj",{"_index":758,"title":{},"body":{"classes/BundleExecutor.html":{},"interfaces/BundleOptions.html":{}}}],["this._descriptor.requestdiscriminatorfields",{"_index":736,"title":{},"body":{"classes/BundleExecutor.html":{},"interfaces/BundleOptions.html":{}}}],["this._descriptor.subresponsefield",{"_index":749,"title":{},"body":{"classes/BundleExecutor.html":{},"interfaces/BundleOptions.html":{}}}],["this._getcredentials(options",{"_index":1039,"title":{},"body":{"classes/ClientStub.html":{},"interfaces/ClientStubOptions.html":{},"classes/GoogleProtoFilesRoot.html":{},"classes/GrpcClient.html":{},"interfaces/GrpcClientOptions.html":{},"interfaces/Metadata.html":{},"interfaces/MetadataValue.html":{}}}],["this._getoperation(request",{"_index":1609,"title":{},"body":{"classes/OperationsClient.html":{},"classes/OperationsClientBuilder.html":{},"interfaces/OperationsClientOptions.html":{}}}],["this._invocationid",{"_index":735,"title":{},"body":{"classes/BundleExecutor.html":{},"interfaces/BundleOptions.html":{}}}],["this._invocations",{"_index":734,"title":{},"body":{"classes/BundleExecutor.html":{},"interfaces/BundleOptions.html":{}}}],["this._invocations[callback.id",{"_index":752,"title":{},"body":{"classes/BundleExecutor.html":{},"interfaces/BundleOptions.html":{}}}],["this._invocations[id",{"_index":794,"title":{},"body":{"classes/BundleExecutor.html":{},"interfaces/BundleOptions.html":{}}}],["this._iscancelcalled",{"_index":1132,"title":{},"body":{"interfaces/Duplexify.html":{},"interfaces/DuplexifyConstructor.html":{},"interfaces/DuplexifyOptions.html":{},"classes/StreamProxy.html":{}}}],["this._listenforevents",{"_index":1234,"title":{},"body":{"interfaces/GetOperationCallback.html":{},"classes/Operation.html":{}}}],["this._listoperations",{"_index":1624,"title":{},"body":{"classes/OperationsClient.html":{},"classes/OperationsClientBuilder.html":{},"interfaces/OperationsClientOptions.html":{}}}],["this._maybecleartimeout(bundleid",{"_index":796,"title":{},"body":{"classes/BundleExecutor.html":{},"interfaces/BundleOptions.html":{}}}],["this._options",{"_index":730,"title":{},"body":{"classes/BundleExecutor.html":{},"interfaces/BundleOptions.html":{}}}],["this._options.delaythreshold",{"_index":781,"title":{},"body":{"classes/BundleExecutor.html":{},"interfaces/BundleOptions.html":{}}}],["this._options.elementcountlimit",{"_index":760,"title":{},"body":{"classes/BundleExecutor.html":{},"interfaces/BundleOptions.html":{}}}],["this._options.elementcountthreshold",{"_index":778,"title":{},"body":{"classes/BundleExecutor.html":{},"interfaces/BundleOptions.html":{}}}],["this._options.requestbytelimit",{"_index":762,"title":{},"body":{"classes/BundleExecutor.html":{},"interfaces/BundleOptions.html":{}}}],["this._options.requestbytethreshold",{"_index":780,"title":{},"body":{"classes/BundleExecutor.html":{},"interfaces/BundleOptions.html":{}}}],["this._request",{"_index":1797,"title":{},"body":{"interfaces/SubResponseInfo.html":{},"classes/Task.html":{},"interfaces/TaskCallback.html":{},"interfaces/TaskData.html":{},"interfaces/TaskElement.html":{}}}],["this._runnow(bundleid",{"_index":773,"title":{},"body":{"classes/BundleExecutor.html":{},"interfaces/BundleOptions.html":{}}}],["this._subresponsefield",{"_index":1799,"title":{},"body":{"interfaces/SubResponseInfo.html":{},"classes/Task.html":{},"interfaces/TaskCallback.html":{},"interfaces/TaskData.html":{},"interfaces/TaskElement.html":{}}}],["this._tasks",{"_index":732,"title":{},"body":{"classes/BundleExecutor.html":{},"interfaces/BundleOptions.html":{}}}],["this._tasks[bundleid",{"_index":748,"title":{},"body":{"classes/BundleExecutor.html":{},"interfaces/BundleOptions.html":{}}}],["this._timers",{"_index":733,"title":{},"body":{"classes/BundleExecutor.html":{},"interfaces/BundleOptions.html":{}}}],["this._timers[bundleid",{"_index":782,"title":{},"body":{"classes/BundleExecutor.html":{},"interfaces/BundleOptions.html":{}}}],["this._unpackresponse(grpcop",{"_index":1233,"title":{},"body":{"interfaces/GetOperationCallback.html":{},"classes/Operation.html":{}}}],["this._unpackresponse(this.latestresponse",{"_index":1284,"title":{},"body":{"interfaces/GetOperationCallback.html":{},"classes/Operation.html":{}}}],["this._wrapoperation(apicall",{"_index":1394,"title":{},"body":{"classes/LongrunningApiCaller.html":{}}}],["this.auth",{"_index":915,"title":{},"body":{"classes/ClientStub.html":{},"interfaces/ClientStubOptions.html":{},"classes/GoogleProtoFilesRoot.html":{},"classes/GrpcClient.html":{},"interfaces/GrpcClientOptions.html":{},"interfaces/Metadata.html":{},"interfaces/MetadataValue.html":{},"classes/OperationsClient.html":{},"classes/OperationsClientBuilder.html":{},"interfaces/OperationsClientOptions.html":{}}}],["this.auth.getclient",{"_index":947,"title":{},"body":{"classes/ClientStub.html":{},"interfaces/ClientStubOptions.html":{},"classes/GoogleProtoFilesRoot.html":{},"classes/GrpcClient.html":{},"interfaces/GrpcClientOptions.html":{},"interfaces/Metadata.html":{},"interfaces/MetadataValue.html":{}}}],["this.auth.getprojectid(callback",{"_index":1600,"title":{},"body":{"classes/OperationsClient.html":{},"classes/OperationsClientBuilder.html":{},"interfaces/OperationsClientOptions.html":{}}}],["this.autopaginate",{"_index":314,"title":{},"body":{"interfaces/BackoffSettings.html":{},"interfaces/BundlingConfig.html":{},"interfaces/CallOptions.html":{},"classes/CallSettings.html":{},"interfaces/ClientConfig.html":{},"interfaces/MethodConfig.html":{},"classes/RetryOptions.html":{},"interfaces/RetryParamsConfig.html":{},"interfaces/ServiceConfig.html":{}}}],["this.backoffsettings",{"_index":213,"title":{},"body":{"interfaces/BackoffSettings.html":{},"interfaces/BundlingConfig.html":{},"interfaces/CallOptions.html":{},"classes/CallSettings.html":{},"interfaces/ClientConfig.html":{},"interfaces/GetOperationCallback.html":{},"interfaces/MethodConfig.html":{},"classes/Operation.html":{},"classes/RetryOptions.html":{},"interfaces/RetryParamsConfig.html":{},"interfaces/ServiceConfig.html":{}}}],["this.backoffsettings.initialretrydelaymillis",{"_index":1315,"title":{},"body":{"interfaces/GetOperationCallback.html":{},"classes/Operation.html":{}}}],["this.backoffsettings.maxretrydelaymillis",{"_index":1314,"title":{},"body":{"interfaces/GetOperationCallback.html":{},"classes/Operation.html":{}}}],["this.backoffsettings.retrydelaymultiplier",{"_index":1312,"title":{},"body":{"interfaces/GetOperationCallback.html":{},"classes/Operation.html":{}}}],["this.backoffsettings.totaltimeoutmillis",{"_index":1317,"title":{},"body":{"interfaces/GetOperationCallback.html":{},"classes/Operation.html":{}}}],["this.bundledfield",{"_index":671,"title":{},"body":{"classes/BundleDescriptor.html":{}}}],["this.bundleoptions",{"_index":320,"title":{},"body":{"interfaces/BackoffSettings.html":{},"interfaces/BundlingConfig.html":{},"interfaces/CallOptions.html":{},"classes/CallSettings.html":{},"interfaces/ClientConfig.html":{},"interfaces/MethodConfig.html":{},"classes/RetryOptions.html":{},"interfaces/RetryParamsConfig.html":{},"interfaces/ServiceConfig.html":{}}}],["this.bundler",{"_index":615,"title":{},"body":{"classes/BundleApiCaller.html":{}}}],["this.bundler.schedule(apicall",{"_index":621,"title":{},"body":{"classes/BundleApiCaller.html":{}}}],["this.bytelengthfunction",{"_index":674,"title":{},"body":{"classes/BundleDescriptor.html":{}}}],["this.callback",{"_index":827,"title":{},"body":{"interfaces/CancellablePromise.html":{},"classes/OngoingCall.html":{},"classes/OngoingCallPromise.html":{}}}],["this.callback!(error",{"_index":833,"title":{},"body":{"interfaces/CancellablePromise.html":{},"classes/OngoingCall.html":{},"classes/OngoingCallPromise.html":{}}}],["this.callcanceller.cancel",{"_index":1811,"title":{},"body":{"interfaces/SubResponseInfo.html":{},"classes/Task.html":{},"interfaces/TaskCallback.html":{},"interfaces/TaskData.html":{},"interfaces/TaskElement.html":{}}}],["this.cancel",{"_index":854,"title":{},"body":{"interfaces/CancellablePromise.html":{},"classes/OngoingCall.html":{},"classes/OngoingCallPromise.html":{}}}],["this.cancelfunc",{"_index":830,"title":{},"body":{"interfaces/CancellablePromise.html":{},"classes/OngoingCall.html":{},"classes/OngoingCallPromise.html":{}}}],["this.completed",{"_index":828,"title":{},"body":{"interfaces/CancellablePromise.html":{},"classes/OngoingCall.html":{},"classes/OngoingCallPromise.html":{}}}],["this.completelisteners",{"_index":1227,"title":{},"body":{"interfaces/GetOperationCallback.html":{},"classes/Operation.html":{}}}],["this.currentcallpromise_",{"_index":1257,"title":{},"body":{"interfaces/GetOperationCallback.html":{},"classes/Operation.html":{}}}],["this.currentcallpromise_!.then(responses",{"_index":1287,"title":{},"body":{"interfaces/GetOperationCallback.html":{},"classes/Operation.html":{}}}],["this.currentcallpromise_.cancel",{"_index":1258,"title":{},"body":{"interfaces/GetOperationCallback.html":{},"classes/Operation.html":{}}}],["this.descriptor",{"_index":1738,"title":{},"body":{"classes/StreamingApiCaller.html":{}}}],["this.descriptor.type",{"_index":1741,"title":{},"body":{"classes/StreamingApiCaller.html":{}}}],["this.emit.bind(this",{"_index":1142,"title":{},"body":{"interfaces/Duplexify.html":{},"interfaces/DuplexifyConstructor.html":{},"interfaces/DuplexifyOptions.html":{},"classes/StreamProxy.html":{}}}],["this.forwardevents(stream",{"_index":1168,"title":{},"body":{"interfaces/Duplexify.html":{},"interfaces/DuplexifyConstructor.html":{},"interfaces/DuplexifyOptions.html":{},"classes/StreamProxy.html":{}}}],["this.grpc",{"_index":917,"title":{},"body":{"classes/ClientStub.html":{},"interfaces/ClientStubOptions.html":{},"classes/GoogleProtoFilesRoot.html":{},"classes/GrpcClient.html":{},"interfaces/GrpcClientOptions.html":{},"interfaces/Metadata.html":{},"interfaces/MetadataValue.html":{}}}],["this.grpc.loadpackagedefinition(packagedef",{"_index":957,"title":{},"body":{"classes/ClientStub.html":{},"interfaces/ClientStubOptions.html":{},"classes/GoogleProtoFilesRoot.html":{},"classes/GrpcClient.html":{},"interfaces/GrpcClientOptions.html":{},"interfaces/Metadata.html":{},"interfaces/MetadataValue.html":{}}}],["this.grpc.metadata",{"_index":989,"title":{},"body":{"classes/ClientStub.html":{},"interfaces/ClientStubOptions.html":{},"classes/GoogleProtoFilesRoot.html":{},"classes/GrpcClient.html":{},"interfaces/GrpcClientOptions.html":{},"interfaces/Metadata.html":{},"interfaces/MetadataValue.html":{}}}],["this.grpc.status",{"_index":1021,"title":{},"body":{"classes/ClientStub.html":{},"interfaces/ClientStubOptions.html":{},"classes/GoogleProtoFilesRoot.html":{},"classes/GrpcClient.html":{},"interfaces/GrpcClientOptions.html":{},"interfaces/Metadata.html":{},"interfaces/MetadataValue.html":{}}}],["this.grpcversion",{"_index":918,"title":{},"body":{"classes/ClientStub.html":{},"interfaces/ClientStubOptions.html":{},"classes/GoogleProtoFilesRoot.html":{},"classes/GrpcClient.html":{},"interfaces/GrpcClientOptions.html":{},"interfaces/Metadata.html":{},"interfaces/MetadataValue.html":{}}}],["this.hasactivelisteners",{"_index":1228,"title":{},"body":{"interfaces/GetOperationCallback.html":{},"classes/Operation.html":{}}}],["this.isbundling",{"_index":322,"title":{},"body":{"interfaces/BackoffSettings.html":{},"interfaces/BundlingConfig.html":{},"interfaces/CallOptions.html":{},"classes/CallSettings.html":{},"interfaces/ClientConfig.html":{},"interfaces/MethodConfig.html":{},"classes/RetryOptions.html":{},"interfaces/RetryParamsConfig.html":{},"interfaces/ServiceConfig.html":{}}}],["this.latestresponse",{"_index":1229,"title":{},"body":{"interfaces/GetOperationCallback.html":{},"classes/Operation.html":{}}}],["this.latestresponse.done",{"_index":1283,"title":{},"body":{"interfaces/GetOperationCallback.html":{},"classes/Operation.html":{}}}],["this.latestresponse.metadata",{"_index":1320,"title":{},"body":{"interfaces/GetOperationCallback.html":{},"classes/Operation.html":{}}}],["this.latestresponse.metadata.value",{"_index":1321,"title":{},"body":{"interfaces/GetOperationCallback.html":{},"classes/Operation.html":{}}}],["this.latestresponse.name",{"_index":1261,"title":{},"body":{"interfaces/GetOperationCallback.html":{},"classes/Operation.html":{}}}],["this.loadfromproto(filename",{"_index":980,"title":{},"body":{"classes/ClientStub.html":{},"interfaces/ClientStubOptions.html":{},"classes/GoogleProtoFilesRoot.html":{},"classes/GrpcClient.html":{},"interfaces/GrpcClientOptions.html":{},"interfaces/Metadata.html":{},"interfaces/MetadataValue.html":{}}}],["this.longrunning",{"_index":324,"title":{},"body":{"interfaces/BackoffSettings.html":{},"interfaces/BundlingConfig.html":{},"interfaces/CallOptions.html":{},"classes/CallSettings.html":{},"interfaces/ClientConfig.html":{},"interfaces/MethodConfig.html":{},"classes/RetryOptions.html":{},"interfaces/RetryParamsConfig.html":{},"interfaces/ServiceConfig.html":{}}}],["this.longrunningdescriptor",{"_index":1230,"title":{},"body":{"interfaces/GetOperationCallback.html":{},"classes/LongrunningApiCaller.html":{},"classes/Operation.html":{}}}],["this.longrunningdescriptor.metadatadecoder",{"_index":1292,"title":{},"body":{"interfaces/GetOperationCallback.html":{},"classes/Operation.html":{}}}],["this.longrunningdescriptor.operationsclient",{"_index":1259,"title":{},"body":{"interfaces/GetOperationCallback.html":{},"classes/Operation.html":{}}}],["this.longrunningdescriptor.responsedecoder",{"_index":1291,"title":{},"body":{"interfaces/GetOperationCallback.html":{},"classes/Operation.html":{}}}],["this.match(result",{"_index":589,"title":{},"body":{"interfaces/Bindings.html":{},"interfaces/ParseResult.html":{},"classes/PathTemplate.html":{},"interfaces/Segment.html":{}}}],["this.maxresults",{"_index":317,"title":{},"body":{"interfaces/BackoffSettings.html":{},"interfaces/BundlingConfig.html":{},"interfaces/CallOptions.html":{},"classes/CallSettings.html":{},"interfaces/ClientConfig.html":{},"interfaces/MethodConfig.html":{},"classes/RetryOptions.html":{},"interfaces/RetryParamsConfig.html":{},"interfaces/ServiceConfig.html":{}}}],["this.metadata",{"_index":1232,"title":{},"body":{"interfaces/GetOperationCallback.html":{},"classes/Operation.html":{}}}],["this.metadatabuilder(headers",{"_index":1023,"title":{},"body":{"classes/ClientStub.html":{},"interfaces/ClientStubOptions.html":{},"classes/GoogleProtoFilesRoot.html":{},"classes/GrpcClient.html":{},"interfaces/GrpcClientOptions.html":{},"interfaces/Metadata.html":{},"interfaces/MetadataValue.html":{}}}],["this.metadatadecoder",{"_index":106,"title":{},"body":{"interfaces/AnyDecoder.html":{},"classes/LongRunningDescriptor.html":{}}}],["this.on('error",{"_index":1347,"title":{},"body":{"interfaces/GetOperationCallback.html":{},"classes/Operation.html":{}}}],["this.on('newlistener",{"_index":1253,"title":{},"body":{"interfaces/GetOperationCallback.html":{},"classes/Operation.html":{}}}],["this.on('removelistener",{"_index":1255,"title":{},"body":{"interfaces/GetOperationCallback.html":{},"classes/Operation.html":{}}}],["this.operationsclient",{"_index":104,"title":{},"body":{"interfaces/AnyDecoder.html":{},"classes/LongRunningDescriptor.html":{},"classes/OperationsClient.html":{},"classes/OperationsClientBuilder.html":{},"interfaces/OperationsClientOptions.html":{}}}],["this.otherargs",{"_index":319,"title":{},"body":{"interfaces/BackoffSettings.html":{},"interfaces/BundlingConfig.html":{},"interfaces/CallOptions.html":{},"classes/CallSettings.html":{},"interfaces/ClientConfig.html":{},"interfaces/MethodConfig.html":{},"classes/RetryOptions.html":{},"interfaces/RetryParamsConfig.html":{},"interfaces/ServiceConfig.html":{}}}],["this.otherargs[key",{"_index":347,"title":{},"body":{"interfaces/BackoffSettings.html":{},"interfaces/BundlingConfig.html":{},"interfaces/CallOptions.html":{},"classes/CallSettings.html":{},"interfaces/ClientConfig.html":{},"interfaces/MethodConfig.html":{},"classes/RetryOptions.html":{},"interfaces/RetryParamsConfig.html":{},"interfaces/ServiceConfig.html":{}}}],["this.pagedescriptor",{"_index":1683,"title":{},"body":{"classes/PagedApiCaller.html":{}}}],["this.pagesize",{"_index":336,"title":{},"body":{"interfaces/BackoffSettings.html":{},"interfaces/BundlingConfig.html":{},"interfaces/CallOptions.html":{},"classes/CallSettings.html":{},"interfaces/ClientConfig.html":{},"interfaces/MethodConfig.html":{},"classes/RetryOptions.html":{},"interfaces/RetryParamsConfig.html":{},"interfaces/ServiceConfig.html":{}}}],["this.pagetoken",{"_index":316,"title":{},"body":{"interfaces/BackoffSettings.html":{},"interfaces/BundlingConfig.html":{},"interfaces/CallOptions.html":{},"classes/CallSettings.html":{},"interfaces/ClientConfig.html":{},"interfaces/MethodConfig.html":{},"classes/RetryOptions.html":{},"interfaces/RetryParamsConfig.html":{},"interfaces/ServiceConfig.html":{}}}],["this.parseresult",{"_index":537,"title":{},"body":{"interfaces/Bindings.html":{},"interfaces/ParseResult.html":{},"classes/PathTemplate.html":{},"interfaces/Segment.html":{}}}],["this.parseresult.segments",{"_index":533,"title":{},"body":{"interfaces/Bindings.html":{},"interfaces/ParseResult.html":{},"classes/PathTemplate.html":{},"interfaces/Segment.html":{}}}],["this.parseresult.size",{"_index":532,"title":{},"body":{"interfaces/Bindings.html":{},"interfaces/ParseResult.html":{},"classes/PathTemplate.html":{},"interfaces/Segment.html":{}}}],["this.promise",{"_index":326,"title":{},"body":{"interfaces/BackoffSettings.html":{},"interfaces/BundlingConfig.html":{},"interfaces/CallOptions.html":{},"classes/CallSettings.html":{},"interfaces/CancellablePromise.html":{},"interfaces/ClientConfig.html":{},"classes/ClientStub.html":{},"interfaces/ClientStubOptions.html":{},"classes/GoogleProtoFilesRoot.html":{},"classes/GrpcClient.html":{},"interfaces/GrpcClientOptions.html":{},"interfaces/Metadata.html":{},"interfaces/MetadataValue.html":{},"interfaces/MethodConfig.html":{},"classes/OngoingCall.html":{},"classes/OngoingCallPromise.html":{},"classes/RetryOptions.html":{},"interfaces/RetryParamsConfig.html":{},"interfaces/ServiceConfig.html":{}}}],["this.promise.cancel",{"_index":853,"title":{},"body":{"interfaces/CancellablePromise.html":{},"classes/OngoingCall.html":{},"classes/OngoingCallPromise.html":{}}}],["this.requestdiscriminatorfields",{"_index":672,"title":{},"body":{"classes/BundleDescriptor.html":{}}}],["this.requestpagetokenfield",{"_index":1667,"title":{},"body":{"classes/PageDescriptor.html":{}}}],["this.resourcefield",{"_index":1669,"title":{},"body":{"classes/PageDescriptor.html":{}}}],["this.responsedecoder",{"_index":105,"title":{},"body":{"interfaces/AnyDecoder.html":{},"classes/LongRunningDescriptor.html":{}}}],["this.responsepagetokenfield",{"_index":1668,"title":{},"body":{"classes/PageDescriptor.html":{}}}],["this.result",{"_index":1231,"title":{},"body":{"interfaces/GetOperationCallback.html":{},"classes/Operation.html":{}}}],["this.retry",{"_index":313,"title":{},"body":{"interfaces/BackoffSettings.html":{},"interfaces/BundlingConfig.html":{},"interfaces/CallOptions.html":{},"classes/CallSettings.html":{},"interfaces/ClientConfig.html":{},"interfaces/MethodConfig.html":{},"classes/RetryOptions.html":{},"interfaces/RetryParamsConfig.html":{},"interfaces/ServiceConfig.html":{}}}],["this.retrycodes",{"_index":212,"title":{},"body":{"interfaces/BackoffSettings.html":{},"interfaces/BundlingConfig.html":{},"interfaces/CallOptions.html":{},"classes/CallSettings.html":{},"interfaces/ClientConfig.html":{},"interfaces/MethodConfig.html":{},"classes/RetryOptions.html":{},"interfaces/RetryParamsConfig.html":{},"interfaces/ServiceConfig.html":{}}}],["this.segments.foreach(segment",{"_index":553,"title":{},"body":{"interfaces/Bindings.html":{},"interfaces/ParseResult.html":{},"classes/PathTemplate.html":{},"interfaces/Segment.html":{}}}],["this.setreadable(retrystream",{"_index":1169,"title":{},"body":{"interfaces/Duplexify.html":{},"interfaces/DuplexifyConstructor.html":{},"interfaces/DuplexifyOptions.html":{},"classes/StreamProxy.html":{}}}],["this.setreadable(stream",{"_index":1172,"title":{},"body":{"interfaces/Duplexify.html":{},"interfaces/DuplexifyConstructor.html":{},"interfaces/DuplexifyOptions.html":{},"classes/StreamProxy.html":{}}}],["this.setwritable(stream",{"_index":1170,"title":{},"body":{"interfaces/Duplexify.html":{},"interfaces/DuplexifyConstructor.html":{},"interfaces/DuplexifyOptions.html":{},"classes/StreamProxy.html":{}}}],["this.size",{"_index":551,"title":{},"body":{"interfaces/Bindings.html":{},"interfaces/ParseResult.html":{},"classes/PathTemplate.html":{},"interfaces/Segment.html":{}}}],["this.startpolling_",{"_index":1254,"title":{},"body":{"interfaces/GetOperationCallback.html":{},"classes/Operation.html":{}}}],["this.stream",{"_index":1133,"title":{},"body":{"interfaces/Duplexify.html":{},"interfaces/DuplexifyConstructor.html":{},"interfaces/DuplexifyOptions.html":{},"classes/StreamProxy.html":{}}}],["this.stream.cancel",{"_index":1134,"title":{},"body":{"interfaces/Duplexify.html":{},"interfaces/DuplexifyConstructor.html":{},"interfaces/DuplexifyOptions.html":{},"classes/StreamProxy.html":{}}}],["this.subresponsefield",{"_index":673,"title":{},"body":{"classes/BundleDescriptor.html":{}}}],["this.timeout",{"_index":310,"title":{},"body":{"interfaces/BackoffSettings.html":{},"interfaces/BundlingConfig.html":{},"interfaces/CallOptions.html":{},"classes/CallSettings.html":{},"interfaces/ClientConfig.html":{},"interfaces/MethodConfig.html":{},"classes/RetryOptions.html":{},"interfaces/RetryParamsConfig.html":{},"interfaces/ServiceConfig.html":{}}}],["this.type",{"_index":1130,"title":{},"body":{"interfaces/Duplexify.html":{},"interfaces/DuplexifyConstructor.html":{},"interfaces/DuplexifyOptions.html":{},"classes/StreamDescriptor.html":{},"classes/StreamProxy.html":{}}}],["this['_",{"_index":1593,"title":{},"body":{"classes/OperationsClient.html":{},"classes/OperationsClientBuilder.html":{},"interfaces/OperationsClientOptions.html":{}}}],["this['_listoperations'](request",{"_index":1619,"title":{},"body":{"classes/OperationsClient.html":{},"classes/OperationsClientBuilder.html":{},"interfaces/OperationsClientOptions.html":{}}}],["those",{"_index":331,"title":{},"body":{"interfaces/BackoffSettings.html":{},"interfaces/BundlingConfig.html":{},"interfaces/CallOptions.html":{},"classes/CallSettings.html":{},"interfaces/ClientConfig.html":{},"interfaces/MethodConfig.html":{},"classes/RetryOptions.html":{},"interfaces/RetryParamsConfig.html":{},"interfaces/ServiceConfig.html":{},"interfaces/SubResponseInfo.html":{},"classes/Task.html":{},"interfaces/TaskCallback.html":{},"interfaces/TaskData.html":{},"interfaces/TaskElement.html":{},"miscellaneous/functions.html":{}}}],["three",{"_index":1180,"title":{},"body":{"interfaces/GRPCCallOtherArgs.html":{},"interfaces/GRPCCallResult.html":{},"interfaces/GaxCall.html":{},"interfaces/GaxCallPromise.html":{},"interfaces/GaxCallStream.html":{},"classes/OperationsClient.html":{},"classes/OperationsClientBuilder.html":{},"interfaces/OperationsClientOptions.html":{},"interfaces/RequestType.html":{},"interfaces/SimpleCallbackFunction.html":{}}}],["threshold",{"_index":400,"title":{},"body":{"interfaces/BackoffSettings.html":{},"interfaces/BundlingConfig.html":{},"interfaces/CallOptions.html":{},"classes/CallSettings.html":{},"interfaces/ClientConfig.html":{},"interfaces/MethodConfig.html":{},"classes/RetryOptions.html":{},"interfaces/RetryParamsConfig.html":{},"interfaces/ServiceConfig.html":{}}}],["through",{"_index":1453,"title":{},"body":{"classes/OperationsClient.html":{},"classes/OperationsClientBuilder.html":{},"interfaces/OperationsClientOptions.html":{},"interfaces/SubResponseInfo.html":{},"classes/Task.html":{},"interfaces/TaskCallback.html":{},"interfaces/TaskData.html":{},"interfaces/TaskElement.html":{}}}],["through2",{"_index":2106,"title":{},"body":{"changelog.html":{}}}],["throw",{"_index":391,"title":{},"body":{"interfaces/BackoffSettings.html":{},"interfaces/Bindings.html":{},"classes/BundleApiCaller.html":{},"interfaces/BundlingConfig.html":{},"interfaces/CallOptions.html":{},"classes/CallSettings.html":{},"interfaces/CancellablePromise.html":{},"interfaces/ClientConfig.html":{},"classes/ClientStub.html":{},"interfaces/ClientStubOptions.html":{},"classes/GoogleProtoFilesRoot.html":{},"classes/GrpcClient.html":{},"interfaces/GrpcClientOptions.html":{},"interfaces/Metadata.html":{},"interfaces/MetadataValue.html":{},"interfaces/MethodConfig.html":{},"classes/OngoingCall.html":{},"classes/OngoingCallPromise.html":{},"interfaces/ParseResult.html":{},"classes/PathTemplate.html":{},"classes/RetryOptions.html":{},"interfaces/RetryParamsConfig.html":{},"interfaces/Segment.html":{},"interfaces/ServiceConfig.html":{}}}],["throws",{"_index":544,"title":{},"body":{"interfaces/Bindings.html":{},"interfaces/ParseResult.html":{},"classes/PathTemplate.html":{},"interfaces/Segment.html":{}}}],["time",{"_index":216,"title":{},"body":{"interfaces/BackoffSettings.html":{},"classes/BundleExecutor.html":{},"interfaces/BundleOptions.html":{},"interfaces/BundlingConfig.html":{},"interfaces/CallOptions.html":{},"classes/CallSettings.html":{},"interfaces/ClientConfig.html":{},"interfaces/MethodConfig.html":{},"classes/OperationsClient.html":{},"classes/OperationsClientBuilder.html":{},"interfaces/OperationsClientOptions.html":{},"classes/PagedApiCaller.html":{},"classes/RetryOptions.html":{},"interfaces/RetryParamsConfig.html":{},"interfaces/ServiceConfig.html":{},"changelog.html":{},"miscellaneous/functions.html":{}}}],["timeout",{"_index":150,"title":{},"body":{"interfaces/BackoffSettings.html":{},"classes/BundleExecutor.html":{},"interfaces/BundleOptions.html":{},"interfaces/BundlingConfig.html":{},"interfaces/CallOptions.html":{},"classes/CallSettings.html":{},"interfaces/ClientConfig.html":{},"interfaces/GetOperationCallback.html":{},"interfaces/MethodConfig.html":{},"classes/Operation.html":{},"classes/OperationsClient.html":{},"classes/OperationsClientBuilder.html":{},"interfaces/OperationsClientOptions.html":{},"classes/RetryOptions.html":{},"interfaces/RetryParamsConfig.html":{},"interfaces/ServiceConfig.html":{},"changelog.html":{},"miscellaneous/functions.html":{}}}],["timeout_millis",{"_index":460,"title":{},"body":{"interfaces/BackoffSettings.html":{},"interfaces/BundlingConfig.html":{},"interfaces/CallOptions.html":{},"classes/CallSettings.html":{},"interfaces/ClientConfig.html":{},"interfaces/MethodConfig.html":{},"classes/RetryOptions.html":{},"interfaces/RetryParamsConfig.html":{},"interfaces/ServiceConfig.html":{}}}],["timeouts",{"_index":2186,"title":{},"body":{"changelog.html":{}}}],["timer",{"_index":685,"title":{},"body":{"classes/BundleExecutor.html":{},"interfaces/BundleOptions.html":{}}}],["timerid",{"_index":789,"title":{},"body":{"classes/BundleExecutor.html":{},"interfaces/BundleOptions.html":{}}}],["timers",{"_index":679,"title":{},"body":{"classes/BundleExecutor.html":{},"interfaces/BundleOptions.html":{}}}],["tmp",{"_index":582,"title":{},"body":{"interfaces/Bindings.html":{},"interfaces/ParseResult.html":{},"classes/PathTemplate.html":{},"interfaces/Segment.html":{}}}],["tmp.segments",{"_index":585,"title":{},"body":{"interfaces/Bindings.html":{},"interfaces/ParseResult.html":{},"classes/PathTemplate.html":{},"interfaces/Segment.html":{}}}],["todo",{"_index":896,"title":{},"body":{"classes/ClientStub.html":{},"interfaces/ClientStubOptions.html":{},"interfaces/Duplexify.html":{},"interfaces/DuplexifyConstructor.html":{},"interfaces/DuplexifyOptions.html":{},"classes/GoogleProtoFilesRoot.html":{},"classes/GrpcClient.html":{},"interfaces/GrpcClientOptions.html":{},"interfaces/Metadata.html":{},"interfaces/MetadataValue.html":{},"classes/StreamDescriptor.html":{},"classes/StreamProxy.html":{}}}],["together",{"_index":647,"title":{},"body":{"classes/BundleDescriptor.html":{},"miscellaneous/functions.html":{}}}],["token",{"_index":303,"title":{},"body":{"interfaces/BackoffSettings.html":{},"interfaces/BundlingConfig.html":{},"interfaces/CallOptions.html":{},"classes/CallSettings.html":{},"interfaces/ClientConfig.html":{},"interfaces/MethodConfig.html":{},"classes/RetryOptions.html":{},"interfaces/RetryParamsConfig.html":{},"interfaces/ServiceConfig.html":{},"changelog.html":{}}}],["tools",{"_index":2080,"title":{},"body":{"changelog.html":{}}}],["toplevel",{"_index":966,"title":{},"body":{"classes/ClientStub.html":{},"interfaces/ClientStubOptions.html":{},"classes/GoogleProtoFilesRoot.html":{},"classes/GrpcClient.html":{},"interfaces/GrpcClientOptions.html":{},"interfaces/Metadata.html":{},"interfaces/MetadataValue.html":{}}}],["tort",{"_index":2402,"title":{},"body":{"license.html":{}}}],["total",{"_index":234,"title":{},"body":{"interfaces/BackoffSettings.html":{},"interfaces/BundlingConfig.html":{},"interfaces/CallOptions.html":{},"classes/CallSettings.html":{},"interfaces/ClientConfig.html":{},"interfaces/GetOperationCallback.html":{},"interfaces/MethodConfig.html":{},"classes/Operation.html":{},"classes/RetryOptions.html":{},"interfaces/RetryParamsConfig.html":{},"interfaces/ServiceConfig.html":{},"classes/Task.html":{},"miscellaneous/functions.html":{}}}],["total_timeout_millis",{"_index":459,"title":{},"body":{"interfaces/BackoffSettings.html":{},"interfaces/BundlingConfig.html":{},"interfaces/CallOptions.html":{},"classes/CallSettings.html":{},"interfaces/ClientConfig.html":{},"interfaces/MethodConfig.html":{},"classes/RetryOptions.html":{},"interfaces/RetryParamsConfig.html":{},"interfaces/ServiceConfig.html":{},"miscellaneous/functions.html":{}}}],["totaltimeoutmillis",{"_index":122,"title":{},"body":{"interfaces/BackoffSettings.html":{},"interfaces/BundlingConfig.html":{},"interfaces/CallOptions.html":{},"classes/CallSettings.html":{},"interfaces/ClientConfig.html":{},"interfaces/MethodConfig.html":{},"classes/RetryOptions.html":{},"interfaces/RetryParamsConfig.html":{},"interfaces/ServiceConfig.html":{},"miscellaneous/functions.html":{}}}],["track",{"_index":1238,"title":{},"body":{"interfaces/GetOperationCallback.html":{},"classes/Operation.html":{}}}],["transform",{"_index":1662,"title":{},"body":{"classes/PageDescriptor.html":{}}}],["transient",{"_index":157,"title":{},"body":{"interfaces/BackoffSettings.html":{},"interfaces/BundlingConfig.html":{},"interfaces/CallOptions.html":{},"classes/CallSettings.html":{},"interfaces/ClientConfig.html":{},"interfaces/MethodConfig.html":{},"classes/RetryOptions.html":{},"interfaces/RetryParamsConfig.html":{},"interfaces/ServiceConfig.html":{},"miscellaneous/functions.html":{}}}],["transparent",{"_index":297,"title":{},"body":{"interfaces/BackoffSettings.html":{},"interfaces/BundlingConfig.html":{},"interfaces/CallOptions.html":{},"classes/CallSettings.html":{},"interfaces/ClientConfig.html":{},"interfaces/MethodConfig.html":{},"classes/RetryOptions.html":{},"interfaces/RetryParamsConfig.html":{},"interfaces/ServiceConfig.html":{}}}],["traversal",{"_index":638,"title":{},"body":{"classes/BundleDescriptor.html":{},"miscellaneous/functions.html":{}}}],["true",{"_index":315,"title":{},"body":{"interfaces/BackoffSettings.html":{},"interfaces/Bindings.html":{},"interfaces/BundlingConfig.html":{},"interfaces/CallOptions.html":{},"classes/CallSettings.html":{},"interfaces/CancellablePromise.html":{},"interfaces/ClientConfig.html":{},"classes/ClientStub.html":{},"interfaces/ClientStubOptions.html":{},"interfaces/Duplexify.html":{},"interfaces/DuplexifyConstructor.html":{},"interfaces/DuplexifyOptions.html":{},"interfaces/GetOperationCallback.html":{},"classes/GoogleProtoFilesRoot.html":{},"classes/GrpcClient.html":{},"interfaces/GrpcClientOptions.html":{},"interfaces/Metadata.html":{},"interfaces/MetadataValue.html":{},"interfaces/MethodConfig.html":{},"classes/OngoingCall.html":{},"classes/OngoingCallPromise.html":{},"classes/Operation.html":{},"classes/PageDescriptor.html":{},"interfaces/ParseResult.html":{},"classes/PathTemplate.html":{},"classes/RetryOptions.html":{},"interfaces/RetryParamsConfig.html":{},"interfaces/Segment.html":{},"interfaces/ServiceConfig.html":{},"classes/StreamProxy.html":{},"interfaces/SubResponseInfo.html":{},"classes/Task.html":{},"interfaces/TaskCallback.html":{},"interfaces/TaskData.html":{},"interfaces/TaskElement.html":{}}}],["tsconfig",{"_index":2116,"title":{},"body":{"changelog.html":{}}}],["tslint:disable",{"_index":280,"title":{},"body":{"interfaces/BackoffSettings.html":{},"interfaces/BundlingConfig.html":{},"interfaces/CallOptions.html":{},"classes/CallSettings.html":{},"interfaces/CancellablePromise.html":{},"interfaces/ClientConfig.html":{},"classes/ClientStub.html":{},"interfaces/ClientStubOptions.html":{},"interfaces/GetOperationCallback.html":{},"classes/GoogleProtoFilesRoot.html":{},"classes/GrpcClient.html":{},"interfaces/GrpcClientOptions.html":{},"interfaces/Metadata.html":{},"interfaces/MetadataValue.html":{},"interfaces/MethodConfig.html":{},"classes/OngoingCall.html":{},"classes/OngoingCallPromise.html":{},"classes/Operation.html":{},"classes/OperationsClient.html":{},"classes/OperationsClientBuilder.html":{},"interfaces/OperationsClientOptions.html":{},"classes/RetryOptions.html":{},"interfaces/RetryParamsConfig.html":{},"interfaces/ServiceConfig.html":{},"interfaces/SubResponseInfo.html":{},"classes/Task.html":{},"interfaces/TaskCallback.html":{},"interfaces/TaskData.html":{},"interfaces/TaskElement.html":{}}}],["turned",{"_index":1876,"title":{},"body":{"changelog.html":{}}}],["two",{"_index":438,"title":{},"body":{"interfaces/BackoffSettings.html":{},"interfaces/BundlingConfig.html":{},"interfaces/CallOptions.html":{},"classes/CallSettings.html":{},"interfaces/ClientConfig.html":{},"interfaces/MethodConfig.html":{},"classes/RetryOptions.html":{},"interfaces/RetryParamsConfig.html":{},"interfaces/ServiceConfig.html":{},"contributing.html":{}}}],["type",{"_index":31,"title":{},"body":{"interfaces/APICaller.html":{},"interfaces/AnyDecoder.html":{},"interfaces/ApiCallerSettings.html":{},"interfaces/BackoffSettings.html":{},"classes/BundleApiCaller.html":{},"classes/BundleDescriptor.html":{},"classes/BundleExecutor.html":{},"interfaces/BundleOptions.html":{},"interfaces/BundlingConfig.html":{},"interfaces/CallOptions.html":{},"classes/CallSettings.html":{},"interfaces/ClientConfig.html":{},"classes/ClientStub.html":{},"interfaces/ClientStubOptions.html":{},"interfaces/Descriptor.html":{},"interfaces/Duplexify.html":{},"interfaces/DuplexifyConstructor.html":{},"interfaces/DuplexifyOptions.html":{},"interfaces/GRPCCallOtherArgs.html":{},"interfaces/GRPCCallResult.html":{},"interfaces/GaxCall.html":{},"interfaces/GaxCallPromise.html":{},"interfaces/GaxCallStream.html":{},"interfaces/GetOperationCallback.html":{},"classes/GoogleError.html":{},"classes/GoogleProtoFilesRoot.html":{},"classes/GrpcClient.html":{},"interfaces/GrpcClientOptions.html":{},"classes/LongRunningDescriptor.html":{},"classes/LongrunningApiCaller.html":{},"interfaces/Metadata.html":{},"interfaces/MetadataValue.html":{},"interfaces/MethodConfig.html":{},"classes/NormalApiCaller.html":{},"classes/OngoingCall.html":{},"classes/OngoingCallPromise.html":{},"classes/Operation.html":{},"classes/OperationsClient.html":{},"classes/OperationsClientBuilder.html":{},"interfaces/OperationsClientOptions.html":{},"classes/PageDescriptor.html":{},"classes/PagedApiCaller.html":{},"interfaces/ParseResult.html":{},"classes/PathTemplate.html":{},"interfaces/RequestType.html":{},"classes/RetryOptions.html":{},"interfaces/RetryParamsConfig.html":{},"interfaces/Segment.html":{},"interfaces/ServiceConfig.html":{},"interfaces/SimpleCallbackFunction.html":{},"classes/StreamDescriptor.html":{},"classes/StreamProxy.html":{},"classes/StreamingApiCaller.html":{},"interfaces/SubResponseInfo.html":{},"classes/Task.html":{},"interfaces/TaskCallback.html":{},"interfaces/TaskData.html":{},"changelog.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["typealiases",{"_index":2411,"title":{"miscellaneous/typealiases.html":{}},"body":{}}],["typedef",{"_index":148,"title":{},"body":{"interfaces/BackoffSettings.html":{},"interfaces/BundlingConfig.html":{},"interfaces/CallOptions.html":{},"classes/CallSettings.html":{},"interfaces/ClientConfig.html":{},"interfaces/MethodConfig.html":{},"classes/RetryOptions.html":{},"interfaces/RetryParamsConfig.html":{},"interfaces/ServiceConfig.html":{}}}],["typeerror",{"_index":545,"title":{},"body":{"interfaces/Bindings.html":{},"interfaces/ParseResult.html":{},"classes/PathTemplate.html":{},"interfaces/Segment.html":{}}}],["typeerror(msg",{"_index":569,"title":{},"body":{"interfaces/Bindings.html":{},"interfaces/ParseResult.html":{},"classes/PathTemplate.html":{},"interfaces/Segment.html":{}}}],["typeof",{"_index":389,"title":{},"body":{"interfaces/BackoffSettings.html":{},"classes/BundleDescriptor.html":{},"interfaces/BundlingConfig.html":{},"interfaces/CallOptions.html":{},"classes/CallSettings.html":{},"interfaces/ClientConfig.html":{},"classes/ClientStub.html":{},"interfaces/ClientStubOptions.html":{},"classes/GoogleProtoFilesRoot.html":{},"classes/GrpcClient.html":{},"interfaces/GrpcClientOptions.html":{},"interfaces/Metadata.html":{},"interfaces/MetadataValue.html":{},"interfaces/MethodConfig.html":{},"classes/RetryOptions.html":{},"interfaces/RetryParamsConfig.html":{},"interfaces/ServiceConfig.html":{},"interfaces/SubResponseInfo.html":{},"classes/Task.html":{},"interfaces/TaskCallback.html":{},"interfaces/TaskData.html":{},"interfaces/TaskElement.html":{}}}],["types",{"_index":1184,"title":{},"body":{"interfaces/GRPCCallOtherArgs.html":{},"interfaces/GRPCCallResult.html":{},"interfaces/GaxCall.html":{},"interfaces/GaxCallPromise.html":{},"interfaces/GaxCallStream.html":{},"interfaces/RequestType.html":{},"interfaces/SimpleCallbackFunction.html":{},"changelog.html":{}}}],["types/duplexify",{"_index":1914,"title":{},"body":{"changelog.html":{}}}],["types/globby",{"_index":2179,"title":{},"body":{"changelog.html":{}}}],["types/semver",{"_index":1899,"title":{},"body":{"changelog.html":{}}}],["types/sinon",{"_index":2036,"title":{},"body":{"changelog.html":{}}}],["types/source",{"_index":1928,"title":{},"body":{"changelog.html":{}}}],["typescript",{"_index":1897,"title":{},"body":{"changelog.html":{}}}],["typical",{"_index":2286,"title":{},"body":{"miscellaneous/functions.html":{}}}],["typically",{"_index":140,"title":{},"body":{"interfaces/BackoffSettings.html":{},"interfaces/BundlingConfig.html":{},"interfaces/CallOptions.html":{},"classes/CallSettings.html":{},"interfaces/ClientConfig.html":{},"interfaces/MethodConfig.html":{},"classes/RetryOptions.html":{},"interfaces/RetryParamsConfig.html":{},"interfaces/ServiceConfig.html":{},"miscellaneous/functions.html":{}}}],["typo",{"_index":2190,"title":{},"body":{"changelog.html":{}}}],["unamed",{"_index":90,"title":{},"body":{"interfaces/AnyDecoder.html":{},"interfaces/DuplexifyConstructor.html":{},"interfaces/GaxCall.html":{},"interfaces/GaxCallPromise.html":{},"interfaces/GaxCallStream.html":{},"interfaces/GetOperationCallback.html":{},"interfaces/SimpleCallbackFunction.html":{}}}],["unary",{"_index":1397,"title":{},"body":{"classes/NormalApiCaller.html":{}}}],["unarycall",{"_index":1197,"title":{},"body":{"interfaces/GRPCCallOtherArgs.html":{},"interfaces/GRPCCallResult.html":{},"interfaces/GaxCall.html":{},"interfaces/GaxCallPromise.html":{},"interfaces/GaxCallStream.html":{},"classes/PagedApiCaller.html":{},"interfaces/RequestType.html":{},"interfaces/SimpleCallbackFunction.html":{},"miscellaneous/typealiases.html":{}}}],["unavailable",{"_index":467,"title":{},"body":{"interfaces/BackoffSettings.html":{},"interfaces/BundlingConfig.html":{},"interfaces/CallOptions.html":{},"classes/CallSettings.html":{},"interfaces/ClientConfig.html":{},"interfaces/MethodConfig.html":{},"classes/RetryOptions.html":{},"interfaces/RetryParamsConfig.html":{},"interfaces/ServiceConfig.html":{},"miscellaneous/functions.html":{}}}],["undefined",{"_index":78,"title":{},"body":{"interfaces/APICaller.html":{},"interfaces/ApiCallerSettings.html":{},"interfaces/BackoffSettings.html":{},"classes/BundleExecutor.html":{},"interfaces/BundleOptions.html":{},"interfaces/BundlingConfig.html":{},"interfaces/CallOptions.html":{},"classes/CallSettings.html":{},"interfaces/CancellablePromise.html":{},"interfaces/ClientConfig.html":{},"interfaces/Duplexify.html":{},"interfaces/DuplexifyConstructor.html":{},"interfaces/DuplexifyOptions.html":{},"interfaces/GRPCCallOtherArgs.html":{},"interfaces/GRPCCallResult.html":{},"interfaces/GaxCall.html":{},"interfaces/GaxCallPromise.html":{},"interfaces/GaxCallStream.html":{},"classes/LongrunningApiCaller.html":{},"interfaces/MethodConfig.html":{},"classes/OngoingCall.html":{},"classes/OngoingCallPromise.html":{},"classes/OperationsClient.html":{},"classes/OperationsClientBuilder.html":{},"interfaces/OperationsClientOptions.html":{},"classes/PagedApiCaller.html":{},"interfaces/RequestType.html":{},"classes/RetryOptions.html":{},"interfaces/RetryParamsConfig.html":{},"interfaces/ServiceConfig.html":{},"interfaces/SimpleCallbackFunction.html":{},"classes/StreamProxy.html":{},"interfaces/SubResponseInfo.html":{},"classes/Task.html":{},"interfaces/TaskCallback.html":{},"interfaces/TaskData.html":{},"interfaces/TaskElement.html":{}}}],["under",{"_index":269,"title":{},"body":{"interfaces/BackoffSettings.html":{},"interfaces/BundlingConfig.html":{},"interfaces/CallOptions.html":{},"classes/CallSettings.html":{},"interfaces/ClientConfig.html":{},"classes/ClientStub.html":{},"interfaces/ClientStubOptions.html":{},"classes/GoogleProtoFilesRoot.html":{},"classes/GrpcClient.html":{},"interfaces/GrpcClientOptions.html":{},"interfaces/Metadata.html":{},"interfaces/MetadataValue.html":{},"interfaces/MethodConfig.html":{},"classes/RetryOptions.html":{},"interfaces/RetryParamsConfig.html":{},"interfaces/ServiceConfig.html":{}}}],["underlying",{"_index":1614,"title":{},"body":{"classes/OperationsClient.html":{},"classes/OperationsClientBuilder.html":{},"interfaces/OperationsClientOptions.html":{}}}],["unify",{"_index":1156,"title":{},"body":{"interfaces/Duplexify.html":{},"interfaces/DuplexifyConstructor.html":{},"interfaces/DuplexifyOptions.html":{},"classes/StreamProxy.html":{}}}],["unimplemented",{"_index":1522,"title":{},"body":{"classes/OperationsClient.html":{},"classes/OperationsClientBuilder.html":{},"interfaces/OperationsClientOptions.html":{}}}],["unique",{"_index":682,"title":{},"body":{"classes/BundleExecutor.html":{},"interfaces/BundleOptions.html":{}}}],["unknown",{"_index":1746,"title":{},"body":{"classes/StreamingApiCaller.html":{}}}],["unpacked",{"_index":1270,"title":{},"body":{"interfaces/GetOperationCallback.html":{},"classes/Operation.html":{}}}],["unpacking",{"_index":1224,"title":{},"body":{"interfaces/GetOperationCallback.html":{},"classes/LongrunningApiCaller.html":{},"classes/Operation.html":{},"miscellaneous/functions.html":{}}}],["unpin",{"_index":1882,"title":{},"body":{"changelog.html":{}}}],["unprocessed",{"_index":1188,"title":{},"body":{"interfaces/GRPCCallOtherArgs.html":{},"interfaces/GRPCCallResult.html":{},"interfaces/GaxCall.html":{},"interfaces/GaxCallPromise.html":{},"interfaces/GaxCallStream.html":{},"interfaces/RequestType.html":{},"interfaces/SimpleCallbackFunction.html":{}}}],["unroll",{"_index":181,"title":{},"body":{"interfaces/BackoffSettings.html":{},"interfaces/BundlingConfig.html":{},"interfaces/CallOptions.html":{},"classes/CallSettings.html":{},"interfaces/ClientConfig.html":{},"interfaces/MethodConfig.html":{},"classes/RetryOptions.html":{},"interfaces/RetryParamsConfig.html":{},"interfaces/ServiceConfig.html":{}}}],["unrolling",{"_index":167,"title":{},"body":{"interfaces/BackoffSettings.html":{},"interfaces/BundlingConfig.html":{},"interfaces/CallOptions.html":{},"classes/CallSettings.html":{},"interfaces/ClientConfig.html":{},"interfaces/MethodConfig.html":{},"classes/RetryOptions.html":{},"interfaces/RetryParamsConfig.html":{},"interfaces/ServiceConfig.html":{}}}],["unsupported",{"_index":370,"title":{},"body":{"interfaces/BackoffSettings.html":{},"interfaces/BundlingConfig.html":{},"interfaces/CallOptions.html":{},"classes/CallSettings.html":{},"interfaces/ClientConfig.html":{},"interfaces/MethodConfig.html":{},"classes/RetryOptions.html":{},"interfaces/RetryParamsConfig.html":{},"interfaces/ServiceConfig.html":{},"miscellaneous/functions.html":{}}}],["unused",{"_index":1953,"title":{},"body":{"changelog.html":{}}}],["up",{"_index":1033,"title":{},"body":{"classes/ClientStub.html":{},"interfaces/ClientStubOptions.html":{},"interfaces/GRPCCallOtherArgs.html":{},"interfaces/GRPCCallResult.html":{},"interfaces/GaxCall.html":{},"interfaces/GaxCallPromise.html":{},"interfaces/GaxCallStream.html":{},"classes/GoogleProtoFilesRoot.html":{},"classes/GrpcClient.html":{},"interfaces/GrpcClientOptions.html":{},"interfaces/Metadata.html":{},"interfaces/MetadataValue.html":{},"interfaces/RequestType.html":{},"interfaces/SimpleCallbackFunction.html":{},"changelog.html":{}}}],["upack",{"_index":86,"title":{},"body":{"interfaces/AnyDecoder.html":{},"classes/LongRunningDescriptor.html":{}}}],["update",{"_index":1845,"title":{},"body":{"changelog.html":{}}}],["updated",{"_index":1262,"title":{},"body":{"interfaces/GetOperationCallback.html":{},"classes/Operation.html":{}}}],["updates",{"_index":2098,"title":{},"body":{"changelog.html":{}}}],["upgrade",{"_index":1854,"title":{},"body":{"changelog.html":{}}}],["uploading",{"_index":2146,"title":{},"body":{"changelog.html":{}}}],["upon",{"_index":207,"title":{},"body":{"interfaces/BackoffSettings.html":{},"interfaces/BundlingConfig.html":{},"interfaces/CallOptions.html":{},"classes/CallSettings.html":{},"interfaces/ClientConfig.html":{},"interfaces/MethodConfig.html":{},"classes/RetryOptions.html":{},"interfaces/RetryParamsConfig.html":{},"interfaces/ServiceConfig.html":{},"miscellaneous/functions.html":{}}}],["usage",{"_index":2287,"title":{},"body":{"miscellaneous/functions.html":{}}}],["use",{"_index":373,"title":{},"body":{"interfaces/BackoffSettings.html":{},"interfaces/BundlingConfig.html":{},"interfaces/CallOptions.html":{},"classes/CallSettings.html":{},"interfaces/ClientConfig.html":{},"classes/ClientStub.html":{},"interfaces/ClientStubOptions.html":{},"interfaces/GetOperationCallback.html":{},"classes/GoogleProtoFilesRoot.html":{},"classes/GrpcClient.html":{},"interfaces/GrpcClientOptions.html":{},"interfaces/Metadata.html":{},"interfaces/MetadataValue.html":{},"interfaces/MethodConfig.html":{},"classes/Operation.html":{},"classes/OperationsClient.html":{},"classes/OperationsClientBuilder.html":{},"interfaces/OperationsClientOptions.html":{},"classes/RetryOptions.html":{},"interfaces/RetryParamsConfig.html":{},"interfaces/ServiceConfig.html":{},"changelog.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{}}}],["used",{"_index":132,"title":{},"body":{"interfaces/BackoffSettings.html":{},"classes/BundleDescriptor.html":{},"interfaces/BundlingConfig.html":{},"interfaces/CallOptions.html":{},"classes/CallSettings.html":{},"interfaces/CancellablePromise.html":{},"interfaces/ClientConfig.html":{},"classes/ClientStub.html":{},"interfaces/ClientStubOptions.html":{},"interfaces/GRPCCallOtherArgs.html":{},"interfaces/GRPCCallResult.html":{},"interfaces/GaxCall.html":{},"interfaces/GaxCallPromise.html":{},"interfaces/GaxCallStream.html":{},"interfaces/GetOperationCallback.html":{},"classes/GoogleProtoFilesRoot.html":{},"classes/GrpcClient.html":{},"interfaces/GrpcClientOptions.html":{},"classes/LongrunningApiCaller.html":{},"interfaces/Metadata.html":{},"interfaces/MetadataValue.html":{},"interfaces/MethodConfig.html":{},"classes/OngoingCall.html":{},"classes/OngoingCallPromise.html":{},"classes/Operation.html":{},"classes/OperationsClient.html":{},"classes/OperationsClientBuilder.html":{},"interfaces/OperationsClientOptions.html":{},"interfaces/RequestType.html":{},"classes/RetryOptions.html":{},"interfaces/RetryParamsConfig.html":{},"interfaces/ServiceConfig.html":{},"interfaces/SimpleCallbackFunction.html":{},"interfaces/SubResponseInfo.html":{},"classes/Task.html":{},"interfaces/TaskCallback.html":{},"interfaces/TaskData.html":{},"interfaces/TaskElement.html":{},"changelog.html":{},"miscellaneous/functions.html":{},"license.html":{}}}],["useful",{"_index":1190,"title":{},"body":{"interfaces/GRPCCallOtherArgs.html":{},"interfaces/GRPCCallResult.html":{},"interfaces/GaxCall.html":{},"interfaces/GaxCallPromise.html":{},"interfaces/GaxCallStream.html":{},"interfaces/RequestType.html":{},"interfaces/SimpleCallbackFunction.html":{}}}],["user",{"_index":298,"title":{},"body":{"interfaces/BackoffSettings.html":{},"classes/BundleDescriptor.html":{},"interfaces/BundlingConfig.html":{},"interfaces/CallOptions.html":{},"classes/CallSettings.html":{},"interfaces/ClientConfig.html":{},"interfaces/MethodConfig.html":{},"classes/RetryOptions.html":{},"interfaces/RetryParamsConfig.html":{},"interfaces/ServiceConfig.html":{}}}],["user's",{"_index":1137,"title":{},"body":{"interfaces/Duplexify.html":{},"interfaces/DuplexifyConstructor.html":{},"interfaces/DuplexifyOptions.html":{},"classes/StreamProxy.html":{}}}],["users",{"_index":1191,"title":{},"body":{"interfaces/GRPCCallOtherArgs.html":{},"interfaces/GRPCCallResult.html":{},"interfaces/GaxCall.html":{},"interfaces/GaxCallPromise.html":{},"interfaces/GaxCallStream.html":{},"interfaces/RequestType.html":{},"interfaces/SimpleCallbackFunction.html":{}}}],["uses",{"_index":603,"title":{},"body":{"classes/BundleApiCaller.html":{},"classes/BundleDescriptor.html":{},"classes/BundleExecutor.html":{},"interfaces/BundleOptions.html":{},"index.html":{}}}],["using",{"_index":573,"title":{},"body":{"interfaces/Bindings.html":{},"interfaces/GetOperationCallback.html":{},"classes/Operation.html":{},"interfaces/ParseResult.html":{},"classes/PathTemplate.html":{},"interfaces/Segment.html":{},"changelog.html":{}}}],["util",{"_index":521,"title":{},"body":{"interfaces/Bindings.html":{},"interfaces/ParseResult.html":{},"classes/PathTemplate.html":{},"interfaces/Segment.html":{}}}],["util.format",{"_index":565,"title":{},"body":{"interfaces/Bindings.html":{},"interfaces/ParseResult.html":{},"classes/PathTemplate.html":{},"interfaces/Segment.html":{}}}],["v",{"_index":996,"title":{},"body":{"classes/ClientStub.html":{},"interfaces/ClientStubOptions.html":{},"classes/GoogleProtoFilesRoot.html":{},"classes/GrpcClient.html":{},"interfaces/GrpcClientOptions.html":{},"interfaces/Metadata.html":{},"interfaces/MetadataValue.html":{}}}],["v0.1.0",{"_index":2003,"title":{},"body":{"changelog.html":{}}}],["v0.18.0",{"_index":2167,"title":{},"body":{"changelog.html":{}}}],["v0.2.0",{"_index":2001,"title":{},"body":{"changelog.html":{}}}],["v0.21.0",{"_index":2093,"title":{},"body":{"changelog.html":{}}}],["v0.22.0",{"_index":2089,"title":{},"body":{"changelog.html":{}}}],["v0.22.1",{"_index":2083,"title":{},"body":{"changelog.html":{}}}],["v0.23.0",{"_index":2028,"title":{},"body":{"changelog.html":{}}}],["v0.24.0",{"_index":2022,"title":{},"body":{"changelog.html":{}}}],["v0.25.0",{"_index":2014,"title":{},"body":{"changelog.html":{}}}],["v0.25.1",{"_index":1983,"title":{},"body":{"changelog.html":{}}}],["v0.25.2",{"_index":1966,"title":{},"body":{"changelog.html":{}}}],["v0.25.3",{"_index":1947,"title":{},"body":{"changelog.html":{}}}],["v0.25.4",{"_index":1941,"title":{},"body":{"changelog.html":{}}}],["v0.25.5",{"_index":1921,"title":{},"body":{"changelog.html":{}}}],["v0.25.6",{"_index":1907,"title":{},"body":{"changelog.html":{}}}],["v0.26.0",{"_index":1864,"title":{},"body":{"changelog.html":{}}}],["v0.3.2",{"_index":1999,"title":{},"body":{"changelog.html":{}}}],["v14",{"_index":1889,"title":{},"body":{"changelog.html":{}}}],["v3",{"_index":2026,"title":{},"body":{"changelog.html":{}}}],["v4",{"_index":1850,"title":{},"body":{"changelog.html":{}}}],["v6",{"_index":1900,"title":{},"body":{"changelog.html":{}}}],["v7",{"_index":2037,"title":{},"body":{"changelog.html":{}}}],["v8.13.0",{"_index":926,"title":{},"body":{"classes/ClientStub.html":{},"interfaces/ClientStubOptions.html":{},"classes/GoogleProtoFilesRoot.html":{},"classes/GrpcClient.html":{},"interfaces/GrpcClientOptions.html":{},"interfaces/Metadata.html":{},"interfaces/MetadataValue.html":{},"index.html":{}}}],["valid",{"_index":907,"title":{},"body":{"classes/ClientStub.html":{},"interfaces/ClientStubOptions.html":{},"classes/GoogleProtoFilesRoot.html":{},"classes/GrpcClient.html":{},"interfaces/GrpcClientOptions.html":{},"interfaces/Metadata.html":{},"interfaces/MetadataValue.html":{}}}],["value",{"_index":229,"title":{},"body":{"interfaces/BackoffSettings.html":{},"interfaces/Bindings.html":{},"interfaces/BundlingConfig.html":{},"interfaces/CallOptions.html":{},"classes/CallSettings.html":{},"interfaces/ClientConfig.html":{},"classes/ClientStub.html":{},"interfaces/ClientStubOptions.html":{},"interfaces/GetOperationCallback.html":{},"classes/GoogleProtoFilesRoot.html":{},"classes/GrpcClient.html":{},"interfaces/GrpcClientOptions.html":{},"interfaces/Metadata.html":{},"interfaces/MetadataValue.html":{},"interfaces/MethodConfig.html":{},"classes/Operation.html":{},"classes/OperationsClient.html":{},"classes/OperationsClientBuilder.html":{},"interfaces/OperationsClientOptions.html":{},"interfaces/ParseResult.html":{},"classes/PathTemplate.html":{},"classes/RetryOptions.html":{},"interfaces/RetryParamsConfig.html":{},"interfaces/Segment.html":{},"interfaces/ServiceConfig.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["value.foreach(v",{"_index":994,"title":{},"body":{"classes/ClientStub.html":{},"interfaces/ClientStubOptions.html":{},"classes/GoogleProtoFilesRoot.html":{},"classes/GrpcClient.html":{},"interfaces/GrpcClientOptions.html":{},"interfaces/Metadata.html":{},"interfaces/MetadataValue.html":{}}}],["values",{"_index":136,"title":{},"body":{"interfaces/BackoffSettings.html":{},"interfaces/Bindings.html":{},"classes/BundleExecutor.html":{},"interfaces/BundleOptions.html":{},"interfaces/BundlingConfig.html":{},"interfaces/CallOptions.html":{},"classes/CallSettings.html":{},"interfaces/ClientConfig.html":{},"classes/ClientStub.html":{},"interfaces/ClientStubOptions.html":{},"classes/GoogleProtoFilesRoot.html":{},"classes/GrpcClient.html":{},"interfaces/GrpcClientOptions.html":{},"interfaces/Metadata.html":{},"interfaces/MetadataValue.html":{},"interfaces/MethodConfig.html":{},"interfaces/ParseResult.html":{},"classes/PathTemplate.html":{},"classes/RetryOptions.html":{},"interfaces/RetryParamsConfig.html":{},"interfaces/Segment.html":{},"interfaces/ServiceConfig.html":{}}}],["var",{"_index":2165,"title":{},"body":{"changelog.html":{}}}],["variable",{"_index":844,"title":{},"body":{"interfaces/CancellablePromise.html":{},"classes/ClientStub.html":{},"interfaces/ClientStubOptions.html":{},"interfaces/GetOperationCallback.html":{},"classes/GoogleProtoFilesRoot.html":{},"classes/GrpcClient.html":{},"interfaces/GrpcClientOptions.html":{},"interfaces/Metadata.html":{},"interfaces/MetadataValue.html":{},"classes/OngoingCall.html":{},"classes/OngoingCallPromise.html":{},"classes/Operation.html":{},"changelog.html":{}}}],["variables",{"_index":2415,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["various",{"_index":1195,"title":{},"body":{"interfaces/GRPCCallOtherArgs.html":{},"interfaces/GRPCCallResult.html":{},"interfaces/GaxCall.html":{},"interfaces/GaxCallPromise.html":{},"interfaces/GaxCallStream.html":{},"interfaces/RequestType.html":{},"interfaces/SimpleCallbackFunction.html":{}}}],["version",{"_index":932,"title":{},"body":{"classes/ClientStub.html":{},"interfaces/ClientStubOptions.html":{},"classes/GoogleProtoFilesRoot.html":{},"classes/GrpcClient.html":{},"interfaces/GrpcClientOptions.html":{},"interfaces/Metadata.html":{},"interfaces/MetadataValue.html":{},"classes/OperationsClient.html":{},"classes/OperationsClientBuilder.html":{},"interfaces/OperationsClientOptions.html":{},"changelog.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["versions",{"_index":2334,"title":{},"body":{"index.html":{}}}],["visible",{"_index":659,"title":{},"body":{"classes/BundleDescriptor.html":{}}}],["void",{"_index":45,"title":{},"body":{"interfaces/APICaller.html":{},"interfaces/ApiCallerSettings.html":{},"classes/BundleApiCaller.html":{},"classes/BundleExecutor.html":{},"interfaces/CancellablePromise.html":{},"classes/ClientStub.html":{},"interfaces/ClientStubOptions.html":{},"interfaces/Duplexify.html":{},"interfaces/DuplexifyConstructor.html":{},"interfaces/DuplexifyOptions.html":{},"interfaces/GRPCCallOtherArgs.html":{},"interfaces/GRPCCallResult.html":{},"interfaces/GaxCall.html":{},"interfaces/GaxCallPromise.html":{},"interfaces/GaxCallStream.html":{},"interfaces/GetOperationCallback.html":{},"classes/GoogleProtoFilesRoot.html":{},"classes/GrpcClient.html":{},"interfaces/GrpcClientOptions.html":{},"classes/LongrunningApiCaller.html":{},"interfaces/Metadata.html":{},"interfaces/MetadataValue.html":{},"classes/NormalApiCaller.html":{},"classes/OngoingCall.html":{},"classes/OngoingCallPromise.html":{},"classes/Operation.html":{},"classes/OperationsClient.html":{},"classes/OperationsClientBuilder.html":{},"interfaces/OperationsClientOptions.html":{},"classes/PagedApiCaller.html":{},"interfaces/RequestType.html":{},"interfaces/SimpleCallbackFunction.html":{},"classes/StreamProxy.html":{},"classes/StreamingApiCaller.html":{},"classes/Task.html":{}}}],["walk",{"_index":870,"title":{},"body":{"classes/ClientStub.html":{},"interfaces/ClientStubOptions.html":{},"classes/GoogleProtoFilesRoot.html":{},"classes/GrpcClient.html":{},"interfaces/GrpcClientOptions.html":{},"interfaces/Metadata.html":{},"interfaces/MetadataValue.html":{},"miscellaneous/variables.html":{}}}],["walkdir",{"_index":871,"title":{},"body":{"classes/ClientStub.html":{},"interfaces/ClientStubOptions.html":{},"classes/GoogleProtoFilesRoot.html":{},"classes/GrpcClient.html":{},"interfaces/GrpcClientOptions.html":{},"interfaces/Metadata.html":{},"interfaces/MetadataValue.html":{},"changelog.html":{},"dependencies.html":{}}}],["want",{"_index":1143,"title":{},"body":{"interfaces/Duplexify.html":{},"interfaces/DuplexifyConstructor.html":{},"interfaces/DuplexifyOptions.html":{},"classes/PagedApiCaller.html":{},"classes/StreamProxy.html":{}}}],["warn",{"_index":724,"title":{},"body":{"classes/BundleExecutor.html":{},"interfaces/BundleOptions.html":{},"classes/StreamingApiCaller.html":{},"miscellaneous/functions.html":{}}}],["warn('bundle_runnow_bundleid_unknown",{"_index":797,"title":{},"body":{"classes/BundleExecutor.html":{},"interfaces/BundleOptions.html":{}}}],["warn(code",{"_index":2313,"title":{},"body":{"miscellaneous/functions.html":{}}}],["warnings",{"_index":725,"title":{},"body":{"classes/BundleExecutor.html":{},"interfaces/BundleOptions.html":{},"classes/StreamingApiCaller.html":{}}}],["warranties",{"_index":2377,"title":{},"body":{"license.html":{}}}],["way",{"_index":913,"title":{},"body":{"classes/ClientStub.html":{},"interfaces/ClientStubOptions.html":{},"classes/GoogleProtoFilesRoot.html":{},"classes/GrpcClient.html":{},"interfaces/GrpcClientOptions.html":{},"interfaces/Metadata.html":{},"interfaces/MetadataValue.html":{},"license.html":{}}}],["we'd",{"_index":2204,"title":{},"body":{"contributing.html":{}}}],["we'll",{"_index":1996,"title":{},"body":{"changelog.html":{},"contributing.html":{}}}],["welcome",{"_index":2340,"title":{},"body":{"index.html":{}}}],["whether",{"_index":156,"title":{},"body":{"interfaces/BackoffSettings.html":{},"interfaces/BundlingConfig.html":{},"interfaces/CallOptions.html":{},"classes/CallSettings.html":{},"interfaces/ClientConfig.html":{},"interfaces/MethodConfig.html":{},"classes/OperationsClient.html":{},"classes/OperationsClientBuilder.html":{},"interfaces/OperationsClientOptions.html":{},"classes/RetryOptions.html":{},"interfaces/RetryParamsConfig.html":{},"interfaces/ServiceConfig.html":{},"classes/Task.html":{},"license.html":{}}}],["while(nextrequest",{"_index":1531,"title":{},"body":{"classes/OperationsClient.html":{},"classes/OperationsClientBuilder.html":{},"interfaces/OperationsClientOptions.html":{}}}],["whose",{"_index":330,"title":{},"body":{"interfaces/BackoffSettings.html":{},"classes/BundleExecutor.html":{},"interfaces/BundleOptions.html":{},"interfaces/BundlingConfig.html":{},"interfaces/CallOptions.html":{},"classes/CallSettings.html":{},"interfaces/ClientConfig.html":{},"interfaces/MethodConfig.html":{},"classes/RetryOptions.html":{},"interfaces/RetryParamsConfig.html":{},"interfaces/ServiceConfig.html":{}}}],["windows",{"_index":2123,"title":{},"body":{"changelog.html":{}}}],["within",{"_index":2321,"title":{},"body":{"index.html":{}}}],["without",{"_index":2353,"title":{},"body":{"license.html":{}}}],["wombat",{"_index":1917,"title":{},"body":{"changelog.html":{}}}],["work",{"_index":1717,"title":{},"body":{"classes/StreamDescriptor.html":{},"contributing.html":{}}}],["working",{"_index":1988,"title":{},"body":{"changelog.html":{}}}],["wrap",{"_index":26,"title":{},"body":{"interfaces/APICaller.html":{},"classes/BundleApiCaller.html":{},"classes/LongrunningApiCaller.html":{},"classes/NormalApiCaller.html":{},"classes/PagedApiCaller.html":{},"classes/StreamingApiCaller.html":{}}}],["wrap(func",{"_index":60,"title":{},"body":{"interfaces/APICaller.html":{},"interfaces/ApiCallerSettings.html":{},"classes/BundleApiCaller.html":{},"classes/LongrunningApiCaller.html":{},"classes/NormalApiCaller.html":{},"classes/PagedApiCaller.html":{},"classes/StreamingApiCaller.html":{}}}],["wrapped",{"_index":1222,"title":{},"body":{"interfaces/GetOperationCallback.html":{},"classes/Operation.html":{},"miscellaneous/functions.html":{}}}],["wrappedcall(argument",{"_index":1690,"title":{},"body":{"classes/PagedApiCaller.html":{}}}],["wrapper",{"_index":1013,"title":{},"body":{"classes/ClientStub.html":{},"interfaces/ClientStubOptions.html":{},"interfaces/GRPCCallOtherArgs.html":{},"interfaces/GRPCCallResult.html":{},"interfaces/GaxCall.html":{},"interfaces/GaxCallPromise.html":{},"interfaces/GaxCallStream.html":{},"interfaces/GetOperationCallback.html":{},"classes/GoogleProtoFilesRoot.html":{},"classes/GrpcClient.html":{},"interfaces/GrpcClientOptions.html":{},"interfaces/Metadata.html":{},"interfaces/MetadataValue.html":{},"classes/Operation.html":{},"interfaces/RequestType.html":{},"interfaces/SimpleCallbackFunction.html":{}}}],["wraps",{"_index":1201,"title":{},"body":{"interfaces/GRPCCallOtherArgs.html":{},"interfaces/GRPCCallResult.html":{},"interfaces/GaxCall.html":{},"interfaces/GaxCallPromise.html":{},"interfaces/GaxCallStream.html":{},"interfaces/GetOperationCallback.html":{},"classes/Operation.html":{},"interfaces/RequestType.html":{},"interfaces/SimpleCallbackFunction.html":{}}}],["writable",{"_index":1100,"title":{},"body":{"interfaces/Duplexify.html":{},"interfaces/DuplexifyConstructor.html":{},"interfaces/DuplexifyOptions.html":{},"classes/StreamProxy.html":{}}}],["writing",{"_index":2218,"title":{},"body":{"contributing.html":{}}}],["written",{"_index":2373,"title":{},"body":{"license.html":{}}}],["x",{"_index":1006,"title":{},"body":{"classes/ClientStub.html":{},"interfaces/ClientStubOptions.html":{},"classes/GoogleProtoFilesRoot.html":{},"classes/GrpcClient.html":{},"interfaces/GrpcClientOptions.html":{},"interfaces/Metadata.html":{},"interfaces/MetadataValue.html":{},"classes/OperationsClient.html":{},"classes/OperationsClientBuilder.html":{},"interfaces/OperationsClientOptions.html":{},"changelog.html":{}}}],["x1f645;‍♂️&#x1f40d",{"_index":1976,"title":{},"body":{"changelog.html":{}}}],["x1f680",{"_index":2177,"title":{},"body":{"changelog.html":{}}}],["yaml",{"_index":410,"title":{},"body":{"interfaces/BackoffSettings.html":{},"interfaces/BundlingConfig.html":{},"interfaces/CallOptions.html":{},"classes/CallSettings.html":{},"interfaces/ClientConfig.html":{},"interfaces/MethodConfig.html":{},"classes/RetryOptions.html":{},"interfaces/RetryParamsConfig.html":{},"interfaces/ServiceConfig.html":{}}}],["yes",{"_index":56,"title":{},"body":{"interfaces/APICaller.html":{},"classes/BundleApiCaller.html":{},"classes/BundleExecutor.html":{},"classes/CallSettings.html":{},"interfaces/DuplexifyConstructor.html":{},"classes/LongrunningApiCaller.html":{},"classes/NormalApiCaller.html":{},"classes/OngoingCall.html":{},"classes/Operation.html":{},"classes/OperationsClient.html":{},"classes/PagedApiCaller.html":{},"classes/Task.html":{},"miscellaneous/functions.html":{}}}],["yoshi",{"_index":2048,"title":{},"body":{"changelog.html":{}}}],["you'll",{"_index":2222,"title":{},"body":{"contributing.html":{}}}],["you're",{"_index":2220,"title":{},"body":{"contributing.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"interfaces/APICaller.html":{"url":"interfaces/APICaller.html","title":"interface - APICaller","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  APICaller\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/apiCaller.ts\n        \n\n            \n                Description\n            \n            \n                An interface for all kinds of API callers (normal, that just calls API, and\nall special ones: long-running, paginated, bundled, streaming).\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    call\n                                \n                                \n                                    fail\n                                \n                                \n                                    init\n                                \n                                \n                                    result\n                                \n                                \n                                    wrap\n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            call\n                        \n                        \n                    \n                \n            \n            \n                \ncall(apiCall: SimpleCallbackFunction, argument: literal type, settings: literal type, canceller: OngoingCallPromise | OngoingCall | StreamProxy)\n                \n            \n\n\n            \n                \n                    Defined in src/apiCaller.ts:60\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    apiCall\n                                    \n                                                SimpleCallbackFunction\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    argument\n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    settings\n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    canceller\n                                    \n                                            OngoingCallPromise | OngoingCall | StreamProxy\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            fail\n                        \n                        \n                    \n                \n            \n            \n                \nfail(canceller: OngoingCallPromise | OngoingCall | CancellableStream, err: GoogleError)\n                \n            \n\n\n            \n                \n                    Defined in src/apiCaller.ts:66\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    canceller\n                                    \n                                                OngoingCallPromise | OngoingCall | CancellableStream\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    err\n                                    \n                                                GoogleError\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            init\n                        \n                        \n                    \n                \n            \n            \n                \ninit(settings: ApiCallerSettings, callback?: APICallback)\n                \n            \n\n\n            \n                \n                    Defined in src/apiCaller.ts:55\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    settings\n                                    \n                                                ApiCallerSettings\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    callback\n                                    \n                                                APICallback\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     OngoingCallPromise | OngoingCall | StreamProxy\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            result\n                        \n                        \n                    \n                \n            \n            \n                \nresult(canceller: OngoingCallPromise | OngoingCall | CancellableStream)\n                \n            \n\n\n            \n                \n                    Defined in src/apiCaller.ts:70\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    canceller\n                                    \n                                                OngoingCallPromise | OngoingCall | CancellableStream\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         CancellablePromise | CancellableStream\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            wrap\n                        \n                        \n                    \n                \n            \n            \n                \nwrap(func: GRPCCall)\n                \n            \n\n\n            \n                \n                    Defined in src/apiCaller.ts:59\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    func\n                                    \n                                                GRPCCall\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         GRPCCall\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  APICallback,\n  CancellableStream,\n  GRPCCall,\n  ResultTuple,\n  SimpleCallbackFunction,\n} from './apitypes';\nimport {CancellablePromise, OngoingCall, OngoingCallPromise} from './call';\nimport {Descriptor} from './descriptor';\nimport {CallSettings} from './gax';\nimport {GoogleError} from './googleError';\nimport {NormalApiCaller} from './normalCalls/normalApiCaller';\nimport {StreamProxy} from './streamingCalls/streaming';\n\nexport interface ApiCallerSettings {\n  promise: PromiseConstructor;\n}\n\n/**\n * An interface for all kinds of API callers (normal, that just calls API, and\n * all special ones: long-running, paginated, bundled, streaming).\n */\nexport interface APICaller {\n  init(\n    settings: ApiCallerSettings,\n    callback?: APICallback\n  ): OngoingCallPromise | OngoingCall | StreamProxy;\n  wrap(func: GRPCCall): GRPCCall;\n  call(\n    apiCall: SimpleCallbackFunction,\n    argument: {},\n    settings: {},\n    canceller: OngoingCallPromise | OngoingCall | StreamProxy\n  ): void;\n  fail(\n    canceller: OngoingCallPromise | OngoingCall | CancellableStream,\n    err: GoogleError\n  ): void;\n  result(\n    canceller: OngoingCallPromise | OngoingCall | CancellableStream\n  ): CancellablePromise | CancellableStream;\n}\n\nexport function createAPICaller(\n  settings: CallSettings,\n  descriptor: Descriptor | undefined\n): APICaller {\n  if (!descriptor) {\n    return new NormalApiCaller();\n  }\n  return descriptor.getApiCaller(settings);\n}\n\n    \n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/AnyDecoder.html":{"url":"interfaces/AnyDecoder.html","title":"interface - AnyDecoder","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  AnyDecoder\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/longRunningCalls/longRunningDescriptor.ts\n        \n\n            \n                Description\n            \n            \n                A callback to upack a google.protobuf.Any message.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Unamed property\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n\n                                    \n                                        \n                                            Signature :\n                                            \n                                            \n                                                \n                                                    [message: literal type]\n                                            \n                                        \n                                    \n\n\n                                    \n                                        \n                                            Returns :         Metadata\n\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import {Descriptor} from '../descriptor';\nimport {CallSettings} from '../gax';\nimport {Metadata} from '../grpc';\nimport {OperationsClient} from '../operationsClient';\n\nimport {LongrunningApiCaller} from './longRunningApiCaller';\n\n/**\n * A callback to upack a google.protobuf.Any message.\n */\nexport interface AnyDecoder {\n  (message: {}): Metadata;\n}\n\n/**\n * A descriptor for long-running operations.\n */\nexport class LongRunningDescriptor implements Descriptor {\n  operationsClient: OperationsClient;\n  responseDecoder: AnyDecoder;\n  metadataDecoder: AnyDecoder;\n\n  constructor(\n    operationsClient: OperationsClient,\n    responseDecoder: AnyDecoder,\n    metadataDecoder: AnyDecoder\n  ) {\n    this.operationsClient = operationsClient;\n    this.responseDecoder = responseDecoder;\n    this.metadataDecoder = metadataDecoder;\n  }\n\n  getApiCaller(settings: CallSettings) {\n    return new LongrunningApiCaller(this);\n  }\n}\n\n    \n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ApiCallerSettings.html":{"url":"interfaces/ApiCallerSettings.html","title":"interface - ApiCallerSettings","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  ApiCallerSettings\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/apiCaller.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        promise\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        promise\n                                    \n                                \n                                \n                                    \n                                        promise:     PromiseConstructor\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     PromiseConstructor\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import {\n  APICallback,\n  CancellableStream,\n  GRPCCall,\n  ResultTuple,\n  SimpleCallbackFunction,\n} from './apitypes';\nimport {CancellablePromise, OngoingCall, OngoingCallPromise} from './call';\nimport {Descriptor} from './descriptor';\nimport {CallSettings} from './gax';\nimport {GoogleError} from './googleError';\nimport {NormalApiCaller} from './normalCalls/normalApiCaller';\nimport {StreamProxy} from './streamingCalls/streaming';\n\nexport interface ApiCallerSettings {\n  promise: PromiseConstructor;\n}\n\n/**\n * An interface for all kinds of API callers (normal, that just calls API, and\n * all special ones: long-running, paginated, bundled, streaming).\n */\nexport interface APICaller {\n  init(\n    settings: ApiCallerSettings,\n    callback?: APICallback\n  ): OngoingCallPromise | OngoingCall | StreamProxy;\n  wrap(func: GRPCCall): GRPCCall;\n  call(\n    apiCall: SimpleCallbackFunction,\n    argument: {},\n    settings: {},\n    canceller: OngoingCallPromise | OngoingCall | StreamProxy\n  ): void;\n  fail(\n    canceller: OngoingCallPromise | OngoingCall | CancellableStream,\n    err: GoogleError\n  ): void;\n  result(\n    canceller: OngoingCallPromise | OngoingCall | CancellableStream\n  ): CancellablePromise | CancellableStream;\n}\n\nexport function createAPICaller(\n  settings: CallSettings,\n  descriptor: Descriptor | undefined\n): APICaller {\n  if (!descriptor) {\n    return new NormalApiCaller();\n  }\n  return descriptor.getApiCaller(settings);\n}\n\n    \n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/BackoffSettings.html":{"url":"interfaces/BackoffSettings.html","title":"interface - BackoffSettings","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  BackoffSettings\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/gax.ts\n        \n\n            \n                Description\n            \n            \n                Parameters to the exponential backoff algorithm for retrying.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        initialRetryDelayMillis\n                                \n                                \n                                            Optional\n                                        initialRpcTimeoutMillis\n                                \n                                \n                                            Optional\n                                        maxRetries\n                                \n                                \n                                        maxRetryDelayMillis\n                                \n                                \n                                            Optional\n                                        maxRpcTimeoutMillis\n                                \n                                \n                                        retryDelayMultiplier\n                                \n                                \n                                            Optional\n                                        rpcTimeoutMultiplier\n                                \n                                \n                                            Optional\n                                        totalTimeoutMillis\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        initialRetryDelayMillis\n                                    \n                                \n                                \n                                    \n                                        initialRetryDelayMillis:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        initialRpcTimeoutMillis\n                                    \n                                \n                                \n                                    \n                                        initialRpcTimeoutMillis:     number | null\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     number | null\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        maxRetries\n                                    \n                                \n                                \n                                    \n                                        maxRetries:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        maxRetryDelayMillis\n                                    \n                                \n                                \n                                    \n                                        maxRetryDelayMillis:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        maxRpcTimeoutMillis\n                                    \n                                \n                                \n                                    \n                                        maxRpcTimeoutMillis:     number | null\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     number | null\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        retryDelayMultiplier\n                                    \n                                \n                                \n                                    \n                                        retryDelayMultiplier:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        rpcTimeoutMultiplier\n                                    \n                                \n                                \n                                    \n                                        rpcTimeoutMultiplier:     number | null\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     number | null\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        totalTimeoutMillis\n                                    \n                                \n                                \n                                    \n                                        totalTimeoutMillis:     number | null\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     number | null\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import {BundleOptions} from './bundlingCalls/bundleExecutor';\n\n/**\n * Encapsulates the overridable settings for a particular API call.\n *\n * ``CallOptions`` is an optional arg for all GAX API calls.  It is used to\n * configure the settings of a specific API call.\n *\n * When provided, its values override the GAX service defaults for that\n * particular call.\n *\n * Typically the API clients will accept this as the second to the last\n * argument. See the examples below.\n * @typedef {Object} CallOptions\n * @property {number=} timeout - The client-side timeout for API calls.\n * @property {RetryOptions=} retry - determines whether and how to retry\n *   on transient errors. When set to null, the call will not retry.\n * @property {boolean=} autoPaginate - If set to false and the call is\n *   configured for paged iteration, page unrolling is not performed, instead\n *   the callback will be called with the response object.\n * @property {Object=} pageToken - If set and the call is configured for\n *   paged iteration, paged iteration is not performed and requested with this\n *   pageToken.\n * @property {number} maxResults - If set and the call is configured for\n *   paged iteration, the call will stop when the number of response elements\n *   reaches to the specified size. By default, it will unroll the page to\n *   the end of the list.\n * @property {boolean=} isBundling - If set to false and the call is configured\n *   for bundling, bundling is not performed.\n * @property {BackoffSettings=} longrunning - BackoffSettings used for polling.\n * @property {Function=} promise - A constructor for a promise that implements the ES6\n * specification of promise which will be used to create promises. If not\n * provided, native promises will be used.\n * @example\n * // suppress bundling for bundled method.\n * api.bundlingMethod(\n *     param, {optParam: aValue, isBundling: false}, function(err, response) {\n *   // handle response.\n * });\n * @example\n * // suppress streaming for page-streaming method.\n * api.pageStreamingMethod(\n *     param, {optParam: aValue, autoPaginate: false}, function(err, page) {\n *   // not returning a stream, but callback is called with the paged response.\n * });\n */\n\n/**\n * Per-call configurable settings for retrying upon transient failure.\n * @typedef {Object} RetryOptions\n * @property {String[]} retryCodes\n * @property {BackoffSettings} backoffSettings\n */\nexport class RetryOptions {\n  retryCodes: number[];\n  backoffSettings: BackoffSettings;\n  constructor(retryCodes: number[], backoffSettings: BackoffSettings) {\n    this.retryCodes = retryCodes;\n    this.backoffSettings = backoffSettings;\n  }\n}\n\n/**\n * Parameters to the exponential backoff algorithm for retrying.\n * @typedef {Object} BackoffSettings\n * @property {number} initialRetryDelayMillis - the initial delay time,\n *   in milliseconds, between the completion of the first failed request and the\n *   initiation of the first retrying request.\n * @property {number} retryDelayMultiplier - the multiplier by which to\n *   increase the delay time between the completion of failed requests, and the\n *   initiation of the subsequent retrying request.\n * @property {number} maxRetryDelayMillis - the maximum delay time, in\n *   milliseconds, between requests. When this value is reached,\n *   ``retryDelayMultiplier`` will no longer be used to increase delay time.\n * @property {number} initialRpcTimeoutMillis - the initial timeout parameter\n *   to the request.\n * @propetry {number} rpcTimeoutMultiplier - the multiplier by which to\n *   increase the timeout parameter between failed requests.\n * @property {number} maxRpcTimeoutMillis - the maximum timeout parameter, in\n *   milliseconds, for a request. When this value is reached,\n *   ``rpcTimeoutMultiplier`` will no longer be used to increase the timeout.\n * @property {number} totalTimeoutMillis - the total time, in milliseconds,\n *   starting from when the initial request is sent, after which an error will\n *   be returned, regardless of the retrying attempts made meanwhile.\n */\nexport interface BackoffSettings {\n  maxRetries?: number;\n  initialRetryDelayMillis: number;\n  retryDelayMultiplier: number;\n  maxRetryDelayMillis: number;\n  initialRpcTimeoutMillis?: number | null;\n  maxRpcTimeoutMillis?: number | null;\n  totalTimeoutMillis?: number | null;\n  rpcTimeoutMultiplier?: number | null;\n}\n\n/**\n * Parameter to configure bundling behavior.\n * @typedef {Object} BundleOptions\n * @property {number} elementCountThreshold -\n *   the bundled request will be sent once the count of outstanding elements\n *   in the repeated field reaches this value.\n * @property {number} elementCountLimit -\n *   represents a hard limit on the number of elements in the repeated field\n *   of the bundle; if adding a request to a bundle would exceed this value,\n *   the bundle is sent and the new request is added to a fresh bundle. It is\n *   invalid for a single request to exceed this limit.\n * @property {number} requestByteThreshold -\n *   the bundled request will be sent once the count of bytes in the request\n *   reaches this value. Note that this value is pessimistically approximated\n *   by summing the bytesizes of the elements in the repeated field, and\n *   therefore may be an under-approximation.\n * @property {number} requestByteLimit -\n *   represents a hard limit on the size of the bundled request; if adding\n *   a request to a bundle would exceed this value, the bundle is sent and\n *   the new request is added to a fresh bundle. It is invalid for a single\n *   request to exceed this limit. Note that this value is pessimistically\n *   approximated by summing the bytesizes of the elements in the repeated\n *   field, with a buffer applied to correspond to the resulting\n *   under-approximation.\n * @property {number} delayThreshold -\n *   the bundled request will be sent this amount of time after the first\n *   element in the bundle was added to it.\n */\n\nexport interface CallOptions {\n  timeout?: number;\n  retry?: RetryOptions | null;\n  autoPaginate?: boolean;\n  pageToken?: string;\n  pageSize?: number;\n  maxResults?: number;\n  maxRetries?: number;\n  // tslint:disable-next-line no-any\n  otherArgs?: {[index: string]: any};\n  bundleOptions?: BundleOptions | null;\n  isBundling?: boolean;\n  longrunning?: BackoffSettings;\n  promise?: PromiseConstructor;\n}\n\nexport class CallSettings {\n  timeout: number;\n  retry?: RetryOptions | null;\n  autoPaginate?: boolean;\n  pageToken?: string;\n  pageSize?: number;\n  maxResults?: number;\n  // tslint:disable-next-line no-any\n  otherArgs: {[index: string]: any};\n  bundleOptions?: BundleOptions | null;\n  isBundling: boolean;\n  longrunning?: BackoffSettings;\n  promise: PromiseConstructor;\n\n  /**\n   * @param {Object} settings - An object containing parameters of this settings.\n   * @param {number} settings.timeout - The client-side timeout for API calls.\n   *   This parameter is ignored for retrying calls.\n   * @param {RetryOptions} settings.retry - The configuration for retrying upon\n   *   transient error. If set to null, this call will not retry.\n   * @param {boolean} settings.autoPaginate - If there is no `pageDescriptor`,\n   *   this attrbute has no meaning. Otherwise, determines whether a page\n   * streamed response should make the page structure transparent to the user by\n   *   flattening the repeated field in the returned generator.\n   * @param {number} settings.pageToken - If there is no `pageDescriptor`,\n   *   this attribute has no meaning. Otherwise, determines the page token used\n   * in the page streaming request.\n   * @param {Object} settings.otherArgs - Additional arguments to be passed to\n   *   the API calls.\n   * @param {Function=} settings.promise - A constructor for a promise that\n   * implements the ES6 specification of promise. If not provided, native\n   * promises will be used.\n   *\n   * @constructor\n   */\n  constructor(settings?: CallOptions) {\n    settings = settings || {};\n    this.timeout = settings.timeout || 30 * 1000;\n    this.retry = settings.retry;\n    this.autoPaginate =\n      'autoPaginate' in settings ? settings.autoPaginate : true;\n    this.pageToken = settings.pageToken;\n    this.maxResults = settings.maxResults;\n    this.otherArgs = settings.otherArgs || {};\n    this.bundleOptions = settings.bundleOptions;\n    this.isBundling = 'isBundling' in settings ? settings.isBundling! : true;\n    this.longrunning =\n      'longrunning' in settings ? settings.longrunning : undefined;\n    this.promise = 'promise' in settings ? settings.promise! : Promise;\n  }\n\n  /**\n   * Returns a new CallSettings merged from this and a CallOptions object.\n   *\n   * @param {CallOptions} options - an instance whose values override\n   *   those in this object. If null, ``merge`` returns a copy of this\n   *   object\n   * @return {CallSettings} The merged CallSettings instance.\n   */\n  merge(options?: CallOptions | null) {\n    if (!options) {\n      return new CallSettings(this);\n    }\n    let timeout = this.timeout;\n    let retry = this.retry;\n    let autoPaginate = this.autoPaginate;\n    let pageToken = this.pageToken;\n    let pageSize = this.pageSize;\n    let maxResults = this.maxResults;\n    let otherArgs = this.otherArgs;\n    let isBundling = this.isBundling;\n    let longrunning = this.longrunning;\n    let promise = this.promise;\n    if ('timeout' in options) {\n      timeout = options.timeout!;\n    }\n    if ('retry' in options) {\n      retry = options.retry;\n    }\n\n    if ('autoPaginate' in options && !options.autoPaginate) {\n      autoPaginate = false;\n    }\n\n    if ('pageToken' in options) {\n      autoPaginate = false;\n      pageToken = options.pageToken;\n    }\n\n    if ('pageSize' in options) {\n      pageSize = options.pageSize;\n    }\n\n    if ('maxResults' in options) {\n      maxResults = options.maxResults;\n    }\n\n    if ('otherArgs' in options) {\n      otherArgs = {};\n      // tslint:disable-next-line forin\n      for (const key in this.otherArgs) {\n        otherArgs[key] = this.otherArgs[key];\n      }\n      // tslint:disable-next-line forin\n      for (const optionsKey in options.otherArgs!) {\n        otherArgs[optionsKey] = options.otherArgs![optionsKey];\n      }\n    }\n\n    if ('isBundling' in options) {\n      isBundling = options.isBundling!;\n    }\n\n    if ('maxRetries' in options) {\n      retry!.backoffSettings!.maxRetries = options.maxRetries;\n      delete retry!.backoffSettings!.totalTimeoutMillis;\n    }\n\n    if ('longrunning' in options) {\n      longrunning = options.longrunning;\n    }\n\n    if ('promise' in options) {\n      promise = options.promise!;\n    }\n\n    return new CallSettings({\n      timeout,\n      retry,\n      bundleOptions: this.bundleOptions,\n      longrunning,\n      autoPaginate,\n      pageToken,\n      pageSize,\n      maxResults,\n      otherArgs,\n      isBundling,\n      promise,\n    });\n  }\n}\n\n/**\n * Per-call configurable settings for retrying upon transient failure.\n *\n * @param {number[]} retryCodes - a list of Google API canonical error codes\n *   upon which a retry should be attempted.\n * @param {BackoffSettings} backoffSettings - configures the retry\n *   exponential backoff algorithm.\n * @return {RetryOptions} A new RetryOptions object.\n *\n */\nexport function createRetryOptions(\n  retryCodes: number[],\n  backoffSettings: BackoffSettings\n): RetryOptions {\n  return {\n    retryCodes,\n    backoffSettings,\n  };\n}\n\n/**\n * Parameters to the exponential backoff algorithm for retrying.\n *\n * @param {number} initialRetryDelayMillis - the initial delay time,\n *   in milliseconds, between the completion of the first failed request and the\n *   initiation of the first retrying request.\n * @param {number} retryDelayMultiplier - the multiplier by which to\n *   increase the delay time between the completion of failed requests, and the\n *   initiation of the subsequent retrying request.\n * @param {number} maxRetryDelayMillis - the maximum delay time, in\n *   milliseconds, between requests. When this value is reached,\n *   ``retryDelayMultiplier`` will no longer be used to increase delay time.\n * @param {number} initialRpcTimeoutMillis - the initial timeout parameter\n *   to the request.\n * @param {number} rpcTimeoutMultiplier - the multiplier by which to\n *   increase the timeout parameter between failed requests.\n * @param {number} maxRpcTimeoutMillis - the maximum timeout parameter, in\n *   milliseconds, for a request. When this value is reached,\n *   ``rpcTimeoutMultiplier`` will no longer be used to increase the timeout.\n * @param {number} totalTimeoutMillis - the total time, in milliseconds,\n *   starting from when the initial request is sent, after which an error will\n *   be returned, regardless of the retrying attempts made meanwhile.\n * @return {BackoffSettings} a new settings.\n *\n */\nexport function createBackoffSettings(\n  initialRetryDelayMillis: number,\n  retryDelayMultiplier: number,\n  maxRetryDelayMillis: number,\n  initialRpcTimeoutMillis: number | null,\n  rpcTimeoutMultiplier: number | null,\n  maxRpcTimeoutMillis: number | null,\n  totalTimeoutMillis: number | null\n): BackoffSettings {\n  return {\n    initialRetryDelayMillis,\n    retryDelayMultiplier,\n    maxRetryDelayMillis,\n    initialRpcTimeoutMillis,\n    rpcTimeoutMultiplier,\n    maxRpcTimeoutMillis,\n    totalTimeoutMillis,\n  };\n}\n\nexport function createDefaultBackoffSettings() {\n  return createBackoffSettings(100, 1.3, 60000, null, null, null, null);\n}\n\n/**\n * Parameters to the exponential backoff algorithm for retrying.\n * This function is unsupported, and intended for internal use only.\n *\n * @param {number} initialRetryDelayMillis - the initial delay time,\n *   in milliseconds, between the completion of the first failed request and the\n *   initiation of the first retrying request.\n * @param {number} retryDelayMultiplier - the multiplier by which to\n *   increase the delay time between the completion of failed requests, and the\n *   initiation of the subsequent retrying request.\n * @param {number} maxRetryDelayMillis - the maximum delay time, in\n *   milliseconds, between requests. When this value is reached,\n *   ``retryDelayMultiplier`` will no longer be used to increase delay time.\n * @param {number} initialRpcTimeoutMillis - the initial timeout parameter\n *   to the request.\n * @param {number} rpcTimeoutMultiplier - the multiplier by which to\n *   increase the timeout parameter between failed requests.\n * @param {number} maxRpcTimeoutMillis - the maximum timeout parameter, in\n *   milliseconds, for a request. When this value is reached,\n *   ``rpcTimeoutMultiplier`` will no longer be used to increase the timeout.\n * @param {number} maxRetries - the maximum number of retrying attempts that\n *   will be made. If reached, an error will be returned.\n * @return {BackoffSettings} a new settings.\n *\n */\nexport function createMaxRetriesBackoffSettings(\n  initialRetryDelayMillis: number,\n  retryDelayMultiplier: number,\n  maxRetryDelayMillis: number,\n  initialRpcTimeoutMillis: number,\n  rpcTimeoutMultiplier: number,\n  maxRpcTimeoutMillis: number,\n  maxRetries: number\n): BackoffSettings {\n  return {\n    initialRetryDelayMillis,\n    retryDelayMultiplier,\n    maxRetryDelayMillis,\n    initialRpcTimeoutMillis,\n    rpcTimeoutMultiplier,\n    maxRpcTimeoutMillis,\n    maxRetries,\n  };\n}\n\n/**\n * Creates a new {@link BundleOptions}.\n *\n * @private\n * @param {Object} options - An object to hold optional parameters. See\n *   properties for the content of options.\n * @return {BundleOptions} - A new options.\n */\nexport function createBundleOptions(options: BundlingConfig): BundleOptions {\n  const params = [\n    'element_count_threshold',\n    'element_count_limit',\n    'request_byte_threshold',\n    'request_byte_limit',\n    'delay_threshold_millis',\n  ];\n  params.forEach(param => {\n    if (param in options && typeof options[param] !== 'number') {\n      throw new Error(`${param} should be a number`);\n    }\n  });\n\n  const elementCountThreshold = options.element_count_threshold || 0;\n  const elementCountLimit = options.element_count_limit || 0;\n  const requestByteThreshold = options.request_byte_threshold || 0;\n  const requestByteLimit = options.request_byte_limit || 0;\n  const delayThreshold = options.delay_threshold_millis || 0;\n\n  if (\n    elementCountThreshold === 0 &&\n    requestByteThreshold === 0 &&\n    delayThreshold === 0\n  ) {\n    throw new Error('one threshold should be > 0');\n  }\n  return {\n    elementCountThreshold,\n    elementCountLimit,\n    requestByteThreshold,\n    requestByteLimit,\n    delayThreshold,\n  };\n}\n\n/**\n * Helper for {@link constructSettings}\n *\n * @private\n *\n * @param {Object} methodConfig - A dictionary representing a single\n *   `methods` entry of the standard API client config file. (See\n *   {@link constructSettings} for information on this yaml.)\n * @param {?Object} retryCodes - A dictionary parsed from the\n *   `retry_codes_def` entry of the standard API client config\n *   file. (See {@link constructSettings} for information on this yaml.)\n * @param {Object} retryParams - A dictionary parsed from the\n *   `retry_params` entry of the standard API client config\n *   file. (See {@link constructSettings} for information on this yaml.)\n * @param {Object} retryNames - A dictionary mapping the string names\n *   used in the standard API client config file to API response\n *   status codes.\n * @return {?RetryOptions} The new retry options.\n */\nfunction constructRetry(\n  methodConfig: MethodConfig,\n  retryCodes: {[index: string]: string[]},\n  retryParams: {[index: string]: {}},\n  retryNames: {[index: string]: {}}\n): RetryOptions | null | undefined {\n  if (!methodConfig) {\n    return null;\n  }\n\n  let codes: number[] | null = null;\n  if (retryCodes && 'retry_codes_name' in methodConfig) {\n    const retryCodesName = methodConfig['retry_codes_name'];\n    codes = (retryCodes[retryCodesName] || []).map(name => {\n      return Number(retryNames[name]);\n    });\n  }\n\n  let backoffSettings: BackoffSettings | null = null;\n  if (retryParams && 'retry_params_name' in methodConfig) {\n    const params = retryParams[\n      methodConfig.retry_params_name\n    ] as RetryParamsConfig;\n    backoffSettings = createBackoffSettings(\n      params.initial_retry_delay_millis,\n      params.retry_delay_multiplier,\n      params.max_retry_delay_millis,\n      params.initial_rpc_timeout_millis,\n      params.rpc_timeout_multiplier,\n      params.max_rpc_timeout_millis,\n      params.total_timeout_millis\n    );\n  }\n  return createRetryOptions(codes!, backoffSettings!);\n}\n\n/**\n * Helper for {@link constructSettings}\n *\n * Takes two retry options, and merges them into a single RetryOption instance.\n *\n * @private\n *\n * @param {RetryOptions} retry - The base RetryOptions.\n * @param {RetryOptions} overrides - The RetryOptions used for overriding\n *   `retry`. Use the values if it is not null. If entire `overrides` is null,\n *   ignore the base retry and return null.\n * @return {?RetryOptions} The merged RetryOptions.\n */\nfunction mergeRetryOptions(\n  retry: RetryOptions,\n  overrides: RetryOptions\n): RetryOptions | null {\n  if (!overrides) {\n    return null;\n  }\n\n  if (!overrides.retryCodes && !overrides.backoffSettings) {\n    return retry;\n  }\n\n  let codes = retry.retryCodes;\n  if (overrides.retryCodes) {\n    codes = overrides.retryCodes;\n  }\n  let backoffSettings = retry.backoffSettings;\n  if (overrides.backoffSettings) {\n    backoffSettings = overrides.backoffSettings;\n  }\n  return createRetryOptions(codes, backoffSettings);\n}\n\nexport interface ServiceConfig {\n  retry_codes: {[index: string]: string[]};\n  retry_params: {[index: string]: RetryParamsConfig};\n  methods: {[index: string]: MethodConfig};\n}\n\nexport interface RetryParamsConfig {\n  initial_retry_delay_millis: number;\n  retry_delay_multiplier: number;\n  max_retry_delay_millis: number;\n  initial_rpc_timeout_millis: number;\n  rpc_timeout_multiplier: number;\n  max_rpc_timeout_millis: number;\n  total_timeout_millis: number;\n}\n\nexport interface MethodConfig {\n  retry_codes_name: string;\n  retry_params_name: string;\n  bundling?: BundlingConfig;\n  timeout_millis?: number;\n}\n\nexport interface BundlingConfig {\n  [index: string]: number;\n  element_count_threshold: number;\n  element_count_limit: number;\n  request_byte_threshold: number;\n  request_byte_limit: number;\n  delay_threshold_millis: number;\n}\n\nexport interface ClientConfig {\n  interfaces?: {[index: string]: ServiceConfig};\n}\n\n/**\n * Constructs a dictionary mapping method names to {@link CallSettings}.\n *\n * The `clientConfig` parameter is parsed from a client configuration JSON\n * file of the form:\n *\n *     {\n *       \"interfaces\": {\n *         \"google.fake.v1.ServiceName\": {\n *           \"retry_codes\": {\n *             \"idempotent\": [\"UNAVAILABLE\", \"DEADLINE_EXCEEDED\"],\n *             \"non_idempotent\": []\n *           },\n *           \"retry_params\": {\n *             \"default\": {\n *               \"initial_retry_delay_millis\": 100,\n *               \"retry_delay_multiplier\": 1.2,\n *               \"max_retry_delay_millis\": 1000,\n *               \"initial_rpc_timeout_millis\": 2000,\n *               \"rpc_timeout_multiplier\": 1.5,\n *               \"max_rpc_timeout_millis\": 30000,\n *               \"total_timeout_millis\": 45000\n *             }\n *           },\n *           \"methods\": {\n *             \"CreateFoo\": {\n *               \"retry_codes_name\": \"idempotent\",\n *               \"retry_params_name\": \"default\"\n *             },\n *             \"Publish\": {\n *               \"retry_codes_name\": \"non_idempotent\",\n *               \"retry_params_name\": \"default\",\n *               \"bundling\": {\n *                 \"element_count_threshold\": 40,\n *                 \"element_count_limit\": 200,\n *                 \"request_byte_threshold\": 90000,\n *                 \"request_byte_limit\": 100000,\n *                 \"delay_threshold_millis\": 100\n *               }\n *             }\n *           }\n *         }\n *       }\n *     }\n *\n * @param {String} serviceName - The fully-qualified name of this\n *   service, used as a key into the client config file (in the\n *   example above, this value should be 'google.fake.v1.ServiceName').\n * @param {Object} clientConfig - A dictionary parsed from the\n *   standard API client config file.\n * @param {Object} configOverrides - A dictionary in the same structure of\n *   client_config to override the settings.\n * @param {Object.} retryNames - A dictionary mapping the strings\n *   referring to response status codes to objects representing\n *   those codes.\n * @param {Object} otherArgs - the non-request arguments to be passed to the API\n *   calls.\n * @param {Function=} promise - A constructor for a promise that implements the\n * ES6 specification of promise. If not provided, native promises will be used.\n * @return {Object} A mapping from method name to CallSettings, or null if the\n *   service is not found in the config.\n */\nexport function constructSettings(\n  serviceName: string,\n  clientConfig: ClientConfig,\n  configOverrides: ClientConfig,\n  retryNames: {},\n  otherArgs?: {},\n  promise?: PromiseConstructor\n) {\n  otherArgs = otherArgs || {};\n  // tslint:disable-next-line no-any\n  const defaults: any = {};\n\n  const serviceConfig = (clientConfig.interfaces || {})[serviceName];\n  if (!serviceConfig) {\n    return null;\n  }\n\n  const overrides = (configOverrides.interfaces || {})[serviceName] || {};\n  const methods = serviceConfig.methods;\n  const overridingMethods = overrides.methods || {};\n  // tslint:disable-next-line forin\n  for (const methodName in methods) {\n    const methodConfig = methods[methodName];\n    const jsName = methodName[0].toLowerCase() + methodName.slice(1);\n\n    let retry = constructRetry(\n      methodConfig,\n      serviceConfig.retry_codes,\n      serviceConfig.retry_params,\n      retryNames\n    );\n    let bundlingConfig = methodConfig.bundling;\n    let timeout = methodConfig.timeout_millis;\n    if (methodName in overridingMethods) {\n      const overridingMethod = overridingMethods[methodName];\n      if (overridingMethod) {\n        if ('bundling' in overridingMethod) {\n          bundlingConfig = overridingMethod.bundling;\n        }\n        if ('timeout_millis' in overridingMethod) {\n          timeout = overridingMethod.timeout_millis;\n        }\n      }\n      retry = mergeRetryOptions(\n        retry!,\n        constructRetry(\n          overridingMethod,\n          overrides.retry_codes,\n          overrides.retry_params,\n          retryNames\n        )!\n      );\n    }\n\n    defaults[jsName] = new CallSettings({\n      timeout,\n      retry,\n      bundleOptions: bundlingConfig\n        ? createBundleOptions(bundlingConfig)\n        : null,\n      otherArgs,\n      promise: promise || Promise,\n    });\n  }\n\n  return defaults;\n}\n\n    \n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Bindings.html":{"url":"interfaces/Bindings.html","title":"interface - Bindings","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  Bindings\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/pathTemplate.ts\n        \n\n\n\n\n\n            \n    Indexable\n        \n            \n                \n                    \n                        [index: string]:        string\n\n                    \n                \n                        \n                            \n                                Defined in src/pathTemplate.ts:51\n                            \n                        \n            \n        \n\n\n    \n\n\n    \n        import has = require('lodash.has');\nimport * as util from 'util';\nimport * as extras from './parserExtras';\nconst parser = require('./pathTemplateParser');\n\nexport interface ParseResult {\n  size: number;\n  segments: Segment[];\n}\n\nexport interface Segment {\n  kind: number;\n  literal: string;\n}\n\nexport interface Bindings {\n  [index: string]: string;\n}\n\nexport class PathTemplate {\n  private readonly parseResult: ParseResult;\n\n  get size(): number {\n    return this.parseResult.size;\n  }\n\n  get segments(): Segment[] {\n    return this.parseResult.segments;\n  }\n\n  /**\n   * @param {String} data the of the template\n   *\n   * @constructor\n   */\n  constructor(data: string) {\n    this.parseResult = extras.finishParse(parser.parse(data));\n  }\n\n  /**\n   * Matches a fully-qualified path template string.\n   *\n   * @param {String} path a fully-qualified path template string\n   * @return {Object} contains const names matched to binding values\n   * @throws {TypeError} if path can't be matched to this template\n   */\n  match(path: string): Bindings {\n    const pathSegments = path.split('/');\n    const bindings: Bindings = {};\n    let segmentCount = this.size;\n    let current: string;\n    let index = 0;\n    this.segments.forEach(segment => {\n      if (index > pathSegments.length) {\n        return;\n      }\n      if (segment.kind === extras.BINDING) {\n        current = segment.literal;\n      } else if (segment.kind === extras.TERMINAL) {\n        if (segment.literal === '*') {\n          bindings[current] = pathSegments[index];\n          index += 1;\n        } else if (segment.literal === '**') {\n          const size = pathSegments.length - segmentCount + 1;\n          segmentCount += size - 1;\n          bindings[current] = pathSegments.slice(index, index + size).join('/');\n          index += size;\n        } else if (segment.literal === pathSegments[index]) {\n          index += 1;\n        } else {\n          const msg = util.format(\n            \"mismatched literal (index=%d): '%s' != '%s'\",\n            index,\n            segment.literal,\n            pathSegments[index]\n          );\n          throw new TypeError(msg);\n        }\n      }\n    });\n    if (index !== pathSegments.length || index !== segmentCount) {\n      const msg = util.format(\n        'match error: could not instantiate a path template from %s',\n        path\n      );\n      throw new TypeError(msg);\n    }\n    return bindings;\n  }\n\n  /**\n   * Renders a path template using the provided bindings.\n   *\n   * @param {Object} bindings a mapping of const names to binding strings\n   * @return {String} a rendered representation of the path template\n   * @throws {TypeError} if a key is missing, or if a sub-template cannot be\n   *   parsed\n   */\n  render(bindings: Bindings): string {\n    const out: Segment[] = [];\n    let inABinding = false;\n    this.segments.forEach(segment => {\n      if (segment.kind === extras.BINDING) {\n        if (!has(bindings, segment.literal)) {\n          const msg = util.format(\n            'Value for key %s is not provided in %s',\n            segment.literal,\n            bindings\n          );\n          throw new TypeError(msg);\n        }\n        const tmp = new PathTemplate(bindings[segment.literal]);\n        Array.prototype.push.apply(out, tmp.segments);\n        inABinding = true;\n      } else if (segment.kind === extras.END_BINDING) {\n        inABinding = false;\n      } else if (inABinding) {\n        return;\n      } else {\n        out.push(segment);\n      }\n    });\n\n    const result = formatSegments(out);\n    this.match(result);\n    return result;\n  }\n\n  /**\n   * Renders the path template.\n   *\n   * @return {string} contains const names matched to binding values\n   */\n  inspect() {\n    return formatSegments(this.segments);\n  }\n}\n\n/**\n * Creates the string representattion for the segments.\n * @param {Object[]} segments - The array of segments.\n * @return {string} - A string representing segments in the path template\n *   format.\n */\nfunction formatSegments(segments: Segment[]): string {\n  let out = '';\n  let slash = true;\n  segments.forEach(segment => {\n    if (segment.kind === extras.TERMINAL) {\n      if (slash) {\n        out += '/';\n      }\n      out += segment.literal;\n      return;\n    }\n    slash = true;\n    if (segment.kind === extras.BINDING) {\n      out += '/{' + segment.literal + '=';\n      slash = false;\n    } else {\n      out += segment.literal + '}';\n    }\n  });\n  return out.substring(1);\n}\n\n    \n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/BundleApiCaller.html":{"url":"classes/BundleApiCaller.html","title":"class - BundleApiCaller","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  BundleApiCaller\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/bundlingCalls/bundleApiCaller.ts\n        \n\n            \n                Description\n            \n            \n                An implementation of APICaller for bundled calls.\nUses BundleExecutor to do bundling.\n\n            \n\n\n            \n                Implements\n            \n            \n                            APICaller\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                bundler\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                call\n                            \n                            \n                                fail\n                            \n                            \n                                init\n                            \n                            \n                                result\n                            \n                            \n                                wrap\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(bundler: BundleExecutor)\n                    \n                \n                        \n                            \n                                Defined in src/bundlingCalls/bundleApiCaller.ts:46\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        bundler\n                                                  \n                                                        \n                                                                        BundleExecutor\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            bundler\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         BundleExecutor\n\n                        \n                    \n                        \n                            \n                                    Defined in src/bundlingCalls/bundleApiCaller.ts:46\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            call\n                        \n                        \n                    \n                \n            \n            \n                \ncall(apiCall: SimpleCallbackFunction, argument: literal type, settings: CallSettings, status: OngoingCallPromise)\n                \n            \n\n\n            \n                \n                    Defined in src/bundlingCalls/bundleApiCaller.ts:66\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    apiCall\n                                    \n                                                SimpleCallbackFunction\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    argument\n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    settings\n                                    \n                                                CallSettings\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    status\n                                    \n                                                OngoingCallPromise\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            fail\n                        \n                        \n                    \n                \n            \n            \n                \nfail(canceller: OngoingCallPromise, err: GoogleError)\n                \n            \n\n\n            \n                \n                    Defined in src/bundlingCalls/bundleApiCaller.ts:82\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    canceller\n                                    \n                                                OngoingCallPromise\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    err\n                                    \n                                                GoogleError\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            init\n                        \n                        \n                    \n                \n            \n            \n                \ninit(settings: ApiCallerSettings, callback?: APICallback)\n                \n            \n\n\n            \n                \n                    Defined in src/bundlingCalls/bundleApiCaller.ts:52\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    settings\n                                    \n                                                ApiCallerSettings\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    callback\n                                    \n                                                APICallback\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     OngoingCallPromise | OngoingCall\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            result\n                        \n                        \n                    \n                \n            \n            \n                \nresult(canceller: OngoingCallPromise)\n                \n            \n\n\n            \n                \n                    Defined in src/bundlingCalls/bundleApiCaller.ts:86\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    canceller\n                                    \n                                                OngoingCallPromise\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            wrap\n                        \n                        \n                    \n                \n            \n            \n                \nwrap(func: GRPCCall)\n                \n            \n\n\n            \n                \n                    Defined in src/bundlingCalls/bundleApiCaller.ts:62\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    func\n                                    \n                                                GRPCCall\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         GRPCCall\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {APICaller, ApiCallerSettings} from '../apiCaller';\nimport {APICallback, GRPCCall, SimpleCallbackFunction} from '../apitypes';\nimport {OngoingCall, OngoingCallPromise} from '../call';\nimport {CallSettings} from '../gax';\nimport {GoogleError} from '../googleError';\n\nimport {BundleExecutor} from './bundleExecutor';\nimport {TaskCallback} from './task';\n\n/**\n * An implementation of APICaller for bundled calls.\n * Uses BundleExecutor to do bundling.\n */\nexport class BundleApiCaller implements APICaller {\n  bundler: BundleExecutor;\n\n  constructor(bundler: BundleExecutor) {\n    this.bundler = bundler;\n  }\n\n  init(\n    settings: ApiCallerSettings,\n    callback?: APICallback\n  ): OngoingCallPromise | OngoingCall {\n    if (callback) {\n      return new OngoingCall(callback);\n    }\n    return new OngoingCallPromise(settings.promise);\n  }\n\n  wrap(func: GRPCCall): GRPCCall {\n    return func;\n  }\n\n  call(\n    apiCall: SimpleCallbackFunction,\n    argument: {},\n    settings: CallSettings,\n    status: OngoingCallPromise\n  ) {\n    if (!settings.isBundling) {\n      throw new GoogleError('Bundling enabled with no isBundling!');\n    }\n\n    status.call((argument: {}, callback: TaskCallback) => {\n      this.bundler.schedule(apiCall, argument, callback);\n      return status;\n    }, argument);\n  }\n\n  fail(canceller: OngoingCallPromise, err: GoogleError): void {\n    canceller.callback!(err);\n  }\n\n  result(canceller: OngoingCallPromise) {\n    return canceller.promise;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/BundleDescriptor.html":{"url":"classes/BundleDescriptor.html","title":"class - BundleDescriptor","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  BundleDescriptor\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/bundlingCalls/bundleDescriptor.ts\n        \n\n            \n                Description\n            \n            \n                A descriptor for calls that can be bundled into one call.\n\n            \n\n\n            \n                Implements\n            \n            \n                            Descriptor\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                bundledField\n                            \n                            \n                                byteLengthFunction\n                            \n                            \n                                requestDiscriminatorFields\n                            \n                            \n                                subresponseField\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getApiCaller\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(bundledField: string, requestDiscriminatorFields: string[], subresponseField: string | null, byteLengthFunction: Function)\n                    \n                \n                        \n                            \n                                Defined in src/bundlingCalls/bundleDescriptor.ts:46\n                            \n                        \n\n                \n                    \n                            Describes the structure of bundled call.\nrequestDiscriminatorFields may include '.' as a separator, which is used to\nindicate object traversal. This allows fields in nested objects to be used\nto determine what request to bundle.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        bundledField\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nthe repeated field in the request message\nthat will have its elements aggregated by bundling.\n\n\n                                                        \n                                                \n                                                \n                                                        requestDiscriminatorFields\n                                                  \n                                                        \n                                                                    string[]\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \na list of fields in the\ntarget request message class that are used to detemrine which request\nmessages should be bundled together.\n\n\n                                                        \n                                                \n                                                \n                                                        subresponseField\n                                                  \n                                                        \n                                                                    string | null\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nan optional field, when present it\nindicates the field in the response message that should be used to\ndemultiplex the response into multiple response messages.\n\n\n                                                        \n                                                \n                                                \n                                                        byteLengthFunction\n                                                  \n                                                        \n                                                                        Function\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \na function to obtain the byte\nlength to be consumed for the bundled field messages. Because Node.JS\nprotobuf.js/gRPC uses builtin Objects for the user-visible data and\ninternally they are encoded/decoded in protobuf manner, this function\nis actually necessary to calculate the byte length.\n\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            bundledField\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/bundlingCalls/bundleDescriptor.ts:43\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            byteLengthFunction\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Function\n\n                        \n                    \n                        \n                            \n                                    Defined in src/bundlingCalls/bundleDescriptor.ts:46\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            requestDiscriminatorFields\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     string[]\n\n                        \n                    \n                        \n                            \n                                    Defined in src/bundlingCalls/bundleDescriptor.ts:44\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            subresponseField\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     string | null\n\n                        \n                    \n                        \n                            \n                                    Defined in src/bundlingCalls/bundleDescriptor.ts:45\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getApiCaller\n                        \n                        \n                    \n                \n            \n            \n                \ngetApiCaller(settings: CallSettings)\n                \n            \n\n\n            \n                \n                    Defined in src/bundlingCalls/bundleDescriptor.ts:91\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    settings\n                                    \n                                                CallSettings\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {Descriptor} from '../descriptor';\nimport {CallSettings} from '../gax';\nimport {NormalApiCaller} from '../normalCalls/normalApiCaller';\n\nimport {BundleApiCaller} from './bundleApiCaller';\nimport {BundleExecutor} from './bundleExecutor';\n\n/**\n * A descriptor for calls that can be bundled into one call.\n */\nexport class BundleDescriptor implements Descriptor {\n  bundledField: string;\n  requestDiscriminatorFields: string[];\n  subresponseField: string | null;\n  byteLengthFunction: Function;\n\n  /**\n   * Describes the structure of bundled call.\n   *\n   * requestDiscriminatorFields may include '.' as a separator, which is used to\n   * indicate object traversal. This allows fields in nested objects to be used\n   * to determine what request to bundle.\n   *\n   * @property {String} bundledField\n   * @property {String} requestDiscriminatorFields\n   * @property {String} subresponseField\n   * @property {Function} byteLengthFunction\n   *\n   * @param {String} bundledField - the repeated field in the request message\n   *   that will have its elements aggregated by bundling.\n   * @param {String} requestDiscriminatorFields - a list of fields in the\n   *   target request message class that are used to detemrine which request\n   *   messages should be bundled together.\n   * @param {String} subresponseField - an optional field, when present it\n   *   indicates the field in the response message that should be used to\n   *   demultiplex the response into multiple response messages.\n   * @param {Function} byteLengthFunction - a function to obtain the byte\n   *   length to be consumed for the bundled field messages. Because Node.JS\n   *   protobuf.js/gRPC uses builtin Objects for the user-visible data and\n   *   internally they are encoded/decoded in protobuf manner, this function\n   *   is actually necessary to calculate the byte length.\n   * @constructor\n   */\n  constructor(\n    bundledField: string,\n    requestDiscriminatorFields: string[],\n    subresponseField: string | null,\n    byteLengthFunction: Function\n  ) {\n    if (!byteLengthFunction && typeof subresponseField === 'function') {\n      byteLengthFunction = subresponseField;\n      subresponseField = null;\n    }\n    this.bundledField = bundledField;\n    this.requestDiscriminatorFields = requestDiscriminatorFields;\n    this.subresponseField = subresponseField;\n    this.byteLengthFunction = byteLengthFunction;\n  }\n\n  getApiCaller(settings: CallSettings) {\n    if (settings.isBundling === false) {\n      return new NormalApiCaller();\n    }\n    return new BundleApiCaller(\n      new BundleExecutor(settings.bundleOptions!, this)\n    );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/BundleExecutor.html":{"url":"classes/BundleExecutor.html","title":"class - BundleExecutor","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  BundleExecutor\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/bundlingCalls/bundleExecutor.ts\n        \n\n            \n                Description\n            \n            \n                BundleExecutor stores several timers for each bundle (calls are bundled based\non the options passed, each bundle has unique ID that is calculated based on\nfield values). Each timer fires and sends a call after certain amount of\ntime, and if a new request comes to the same bundle, the timer can be\nrestarted.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                _descriptor\n                            \n                            \n                                _invocationId\n                            \n                            \n                                _invocations\n                            \n                            \n                                _options\n                            \n                            \n                                _tasks\n                            \n                            \n                                _timers\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                _runNow\n                            \n                            \n                                schedule\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(bundleOptions: BundleOptions, bundleDescriptor: BundleDescriptor)\n                    \n                \n                        \n                            \n                                Defined in src/bundlingCalls/bundleExecutor.ts:65\n                            \n                        \n\n                \n                    \n                            Organizes requests for an api service that requires to bundle them.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        bundleOptions\n                                                  \n                                                        \n                                                                        BundleOptions\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nconfigures strategy this instance\nuses when executing bundled functions.\n\n\n                                                        \n                                                \n                                                \n                                                        bundleDescriptor\n                                                  \n                                                        \n                                                                        BundleDescriptor\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nthe description of the bundling.\n\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            _descriptor\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         BundleDescriptor\n\n                        \n                    \n                        \n                            \n                                    Defined in src/bundlingCalls/bundleExecutor.ts:61\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            _invocationId\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                        \n                            \n                                    Defined in src/bundlingCalls/bundleExecutor.ts:65\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            _invocations\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     literal type\n\n                        \n                    \n                        \n                            \n                                    Defined in src/bundlingCalls/bundleExecutor.ts:64\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            _options\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         BundleOptions\n\n                        \n                    \n                        \n                            \n                                    Defined in src/bundlingCalls/bundleExecutor.ts:60\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            _tasks\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     literal type\n\n                        \n                    \n                        \n                            \n                                    Defined in src/bundlingCalls/bundleExecutor.ts:62\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            _timers\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     literal type\n\n                        \n                    \n                        \n                            \n                                    Defined in src/bundlingCalls/bundleExecutor.ts:63\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            _runNow\n                        \n                        \n                    \n                \n            \n            \n                \n_runNow(bundleId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/bundlingCalls/bundleExecutor.ts:261\n                \n            \n\n\n            \n                \n                    Invokes a task.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    bundleId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nThe id for the task.\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            schedule\n                        \n                        \n                    \n                \n            \n            \n                \nschedule(apiCall: SimpleCallbackFunction, request: literal type, callback?: TaskCallback)\n                \n            \n\n\n            \n                \n                    Defined in src/bundlingCalls/bundleExecutor.ts:94\n                \n            \n\n\n            \n                \n                    Schedule a method call.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    apiCall\n                                    \n                                                SimpleCallbackFunction\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nthe function for an API call.\n\n\n                                    \n                                \n                                \n                                    request\n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nthe request object to be bundled with others.\n\n\n                                    \n                                \n                                \n                                    callback\n                                    \n                                                TaskCallback\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        \nthe callback to be called when the method finished.\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \nthe function to cancel the scheduled invocation.\n\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {status} from '@grpc/grpc-js';\n\nimport {SimpleCallbackFunction} from '../apitypes';\nimport {GoogleError} from '../googleError';\nimport {warn} from '../warnings';\n\nimport {BundleDescriptor} from './bundleDescriptor';\nimport {computeBundleId} from './bundlingUtils';\nimport {Task, TaskCallback} from './task';\n\nfunction noop() {}\n\nexport interface BundleOptions {\n  elementCountLimit: number;\n  requestByteLimit: number;\n  elementCountThreshold: number;\n  requestByteThreshold: number;\n  delayThreshold: number;\n}\n\n/**\n * BundleExecutor stores several timers for each bundle (calls are bundled based\n * on the options passed, each bundle has unique ID that is calculated based on\n * field values). Each timer fires and sends a call after certain amount of\n * time, and if a new request comes to the same bundle, the timer can be\n * restarted.\n */\nexport class BundleExecutor {\n  _options: BundleOptions;\n  _descriptor: BundleDescriptor;\n  _tasks: {[index: string]: Task};\n  _timers: {[index: string]: NodeJS.Timer};\n  _invocations: {[index: string]: string};\n  _invocationId: number;\n  /**\n   * Organizes requests for an api service that requires to bundle them.\n   *\n   * @param {BundleOptions} bundleOptions - configures strategy this instance\n   *   uses when executing bundled functions.\n   * @param {BundleDescriptor} bundleDescriptor - the description of the bundling.\n   * @constructor\n   */\n  constructor(\n    bundleOptions: BundleOptions,\n    bundleDescriptor: BundleDescriptor\n  ) {\n    this._options = bundleOptions;\n    this._descriptor = bundleDescriptor;\n    this._tasks = {};\n    this._timers = {};\n    this._invocations = {};\n    this._invocationId = 0;\n  }\n\n  /**\n   * Schedule a method call.\n   *\n   * @param {function} apiCall - the function for an API call.\n   * @param {Object} request - the request object to be bundled with others.\n   * @param {APICallback} callback - the callback to be called when the method finished.\n   * @return {function()} - the function to cancel the scheduled invocation.\n   */\n  schedule(\n    apiCall: SimpleCallbackFunction,\n    request: {[index: string]: Array | string},\n    callback?: TaskCallback\n  ) {\n    const bundleId = computeBundleId(\n      request,\n      this._descriptor.requestDiscriminatorFields\n    );\n    callback = (callback || noop) as TaskCallback;\n    if (bundleId === undefined) {\n      warn(\n        'bundling_schedule_bundleid_undefined',\n        'The request does not have enough information for request bundling. ' +\n          `Invoking immediately. Request: ${JSON.stringify(request)} ` +\n          `discriminator fields: ${this._descriptor.requestDiscriminatorFields}`\n      );\n      return apiCall(request, callback);\n    }\n    if (request[this._descriptor.bundledField] === undefined) {\n      warn(\n        'bundling_no_bundled_field',\n        `Request does not contain field ${\n          this._descriptor.bundledField\n        } that must present for bundling. ` +\n          `Invoking immediately. Request: ${JSON.stringify(request)}`\n      );\n      return apiCall(request, callback);\n    }\n\n    if (!(bundleId in this._tasks)) {\n      this._tasks[bundleId] = new Task(\n        apiCall,\n        request,\n        this._descriptor.bundledField,\n        this._descriptor.subresponseField\n      );\n    }\n    let task = this._tasks[bundleId];\n    callback.id = String(this._invocationId++);\n    this._invocations[callback.id] = bundleId;\n\n    const bundledField = request[this._descriptor.bundledField] as Array;\n    const elementCount = bundledField.length;\n    let requestBytes = 0;\n    const self = this;\n    bundledField.forEach(obj => {\n      requestBytes += this._descriptor.byteLengthFunction(obj);\n    });\n\n    const countLimit = this._options.elementCountLimit || 0;\n    const byteLimit = this._options.requestByteLimit || 0;\n\n    if (\n      (countLimit > 0 && elementCount > countLimit) ||\n      (byteLimit > 0 && requestBytes >= byteLimit)\n    ) {\n      let message;\n      if (countLimit > 0 && elementCount > countLimit) {\n        message =\n          'The number of elements ' +\n          elementCount +\n          ' exceeds the limit ' +\n          this._options.elementCountLimit;\n      } else {\n        message =\n          'The required bytes ' +\n          requestBytes +\n          ' exceeds the limit ' +\n          this._options.requestByteLimit;\n      }\n      const error = new GoogleError(message);\n      error.code = status.INVALID_ARGUMENT;\n      callback(error);\n      return {\n        cancel: noop,\n      };\n    }\n\n    const existingCount = task.getElementCount();\n    const existingBytes = task.getRequestByteSize();\n\n    if (\n      (countLimit > 0 && elementCount + existingCount >= countLimit) ||\n      (byteLimit > 0 && requestBytes + existingBytes >= byteLimit)\n    ) {\n      this._runNow(bundleId);\n      this._tasks[bundleId] = new Task(\n        apiCall,\n        request,\n        this._descriptor.bundledField,\n        this._descriptor.subresponseField\n      );\n      task = this._tasks[bundleId];\n    }\n\n    task.extend(bundledField, requestBytes, callback);\n    const ret = {\n      cancel() {\n        self._cancel(callback!.id!);\n      },\n    };\n\n    const countThreshold = this._options.elementCountThreshold || 0;\n    const sizeThreshold = this._options.requestByteThreshold || 0;\n    if (\n      (countThreshold > 0 && task.getElementCount() >= countThreshold) ||\n      (sizeThreshold > 0 && task.getRequestByteSize() >= sizeThreshold)\n    ) {\n      this._runNow(bundleId);\n      return ret;\n    }\n\n    if (!(bundleId in this._timers) && this._options.delayThreshold > 0) {\n      this._timers[bundleId] = setTimeout(() => {\n        delete this._timers[bundleId];\n        this._runNow(bundleId);\n      }, this._options.delayThreshold);\n    }\n\n    return ret;\n  }\n\n  /**\n   * Clears scheduled timeout if it exists.\n   *\n   * @param {String} bundleId - the id for the task whose timeout needs to be\n   *   cleared.\n   * @private\n   */\n  private _maybeClearTimeout(bundleId: string) {\n    if (bundleId in this._timers) {\n      const timerId = this._timers[bundleId];\n      delete this._timers[bundleId];\n      clearTimeout(timerId);\n    }\n  }\n\n  /**\n   * Cancels an event.\n   *\n   * @param {String} id - The id for the event in the task.\n   * @private\n   */\n  private _cancel(id: string) {\n    if (!(id in this._invocations)) {\n      return;\n    }\n    const bundleId = this._invocations[id];\n    if (!(bundleId in this._tasks)) {\n      return;\n    }\n\n    const task = this._tasks[bundleId];\n    delete this._invocations[id];\n    if (task.cancel(id)) {\n      this._maybeClearTimeout(bundleId);\n      delete this._tasks[bundleId];\n    }\n  }\n\n  /**\n   * Invokes a task.\n   *\n   * @param {String} bundleId - The id for the task.\n   * @private\n   */\n  _runNow(bundleId: string) {\n    if (!(bundleId in this._tasks)) {\n      warn('bundle_runnow_bundleid_unknown', `No such bundleid: ${bundleId}`);\n      return;\n    }\n    this._maybeClearTimeout(bundleId);\n    const task = this._tasks[bundleId];\n    delete this._tasks[bundleId];\n\n    task.run().forEach(id => {\n      delete this._invocations[id];\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/BundleOptions.html":{"url":"interfaces/BundleOptions.html","title":"interface - BundleOptions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  BundleOptions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/bundlingCalls/bundleExecutor.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        delayThreshold\n                                \n                                \n                                        elementCountLimit\n                                \n                                \n                                        elementCountThreshold\n                                \n                                \n                                        requestByteLimit\n                                \n                                \n                                        requestByteThreshold\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        delayThreshold\n                                    \n                                \n                                \n                                    \n                                        delayThreshold:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        elementCountLimit\n                                    \n                                \n                                \n                                    \n                                        elementCountLimit:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        elementCountThreshold\n                                    \n                                \n                                \n                                    \n                                        elementCountThreshold:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        requestByteLimit\n                                    \n                                \n                                \n                                    \n                                        requestByteLimit:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        requestByteThreshold\n                                    \n                                \n                                \n                                    \n                                        requestByteThreshold:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import {status} from '@grpc/grpc-js';\n\nimport {SimpleCallbackFunction} from '../apitypes';\nimport {GoogleError} from '../googleError';\nimport {warn} from '../warnings';\n\nimport {BundleDescriptor} from './bundleDescriptor';\nimport {computeBundleId} from './bundlingUtils';\nimport {Task, TaskCallback} from './task';\n\nfunction noop() {}\n\nexport interface BundleOptions {\n  elementCountLimit: number;\n  requestByteLimit: number;\n  elementCountThreshold: number;\n  requestByteThreshold: number;\n  delayThreshold: number;\n}\n\n/**\n * BundleExecutor stores several timers for each bundle (calls are bundled based\n * on the options passed, each bundle has unique ID that is calculated based on\n * field values). Each timer fires and sends a call after certain amount of\n * time, and if a new request comes to the same bundle, the timer can be\n * restarted.\n */\nexport class BundleExecutor {\n  _options: BundleOptions;\n  _descriptor: BundleDescriptor;\n  _tasks: {[index: string]: Task};\n  _timers: {[index: string]: NodeJS.Timer};\n  _invocations: {[index: string]: string};\n  _invocationId: number;\n  /**\n   * Organizes requests for an api service that requires to bundle them.\n   *\n   * @param {BundleOptions} bundleOptions - configures strategy this instance\n   *   uses when executing bundled functions.\n   * @param {BundleDescriptor} bundleDescriptor - the description of the bundling.\n   * @constructor\n   */\n  constructor(\n    bundleOptions: BundleOptions,\n    bundleDescriptor: BundleDescriptor\n  ) {\n    this._options = bundleOptions;\n    this._descriptor = bundleDescriptor;\n    this._tasks = {};\n    this._timers = {};\n    this._invocations = {};\n    this._invocationId = 0;\n  }\n\n  /**\n   * Schedule a method call.\n   *\n   * @param {function} apiCall - the function for an API call.\n   * @param {Object} request - the request object to be bundled with others.\n   * @param {APICallback} callback - the callback to be called when the method finished.\n   * @return {function()} - the function to cancel the scheduled invocation.\n   */\n  schedule(\n    apiCall: SimpleCallbackFunction,\n    request: {[index: string]: Array | string},\n    callback?: TaskCallback\n  ) {\n    const bundleId = computeBundleId(\n      request,\n      this._descriptor.requestDiscriminatorFields\n    );\n    callback = (callback || noop) as TaskCallback;\n    if (bundleId === undefined) {\n      warn(\n        'bundling_schedule_bundleid_undefined',\n        'The request does not have enough information for request bundling. ' +\n          `Invoking immediately. Request: ${JSON.stringify(request)} ` +\n          `discriminator fields: ${this._descriptor.requestDiscriminatorFields}`\n      );\n      return apiCall(request, callback);\n    }\n    if (request[this._descriptor.bundledField] === undefined) {\n      warn(\n        'bundling_no_bundled_field',\n        `Request does not contain field ${\n          this._descriptor.bundledField\n        } that must present for bundling. ` +\n          `Invoking immediately. Request: ${JSON.stringify(request)}`\n      );\n      return apiCall(request, callback);\n    }\n\n    if (!(bundleId in this._tasks)) {\n      this._tasks[bundleId] = new Task(\n        apiCall,\n        request,\n        this._descriptor.bundledField,\n        this._descriptor.subresponseField\n      );\n    }\n    let task = this._tasks[bundleId];\n    callback.id = String(this._invocationId++);\n    this._invocations[callback.id] = bundleId;\n\n    const bundledField = request[this._descriptor.bundledField] as Array;\n    const elementCount = bundledField.length;\n    let requestBytes = 0;\n    const self = this;\n    bundledField.forEach(obj => {\n      requestBytes += this._descriptor.byteLengthFunction(obj);\n    });\n\n    const countLimit = this._options.elementCountLimit || 0;\n    const byteLimit = this._options.requestByteLimit || 0;\n\n    if (\n      (countLimit > 0 && elementCount > countLimit) ||\n      (byteLimit > 0 && requestBytes >= byteLimit)\n    ) {\n      let message;\n      if (countLimit > 0 && elementCount > countLimit) {\n        message =\n          'The number of elements ' +\n          elementCount +\n          ' exceeds the limit ' +\n          this._options.elementCountLimit;\n      } else {\n        message =\n          'The required bytes ' +\n          requestBytes +\n          ' exceeds the limit ' +\n          this._options.requestByteLimit;\n      }\n      const error = new GoogleError(message);\n      error.code = status.INVALID_ARGUMENT;\n      callback(error);\n      return {\n        cancel: noop,\n      };\n    }\n\n    const existingCount = task.getElementCount();\n    const existingBytes = task.getRequestByteSize();\n\n    if (\n      (countLimit > 0 && elementCount + existingCount >= countLimit) ||\n      (byteLimit > 0 && requestBytes + existingBytes >= byteLimit)\n    ) {\n      this._runNow(bundleId);\n      this._tasks[bundleId] = new Task(\n        apiCall,\n        request,\n        this._descriptor.bundledField,\n        this._descriptor.subresponseField\n      );\n      task = this._tasks[bundleId];\n    }\n\n    task.extend(bundledField, requestBytes, callback);\n    const ret = {\n      cancel() {\n        self._cancel(callback!.id!);\n      },\n    };\n\n    const countThreshold = this._options.elementCountThreshold || 0;\n    const sizeThreshold = this._options.requestByteThreshold || 0;\n    if (\n      (countThreshold > 0 && task.getElementCount() >= countThreshold) ||\n      (sizeThreshold > 0 && task.getRequestByteSize() >= sizeThreshold)\n    ) {\n      this._runNow(bundleId);\n      return ret;\n    }\n\n    if (!(bundleId in this._timers) && this._options.delayThreshold > 0) {\n      this._timers[bundleId] = setTimeout(() => {\n        delete this._timers[bundleId];\n        this._runNow(bundleId);\n      }, this._options.delayThreshold);\n    }\n\n    return ret;\n  }\n\n  /**\n   * Clears scheduled timeout if it exists.\n   *\n   * @param {String} bundleId - the id for the task whose timeout needs to be\n   *   cleared.\n   * @private\n   */\n  private _maybeClearTimeout(bundleId: string) {\n    if (bundleId in this._timers) {\n      const timerId = this._timers[bundleId];\n      delete this._timers[bundleId];\n      clearTimeout(timerId);\n    }\n  }\n\n  /**\n   * Cancels an event.\n   *\n   * @param {String} id - The id for the event in the task.\n   * @private\n   */\n  private _cancel(id: string) {\n    if (!(id in this._invocations)) {\n      return;\n    }\n    const bundleId = this._invocations[id];\n    if (!(bundleId in this._tasks)) {\n      return;\n    }\n\n    const task = this._tasks[bundleId];\n    delete this._invocations[id];\n    if (task.cancel(id)) {\n      this._maybeClearTimeout(bundleId);\n      delete this._tasks[bundleId];\n    }\n  }\n\n  /**\n   * Invokes a task.\n   *\n   * @param {String} bundleId - The id for the task.\n   * @private\n   */\n  _runNow(bundleId: string) {\n    if (!(bundleId in this._tasks)) {\n      warn('bundle_runnow_bundleid_unknown', `No such bundleid: ${bundleId}`);\n      return;\n    }\n    this._maybeClearTimeout(bundleId);\n    const task = this._tasks[bundleId];\n    delete this._tasks[bundleId];\n\n    task.run().forEach(id => {\n      delete this._invocations[id];\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/BundlingConfig.html":{"url":"interfaces/BundlingConfig.html","title":"interface - BundlingConfig","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  BundlingConfig\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/gax.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        delay_threshold_millis\n                                \n                                \n                                        element_count_limit\n                                \n                                \n                                        element_count_threshold\n                                \n                                \n                                        request_byte_limit\n                                \n                                \n                                        request_byte_threshold\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n            \n    Indexable\n        \n            \n                \n                    \n                        [index: string]:        number\n\n                    \n                \n                        \n                            \n                                Defined in src/gax.ts:591\n                            \n                        \n            \n        \n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        delay_threshold_millis\n                                    \n                                \n                                \n                                    \n                                        delay_threshold_millis:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        element_count_limit\n                                    \n                                \n                                \n                                    \n                                        element_count_limit:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        element_count_threshold\n                                    \n                                \n                                \n                                    \n                                        element_count_threshold:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        request_byte_limit\n                                    \n                                \n                                \n                                    \n                                        request_byte_limit:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        request_byte_threshold\n                                    \n                                \n                                \n                                    \n                                        request_byte_threshold:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import {BundleOptions} from './bundlingCalls/bundleExecutor';\n\n/**\n * Encapsulates the overridable settings for a particular API call.\n *\n * ``CallOptions`` is an optional arg for all GAX API calls.  It is used to\n * configure the settings of a specific API call.\n *\n * When provided, its values override the GAX service defaults for that\n * particular call.\n *\n * Typically the API clients will accept this as the second to the last\n * argument. See the examples below.\n * @typedef {Object} CallOptions\n * @property {number=} timeout - The client-side timeout for API calls.\n * @property {RetryOptions=} retry - determines whether and how to retry\n *   on transient errors. When set to null, the call will not retry.\n * @property {boolean=} autoPaginate - If set to false and the call is\n *   configured for paged iteration, page unrolling is not performed, instead\n *   the callback will be called with the response object.\n * @property {Object=} pageToken - If set and the call is configured for\n *   paged iteration, paged iteration is not performed and requested with this\n *   pageToken.\n * @property {number} maxResults - If set and the call is configured for\n *   paged iteration, the call will stop when the number of response elements\n *   reaches to the specified size. By default, it will unroll the page to\n *   the end of the list.\n * @property {boolean=} isBundling - If set to false and the call is configured\n *   for bundling, bundling is not performed.\n * @property {BackoffSettings=} longrunning - BackoffSettings used for polling.\n * @property {Function=} promise - A constructor for a promise that implements the ES6\n * specification of promise which will be used to create promises. If not\n * provided, native promises will be used.\n * @example\n * // suppress bundling for bundled method.\n * api.bundlingMethod(\n *     param, {optParam: aValue, isBundling: false}, function(err, response) {\n *   // handle response.\n * });\n * @example\n * // suppress streaming for page-streaming method.\n * api.pageStreamingMethod(\n *     param, {optParam: aValue, autoPaginate: false}, function(err, page) {\n *   // not returning a stream, but callback is called with the paged response.\n * });\n */\n\n/**\n * Per-call configurable settings for retrying upon transient failure.\n * @typedef {Object} RetryOptions\n * @property {String[]} retryCodes\n * @property {BackoffSettings} backoffSettings\n */\nexport class RetryOptions {\n  retryCodes: number[];\n  backoffSettings: BackoffSettings;\n  constructor(retryCodes: number[], backoffSettings: BackoffSettings) {\n    this.retryCodes = retryCodes;\n    this.backoffSettings = backoffSettings;\n  }\n}\n\n/**\n * Parameters to the exponential backoff algorithm for retrying.\n * @typedef {Object} BackoffSettings\n * @property {number} initialRetryDelayMillis - the initial delay time,\n *   in milliseconds, between the completion of the first failed request and the\n *   initiation of the first retrying request.\n * @property {number} retryDelayMultiplier - the multiplier by which to\n *   increase the delay time between the completion of failed requests, and the\n *   initiation of the subsequent retrying request.\n * @property {number} maxRetryDelayMillis - the maximum delay time, in\n *   milliseconds, between requests. When this value is reached,\n *   ``retryDelayMultiplier`` will no longer be used to increase delay time.\n * @property {number} initialRpcTimeoutMillis - the initial timeout parameter\n *   to the request.\n * @propetry {number} rpcTimeoutMultiplier - the multiplier by which to\n *   increase the timeout parameter between failed requests.\n * @property {number} maxRpcTimeoutMillis - the maximum timeout parameter, in\n *   milliseconds, for a request. When this value is reached,\n *   ``rpcTimeoutMultiplier`` will no longer be used to increase the timeout.\n * @property {number} totalTimeoutMillis - the total time, in milliseconds,\n *   starting from when the initial request is sent, after which an error will\n *   be returned, regardless of the retrying attempts made meanwhile.\n */\nexport interface BackoffSettings {\n  maxRetries?: number;\n  initialRetryDelayMillis: number;\n  retryDelayMultiplier: number;\n  maxRetryDelayMillis: number;\n  initialRpcTimeoutMillis?: number | null;\n  maxRpcTimeoutMillis?: number | null;\n  totalTimeoutMillis?: number | null;\n  rpcTimeoutMultiplier?: number | null;\n}\n\n/**\n * Parameter to configure bundling behavior.\n * @typedef {Object} BundleOptions\n * @property {number} elementCountThreshold -\n *   the bundled request will be sent once the count of outstanding elements\n *   in the repeated field reaches this value.\n * @property {number} elementCountLimit -\n *   represents a hard limit on the number of elements in the repeated field\n *   of the bundle; if adding a request to a bundle would exceed this value,\n *   the bundle is sent and the new request is added to a fresh bundle. It is\n *   invalid for a single request to exceed this limit.\n * @property {number} requestByteThreshold -\n *   the bundled request will be sent once the count of bytes in the request\n *   reaches this value. Note that this value is pessimistically approximated\n *   by summing the bytesizes of the elements in the repeated field, and\n *   therefore may be an under-approximation.\n * @property {number} requestByteLimit -\n *   represents a hard limit on the size of the bundled request; if adding\n *   a request to a bundle would exceed this value, the bundle is sent and\n *   the new request is added to a fresh bundle. It is invalid for a single\n *   request to exceed this limit. Note that this value is pessimistically\n *   approximated by summing the bytesizes of the elements in the repeated\n *   field, with a buffer applied to correspond to the resulting\n *   under-approximation.\n * @property {number} delayThreshold -\n *   the bundled request will be sent this amount of time after the first\n *   element in the bundle was added to it.\n */\n\nexport interface CallOptions {\n  timeout?: number;\n  retry?: RetryOptions | null;\n  autoPaginate?: boolean;\n  pageToken?: string;\n  pageSize?: number;\n  maxResults?: number;\n  maxRetries?: number;\n  // tslint:disable-next-line no-any\n  otherArgs?: {[index: string]: any};\n  bundleOptions?: BundleOptions | null;\n  isBundling?: boolean;\n  longrunning?: BackoffSettings;\n  promise?: PromiseConstructor;\n}\n\nexport class CallSettings {\n  timeout: number;\n  retry?: RetryOptions | null;\n  autoPaginate?: boolean;\n  pageToken?: string;\n  pageSize?: number;\n  maxResults?: number;\n  // tslint:disable-next-line no-any\n  otherArgs: {[index: string]: any};\n  bundleOptions?: BundleOptions | null;\n  isBundling: boolean;\n  longrunning?: BackoffSettings;\n  promise: PromiseConstructor;\n\n  /**\n   * @param {Object} settings - An object containing parameters of this settings.\n   * @param {number} settings.timeout - The client-side timeout for API calls.\n   *   This parameter is ignored for retrying calls.\n   * @param {RetryOptions} settings.retry - The configuration for retrying upon\n   *   transient error. If set to null, this call will not retry.\n   * @param {boolean} settings.autoPaginate - If there is no `pageDescriptor`,\n   *   this attrbute has no meaning. Otherwise, determines whether a page\n   * streamed response should make the page structure transparent to the user by\n   *   flattening the repeated field in the returned generator.\n   * @param {number} settings.pageToken - If there is no `pageDescriptor`,\n   *   this attribute has no meaning. Otherwise, determines the page token used\n   * in the page streaming request.\n   * @param {Object} settings.otherArgs - Additional arguments to be passed to\n   *   the API calls.\n   * @param {Function=} settings.promise - A constructor for a promise that\n   * implements the ES6 specification of promise. If not provided, native\n   * promises will be used.\n   *\n   * @constructor\n   */\n  constructor(settings?: CallOptions) {\n    settings = settings || {};\n    this.timeout = settings.timeout || 30 * 1000;\n    this.retry = settings.retry;\n    this.autoPaginate =\n      'autoPaginate' in settings ? settings.autoPaginate : true;\n    this.pageToken = settings.pageToken;\n    this.maxResults = settings.maxResults;\n    this.otherArgs = settings.otherArgs || {};\n    this.bundleOptions = settings.bundleOptions;\n    this.isBundling = 'isBundling' in settings ? settings.isBundling! : true;\n    this.longrunning =\n      'longrunning' in settings ? settings.longrunning : undefined;\n    this.promise = 'promise' in settings ? settings.promise! : Promise;\n  }\n\n  /**\n   * Returns a new CallSettings merged from this and a CallOptions object.\n   *\n   * @param {CallOptions} options - an instance whose values override\n   *   those in this object. If null, ``merge`` returns a copy of this\n   *   object\n   * @return {CallSettings} The merged CallSettings instance.\n   */\n  merge(options?: CallOptions | null) {\n    if (!options) {\n      return new CallSettings(this);\n    }\n    let timeout = this.timeout;\n    let retry = this.retry;\n    let autoPaginate = this.autoPaginate;\n    let pageToken = this.pageToken;\n    let pageSize = this.pageSize;\n    let maxResults = this.maxResults;\n    let otherArgs = this.otherArgs;\n    let isBundling = this.isBundling;\n    let longrunning = this.longrunning;\n    let promise = this.promise;\n    if ('timeout' in options) {\n      timeout = options.timeout!;\n    }\n    if ('retry' in options) {\n      retry = options.retry;\n    }\n\n    if ('autoPaginate' in options && !options.autoPaginate) {\n      autoPaginate = false;\n    }\n\n    if ('pageToken' in options) {\n      autoPaginate = false;\n      pageToken = options.pageToken;\n    }\n\n    if ('pageSize' in options) {\n      pageSize = options.pageSize;\n    }\n\n    if ('maxResults' in options) {\n      maxResults = options.maxResults;\n    }\n\n    if ('otherArgs' in options) {\n      otherArgs = {};\n      // tslint:disable-next-line forin\n      for (const key in this.otherArgs) {\n        otherArgs[key] = this.otherArgs[key];\n      }\n      // tslint:disable-next-line forin\n      for (const optionsKey in options.otherArgs!) {\n        otherArgs[optionsKey] = options.otherArgs![optionsKey];\n      }\n    }\n\n    if ('isBundling' in options) {\n      isBundling = options.isBundling!;\n    }\n\n    if ('maxRetries' in options) {\n      retry!.backoffSettings!.maxRetries = options.maxRetries;\n      delete retry!.backoffSettings!.totalTimeoutMillis;\n    }\n\n    if ('longrunning' in options) {\n      longrunning = options.longrunning;\n    }\n\n    if ('promise' in options) {\n      promise = options.promise!;\n    }\n\n    return new CallSettings({\n      timeout,\n      retry,\n      bundleOptions: this.bundleOptions,\n      longrunning,\n      autoPaginate,\n      pageToken,\n      pageSize,\n      maxResults,\n      otherArgs,\n      isBundling,\n      promise,\n    });\n  }\n}\n\n/**\n * Per-call configurable settings for retrying upon transient failure.\n *\n * @param {number[]} retryCodes - a list of Google API canonical error codes\n *   upon which a retry should be attempted.\n * @param {BackoffSettings} backoffSettings - configures the retry\n *   exponential backoff algorithm.\n * @return {RetryOptions} A new RetryOptions object.\n *\n */\nexport function createRetryOptions(\n  retryCodes: number[],\n  backoffSettings: BackoffSettings\n): RetryOptions {\n  return {\n    retryCodes,\n    backoffSettings,\n  };\n}\n\n/**\n * Parameters to the exponential backoff algorithm for retrying.\n *\n * @param {number} initialRetryDelayMillis - the initial delay time,\n *   in milliseconds, between the completion of the first failed request and the\n *   initiation of the first retrying request.\n * @param {number} retryDelayMultiplier - the multiplier by which to\n *   increase the delay time between the completion of failed requests, and the\n *   initiation of the subsequent retrying request.\n * @param {number} maxRetryDelayMillis - the maximum delay time, in\n *   milliseconds, between requests. When this value is reached,\n *   ``retryDelayMultiplier`` will no longer be used to increase delay time.\n * @param {number} initialRpcTimeoutMillis - the initial timeout parameter\n *   to the request.\n * @param {number} rpcTimeoutMultiplier - the multiplier by which to\n *   increase the timeout parameter between failed requests.\n * @param {number} maxRpcTimeoutMillis - the maximum timeout parameter, in\n *   milliseconds, for a request. When this value is reached,\n *   ``rpcTimeoutMultiplier`` will no longer be used to increase the timeout.\n * @param {number} totalTimeoutMillis - the total time, in milliseconds,\n *   starting from when the initial request is sent, after which an error will\n *   be returned, regardless of the retrying attempts made meanwhile.\n * @return {BackoffSettings} a new settings.\n *\n */\nexport function createBackoffSettings(\n  initialRetryDelayMillis: number,\n  retryDelayMultiplier: number,\n  maxRetryDelayMillis: number,\n  initialRpcTimeoutMillis: number | null,\n  rpcTimeoutMultiplier: number | null,\n  maxRpcTimeoutMillis: number | null,\n  totalTimeoutMillis: number | null\n): BackoffSettings {\n  return {\n    initialRetryDelayMillis,\n    retryDelayMultiplier,\n    maxRetryDelayMillis,\n    initialRpcTimeoutMillis,\n    rpcTimeoutMultiplier,\n    maxRpcTimeoutMillis,\n    totalTimeoutMillis,\n  };\n}\n\nexport function createDefaultBackoffSettings() {\n  return createBackoffSettings(100, 1.3, 60000, null, null, null, null);\n}\n\n/**\n * Parameters to the exponential backoff algorithm for retrying.\n * This function is unsupported, and intended for internal use only.\n *\n * @param {number} initialRetryDelayMillis - the initial delay time,\n *   in milliseconds, between the completion of the first failed request and the\n *   initiation of the first retrying request.\n * @param {number} retryDelayMultiplier - the multiplier by which to\n *   increase the delay time between the completion of failed requests, and the\n *   initiation of the subsequent retrying request.\n * @param {number} maxRetryDelayMillis - the maximum delay time, in\n *   milliseconds, between requests. When this value is reached,\n *   ``retryDelayMultiplier`` will no longer be used to increase delay time.\n * @param {number} initialRpcTimeoutMillis - the initial timeout parameter\n *   to the request.\n * @param {number} rpcTimeoutMultiplier - the multiplier by which to\n *   increase the timeout parameter between failed requests.\n * @param {number} maxRpcTimeoutMillis - the maximum timeout parameter, in\n *   milliseconds, for a request. When this value is reached,\n *   ``rpcTimeoutMultiplier`` will no longer be used to increase the timeout.\n * @param {number} maxRetries - the maximum number of retrying attempts that\n *   will be made. If reached, an error will be returned.\n * @return {BackoffSettings} a new settings.\n *\n */\nexport function createMaxRetriesBackoffSettings(\n  initialRetryDelayMillis: number,\n  retryDelayMultiplier: number,\n  maxRetryDelayMillis: number,\n  initialRpcTimeoutMillis: number,\n  rpcTimeoutMultiplier: number,\n  maxRpcTimeoutMillis: number,\n  maxRetries: number\n): BackoffSettings {\n  return {\n    initialRetryDelayMillis,\n    retryDelayMultiplier,\n    maxRetryDelayMillis,\n    initialRpcTimeoutMillis,\n    rpcTimeoutMultiplier,\n    maxRpcTimeoutMillis,\n    maxRetries,\n  };\n}\n\n/**\n * Creates a new {@link BundleOptions}.\n *\n * @private\n * @param {Object} options - An object to hold optional parameters. See\n *   properties for the content of options.\n * @return {BundleOptions} - A new options.\n */\nexport function createBundleOptions(options: BundlingConfig): BundleOptions {\n  const params = [\n    'element_count_threshold',\n    'element_count_limit',\n    'request_byte_threshold',\n    'request_byte_limit',\n    'delay_threshold_millis',\n  ];\n  params.forEach(param => {\n    if (param in options && typeof options[param] !== 'number') {\n      throw new Error(`${param} should be a number`);\n    }\n  });\n\n  const elementCountThreshold = options.element_count_threshold || 0;\n  const elementCountLimit = options.element_count_limit || 0;\n  const requestByteThreshold = options.request_byte_threshold || 0;\n  const requestByteLimit = options.request_byte_limit || 0;\n  const delayThreshold = options.delay_threshold_millis || 0;\n\n  if (\n    elementCountThreshold === 0 &&\n    requestByteThreshold === 0 &&\n    delayThreshold === 0\n  ) {\n    throw new Error('one threshold should be > 0');\n  }\n  return {\n    elementCountThreshold,\n    elementCountLimit,\n    requestByteThreshold,\n    requestByteLimit,\n    delayThreshold,\n  };\n}\n\n/**\n * Helper for {@link constructSettings}\n *\n * @private\n *\n * @param {Object} methodConfig - A dictionary representing a single\n *   `methods` entry of the standard API client config file. (See\n *   {@link constructSettings} for information on this yaml.)\n * @param {?Object} retryCodes - A dictionary parsed from the\n *   `retry_codes_def` entry of the standard API client config\n *   file. (See {@link constructSettings} for information on this yaml.)\n * @param {Object} retryParams - A dictionary parsed from the\n *   `retry_params` entry of the standard API client config\n *   file. (See {@link constructSettings} for information on this yaml.)\n * @param {Object} retryNames - A dictionary mapping the string names\n *   used in the standard API client config file to API response\n *   status codes.\n * @return {?RetryOptions} The new retry options.\n */\nfunction constructRetry(\n  methodConfig: MethodConfig,\n  retryCodes: {[index: string]: string[]},\n  retryParams: {[index: string]: {}},\n  retryNames: {[index: string]: {}}\n): RetryOptions | null | undefined {\n  if (!methodConfig) {\n    return null;\n  }\n\n  let codes: number[] | null = null;\n  if (retryCodes && 'retry_codes_name' in methodConfig) {\n    const retryCodesName = methodConfig['retry_codes_name'];\n    codes = (retryCodes[retryCodesName] || []).map(name => {\n      return Number(retryNames[name]);\n    });\n  }\n\n  let backoffSettings: BackoffSettings | null = null;\n  if (retryParams && 'retry_params_name' in methodConfig) {\n    const params = retryParams[\n      methodConfig.retry_params_name\n    ] as RetryParamsConfig;\n    backoffSettings = createBackoffSettings(\n      params.initial_retry_delay_millis,\n      params.retry_delay_multiplier,\n      params.max_retry_delay_millis,\n      params.initial_rpc_timeout_millis,\n      params.rpc_timeout_multiplier,\n      params.max_rpc_timeout_millis,\n      params.total_timeout_millis\n    );\n  }\n  return createRetryOptions(codes!, backoffSettings!);\n}\n\n/**\n * Helper for {@link constructSettings}\n *\n * Takes two retry options, and merges them into a single RetryOption instance.\n *\n * @private\n *\n * @param {RetryOptions} retry - The base RetryOptions.\n * @param {RetryOptions} overrides - The RetryOptions used for overriding\n *   `retry`. Use the values if it is not null. If entire `overrides` is null,\n *   ignore the base retry and return null.\n * @return {?RetryOptions} The merged RetryOptions.\n */\nfunction mergeRetryOptions(\n  retry: RetryOptions,\n  overrides: RetryOptions\n): RetryOptions | null {\n  if (!overrides) {\n    return null;\n  }\n\n  if (!overrides.retryCodes && !overrides.backoffSettings) {\n    return retry;\n  }\n\n  let codes = retry.retryCodes;\n  if (overrides.retryCodes) {\n    codes = overrides.retryCodes;\n  }\n  let backoffSettings = retry.backoffSettings;\n  if (overrides.backoffSettings) {\n    backoffSettings = overrides.backoffSettings;\n  }\n  return createRetryOptions(codes, backoffSettings);\n}\n\nexport interface ServiceConfig {\n  retry_codes: {[index: string]: string[]};\n  retry_params: {[index: string]: RetryParamsConfig};\n  methods: {[index: string]: MethodConfig};\n}\n\nexport interface RetryParamsConfig {\n  initial_retry_delay_millis: number;\n  retry_delay_multiplier: number;\n  max_retry_delay_millis: number;\n  initial_rpc_timeout_millis: number;\n  rpc_timeout_multiplier: number;\n  max_rpc_timeout_millis: number;\n  total_timeout_millis: number;\n}\n\nexport interface MethodConfig {\n  retry_codes_name: string;\n  retry_params_name: string;\n  bundling?: BundlingConfig;\n  timeout_millis?: number;\n}\n\nexport interface BundlingConfig {\n  [index: string]: number;\n  element_count_threshold: number;\n  element_count_limit: number;\n  request_byte_threshold: number;\n  request_byte_limit: number;\n  delay_threshold_millis: number;\n}\n\nexport interface ClientConfig {\n  interfaces?: {[index: string]: ServiceConfig};\n}\n\n/**\n * Constructs a dictionary mapping method names to {@link CallSettings}.\n *\n * The `clientConfig` parameter is parsed from a client configuration JSON\n * file of the form:\n *\n *     {\n *       \"interfaces\": {\n *         \"google.fake.v1.ServiceName\": {\n *           \"retry_codes\": {\n *             \"idempotent\": [\"UNAVAILABLE\", \"DEADLINE_EXCEEDED\"],\n *             \"non_idempotent\": []\n *           },\n *           \"retry_params\": {\n *             \"default\": {\n *               \"initial_retry_delay_millis\": 100,\n *               \"retry_delay_multiplier\": 1.2,\n *               \"max_retry_delay_millis\": 1000,\n *               \"initial_rpc_timeout_millis\": 2000,\n *               \"rpc_timeout_multiplier\": 1.5,\n *               \"max_rpc_timeout_millis\": 30000,\n *               \"total_timeout_millis\": 45000\n *             }\n *           },\n *           \"methods\": {\n *             \"CreateFoo\": {\n *               \"retry_codes_name\": \"idempotent\",\n *               \"retry_params_name\": \"default\"\n *             },\n *             \"Publish\": {\n *               \"retry_codes_name\": \"non_idempotent\",\n *               \"retry_params_name\": \"default\",\n *               \"bundling\": {\n *                 \"element_count_threshold\": 40,\n *                 \"element_count_limit\": 200,\n *                 \"request_byte_threshold\": 90000,\n *                 \"request_byte_limit\": 100000,\n *                 \"delay_threshold_millis\": 100\n *               }\n *             }\n *           }\n *         }\n *       }\n *     }\n *\n * @param {String} serviceName - The fully-qualified name of this\n *   service, used as a key into the client config file (in the\n *   example above, this value should be 'google.fake.v1.ServiceName').\n * @param {Object} clientConfig - A dictionary parsed from the\n *   standard API client config file.\n * @param {Object} configOverrides - A dictionary in the same structure of\n *   client_config to override the settings.\n * @param {Object.} retryNames - A dictionary mapping the strings\n *   referring to response status codes to objects representing\n *   those codes.\n * @param {Object} otherArgs - the non-request arguments to be passed to the API\n *   calls.\n * @param {Function=} promise - A constructor for a promise that implements the\n * ES6 specification of promise. If not provided, native promises will be used.\n * @return {Object} A mapping from method name to CallSettings, or null if the\n *   service is not found in the config.\n */\nexport function constructSettings(\n  serviceName: string,\n  clientConfig: ClientConfig,\n  configOverrides: ClientConfig,\n  retryNames: {},\n  otherArgs?: {},\n  promise?: PromiseConstructor\n) {\n  otherArgs = otherArgs || {};\n  // tslint:disable-next-line no-any\n  const defaults: any = {};\n\n  const serviceConfig = (clientConfig.interfaces || {})[serviceName];\n  if (!serviceConfig) {\n    return null;\n  }\n\n  const overrides = (configOverrides.interfaces || {})[serviceName] || {};\n  const methods = serviceConfig.methods;\n  const overridingMethods = overrides.methods || {};\n  // tslint:disable-next-line forin\n  for (const methodName in methods) {\n    const methodConfig = methods[methodName];\n    const jsName = methodName[0].toLowerCase() + methodName.slice(1);\n\n    let retry = constructRetry(\n      methodConfig,\n      serviceConfig.retry_codes,\n      serviceConfig.retry_params,\n      retryNames\n    );\n    let bundlingConfig = methodConfig.bundling;\n    let timeout = methodConfig.timeout_millis;\n    if (methodName in overridingMethods) {\n      const overridingMethod = overridingMethods[methodName];\n      if (overridingMethod) {\n        if ('bundling' in overridingMethod) {\n          bundlingConfig = overridingMethod.bundling;\n        }\n        if ('timeout_millis' in overridingMethod) {\n          timeout = overridingMethod.timeout_millis;\n        }\n      }\n      retry = mergeRetryOptions(\n        retry!,\n        constructRetry(\n          overridingMethod,\n          overrides.retry_codes,\n          overrides.retry_params,\n          retryNames\n        )!\n      );\n    }\n\n    defaults[jsName] = new CallSettings({\n      timeout,\n      retry,\n      bundleOptions: bundlingConfig\n        ? createBundleOptions(bundlingConfig)\n        : null,\n      otherArgs,\n      promise: promise || Promise,\n    });\n  }\n\n  return defaults;\n}\n\n    \n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/CallOptions.html":{"url":"interfaces/CallOptions.html","title":"interface - CallOptions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  CallOptions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/gax.ts\n        \n\n            \n                Description\n            \n            \n                Parameter to configure bundling behavior.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        autoPaginate\n                                \n                                \n                                            Optional\n                                        bundleOptions\n                                \n                                \n                                            Optional\n                                        isBundling\n                                \n                                \n                                            Optional\n                                        longrunning\n                                \n                                \n                                            Optional\n                                        maxResults\n                                \n                                \n                                            Optional\n                                        maxRetries\n                                \n                                \n                                            Optional\n                                        otherArgs\n                                \n                                \n                                            Optional\n                                        pageSize\n                                \n                                \n                                            Optional\n                                        pageToken\n                                \n                                \n                                            Optional\n                                        promise\n                                \n                                \n                                            Optional\n                                        retry\n                                \n                                \n                                            Optional\n                                        timeout\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        autoPaginate\n                                    \n                                \n                                \n                                    \n                                        autoPaginate:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        bundleOptions\n                                    \n                                \n                                \n                                    \n                                        bundleOptions:         BundleOptions | null\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         BundleOptions | null\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        isBundling\n                                    \n                                \n                                \n                                    \n                                        isBundling:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        longrunning\n                                    \n                                \n                                \n                                    \n                                        longrunning:         BackoffSettings\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         BackoffSettings\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        maxResults\n                                    \n                                \n                                \n                                    \n                                        maxResults:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        maxRetries\n                                    \n                                \n                                \n                                    \n                                        maxRetries:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        otherArgs\n                                    \n                                \n                                \n                                    \n                                        otherArgs:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        pageSize\n                                    \n                                \n                                \n                                    \n                                        pageSize:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        pageToken\n                                    \n                                \n                                \n                                    \n                                        pageToken:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        promise\n                                    \n                                \n                                \n                                    \n                                        promise:     PromiseConstructor\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     PromiseConstructor\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        retry\n                                    \n                                \n                                \n                                    \n                                        retry:         RetryOptions | null\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         RetryOptions | null\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        timeout\n                                    \n                                \n                                \n                                    \n                                        timeout:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import {BundleOptions} from './bundlingCalls/bundleExecutor';\n\n/**\n * Encapsulates the overridable settings for a particular API call.\n *\n * ``CallOptions`` is an optional arg for all GAX API calls.  It is used to\n * configure the settings of a specific API call.\n *\n * When provided, its values override the GAX service defaults for that\n * particular call.\n *\n * Typically the API clients will accept this as the second to the last\n * argument. See the examples below.\n * @typedef {Object} CallOptions\n * @property {number=} timeout - The client-side timeout for API calls.\n * @property {RetryOptions=} retry - determines whether and how to retry\n *   on transient errors. When set to null, the call will not retry.\n * @property {boolean=} autoPaginate - If set to false and the call is\n *   configured for paged iteration, page unrolling is not performed, instead\n *   the callback will be called with the response object.\n * @property {Object=} pageToken - If set and the call is configured for\n *   paged iteration, paged iteration is not performed and requested with this\n *   pageToken.\n * @property {number} maxResults - If set and the call is configured for\n *   paged iteration, the call will stop when the number of response elements\n *   reaches to the specified size. By default, it will unroll the page to\n *   the end of the list.\n * @property {boolean=} isBundling - If set to false and the call is configured\n *   for bundling, bundling is not performed.\n * @property {BackoffSettings=} longrunning - BackoffSettings used for polling.\n * @property {Function=} promise - A constructor for a promise that implements the ES6\n * specification of promise which will be used to create promises. If not\n * provided, native promises will be used.\n * @example\n * // suppress bundling for bundled method.\n * api.bundlingMethod(\n *     param, {optParam: aValue, isBundling: false}, function(err, response) {\n *   // handle response.\n * });\n * @example\n * // suppress streaming for page-streaming method.\n * api.pageStreamingMethod(\n *     param, {optParam: aValue, autoPaginate: false}, function(err, page) {\n *   // not returning a stream, but callback is called with the paged response.\n * });\n */\n\n/**\n * Per-call configurable settings for retrying upon transient failure.\n * @typedef {Object} RetryOptions\n * @property {String[]} retryCodes\n * @property {BackoffSettings} backoffSettings\n */\nexport class RetryOptions {\n  retryCodes: number[];\n  backoffSettings: BackoffSettings;\n  constructor(retryCodes: number[], backoffSettings: BackoffSettings) {\n    this.retryCodes = retryCodes;\n    this.backoffSettings = backoffSettings;\n  }\n}\n\n/**\n * Parameters to the exponential backoff algorithm for retrying.\n * @typedef {Object} BackoffSettings\n * @property {number} initialRetryDelayMillis - the initial delay time,\n *   in milliseconds, between the completion of the first failed request and the\n *   initiation of the first retrying request.\n * @property {number} retryDelayMultiplier - the multiplier by which to\n *   increase the delay time between the completion of failed requests, and the\n *   initiation of the subsequent retrying request.\n * @property {number} maxRetryDelayMillis - the maximum delay time, in\n *   milliseconds, between requests. When this value is reached,\n *   ``retryDelayMultiplier`` will no longer be used to increase delay time.\n * @property {number} initialRpcTimeoutMillis - the initial timeout parameter\n *   to the request.\n * @propetry {number} rpcTimeoutMultiplier - the multiplier by which to\n *   increase the timeout parameter between failed requests.\n * @property {number} maxRpcTimeoutMillis - the maximum timeout parameter, in\n *   milliseconds, for a request. When this value is reached,\n *   ``rpcTimeoutMultiplier`` will no longer be used to increase the timeout.\n * @property {number} totalTimeoutMillis - the total time, in milliseconds,\n *   starting from when the initial request is sent, after which an error will\n *   be returned, regardless of the retrying attempts made meanwhile.\n */\nexport interface BackoffSettings {\n  maxRetries?: number;\n  initialRetryDelayMillis: number;\n  retryDelayMultiplier: number;\n  maxRetryDelayMillis: number;\n  initialRpcTimeoutMillis?: number | null;\n  maxRpcTimeoutMillis?: number | null;\n  totalTimeoutMillis?: number | null;\n  rpcTimeoutMultiplier?: number | null;\n}\n\n/**\n * Parameter to configure bundling behavior.\n * @typedef {Object} BundleOptions\n * @property {number} elementCountThreshold -\n *   the bundled request will be sent once the count of outstanding elements\n *   in the repeated field reaches this value.\n * @property {number} elementCountLimit -\n *   represents a hard limit on the number of elements in the repeated field\n *   of the bundle; if adding a request to a bundle would exceed this value,\n *   the bundle is sent and the new request is added to a fresh bundle. It is\n *   invalid for a single request to exceed this limit.\n * @property {number} requestByteThreshold -\n *   the bundled request will be sent once the count of bytes in the request\n *   reaches this value. Note that this value is pessimistically approximated\n *   by summing the bytesizes of the elements in the repeated field, and\n *   therefore may be an under-approximation.\n * @property {number} requestByteLimit -\n *   represents a hard limit on the size of the bundled request; if adding\n *   a request to a bundle would exceed this value, the bundle is sent and\n *   the new request is added to a fresh bundle. It is invalid for a single\n *   request to exceed this limit. Note that this value is pessimistically\n *   approximated by summing the bytesizes of the elements in the repeated\n *   field, with a buffer applied to correspond to the resulting\n *   under-approximation.\n * @property {number} delayThreshold -\n *   the bundled request will be sent this amount of time after the first\n *   element in the bundle was added to it.\n */\n\nexport interface CallOptions {\n  timeout?: number;\n  retry?: RetryOptions | null;\n  autoPaginate?: boolean;\n  pageToken?: string;\n  pageSize?: number;\n  maxResults?: number;\n  maxRetries?: number;\n  // tslint:disable-next-line no-any\n  otherArgs?: {[index: string]: any};\n  bundleOptions?: BundleOptions | null;\n  isBundling?: boolean;\n  longrunning?: BackoffSettings;\n  promise?: PromiseConstructor;\n}\n\nexport class CallSettings {\n  timeout: number;\n  retry?: RetryOptions | null;\n  autoPaginate?: boolean;\n  pageToken?: string;\n  pageSize?: number;\n  maxResults?: number;\n  // tslint:disable-next-line no-any\n  otherArgs: {[index: string]: any};\n  bundleOptions?: BundleOptions | null;\n  isBundling: boolean;\n  longrunning?: BackoffSettings;\n  promise: PromiseConstructor;\n\n  /**\n   * @param {Object} settings - An object containing parameters of this settings.\n   * @param {number} settings.timeout - The client-side timeout for API calls.\n   *   This parameter is ignored for retrying calls.\n   * @param {RetryOptions} settings.retry - The configuration for retrying upon\n   *   transient error. If set to null, this call will not retry.\n   * @param {boolean} settings.autoPaginate - If there is no `pageDescriptor`,\n   *   this attrbute has no meaning. Otherwise, determines whether a page\n   * streamed response should make the page structure transparent to the user by\n   *   flattening the repeated field in the returned generator.\n   * @param {number} settings.pageToken - If there is no `pageDescriptor`,\n   *   this attribute has no meaning. Otherwise, determines the page token used\n   * in the page streaming request.\n   * @param {Object} settings.otherArgs - Additional arguments to be passed to\n   *   the API calls.\n   * @param {Function=} settings.promise - A constructor for a promise that\n   * implements the ES6 specification of promise. If not provided, native\n   * promises will be used.\n   *\n   * @constructor\n   */\n  constructor(settings?: CallOptions) {\n    settings = settings || {};\n    this.timeout = settings.timeout || 30 * 1000;\n    this.retry = settings.retry;\n    this.autoPaginate =\n      'autoPaginate' in settings ? settings.autoPaginate : true;\n    this.pageToken = settings.pageToken;\n    this.maxResults = settings.maxResults;\n    this.otherArgs = settings.otherArgs || {};\n    this.bundleOptions = settings.bundleOptions;\n    this.isBundling = 'isBundling' in settings ? settings.isBundling! : true;\n    this.longrunning =\n      'longrunning' in settings ? settings.longrunning : undefined;\n    this.promise = 'promise' in settings ? settings.promise! : Promise;\n  }\n\n  /**\n   * Returns a new CallSettings merged from this and a CallOptions object.\n   *\n   * @param {CallOptions} options - an instance whose values override\n   *   those in this object. If null, ``merge`` returns a copy of this\n   *   object\n   * @return {CallSettings} The merged CallSettings instance.\n   */\n  merge(options?: CallOptions | null) {\n    if (!options) {\n      return new CallSettings(this);\n    }\n    let timeout = this.timeout;\n    let retry = this.retry;\n    let autoPaginate = this.autoPaginate;\n    let pageToken = this.pageToken;\n    let pageSize = this.pageSize;\n    let maxResults = this.maxResults;\n    let otherArgs = this.otherArgs;\n    let isBundling = this.isBundling;\n    let longrunning = this.longrunning;\n    let promise = this.promise;\n    if ('timeout' in options) {\n      timeout = options.timeout!;\n    }\n    if ('retry' in options) {\n      retry = options.retry;\n    }\n\n    if ('autoPaginate' in options && !options.autoPaginate) {\n      autoPaginate = false;\n    }\n\n    if ('pageToken' in options) {\n      autoPaginate = false;\n      pageToken = options.pageToken;\n    }\n\n    if ('pageSize' in options) {\n      pageSize = options.pageSize;\n    }\n\n    if ('maxResults' in options) {\n      maxResults = options.maxResults;\n    }\n\n    if ('otherArgs' in options) {\n      otherArgs = {};\n      // tslint:disable-next-line forin\n      for (const key in this.otherArgs) {\n        otherArgs[key] = this.otherArgs[key];\n      }\n      // tslint:disable-next-line forin\n      for (const optionsKey in options.otherArgs!) {\n        otherArgs[optionsKey] = options.otherArgs![optionsKey];\n      }\n    }\n\n    if ('isBundling' in options) {\n      isBundling = options.isBundling!;\n    }\n\n    if ('maxRetries' in options) {\n      retry!.backoffSettings!.maxRetries = options.maxRetries;\n      delete retry!.backoffSettings!.totalTimeoutMillis;\n    }\n\n    if ('longrunning' in options) {\n      longrunning = options.longrunning;\n    }\n\n    if ('promise' in options) {\n      promise = options.promise!;\n    }\n\n    return new CallSettings({\n      timeout,\n      retry,\n      bundleOptions: this.bundleOptions,\n      longrunning,\n      autoPaginate,\n      pageToken,\n      pageSize,\n      maxResults,\n      otherArgs,\n      isBundling,\n      promise,\n    });\n  }\n}\n\n/**\n * Per-call configurable settings for retrying upon transient failure.\n *\n * @param {number[]} retryCodes - a list of Google API canonical error codes\n *   upon which a retry should be attempted.\n * @param {BackoffSettings} backoffSettings - configures the retry\n *   exponential backoff algorithm.\n * @return {RetryOptions} A new RetryOptions object.\n *\n */\nexport function createRetryOptions(\n  retryCodes: number[],\n  backoffSettings: BackoffSettings\n): RetryOptions {\n  return {\n    retryCodes,\n    backoffSettings,\n  };\n}\n\n/**\n * Parameters to the exponential backoff algorithm for retrying.\n *\n * @param {number} initialRetryDelayMillis - the initial delay time,\n *   in milliseconds, between the completion of the first failed request and the\n *   initiation of the first retrying request.\n * @param {number} retryDelayMultiplier - the multiplier by which to\n *   increase the delay time between the completion of failed requests, and the\n *   initiation of the subsequent retrying request.\n * @param {number} maxRetryDelayMillis - the maximum delay time, in\n *   milliseconds, between requests. When this value is reached,\n *   ``retryDelayMultiplier`` will no longer be used to increase delay time.\n * @param {number} initialRpcTimeoutMillis - the initial timeout parameter\n *   to the request.\n * @param {number} rpcTimeoutMultiplier - the multiplier by which to\n *   increase the timeout parameter between failed requests.\n * @param {number} maxRpcTimeoutMillis - the maximum timeout parameter, in\n *   milliseconds, for a request. When this value is reached,\n *   ``rpcTimeoutMultiplier`` will no longer be used to increase the timeout.\n * @param {number} totalTimeoutMillis - the total time, in milliseconds,\n *   starting from when the initial request is sent, after which an error will\n *   be returned, regardless of the retrying attempts made meanwhile.\n * @return {BackoffSettings} a new settings.\n *\n */\nexport function createBackoffSettings(\n  initialRetryDelayMillis: number,\n  retryDelayMultiplier: number,\n  maxRetryDelayMillis: number,\n  initialRpcTimeoutMillis: number | null,\n  rpcTimeoutMultiplier: number | null,\n  maxRpcTimeoutMillis: number | null,\n  totalTimeoutMillis: number | null\n): BackoffSettings {\n  return {\n    initialRetryDelayMillis,\n    retryDelayMultiplier,\n    maxRetryDelayMillis,\n    initialRpcTimeoutMillis,\n    rpcTimeoutMultiplier,\n    maxRpcTimeoutMillis,\n    totalTimeoutMillis,\n  };\n}\n\nexport function createDefaultBackoffSettings() {\n  return createBackoffSettings(100, 1.3, 60000, null, null, null, null);\n}\n\n/**\n * Parameters to the exponential backoff algorithm for retrying.\n * This function is unsupported, and intended for internal use only.\n *\n * @param {number} initialRetryDelayMillis - the initial delay time,\n *   in milliseconds, between the completion of the first failed request and the\n *   initiation of the first retrying request.\n * @param {number} retryDelayMultiplier - the multiplier by which to\n *   increase the delay time between the completion of failed requests, and the\n *   initiation of the subsequent retrying request.\n * @param {number} maxRetryDelayMillis - the maximum delay time, in\n *   milliseconds, between requests. When this value is reached,\n *   ``retryDelayMultiplier`` will no longer be used to increase delay time.\n * @param {number} initialRpcTimeoutMillis - the initial timeout parameter\n *   to the request.\n * @param {number} rpcTimeoutMultiplier - the multiplier by which to\n *   increase the timeout parameter between failed requests.\n * @param {number} maxRpcTimeoutMillis - the maximum timeout parameter, in\n *   milliseconds, for a request. When this value is reached,\n *   ``rpcTimeoutMultiplier`` will no longer be used to increase the timeout.\n * @param {number} maxRetries - the maximum number of retrying attempts that\n *   will be made. If reached, an error will be returned.\n * @return {BackoffSettings} a new settings.\n *\n */\nexport function createMaxRetriesBackoffSettings(\n  initialRetryDelayMillis: number,\n  retryDelayMultiplier: number,\n  maxRetryDelayMillis: number,\n  initialRpcTimeoutMillis: number,\n  rpcTimeoutMultiplier: number,\n  maxRpcTimeoutMillis: number,\n  maxRetries: number\n): BackoffSettings {\n  return {\n    initialRetryDelayMillis,\n    retryDelayMultiplier,\n    maxRetryDelayMillis,\n    initialRpcTimeoutMillis,\n    rpcTimeoutMultiplier,\n    maxRpcTimeoutMillis,\n    maxRetries,\n  };\n}\n\n/**\n * Creates a new {@link BundleOptions}.\n *\n * @private\n * @param {Object} options - An object to hold optional parameters. See\n *   properties for the content of options.\n * @return {BundleOptions} - A new options.\n */\nexport function createBundleOptions(options: BundlingConfig): BundleOptions {\n  const params = [\n    'element_count_threshold',\n    'element_count_limit',\n    'request_byte_threshold',\n    'request_byte_limit',\n    'delay_threshold_millis',\n  ];\n  params.forEach(param => {\n    if (param in options && typeof options[param] !== 'number') {\n      throw new Error(`${param} should be a number`);\n    }\n  });\n\n  const elementCountThreshold = options.element_count_threshold || 0;\n  const elementCountLimit = options.element_count_limit || 0;\n  const requestByteThreshold = options.request_byte_threshold || 0;\n  const requestByteLimit = options.request_byte_limit || 0;\n  const delayThreshold = options.delay_threshold_millis || 0;\n\n  if (\n    elementCountThreshold === 0 &&\n    requestByteThreshold === 0 &&\n    delayThreshold === 0\n  ) {\n    throw new Error('one threshold should be > 0');\n  }\n  return {\n    elementCountThreshold,\n    elementCountLimit,\n    requestByteThreshold,\n    requestByteLimit,\n    delayThreshold,\n  };\n}\n\n/**\n * Helper for {@link constructSettings}\n *\n * @private\n *\n * @param {Object} methodConfig - A dictionary representing a single\n *   `methods` entry of the standard API client config file. (See\n *   {@link constructSettings} for information on this yaml.)\n * @param {?Object} retryCodes - A dictionary parsed from the\n *   `retry_codes_def` entry of the standard API client config\n *   file. (See {@link constructSettings} for information on this yaml.)\n * @param {Object} retryParams - A dictionary parsed from the\n *   `retry_params` entry of the standard API client config\n *   file. (See {@link constructSettings} for information on this yaml.)\n * @param {Object} retryNames - A dictionary mapping the string names\n *   used in the standard API client config file to API response\n *   status codes.\n * @return {?RetryOptions} The new retry options.\n */\nfunction constructRetry(\n  methodConfig: MethodConfig,\n  retryCodes: {[index: string]: string[]},\n  retryParams: {[index: string]: {}},\n  retryNames: {[index: string]: {}}\n): RetryOptions | null | undefined {\n  if (!methodConfig) {\n    return null;\n  }\n\n  let codes: number[] | null = null;\n  if (retryCodes && 'retry_codes_name' in methodConfig) {\n    const retryCodesName = methodConfig['retry_codes_name'];\n    codes = (retryCodes[retryCodesName] || []).map(name => {\n      return Number(retryNames[name]);\n    });\n  }\n\n  let backoffSettings: BackoffSettings | null = null;\n  if (retryParams && 'retry_params_name' in methodConfig) {\n    const params = retryParams[\n      methodConfig.retry_params_name\n    ] as RetryParamsConfig;\n    backoffSettings = createBackoffSettings(\n      params.initial_retry_delay_millis,\n      params.retry_delay_multiplier,\n      params.max_retry_delay_millis,\n      params.initial_rpc_timeout_millis,\n      params.rpc_timeout_multiplier,\n      params.max_rpc_timeout_millis,\n      params.total_timeout_millis\n    );\n  }\n  return createRetryOptions(codes!, backoffSettings!);\n}\n\n/**\n * Helper for {@link constructSettings}\n *\n * Takes two retry options, and merges them into a single RetryOption instance.\n *\n * @private\n *\n * @param {RetryOptions} retry - The base RetryOptions.\n * @param {RetryOptions} overrides - The RetryOptions used for overriding\n *   `retry`. Use the values if it is not null. If entire `overrides` is null,\n *   ignore the base retry and return null.\n * @return {?RetryOptions} The merged RetryOptions.\n */\nfunction mergeRetryOptions(\n  retry: RetryOptions,\n  overrides: RetryOptions\n): RetryOptions | null {\n  if (!overrides) {\n    return null;\n  }\n\n  if (!overrides.retryCodes && !overrides.backoffSettings) {\n    return retry;\n  }\n\n  let codes = retry.retryCodes;\n  if (overrides.retryCodes) {\n    codes = overrides.retryCodes;\n  }\n  let backoffSettings = retry.backoffSettings;\n  if (overrides.backoffSettings) {\n    backoffSettings = overrides.backoffSettings;\n  }\n  return createRetryOptions(codes, backoffSettings);\n}\n\nexport interface ServiceConfig {\n  retry_codes: {[index: string]: string[]};\n  retry_params: {[index: string]: RetryParamsConfig};\n  methods: {[index: string]: MethodConfig};\n}\n\nexport interface RetryParamsConfig {\n  initial_retry_delay_millis: number;\n  retry_delay_multiplier: number;\n  max_retry_delay_millis: number;\n  initial_rpc_timeout_millis: number;\n  rpc_timeout_multiplier: number;\n  max_rpc_timeout_millis: number;\n  total_timeout_millis: number;\n}\n\nexport interface MethodConfig {\n  retry_codes_name: string;\n  retry_params_name: string;\n  bundling?: BundlingConfig;\n  timeout_millis?: number;\n}\n\nexport interface BundlingConfig {\n  [index: string]: number;\n  element_count_threshold: number;\n  element_count_limit: number;\n  request_byte_threshold: number;\n  request_byte_limit: number;\n  delay_threshold_millis: number;\n}\n\nexport interface ClientConfig {\n  interfaces?: {[index: string]: ServiceConfig};\n}\n\n/**\n * Constructs a dictionary mapping method names to {@link CallSettings}.\n *\n * The `clientConfig` parameter is parsed from a client configuration JSON\n * file of the form:\n *\n *     {\n *       \"interfaces\": {\n *         \"google.fake.v1.ServiceName\": {\n *           \"retry_codes\": {\n *             \"idempotent\": [\"UNAVAILABLE\", \"DEADLINE_EXCEEDED\"],\n *             \"non_idempotent\": []\n *           },\n *           \"retry_params\": {\n *             \"default\": {\n *               \"initial_retry_delay_millis\": 100,\n *               \"retry_delay_multiplier\": 1.2,\n *               \"max_retry_delay_millis\": 1000,\n *               \"initial_rpc_timeout_millis\": 2000,\n *               \"rpc_timeout_multiplier\": 1.5,\n *               \"max_rpc_timeout_millis\": 30000,\n *               \"total_timeout_millis\": 45000\n *             }\n *           },\n *           \"methods\": {\n *             \"CreateFoo\": {\n *               \"retry_codes_name\": \"idempotent\",\n *               \"retry_params_name\": \"default\"\n *             },\n *             \"Publish\": {\n *               \"retry_codes_name\": \"non_idempotent\",\n *               \"retry_params_name\": \"default\",\n *               \"bundling\": {\n *                 \"element_count_threshold\": 40,\n *                 \"element_count_limit\": 200,\n *                 \"request_byte_threshold\": 90000,\n *                 \"request_byte_limit\": 100000,\n *                 \"delay_threshold_millis\": 100\n *               }\n *             }\n *           }\n *         }\n *       }\n *     }\n *\n * @param {String} serviceName - The fully-qualified name of this\n *   service, used as a key into the client config file (in the\n *   example above, this value should be 'google.fake.v1.ServiceName').\n * @param {Object} clientConfig - A dictionary parsed from the\n *   standard API client config file.\n * @param {Object} configOverrides - A dictionary in the same structure of\n *   client_config to override the settings.\n * @param {Object.} retryNames - A dictionary mapping the strings\n *   referring to response status codes to objects representing\n *   those codes.\n * @param {Object} otherArgs - the non-request arguments to be passed to the API\n *   calls.\n * @param {Function=} promise - A constructor for a promise that implements the\n * ES6 specification of promise. If not provided, native promises will be used.\n * @return {Object} A mapping from method name to CallSettings, or null if the\n *   service is not found in the config.\n */\nexport function constructSettings(\n  serviceName: string,\n  clientConfig: ClientConfig,\n  configOverrides: ClientConfig,\n  retryNames: {},\n  otherArgs?: {},\n  promise?: PromiseConstructor\n) {\n  otherArgs = otherArgs || {};\n  // tslint:disable-next-line no-any\n  const defaults: any = {};\n\n  const serviceConfig = (clientConfig.interfaces || {})[serviceName];\n  if (!serviceConfig) {\n    return null;\n  }\n\n  const overrides = (configOverrides.interfaces || {})[serviceName] || {};\n  const methods = serviceConfig.methods;\n  const overridingMethods = overrides.methods || {};\n  // tslint:disable-next-line forin\n  for (const methodName in methods) {\n    const methodConfig = methods[methodName];\n    const jsName = methodName[0].toLowerCase() + methodName.slice(1);\n\n    let retry = constructRetry(\n      methodConfig,\n      serviceConfig.retry_codes,\n      serviceConfig.retry_params,\n      retryNames\n    );\n    let bundlingConfig = methodConfig.bundling;\n    let timeout = methodConfig.timeout_millis;\n    if (methodName in overridingMethods) {\n      const overridingMethod = overridingMethods[methodName];\n      if (overridingMethod) {\n        if ('bundling' in overridingMethod) {\n          bundlingConfig = overridingMethod.bundling;\n        }\n        if ('timeout_millis' in overridingMethod) {\n          timeout = overridingMethod.timeout_millis;\n        }\n      }\n      retry = mergeRetryOptions(\n        retry!,\n        constructRetry(\n          overridingMethod,\n          overrides.retry_codes,\n          overrides.retry_params,\n          retryNames\n        )!\n      );\n    }\n\n    defaults[jsName] = new CallSettings({\n      timeout,\n      retry,\n      bundleOptions: bundlingConfig\n        ? createBundleOptions(bundlingConfig)\n        : null,\n      otherArgs,\n      promise: promise || Promise,\n    });\n  }\n\n  return defaults;\n}\n\n    \n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CallSettings.html":{"url":"classes/CallSettings.html","title":"class - CallSettings","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CallSettings\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/gax.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                autoPaginate\n                            \n                            \n                                    Optional\n                                bundleOptions\n                            \n                            \n                                isBundling\n                            \n                            \n                                    Optional\n                                longrunning\n                            \n                            \n                                    Optional\n                                maxResults\n                            \n                            \n                                otherArgs\n                            \n                            \n                                    Optional\n                                pageSize\n                            \n                            \n                                    Optional\n                                pageToken\n                            \n                            \n                                promise\n                            \n                            \n                                    Optional\n                                retry\n                            \n                            \n                                timeout\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                merge\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(settings?: CallOptions)\n                    \n                \n                        \n                            \n                                Defined in src/gax.ts:189\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        settings\n                                                  \n                                                        \n                                                                        CallOptions\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                        \n                                                                \nAn object containing parameters of this settings.\n\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            autoPaginate\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                        \n                            \n                                    Defined in src/gax.ts:180\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            bundleOptions\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         BundleOptions | null\n\n                        \n                    \n                        \n                            \n                                    Defined in src/gax.ts:186\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            isBundling\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                        \n                            \n                                    Defined in src/gax.ts:187\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            longrunning\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         BackoffSettings\n\n                        \n                    \n                        \n                            \n                                    Defined in src/gax.ts:188\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            maxResults\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                        \n                            \n                                    Defined in src/gax.ts:183\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            otherArgs\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     literal type\n\n                        \n                    \n                        \n                            \n                                    Defined in src/gax.ts:185\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            pageSize\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                        \n                            \n                                    Defined in src/gax.ts:182\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            pageToken\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/gax.ts:181\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            promise\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     PromiseConstructor\n\n                        \n                    \n                        \n                            \n                                    Defined in src/gax.ts:189\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            retry\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         RetryOptions | null\n\n                        \n                    \n                        \n                            \n                                    Defined in src/gax.ts:179\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            timeout\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                        \n                            \n                                    Defined in src/gax.ts:178\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            merge\n                        \n                        \n                    \n                \n            \n            \n                \nmerge(options?: CallOptions | null)\n                \n            \n\n\n            \n                \n                    Defined in src/gax.ts:236\n                \n            \n\n\n            \n                \n                    Returns a new CallSettings merged from this and a CallOptions object.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    options\n                                    \n                                                CallOptions | null\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        \nan instance whose values override\nthose in this object. If null, merge returns a copy of this\nobject\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         CallSettings\n\n                    \n                    \n                        The merged CallSettings instance.\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {BundleOptions} from './bundlingCalls/bundleExecutor';\n\n/**\n * Encapsulates the overridable settings for a particular API call.\n *\n * ``CallOptions`` is an optional arg for all GAX API calls.  It is used to\n * configure the settings of a specific API call.\n *\n * When provided, its values override the GAX service defaults for that\n * particular call.\n *\n * Typically the API clients will accept this as the second to the last\n * argument. See the examples below.\n * @typedef {Object} CallOptions\n * @property {number=} timeout - The client-side timeout for API calls.\n * @property {RetryOptions=} retry - determines whether and how to retry\n *   on transient errors. When set to null, the call will not retry.\n * @property {boolean=} autoPaginate - If set to false and the call is\n *   configured for paged iteration, page unrolling is not performed, instead\n *   the callback will be called with the response object.\n * @property {Object=} pageToken - If set and the call is configured for\n *   paged iteration, paged iteration is not performed and requested with this\n *   pageToken.\n * @property {number} maxResults - If set and the call is configured for\n *   paged iteration, the call will stop when the number of response elements\n *   reaches to the specified size. By default, it will unroll the page to\n *   the end of the list.\n * @property {boolean=} isBundling - If set to false and the call is configured\n *   for bundling, bundling is not performed.\n * @property {BackoffSettings=} longrunning - BackoffSettings used for polling.\n * @property {Function=} promise - A constructor for a promise that implements the ES6\n * specification of promise which will be used to create promises. If not\n * provided, native promises will be used.\n * @example\n * // suppress bundling for bundled method.\n * api.bundlingMethod(\n *     param, {optParam: aValue, isBundling: false}, function(err, response) {\n *   // handle response.\n * });\n * @example\n * // suppress streaming for page-streaming method.\n * api.pageStreamingMethod(\n *     param, {optParam: aValue, autoPaginate: false}, function(err, page) {\n *   // not returning a stream, but callback is called with the paged response.\n * });\n */\n\n/**\n * Per-call configurable settings for retrying upon transient failure.\n * @typedef {Object} RetryOptions\n * @property {String[]} retryCodes\n * @property {BackoffSettings} backoffSettings\n */\nexport class RetryOptions {\n  retryCodes: number[];\n  backoffSettings: BackoffSettings;\n  constructor(retryCodes: number[], backoffSettings: BackoffSettings) {\n    this.retryCodes = retryCodes;\n    this.backoffSettings = backoffSettings;\n  }\n}\n\n/**\n * Parameters to the exponential backoff algorithm for retrying.\n * @typedef {Object} BackoffSettings\n * @property {number} initialRetryDelayMillis - the initial delay time,\n *   in milliseconds, between the completion of the first failed request and the\n *   initiation of the first retrying request.\n * @property {number} retryDelayMultiplier - the multiplier by which to\n *   increase the delay time between the completion of failed requests, and the\n *   initiation of the subsequent retrying request.\n * @property {number} maxRetryDelayMillis - the maximum delay time, in\n *   milliseconds, between requests. When this value is reached,\n *   ``retryDelayMultiplier`` will no longer be used to increase delay time.\n * @property {number} initialRpcTimeoutMillis - the initial timeout parameter\n *   to the request.\n * @propetry {number} rpcTimeoutMultiplier - the multiplier by which to\n *   increase the timeout parameter between failed requests.\n * @property {number} maxRpcTimeoutMillis - the maximum timeout parameter, in\n *   milliseconds, for a request. When this value is reached,\n *   ``rpcTimeoutMultiplier`` will no longer be used to increase the timeout.\n * @property {number} totalTimeoutMillis - the total time, in milliseconds,\n *   starting from when the initial request is sent, after which an error will\n *   be returned, regardless of the retrying attempts made meanwhile.\n */\nexport interface BackoffSettings {\n  maxRetries?: number;\n  initialRetryDelayMillis: number;\n  retryDelayMultiplier: number;\n  maxRetryDelayMillis: number;\n  initialRpcTimeoutMillis?: number | null;\n  maxRpcTimeoutMillis?: number | null;\n  totalTimeoutMillis?: number | null;\n  rpcTimeoutMultiplier?: number | null;\n}\n\n/**\n * Parameter to configure bundling behavior.\n * @typedef {Object} BundleOptions\n * @property {number} elementCountThreshold -\n *   the bundled request will be sent once the count of outstanding elements\n *   in the repeated field reaches this value.\n * @property {number} elementCountLimit -\n *   represents a hard limit on the number of elements in the repeated field\n *   of the bundle; if adding a request to a bundle would exceed this value,\n *   the bundle is sent and the new request is added to a fresh bundle. It is\n *   invalid for a single request to exceed this limit.\n * @property {number} requestByteThreshold -\n *   the bundled request will be sent once the count of bytes in the request\n *   reaches this value. Note that this value is pessimistically approximated\n *   by summing the bytesizes of the elements in the repeated field, and\n *   therefore may be an under-approximation.\n * @property {number} requestByteLimit -\n *   represents a hard limit on the size of the bundled request; if adding\n *   a request to a bundle would exceed this value, the bundle is sent and\n *   the new request is added to a fresh bundle. It is invalid for a single\n *   request to exceed this limit. Note that this value is pessimistically\n *   approximated by summing the bytesizes of the elements in the repeated\n *   field, with a buffer applied to correspond to the resulting\n *   under-approximation.\n * @property {number} delayThreshold -\n *   the bundled request will be sent this amount of time after the first\n *   element in the bundle was added to it.\n */\n\nexport interface CallOptions {\n  timeout?: number;\n  retry?: RetryOptions | null;\n  autoPaginate?: boolean;\n  pageToken?: string;\n  pageSize?: number;\n  maxResults?: number;\n  maxRetries?: number;\n  // tslint:disable-next-line no-any\n  otherArgs?: {[index: string]: any};\n  bundleOptions?: BundleOptions | null;\n  isBundling?: boolean;\n  longrunning?: BackoffSettings;\n  promise?: PromiseConstructor;\n}\n\nexport class CallSettings {\n  timeout: number;\n  retry?: RetryOptions | null;\n  autoPaginate?: boolean;\n  pageToken?: string;\n  pageSize?: number;\n  maxResults?: number;\n  // tslint:disable-next-line no-any\n  otherArgs: {[index: string]: any};\n  bundleOptions?: BundleOptions | null;\n  isBundling: boolean;\n  longrunning?: BackoffSettings;\n  promise: PromiseConstructor;\n\n  /**\n   * @param {Object} settings - An object containing parameters of this settings.\n   * @param {number} settings.timeout - The client-side timeout for API calls.\n   *   This parameter is ignored for retrying calls.\n   * @param {RetryOptions} settings.retry - The configuration for retrying upon\n   *   transient error. If set to null, this call will not retry.\n   * @param {boolean} settings.autoPaginate - If there is no `pageDescriptor`,\n   *   this attrbute has no meaning. Otherwise, determines whether a page\n   * streamed response should make the page structure transparent to the user by\n   *   flattening the repeated field in the returned generator.\n   * @param {number} settings.pageToken - If there is no `pageDescriptor`,\n   *   this attribute has no meaning. Otherwise, determines the page token used\n   * in the page streaming request.\n   * @param {Object} settings.otherArgs - Additional arguments to be passed to\n   *   the API calls.\n   * @param {Function=} settings.promise - A constructor for a promise that\n   * implements the ES6 specification of promise. If not provided, native\n   * promises will be used.\n   *\n   * @constructor\n   */\n  constructor(settings?: CallOptions) {\n    settings = settings || {};\n    this.timeout = settings.timeout || 30 * 1000;\n    this.retry = settings.retry;\n    this.autoPaginate =\n      'autoPaginate' in settings ? settings.autoPaginate : true;\n    this.pageToken = settings.pageToken;\n    this.maxResults = settings.maxResults;\n    this.otherArgs = settings.otherArgs || {};\n    this.bundleOptions = settings.bundleOptions;\n    this.isBundling = 'isBundling' in settings ? settings.isBundling! : true;\n    this.longrunning =\n      'longrunning' in settings ? settings.longrunning : undefined;\n    this.promise = 'promise' in settings ? settings.promise! : Promise;\n  }\n\n  /**\n   * Returns a new CallSettings merged from this and a CallOptions object.\n   *\n   * @param {CallOptions} options - an instance whose values override\n   *   those in this object. If null, ``merge`` returns a copy of this\n   *   object\n   * @return {CallSettings} The merged CallSettings instance.\n   */\n  merge(options?: CallOptions | null) {\n    if (!options) {\n      return new CallSettings(this);\n    }\n    let timeout = this.timeout;\n    let retry = this.retry;\n    let autoPaginate = this.autoPaginate;\n    let pageToken = this.pageToken;\n    let pageSize = this.pageSize;\n    let maxResults = this.maxResults;\n    let otherArgs = this.otherArgs;\n    let isBundling = this.isBundling;\n    let longrunning = this.longrunning;\n    let promise = this.promise;\n    if ('timeout' in options) {\n      timeout = options.timeout!;\n    }\n    if ('retry' in options) {\n      retry = options.retry;\n    }\n\n    if ('autoPaginate' in options && !options.autoPaginate) {\n      autoPaginate = false;\n    }\n\n    if ('pageToken' in options) {\n      autoPaginate = false;\n      pageToken = options.pageToken;\n    }\n\n    if ('pageSize' in options) {\n      pageSize = options.pageSize;\n    }\n\n    if ('maxResults' in options) {\n      maxResults = options.maxResults;\n    }\n\n    if ('otherArgs' in options) {\n      otherArgs = {};\n      // tslint:disable-next-line forin\n      for (const key in this.otherArgs) {\n        otherArgs[key] = this.otherArgs[key];\n      }\n      // tslint:disable-next-line forin\n      for (const optionsKey in options.otherArgs!) {\n        otherArgs[optionsKey] = options.otherArgs![optionsKey];\n      }\n    }\n\n    if ('isBundling' in options) {\n      isBundling = options.isBundling!;\n    }\n\n    if ('maxRetries' in options) {\n      retry!.backoffSettings!.maxRetries = options.maxRetries;\n      delete retry!.backoffSettings!.totalTimeoutMillis;\n    }\n\n    if ('longrunning' in options) {\n      longrunning = options.longrunning;\n    }\n\n    if ('promise' in options) {\n      promise = options.promise!;\n    }\n\n    return new CallSettings({\n      timeout,\n      retry,\n      bundleOptions: this.bundleOptions,\n      longrunning,\n      autoPaginate,\n      pageToken,\n      pageSize,\n      maxResults,\n      otherArgs,\n      isBundling,\n      promise,\n    });\n  }\n}\n\n/**\n * Per-call configurable settings for retrying upon transient failure.\n *\n * @param {number[]} retryCodes - a list of Google API canonical error codes\n *   upon which a retry should be attempted.\n * @param {BackoffSettings} backoffSettings - configures the retry\n *   exponential backoff algorithm.\n * @return {RetryOptions} A new RetryOptions object.\n *\n */\nexport function createRetryOptions(\n  retryCodes: number[],\n  backoffSettings: BackoffSettings\n): RetryOptions {\n  return {\n    retryCodes,\n    backoffSettings,\n  };\n}\n\n/**\n * Parameters to the exponential backoff algorithm for retrying.\n *\n * @param {number} initialRetryDelayMillis - the initial delay time,\n *   in milliseconds, between the completion of the first failed request and the\n *   initiation of the first retrying request.\n * @param {number} retryDelayMultiplier - the multiplier by which to\n *   increase the delay time between the completion of failed requests, and the\n *   initiation of the subsequent retrying request.\n * @param {number} maxRetryDelayMillis - the maximum delay time, in\n *   milliseconds, between requests. When this value is reached,\n *   ``retryDelayMultiplier`` will no longer be used to increase delay time.\n * @param {number} initialRpcTimeoutMillis - the initial timeout parameter\n *   to the request.\n * @param {number} rpcTimeoutMultiplier - the multiplier by which to\n *   increase the timeout parameter between failed requests.\n * @param {number} maxRpcTimeoutMillis - the maximum timeout parameter, in\n *   milliseconds, for a request. When this value is reached,\n *   ``rpcTimeoutMultiplier`` will no longer be used to increase the timeout.\n * @param {number} totalTimeoutMillis - the total time, in milliseconds,\n *   starting from when the initial request is sent, after which an error will\n *   be returned, regardless of the retrying attempts made meanwhile.\n * @return {BackoffSettings} a new settings.\n *\n */\nexport function createBackoffSettings(\n  initialRetryDelayMillis: number,\n  retryDelayMultiplier: number,\n  maxRetryDelayMillis: number,\n  initialRpcTimeoutMillis: number | null,\n  rpcTimeoutMultiplier: number | null,\n  maxRpcTimeoutMillis: number | null,\n  totalTimeoutMillis: number | null\n): BackoffSettings {\n  return {\n    initialRetryDelayMillis,\n    retryDelayMultiplier,\n    maxRetryDelayMillis,\n    initialRpcTimeoutMillis,\n    rpcTimeoutMultiplier,\n    maxRpcTimeoutMillis,\n    totalTimeoutMillis,\n  };\n}\n\nexport function createDefaultBackoffSettings() {\n  return createBackoffSettings(100, 1.3, 60000, null, null, null, null);\n}\n\n/**\n * Parameters to the exponential backoff algorithm for retrying.\n * This function is unsupported, and intended for internal use only.\n *\n * @param {number} initialRetryDelayMillis - the initial delay time,\n *   in milliseconds, between the completion of the first failed request and the\n *   initiation of the first retrying request.\n * @param {number} retryDelayMultiplier - the multiplier by which to\n *   increase the delay time between the completion of failed requests, and the\n *   initiation of the subsequent retrying request.\n * @param {number} maxRetryDelayMillis - the maximum delay time, in\n *   milliseconds, between requests. When this value is reached,\n *   ``retryDelayMultiplier`` will no longer be used to increase delay time.\n * @param {number} initialRpcTimeoutMillis - the initial timeout parameter\n *   to the request.\n * @param {number} rpcTimeoutMultiplier - the multiplier by which to\n *   increase the timeout parameter between failed requests.\n * @param {number} maxRpcTimeoutMillis - the maximum timeout parameter, in\n *   milliseconds, for a request. When this value is reached,\n *   ``rpcTimeoutMultiplier`` will no longer be used to increase the timeout.\n * @param {number} maxRetries - the maximum number of retrying attempts that\n *   will be made. If reached, an error will be returned.\n * @return {BackoffSettings} a new settings.\n *\n */\nexport function createMaxRetriesBackoffSettings(\n  initialRetryDelayMillis: number,\n  retryDelayMultiplier: number,\n  maxRetryDelayMillis: number,\n  initialRpcTimeoutMillis: number,\n  rpcTimeoutMultiplier: number,\n  maxRpcTimeoutMillis: number,\n  maxRetries: number\n): BackoffSettings {\n  return {\n    initialRetryDelayMillis,\n    retryDelayMultiplier,\n    maxRetryDelayMillis,\n    initialRpcTimeoutMillis,\n    rpcTimeoutMultiplier,\n    maxRpcTimeoutMillis,\n    maxRetries,\n  };\n}\n\n/**\n * Creates a new {@link BundleOptions}.\n *\n * @private\n * @param {Object} options - An object to hold optional parameters. See\n *   properties for the content of options.\n * @return {BundleOptions} - A new options.\n */\nexport function createBundleOptions(options: BundlingConfig): BundleOptions {\n  const params = [\n    'element_count_threshold',\n    'element_count_limit',\n    'request_byte_threshold',\n    'request_byte_limit',\n    'delay_threshold_millis',\n  ];\n  params.forEach(param => {\n    if (param in options && typeof options[param] !== 'number') {\n      throw new Error(`${param} should be a number`);\n    }\n  });\n\n  const elementCountThreshold = options.element_count_threshold || 0;\n  const elementCountLimit = options.element_count_limit || 0;\n  const requestByteThreshold = options.request_byte_threshold || 0;\n  const requestByteLimit = options.request_byte_limit || 0;\n  const delayThreshold = options.delay_threshold_millis || 0;\n\n  if (\n    elementCountThreshold === 0 &&\n    requestByteThreshold === 0 &&\n    delayThreshold === 0\n  ) {\n    throw new Error('one threshold should be > 0');\n  }\n  return {\n    elementCountThreshold,\n    elementCountLimit,\n    requestByteThreshold,\n    requestByteLimit,\n    delayThreshold,\n  };\n}\n\n/**\n * Helper for {@link constructSettings}\n *\n * @private\n *\n * @param {Object} methodConfig - A dictionary representing a single\n *   `methods` entry of the standard API client config file. (See\n *   {@link constructSettings} for information on this yaml.)\n * @param {?Object} retryCodes - A dictionary parsed from the\n *   `retry_codes_def` entry of the standard API client config\n *   file. (See {@link constructSettings} for information on this yaml.)\n * @param {Object} retryParams - A dictionary parsed from the\n *   `retry_params` entry of the standard API client config\n *   file. (See {@link constructSettings} for information on this yaml.)\n * @param {Object} retryNames - A dictionary mapping the string names\n *   used in the standard API client config file to API response\n *   status codes.\n * @return {?RetryOptions} The new retry options.\n */\nfunction constructRetry(\n  methodConfig: MethodConfig,\n  retryCodes: {[index: string]: string[]},\n  retryParams: {[index: string]: {}},\n  retryNames: {[index: string]: {}}\n): RetryOptions | null | undefined {\n  if (!methodConfig) {\n    return null;\n  }\n\n  let codes: number[] | null = null;\n  if (retryCodes && 'retry_codes_name' in methodConfig) {\n    const retryCodesName = methodConfig['retry_codes_name'];\n    codes = (retryCodes[retryCodesName] || []).map(name => {\n      return Number(retryNames[name]);\n    });\n  }\n\n  let backoffSettings: BackoffSettings | null = null;\n  if (retryParams && 'retry_params_name' in methodConfig) {\n    const params = retryParams[\n      methodConfig.retry_params_name\n    ] as RetryParamsConfig;\n    backoffSettings = createBackoffSettings(\n      params.initial_retry_delay_millis,\n      params.retry_delay_multiplier,\n      params.max_retry_delay_millis,\n      params.initial_rpc_timeout_millis,\n      params.rpc_timeout_multiplier,\n      params.max_rpc_timeout_millis,\n      params.total_timeout_millis\n    );\n  }\n  return createRetryOptions(codes!, backoffSettings!);\n}\n\n/**\n * Helper for {@link constructSettings}\n *\n * Takes two retry options, and merges them into a single RetryOption instance.\n *\n * @private\n *\n * @param {RetryOptions} retry - The base RetryOptions.\n * @param {RetryOptions} overrides - The RetryOptions used for overriding\n *   `retry`. Use the values if it is not null. If entire `overrides` is null,\n *   ignore the base retry and return null.\n * @return {?RetryOptions} The merged RetryOptions.\n */\nfunction mergeRetryOptions(\n  retry: RetryOptions,\n  overrides: RetryOptions\n): RetryOptions | null {\n  if (!overrides) {\n    return null;\n  }\n\n  if (!overrides.retryCodes && !overrides.backoffSettings) {\n    return retry;\n  }\n\n  let codes = retry.retryCodes;\n  if (overrides.retryCodes) {\n    codes = overrides.retryCodes;\n  }\n  let backoffSettings = retry.backoffSettings;\n  if (overrides.backoffSettings) {\n    backoffSettings = overrides.backoffSettings;\n  }\n  return createRetryOptions(codes, backoffSettings);\n}\n\nexport interface ServiceConfig {\n  retry_codes: {[index: string]: string[]};\n  retry_params: {[index: string]: RetryParamsConfig};\n  methods: {[index: string]: MethodConfig};\n}\n\nexport interface RetryParamsConfig {\n  initial_retry_delay_millis: number;\n  retry_delay_multiplier: number;\n  max_retry_delay_millis: number;\n  initial_rpc_timeout_millis: number;\n  rpc_timeout_multiplier: number;\n  max_rpc_timeout_millis: number;\n  total_timeout_millis: number;\n}\n\nexport interface MethodConfig {\n  retry_codes_name: string;\n  retry_params_name: string;\n  bundling?: BundlingConfig;\n  timeout_millis?: number;\n}\n\nexport interface BundlingConfig {\n  [index: string]: number;\n  element_count_threshold: number;\n  element_count_limit: number;\n  request_byte_threshold: number;\n  request_byte_limit: number;\n  delay_threshold_millis: number;\n}\n\nexport interface ClientConfig {\n  interfaces?: {[index: string]: ServiceConfig};\n}\n\n/**\n * Constructs a dictionary mapping method names to {@link CallSettings}.\n *\n * The `clientConfig` parameter is parsed from a client configuration JSON\n * file of the form:\n *\n *     {\n *       \"interfaces\": {\n *         \"google.fake.v1.ServiceName\": {\n *           \"retry_codes\": {\n *             \"idempotent\": [\"UNAVAILABLE\", \"DEADLINE_EXCEEDED\"],\n *             \"non_idempotent\": []\n *           },\n *           \"retry_params\": {\n *             \"default\": {\n *               \"initial_retry_delay_millis\": 100,\n *               \"retry_delay_multiplier\": 1.2,\n *               \"max_retry_delay_millis\": 1000,\n *               \"initial_rpc_timeout_millis\": 2000,\n *               \"rpc_timeout_multiplier\": 1.5,\n *               \"max_rpc_timeout_millis\": 30000,\n *               \"total_timeout_millis\": 45000\n *             }\n *           },\n *           \"methods\": {\n *             \"CreateFoo\": {\n *               \"retry_codes_name\": \"idempotent\",\n *               \"retry_params_name\": \"default\"\n *             },\n *             \"Publish\": {\n *               \"retry_codes_name\": \"non_idempotent\",\n *               \"retry_params_name\": \"default\",\n *               \"bundling\": {\n *                 \"element_count_threshold\": 40,\n *                 \"element_count_limit\": 200,\n *                 \"request_byte_threshold\": 90000,\n *                 \"request_byte_limit\": 100000,\n *                 \"delay_threshold_millis\": 100\n *               }\n *             }\n *           }\n *         }\n *       }\n *     }\n *\n * @param {String} serviceName - The fully-qualified name of this\n *   service, used as a key into the client config file (in the\n *   example above, this value should be 'google.fake.v1.ServiceName').\n * @param {Object} clientConfig - A dictionary parsed from the\n *   standard API client config file.\n * @param {Object} configOverrides - A dictionary in the same structure of\n *   client_config to override the settings.\n * @param {Object.} retryNames - A dictionary mapping the strings\n *   referring to response status codes to objects representing\n *   those codes.\n * @param {Object} otherArgs - the non-request arguments to be passed to the API\n *   calls.\n * @param {Function=} promise - A constructor for a promise that implements the\n * ES6 specification of promise. If not provided, native promises will be used.\n * @return {Object} A mapping from method name to CallSettings, or null if the\n *   service is not found in the config.\n */\nexport function constructSettings(\n  serviceName: string,\n  clientConfig: ClientConfig,\n  configOverrides: ClientConfig,\n  retryNames: {},\n  otherArgs?: {},\n  promise?: PromiseConstructor\n) {\n  otherArgs = otherArgs || {};\n  // tslint:disable-next-line no-any\n  const defaults: any = {};\n\n  const serviceConfig = (clientConfig.interfaces || {})[serviceName];\n  if (!serviceConfig) {\n    return null;\n  }\n\n  const overrides = (configOverrides.interfaces || {})[serviceName] || {};\n  const methods = serviceConfig.methods;\n  const overridingMethods = overrides.methods || {};\n  // tslint:disable-next-line forin\n  for (const methodName in methods) {\n    const methodConfig = methods[methodName];\n    const jsName = methodName[0].toLowerCase() + methodName.slice(1);\n\n    let retry = constructRetry(\n      methodConfig,\n      serviceConfig.retry_codes,\n      serviceConfig.retry_params,\n      retryNames\n    );\n    let bundlingConfig = methodConfig.bundling;\n    let timeout = methodConfig.timeout_millis;\n    if (methodName in overridingMethods) {\n      const overridingMethod = overridingMethods[methodName];\n      if (overridingMethod) {\n        if ('bundling' in overridingMethod) {\n          bundlingConfig = overridingMethod.bundling;\n        }\n        if ('timeout_millis' in overridingMethod) {\n          timeout = overridingMethod.timeout_millis;\n        }\n      }\n      retry = mergeRetryOptions(\n        retry!,\n        constructRetry(\n          overridingMethod,\n          overrides.retry_codes,\n          overrides.retry_params,\n          retryNames\n        )!\n      );\n    }\n\n    defaults[jsName] = new CallSettings({\n      timeout,\n      retry,\n      bundleOptions: bundlingConfig\n        ? createBundleOptions(bundlingConfig)\n        : null,\n      otherArgs,\n      promise: promise || Promise,\n    });\n  }\n\n  return defaults;\n}\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/CancellablePromise.html":{"url":"interfaces/CancellablePromise.html","title":"interface - CancellablePromise","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  CancellablePromise\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/call.ts\n        \n\n\n            \n                Extends\n            \n            \n                    Promise\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    cancel\n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            cancel\n                        \n                        \n                    \n                \n            \n            \n                \ncancel()\n                \n            \n\n\n            \n                \n                    Defined in src/call.ts:106\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {status} from '@grpc/grpc-js';\n\nimport {\n  APICallback,\n  NextPageRequestType,\n  RawResponseType,\n  RequestType,\n  ResponseType,\n  ResultTuple,\n  SimpleCallbackFunction,\n} from './apitypes';\nimport {GoogleError} from './googleError';\n\nexport class OngoingCall {\n  callback?: APICallback;\n  cancelFunc?: () => void;\n  completed: boolean;\n\n  /**\n   * OngoingCall manages callback, API calls, and cancellation\n   * of the API calls.\n   * @param {APICallback=} callback\n   *   The callback to be called asynchronously when the API call\n   *   finishes.\n   * @constructor\n   * @property {APICallback} callback\n   *   The callback function to be called.\n   * @private\n   */\n  constructor(callback?: APICallback) {\n    this.callback = callback;\n    this.completed = false;\n  }\n\n  /**\n   * Cancels the ongoing promise.\n   */\n  cancel(): void {\n    if (this.completed) {\n      return;\n    }\n    this.completed = true;\n    if (this.cancelFunc) {\n      this.cancelFunc();\n    } else {\n      const error = new GoogleError('cancelled');\n      error.code = status.CANCELLED;\n      this.callback!(error);\n    }\n  }\n\n  /**\n   * Call calls the specified function. Result will be used to fulfill\n   * the promise.\n   *\n   * @param {SimpleCallbackFunction} func\n   *   A function for an API call.\n   * @param {Object} argument\n   *   A request object.\n   */\n  call(func: SimpleCallbackFunction, argument: RequestType): void {\n    if (this.completed) {\n      return;\n    }\n    // tslint:disable-next-line no-any\n    const canceller = func(argument, (...args: any[]) => {\n      this.completed = true;\n      setImmediate(this.callback!, ...args);\n    });\n    this.cancelFunc = () => canceller.cancel();\n  }\n}\n\nexport interface CancellablePromise extends Promise {\n  cancel(): void;\n}\n\nexport class OngoingCallPromise extends OngoingCall {\n  promise: CancellablePromise;\n  /**\n   * GaxPromise is GRPCCallbackWrapper, but it holds a promise when\n   * the API call finishes.\n   * @param {Function} PromiseCtor - A constructor for a promise that implements\n   * the ES6 specification of promise.\n   * @constructor\n   * @private\n   */\n  // tslint:disable-next-line variable-name\n  constructor(PromiseCtor: PromiseConstructor) {\n    super();\n    this.promise = new PromiseCtor((resolve, reject) => {\n      this.callback = (\n        err: GoogleError | null,\n        response?: ResponseType,\n        next?: NextPageRequestType | null,\n        rawResponse?: RawResponseType\n      ) => {\n        if (err) {\n          reject(err);\n        } else if (response !== undefined) {\n          resolve([response, next, rawResponse]);\n        } else {\n          throw new GoogleError('Neither error nor response are defined');\n        }\n      };\n    }) as CancellablePromise;\n    this.promise.cancel = () => {\n      this.cancel();\n    };\n  }\n}\n\n    \n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ClientConfig.html":{"url":"interfaces/ClientConfig.html","title":"interface - ClientConfig","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  ClientConfig\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/gax.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        interfaces\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        interfaces\n                                    \n                                \n                                \n                                    \n                                        interfaces:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import {BundleOptions} from './bundlingCalls/bundleExecutor';\n\n/**\n * Encapsulates the overridable settings for a particular API call.\n *\n * ``CallOptions`` is an optional arg for all GAX API calls.  It is used to\n * configure the settings of a specific API call.\n *\n * When provided, its values override the GAX service defaults for that\n * particular call.\n *\n * Typically the API clients will accept this as the second to the last\n * argument. See the examples below.\n * @typedef {Object} CallOptions\n * @property {number=} timeout - The client-side timeout for API calls.\n * @property {RetryOptions=} retry - determines whether and how to retry\n *   on transient errors. When set to null, the call will not retry.\n * @property {boolean=} autoPaginate - If set to false and the call is\n *   configured for paged iteration, page unrolling is not performed, instead\n *   the callback will be called with the response object.\n * @property {Object=} pageToken - If set and the call is configured for\n *   paged iteration, paged iteration is not performed and requested with this\n *   pageToken.\n * @property {number} maxResults - If set and the call is configured for\n *   paged iteration, the call will stop when the number of response elements\n *   reaches to the specified size. By default, it will unroll the page to\n *   the end of the list.\n * @property {boolean=} isBundling - If set to false and the call is configured\n *   for bundling, bundling is not performed.\n * @property {BackoffSettings=} longrunning - BackoffSettings used for polling.\n * @property {Function=} promise - A constructor for a promise that implements the ES6\n * specification of promise which will be used to create promises. If not\n * provided, native promises will be used.\n * @example\n * // suppress bundling for bundled method.\n * api.bundlingMethod(\n *     param, {optParam: aValue, isBundling: false}, function(err, response) {\n *   // handle response.\n * });\n * @example\n * // suppress streaming for page-streaming method.\n * api.pageStreamingMethod(\n *     param, {optParam: aValue, autoPaginate: false}, function(err, page) {\n *   // not returning a stream, but callback is called with the paged response.\n * });\n */\n\n/**\n * Per-call configurable settings for retrying upon transient failure.\n * @typedef {Object} RetryOptions\n * @property {String[]} retryCodes\n * @property {BackoffSettings} backoffSettings\n */\nexport class RetryOptions {\n  retryCodes: number[];\n  backoffSettings: BackoffSettings;\n  constructor(retryCodes: number[], backoffSettings: BackoffSettings) {\n    this.retryCodes = retryCodes;\n    this.backoffSettings = backoffSettings;\n  }\n}\n\n/**\n * Parameters to the exponential backoff algorithm for retrying.\n * @typedef {Object} BackoffSettings\n * @property {number} initialRetryDelayMillis - the initial delay time,\n *   in milliseconds, between the completion of the first failed request and the\n *   initiation of the first retrying request.\n * @property {number} retryDelayMultiplier - the multiplier by which to\n *   increase the delay time between the completion of failed requests, and the\n *   initiation of the subsequent retrying request.\n * @property {number} maxRetryDelayMillis - the maximum delay time, in\n *   milliseconds, between requests. When this value is reached,\n *   ``retryDelayMultiplier`` will no longer be used to increase delay time.\n * @property {number} initialRpcTimeoutMillis - the initial timeout parameter\n *   to the request.\n * @propetry {number} rpcTimeoutMultiplier - the multiplier by which to\n *   increase the timeout parameter between failed requests.\n * @property {number} maxRpcTimeoutMillis - the maximum timeout parameter, in\n *   milliseconds, for a request. When this value is reached,\n *   ``rpcTimeoutMultiplier`` will no longer be used to increase the timeout.\n * @property {number} totalTimeoutMillis - the total time, in milliseconds,\n *   starting from when the initial request is sent, after which an error will\n *   be returned, regardless of the retrying attempts made meanwhile.\n */\nexport interface BackoffSettings {\n  maxRetries?: number;\n  initialRetryDelayMillis: number;\n  retryDelayMultiplier: number;\n  maxRetryDelayMillis: number;\n  initialRpcTimeoutMillis?: number | null;\n  maxRpcTimeoutMillis?: number | null;\n  totalTimeoutMillis?: number | null;\n  rpcTimeoutMultiplier?: number | null;\n}\n\n/**\n * Parameter to configure bundling behavior.\n * @typedef {Object} BundleOptions\n * @property {number} elementCountThreshold -\n *   the bundled request will be sent once the count of outstanding elements\n *   in the repeated field reaches this value.\n * @property {number} elementCountLimit -\n *   represents a hard limit on the number of elements in the repeated field\n *   of the bundle; if adding a request to a bundle would exceed this value,\n *   the bundle is sent and the new request is added to a fresh bundle. It is\n *   invalid for a single request to exceed this limit.\n * @property {number} requestByteThreshold -\n *   the bundled request will be sent once the count of bytes in the request\n *   reaches this value. Note that this value is pessimistically approximated\n *   by summing the bytesizes of the elements in the repeated field, and\n *   therefore may be an under-approximation.\n * @property {number} requestByteLimit -\n *   represents a hard limit on the size of the bundled request; if adding\n *   a request to a bundle would exceed this value, the bundle is sent and\n *   the new request is added to a fresh bundle. It is invalid for a single\n *   request to exceed this limit. Note that this value is pessimistically\n *   approximated by summing the bytesizes of the elements in the repeated\n *   field, with a buffer applied to correspond to the resulting\n *   under-approximation.\n * @property {number} delayThreshold -\n *   the bundled request will be sent this amount of time after the first\n *   element in the bundle was added to it.\n */\n\nexport interface CallOptions {\n  timeout?: number;\n  retry?: RetryOptions | null;\n  autoPaginate?: boolean;\n  pageToken?: string;\n  pageSize?: number;\n  maxResults?: number;\n  maxRetries?: number;\n  // tslint:disable-next-line no-any\n  otherArgs?: {[index: string]: any};\n  bundleOptions?: BundleOptions | null;\n  isBundling?: boolean;\n  longrunning?: BackoffSettings;\n  promise?: PromiseConstructor;\n}\n\nexport class CallSettings {\n  timeout: number;\n  retry?: RetryOptions | null;\n  autoPaginate?: boolean;\n  pageToken?: string;\n  pageSize?: number;\n  maxResults?: number;\n  // tslint:disable-next-line no-any\n  otherArgs: {[index: string]: any};\n  bundleOptions?: BundleOptions | null;\n  isBundling: boolean;\n  longrunning?: BackoffSettings;\n  promise: PromiseConstructor;\n\n  /**\n   * @param {Object} settings - An object containing parameters of this settings.\n   * @param {number} settings.timeout - The client-side timeout for API calls.\n   *   This parameter is ignored for retrying calls.\n   * @param {RetryOptions} settings.retry - The configuration for retrying upon\n   *   transient error. If set to null, this call will not retry.\n   * @param {boolean} settings.autoPaginate - If there is no `pageDescriptor`,\n   *   this attrbute has no meaning. Otherwise, determines whether a page\n   * streamed response should make the page structure transparent to the user by\n   *   flattening the repeated field in the returned generator.\n   * @param {number} settings.pageToken - If there is no `pageDescriptor`,\n   *   this attribute has no meaning. Otherwise, determines the page token used\n   * in the page streaming request.\n   * @param {Object} settings.otherArgs - Additional arguments to be passed to\n   *   the API calls.\n   * @param {Function=} settings.promise - A constructor for a promise that\n   * implements the ES6 specification of promise. If not provided, native\n   * promises will be used.\n   *\n   * @constructor\n   */\n  constructor(settings?: CallOptions) {\n    settings = settings || {};\n    this.timeout = settings.timeout || 30 * 1000;\n    this.retry = settings.retry;\n    this.autoPaginate =\n      'autoPaginate' in settings ? settings.autoPaginate : true;\n    this.pageToken = settings.pageToken;\n    this.maxResults = settings.maxResults;\n    this.otherArgs = settings.otherArgs || {};\n    this.bundleOptions = settings.bundleOptions;\n    this.isBundling = 'isBundling' in settings ? settings.isBundling! : true;\n    this.longrunning =\n      'longrunning' in settings ? settings.longrunning : undefined;\n    this.promise = 'promise' in settings ? settings.promise! : Promise;\n  }\n\n  /**\n   * Returns a new CallSettings merged from this and a CallOptions object.\n   *\n   * @param {CallOptions} options - an instance whose values override\n   *   those in this object. If null, ``merge`` returns a copy of this\n   *   object\n   * @return {CallSettings} The merged CallSettings instance.\n   */\n  merge(options?: CallOptions | null) {\n    if (!options) {\n      return new CallSettings(this);\n    }\n    let timeout = this.timeout;\n    let retry = this.retry;\n    let autoPaginate = this.autoPaginate;\n    let pageToken = this.pageToken;\n    let pageSize = this.pageSize;\n    let maxResults = this.maxResults;\n    let otherArgs = this.otherArgs;\n    let isBundling = this.isBundling;\n    let longrunning = this.longrunning;\n    let promise = this.promise;\n    if ('timeout' in options) {\n      timeout = options.timeout!;\n    }\n    if ('retry' in options) {\n      retry = options.retry;\n    }\n\n    if ('autoPaginate' in options && !options.autoPaginate) {\n      autoPaginate = false;\n    }\n\n    if ('pageToken' in options) {\n      autoPaginate = false;\n      pageToken = options.pageToken;\n    }\n\n    if ('pageSize' in options) {\n      pageSize = options.pageSize;\n    }\n\n    if ('maxResults' in options) {\n      maxResults = options.maxResults;\n    }\n\n    if ('otherArgs' in options) {\n      otherArgs = {};\n      // tslint:disable-next-line forin\n      for (const key in this.otherArgs) {\n        otherArgs[key] = this.otherArgs[key];\n      }\n      // tslint:disable-next-line forin\n      for (const optionsKey in options.otherArgs!) {\n        otherArgs[optionsKey] = options.otherArgs![optionsKey];\n      }\n    }\n\n    if ('isBundling' in options) {\n      isBundling = options.isBundling!;\n    }\n\n    if ('maxRetries' in options) {\n      retry!.backoffSettings!.maxRetries = options.maxRetries;\n      delete retry!.backoffSettings!.totalTimeoutMillis;\n    }\n\n    if ('longrunning' in options) {\n      longrunning = options.longrunning;\n    }\n\n    if ('promise' in options) {\n      promise = options.promise!;\n    }\n\n    return new CallSettings({\n      timeout,\n      retry,\n      bundleOptions: this.bundleOptions,\n      longrunning,\n      autoPaginate,\n      pageToken,\n      pageSize,\n      maxResults,\n      otherArgs,\n      isBundling,\n      promise,\n    });\n  }\n}\n\n/**\n * Per-call configurable settings for retrying upon transient failure.\n *\n * @param {number[]} retryCodes - a list of Google API canonical error codes\n *   upon which a retry should be attempted.\n * @param {BackoffSettings} backoffSettings - configures the retry\n *   exponential backoff algorithm.\n * @return {RetryOptions} A new RetryOptions object.\n *\n */\nexport function createRetryOptions(\n  retryCodes: number[],\n  backoffSettings: BackoffSettings\n): RetryOptions {\n  return {\n    retryCodes,\n    backoffSettings,\n  };\n}\n\n/**\n * Parameters to the exponential backoff algorithm for retrying.\n *\n * @param {number} initialRetryDelayMillis - the initial delay time,\n *   in milliseconds, between the completion of the first failed request and the\n *   initiation of the first retrying request.\n * @param {number} retryDelayMultiplier - the multiplier by which to\n *   increase the delay time between the completion of failed requests, and the\n *   initiation of the subsequent retrying request.\n * @param {number} maxRetryDelayMillis - the maximum delay time, in\n *   milliseconds, between requests. When this value is reached,\n *   ``retryDelayMultiplier`` will no longer be used to increase delay time.\n * @param {number} initialRpcTimeoutMillis - the initial timeout parameter\n *   to the request.\n * @param {number} rpcTimeoutMultiplier - the multiplier by which to\n *   increase the timeout parameter between failed requests.\n * @param {number} maxRpcTimeoutMillis - the maximum timeout parameter, in\n *   milliseconds, for a request. When this value is reached,\n *   ``rpcTimeoutMultiplier`` will no longer be used to increase the timeout.\n * @param {number} totalTimeoutMillis - the total time, in milliseconds,\n *   starting from when the initial request is sent, after which an error will\n *   be returned, regardless of the retrying attempts made meanwhile.\n * @return {BackoffSettings} a new settings.\n *\n */\nexport function createBackoffSettings(\n  initialRetryDelayMillis: number,\n  retryDelayMultiplier: number,\n  maxRetryDelayMillis: number,\n  initialRpcTimeoutMillis: number | null,\n  rpcTimeoutMultiplier: number | null,\n  maxRpcTimeoutMillis: number | null,\n  totalTimeoutMillis: number | null\n): BackoffSettings {\n  return {\n    initialRetryDelayMillis,\n    retryDelayMultiplier,\n    maxRetryDelayMillis,\n    initialRpcTimeoutMillis,\n    rpcTimeoutMultiplier,\n    maxRpcTimeoutMillis,\n    totalTimeoutMillis,\n  };\n}\n\nexport function createDefaultBackoffSettings() {\n  return createBackoffSettings(100, 1.3, 60000, null, null, null, null);\n}\n\n/**\n * Parameters to the exponential backoff algorithm for retrying.\n * This function is unsupported, and intended for internal use only.\n *\n * @param {number} initialRetryDelayMillis - the initial delay time,\n *   in milliseconds, between the completion of the first failed request and the\n *   initiation of the first retrying request.\n * @param {number} retryDelayMultiplier - the multiplier by which to\n *   increase the delay time between the completion of failed requests, and the\n *   initiation of the subsequent retrying request.\n * @param {number} maxRetryDelayMillis - the maximum delay time, in\n *   milliseconds, between requests. When this value is reached,\n *   ``retryDelayMultiplier`` will no longer be used to increase delay time.\n * @param {number} initialRpcTimeoutMillis - the initial timeout parameter\n *   to the request.\n * @param {number} rpcTimeoutMultiplier - the multiplier by which to\n *   increase the timeout parameter between failed requests.\n * @param {number} maxRpcTimeoutMillis - the maximum timeout parameter, in\n *   milliseconds, for a request. When this value is reached,\n *   ``rpcTimeoutMultiplier`` will no longer be used to increase the timeout.\n * @param {number} maxRetries - the maximum number of retrying attempts that\n *   will be made. If reached, an error will be returned.\n * @return {BackoffSettings} a new settings.\n *\n */\nexport function createMaxRetriesBackoffSettings(\n  initialRetryDelayMillis: number,\n  retryDelayMultiplier: number,\n  maxRetryDelayMillis: number,\n  initialRpcTimeoutMillis: number,\n  rpcTimeoutMultiplier: number,\n  maxRpcTimeoutMillis: number,\n  maxRetries: number\n): BackoffSettings {\n  return {\n    initialRetryDelayMillis,\n    retryDelayMultiplier,\n    maxRetryDelayMillis,\n    initialRpcTimeoutMillis,\n    rpcTimeoutMultiplier,\n    maxRpcTimeoutMillis,\n    maxRetries,\n  };\n}\n\n/**\n * Creates a new {@link BundleOptions}.\n *\n * @private\n * @param {Object} options - An object to hold optional parameters. See\n *   properties for the content of options.\n * @return {BundleOptions} - A new options.\n */\nexport function createBundleOptions(options: BundlingConfig): BundleOptions {\n  const params = [\n    'element_count_threshold',\n    'element_count_limit',\n    'request_byte_threshold',\n    'request_byte_limit',\n    'delay_threshold_millis',\n  ];\n  params.forEach(param => {\n    if (param in options && typeof options[param] !== 'number') {\n      throw new Error(`${param} should be a number`);\n    }\n  });\n\n  const elementCountThreshold = options.element_count_threshold || 0;\n  const elementCountLimit = options.element_count_limit || 0;\n  const requestByteThreshold = options.request_byte_threshold || 0;\n  const requestByteLimit = options.request_byte_limit || 0;\n  const delayThreshold = options.delay_threshold_millis || 0;\n\n  if (\n    elementCountThreshold === 0 &&\n    requestByteThreshold === 0 &&\n    delayThreshold === 0\n  ) {\n    throw new Error('one threshold should be > 0');\n  }\n  return {\n    elementCountThreshold,\n    elementCountLimit,\n    requestByteThreshold,\n    requestByteLimit,\n    delayThreshold,\n  };\n}\n\n/**\n * Helper for {@link constructSettings}\n *\n * @private\n *\n * @param {Object} methodConfig - A dictionary representing a single\n *   `methods` entry of the standard API client config file. (See\n *   {@link constructSettings} for information on this yaml.)\n * @param {?Object} retryCodes - A dictionary parsed from the\n *   `retry_codes_def` entry of the standard API client config\n *   file. (See {@link constructSettings} for information on this yaml.)\n * @param {Object} retryParams - A dictionary parsed from the\n *   `retry_params` entry of the standard API client config\n *   file. (See {@link constructSettings} for information on this yaml.)\n * @param {Object} retryNames - A dictionary mapping the string names\n *   used in the standard API client config file to API response\n *   status codes.\n * @return {?RetryOptions} The new retry options.\n */\nfunction constructRetry(\n  methodConfig: MethodConfig,\n  retryCodes: {[index: string]: string[]},\n  retryParams: {[index: string]: {}},\n  retryNames: {[index: string]: {}}\n): RetryOptions | null | undefined {\n  if (!methodConfig) {\n    return null;\n  }\n\n  let codes: number[] | null = null;\n  if (retryCodes && 'retry_codes_name' in methodConfig) {\n    const retryCodesName = methodConfig['retry_codes_name'];\n    codes = (retryCodes[retryCodesName] || []).map(name => {\n      return Number(retryNames[name]);\n    });\n  }\n\n  let backoffSettings: BackoffSettings | null = null;\n  if (retryParams && 'retry_params_name' in methodConfig) {\n    const params = retryParams[\n      methodConfig.retry_params_name\n    ] as RetryParamsConfig;\n    backoffSettings = createBackoffSettings(\n      params.initial_retry_delay_millis,\n      params.retry_delay_multiplier,\n      params.max_retry_delay_millis,\n      params.initial_rpc_timeout_millis,\n      params.rpc_timeout_multiplier,\n      params.max_rpc_timeout_millis,\n      params.total_timeout_millis\n    );\n  }\n  return createRetryOptions(codes!, backoffSettings!);\n}\n\n/**\n * Helper for {@link constructSettings}\n *\n * Takes two retry options, and merges them into a single RetryOption instance.\n *\n * @private\n *\n * @param {RetryOptions} retry - The base RetryOptions.\n * @param {RetryOptions} overrides - The RetryOptions used for overriding\n *   `retry`. Use the values if it is not null. If entire `overrides` is null,\n *   ignore the base retry and return null.\n * @return {?RetryOptions} The merged RetryOptions.\n */\nfunction mergeRetryOptions(\n  retry: RetryOptions,\n  overrides: RetryOptions\n): RetryOptions | null {\n  if (!overrides) {\n    return null;\n  }\n\n  if (!overrides.retryCodes && !overrides.backoffSettings) {\n    return retry;\n  }\n\n  let codes = retry.retryCodes;\n  if (overrides.retryCodes) {\n    codes = overrides.retryCodes;\n  }\n  let backoffSettings = retry.backoffSettings;\n  if (overrides.backoffSettings) {\n    backoffSettings = overrides.backoffSettings;\n  }\n  return createRetryOptions(codes, backoffSettings);\n}\n\nexport interface ServiceConfig {\n  retry_codes: {[index: string]: string[]};\n  retry_params: {[index: string]: RetryParamsConfig};\n  methods: {[index: string]: MethodConfig};\n}\n\nexport interface RetryParamsConfig {\n  initial_retry_delay_millis: number;\n  retry_delay_multiplier: number;\n  max_retry_delay_millis: number;\n  initial_rpc_timeout_millis: number;\n  rpc_timeout_multiplier: number;\n  max_rpc_timeout_millis: number;\n  total_timeout_millis: number;\n}\n\nexport interface MethodConfig {\n  retry_codes_name: string;\n  retry_params_name: string;\n  bundling?: BundlingConfig;\n  timeout_millis?: number;\n}\n\nexport interface BundlingConfig {\n  [index: string]: number;\n  element_count_threshold: number;\n  element_count_limit: number;\n  request_byte_threshold: number;\n  request_byte_limit: number;\n  delay_threshold_millis: number;\n}\n\nexport interface ClientConfig {\n  interfaces?: {[index: string]: ServiceConfig};\n}\n\n/**\n * Constructs a dictionary mapping method names to {@link CallSettings}.\n *\n * The `clientConfig` parameter is parsed from a client configuration JSON\n * file of the form:\n *\n *     {\n *       \"interfaces\": {\n *         \"google.fake.v1.ServiceName\": {\n *           \"retry_codes\": {\n *             \"idempotent\": [\"UNAVAILABLE\", \"DEADLINE_EXCEEDED\"],\n *             \"non_idempotent\": []\n *           },\n *           \"retry_params\": {\n *             \"default\": {\n *               \"initial_retry_delay_millis\": 100,\n *               \"retry_delay_multiplier\": 1.2,\n *               \"max_retry_delay_millis\": 1000,\n *               \"initial_rpc_timeout_millis\": 2000,\n *               \"rpc_timeout_multiplier\": 1.5,\n *               \"max_rpc_timeout_millis\": 30000,\n *               \"total_timeout_millis\": 45000\n *             }\n *           },\n *           \"methods\": {\n *             \"CreateFoo\": {\n *               \"retry_codes_name\": \"idempotent\",\n *               \"retry_params_name\": \"default\"\n *             },\n *             \"Publish\": {\n *               \"retry_codes_name\": \"non_idempotent\",\n *               \"retry_params_name\": \"default\",\n *               \"bundling\": {\n *                 \"element_count_threshold\": 40,\n *                 \"element_count_limit\": 200,\n *                 \"request_byte_threshold\": 90000,\n *                 \"request_byte_limit\": 100000,\n *                 \"delay_threshold_millis\": 100\n *               }\n *             }\n *           }\n *         }\n *       }\n *     }\n *\n * @param {String} serviceName - The fully-qualified name of this\n *   service, used as a key into the client config file (in the\n *   example above, this value should be 'google.fake.v1.ServiceName').\n * @param {Object} clientConfig - A dictionary parsed from the\n *   standard API client config file.\n * @param {Object} configOverrides - A dictionary in the same structure of\n *   client_config to override the settings.\n * @param {Object.} retryNames - A dictionary mapping the strings\n *   referring to response status codes to objects representing\n *   those codes.\n * @param {Object} otherArgs - the non-request arguments to be passed to the API\n *   calls.\n * @param {Function=} promise - A constructor for a promise that implements the\n * ES6 specification of promise. If not provided, native promises will be used.\n * @return {Object} A mapping from method name to CallSettings, or null if the\n *   service is not found in the config.\n */\nexport function constructSettings(\n  serviceName: string,\n  clientConfig: ClientConfig,\n  configOverrides: ClientConfig,\n  retryNames: {},\n  otherArgs?: {},\n  promise?: PromiseConstructor\n) {\n  otherArgs = otherArgs || {};\n  // tslint:disable-next-line no-any\n  const defaults: any = {};\n\n  const serviceConfig = (clientConfig.interfaces || {})[serviceName];\n  if (!serviceConfig) {\n    return null;\n  }\n\n  const overrides = (configOverrides.interfaces || {})[serviceName] || {};\n  const methods = serviceConfig.methods;\n  const overridingMethods = overrides.methods || {};\n  // tslint:disable-next-line forin\n  for (const methodName in methods) {\n    const methodConfig = methods[methodName];\n    const jsName = methodName[0].toLowerCase() + methodName.slice(1);\n\n    let retry = constructRetry(\n      methodConfig,\n      serviceConfig.retry_codes,\n      serviceConfig.retry_params,\n      retryNames\n    );\n    let bundlingConfig = methodConfig.bundling;\n    let timeout = methodConfig.timeout_millis;\n    if (methodName in overridingMethods) {\n      const overridingMethod = overridingMethods[methodName];\n      if (overridingMethod) {\n        if ('bundling' in overridingMethod) {\n          bundlingConfig = overridingMethod.bundling;\n        }\n        if ('timeout_millis' in overridingMethod) {\n          timeout = overridingMethod.timeout_millis;\n        }\n      }\n      retry = mergeRetryOptions(\n        retry!,\n        constructRetry(\n          overridingMethod,\n          overrides.retry_codes,\n          overrides.retry_params,\n          retryNames\n        )!\n      );\n    }\n\n    defaults[jsName] = new CallSettings({\n      timeout,\n      retry,\n      bundleOptions: bundlingConfig\n        ? createBundleOptions(bundlingConfig)\n        : null,\n      otherArgs,\n      promise: promise || Promise,\n    });\n  }\n\n  return defaults;\n}\n\n    \n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ClientStub.html":{"url":"classes/ClientStub.html","title":"class - ClientStub","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ClientStub\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/grpc.ts\n        \n\n\n\n\n\n\n\n\n\n            \n    Indexable\n        \n            \n                \n                    \n                        [name: string]:        Function\n\n                    \n                \n                        \n                            \n                                Defined in src/grpc.ts:86\n                            \n                        \n            \n        \n\n\n\n\n\n\n    \n\n\n    \n        import * as grpcProtoLoader from '@grpc/proto-loader';\nimport * as fs from 'fs';\nimport {GoogleAuth, GoogleAuthOptions} from 'google-auth-library';\nimport * as grpc from '@grpc/grpc-js';\nimport {OutgoingHttpHeaders} from 'http';\nimport * as path from 'path';\nimport * as protobuf from 'protobufjs';\nimport * as semver from 'semver';\nimport * as walk from 'walkdir';\n\nimport * as gax from './gax';\n\nconst googleProtoFilesDir = path.join(__dirname, '..', '..', 'protos');\n\n// INCLUDE_DIRS is passed to @grpc/proto-loader\nconst INCLUDE_DIRS: string[] = [];\nINCLUDE_DIRS.push(googleProtoFilesDir);\n\n// COMMON_PROTO_FILES logic is here for protobufjs loads (see\n// GoogleProtoFilesRoot below)\nconst COMMON_PROTO_FILES = walk\n  .sync(googleProtoFilesDir)\n  .filter(f => path.extname(f) === '.proto')\n  .map(f => path.normalize(f).substring(googleProtoFilesDir.length + 1));\n\nexport interface GrpcClientOptions extends GoogleAuthOptions {\n  auth?: GoogleAuth;\n  promise?: PromiseConstructor;\n  grpc?: GrpcModule;\n}\n\nexport interface MetadataValue {\n  equals: Function;\n}\n\nexport interface Metadata {\n  new (): Metadata;\n  set: (key: {}, value?: {} | null) => void;\n  clone: () => Metadata;\n  value: MetadataValue;\n  get: (key: {}) => {};\n}\n\nexport type GrpcModule = typeof grpc;\n\nexport interface ClientStubOptions {\n  servicePath: string;\n  port: number;\n  // TODO: use sslCreds?: grpc.ChannelCredentials;\n  // tslint:disable-next-line no-any\n  sslCreds?: any;\n}\n\nexport class ClientStub extends grpc.Client {\n  [name: string]: Function;\n}\n\nexport class GrpcClient {\n  auth: GoogleAuth;\n  promise: PromiseConstructor;\n  grpc: GrpcModule;\n  grpcVersion: string;\n\n  /**\n   * A class which keeps the context of gRPC and auth for the gRPC.\n   *\n   * @param {Object=} options - The optional parameters. It will be directly\n   *   passed to google-auth-library library, so parameters like keyFile or\n   *   credentials will be valid.\n   * @param {Object=} options.auth - An instance of google-auth-library.\n   *   When specified, this auth instance will be used instead of creating\n   *   a new one.\n   * @param {Object=} options.grpc - When specified, this will be used\n   *   for the 'grpc' module in this context. By default, it will load the grpc\n   *   module in the standard way.\n   * @param {Function=} options.promise - A constructor for a promise that\n   * implements the ES6 specification of promise. If not provided, native\n   * promises will be used.\n   * @constructor\n   */\n  constructor(options: GrpcClientOptions = {}) {\n    this.auth = options.auth || new GoogleAuth(options);\n    this.promise = options.promise || Promise;\n\n    if ('grpc' in options) {\n      this.grpc = options.grpc!;\n      this.grpcVersion = '';\n    } else {\n      if (semver.gte(process.version, '8.13.0')) {\n        this.grpc = grpc;\n        this.grpcVersion = require('@grpc/grpc-js/package.json').version;\n      } else {\n        const errorMessage =\n          'To use @grpc/grpc-js you must run your code on Node.js v8.13.0 or newer. Please see README if you need to use an older version. ' +\n          'https://github.com/googleapis/gax-nodejs/blob/master/README.md';\n        throw new Error(errorMessage);\n      }\n    }\n  }\n\n  /**\n   * Creates a gRPC credentials. It asks the auth data if necessary.\n   * @private\n   * @param {Object} opts - options values for configuring credentials.\n   * @param {Object=} opts.sslCreds - when specified, this is used instead\n   *   of default channel credentials.\n   * @return {Promise} The promise which will be resolved to the gRPC credential.\n   */\n  async _getCredentials(opts: ClientStubOptions) {\n    if (opts.sslCreds) {\n      return opts.sslCreds;\n    }\n    const grpc = this.grpc;\n    const sslCreds = grpc.credentials.createSsl();\n    const client = await this.auth.getClient();\n    const credentials = grpc.credentials.combineChannelCredentials(\n      sslCreds,\n      grpc.credentials.createFromGoogleCredential(client)\n    );\n    return credentials;\n  }\n\n  /**\n   * Loads the gRPC service from the proto file at the given path and with the\n   * given options.\n   * @param filename The path to the proto file.\n   * @param options Options for loading the proto file.\n   */\n  loadFromProto(filename: string, options: grpcProtoLoader.Options) {\n    const packageDef = grpcProtoLoader.loadSync(filename, options);\n    return this.grpc.loadPackageDefinition(packageDef);\n  }\n\n  /**\n   * Load grpc proto service from a filename hooking in googleapis common protos\n   * when necessary.\n   * @param {String} protoPath - The directory to search for the protofile.\n   * @param {String} filename - The filename of the proto to be loaded.\n   * @return {Object} The gRPC loaded result (the toplevel namespace\n   *   object).\n   */\n  loadProto(protoPath: string, filename: string) {\n    // This set of @grpc/proto-loader options\n    // 'closely approximates the existing behavior of grpc.load'\n    const includeDirs = INCLUDE_DIRS.slice();\n    includeDirs.unshift(protoPath);\n    const options = {\n      keepCase: false,\n      longs: String,\n      enums: String,\n      defaults: true,\n      oneofs: true,\n      includeDirs,\n    };\n    return this.loadFromProto(filename, options);\n  }\n\n  static _resolveFile(protoPath: string, filename: string) {\n    if (fs.existsSync(path.join(protoPath, filename))) {\n      return path.join(protoPath, filename);\n    } else if (COMMON_PROTO_FILES.indexOf(filename) > -1) {\n      return path.join(googleProtoFilesDir, filename);\n    }\n    throw new Error(filename + ' could not be found in ' + protoPath);\n  }\n\n  metadataBuilder(headers: OutgoingHttpHeaders) {\n    const Metadata = this.grpc.Metadata;\n    const baseMetadata = new Metadata();\n    // tslint:disable-next-line forin\n    for (const key in headers) {\n      const value = headers[key];\n      if (Array.isArray(value)) {\n        value.forEach(v => baseMetadata.add(key, v));\n      } else {\n        baseMetadata.set(key, `${value}`);\n      }\n    }\n    return function buildMetadata(\n      abTests?: {},\n      moreHeaders?: OutgoingHttpHeaders\n    ) {\n      // TODO: bring the A/B testing info into the metadata.\n      let copied = false;\n      let metadata = baseMetadata;\n      if (moreHeaders) {\n        for (const key in moreHeaders) {\n          if (\n            key.toLowerCase() !== 'x-goog-api-client' &&\n            moreHeaders!.hasOwnProperty(key)\n          ) {\n            if (!copied) {\n              copied = true;\n              metadata = metadata.clone();\n            }\n            const value = moreHeaders[key];\n            if (Array.isArray(value)) {\n              value.forEach(v => metadata.add(key, v));\n            } else {\n              metadata.set(key, `${value}`);\n            }\n          }\n        }\n      }\n      return metadata;\n    };\n  }\n\n  /**\n   * A wrapper of {@link constructSettings} function under the gRPC context.\n   *\n   * Most of parameters are common among constructSettings, please take a look.\n   * @param {string} serviceName - The fullly-qualified name of the service.\n   * @param {Object} clientConfig - A dictionary of the client config.\n   * @param {Object} configOverrides - A dictionary of overriding configs.\n   * @param {Object} headers - A dictionary of additional HTTP header name to\n   *   its value.\n   * @return {Object} A mapping of method names to CallSettings.\n   */\n  constructSettings(\n    serviceName: string,\n    clientConfig: gax.ClientConfig,\n    configOverrides: gax.ClientConfig,\n    headers: OutgoingHttpHeaders\n  ) {\n    return gax.constructSettings(\n      serviceName,\n      clientConfig,\n      configOverrides,\n      this.grpc.status,\n      {metadataBuilder: this.metadataBuilder(headers)},\n      this.promise\n    );\n  }\n\n  /**\n   * Creates a gRPC stub with current gRPC and auth.\n   * @param {function} CreateStub - The constructor function of the stub.\n   * @param {Object} options - The optional arguments to customize\n   *   gRPC connection. This options will be passed to the constructor of\n   *   gRPC client too.\n   * @param {string} options.servicePath - The name of the server of the service.\n   * @param {number} options.port - The port of the service.\n   * @param {grpcTypes.ClientCredentials=} options.sslCreds - The credentials to be used\n   *   to set up gRPC connection.\n   * @return {Promise} A promse which resolves to a gRPC stub instance.\n   */\n  // tslint:disable-next-line variable-name\n  async createStub(CreateStub: typeof ClientStub, options: ClientStubOptions) {\n    const serviceAddress = options.servicePath + ':' + options.port;\n    const creds = await this._getCredentials(options);\n    const grpcOptions: {[index: string]: string} = {};\n    Object.keys(options).forEach(key => {\n      if (key.startsWith('grpc.')) {\n        grpcOptions[key.replace(/^grpc\\./, '')] = options[key];\n      }\n    });\n    const stub = new CreateStub(serviceAddress, creds, grpcOptions);\n    return stub;\n  }\n\n  /**\n   * Creates a 'bytelength' function for a given proto message class.\n   *\n   * See {@link BundleDescriptor} about the meaning of the return value.\n   *\n   * @param {function} message - a constructor function that is generated by\n   *   protobuf.js. Assumes 'encoder' field in the message.\n   * @return {function(Object):number} - a function to compute the byte length\n   *   for an object.\n   */\n  static createByteLengthFunction(message: {\n    encode: (obj: {}) => {\n      finish: () => Array;\n    };\n  }) {\n    return function getByteLength(obj: {}) {\n      return message.encode(obj).finish().length;\n    };\n  }\n}\n\nexport class GoogleProtoFilesRoot extends protobuf.Root {\n  constructor(...args: Array) {\n    super(...args);\n  }\n\n  // Causes the loading of an included proto to check if it is a common\n  // proto. If it is a common proto, use the bundled proto.\n  resolvePath(originPath: string, includePath: string) {\n    originPath = path.normalize(originPath);\n    includePath = path.normalize(includePath);\n\n    // Fully qualified paths don't need to be resolved.\n    if (path.isAbsolute(includePath)) {\n      if (!fs.existsSync(includePath)) {\n        throw new Error('The include `' + includePath + '` was not found.');\n      }\n      return includePath;\n    }\n\n    if (COMMON_PROTO_FILES.indexOf(includePath) > -1) {\n      return path.join(googleProtoFilesDir, includePath);\n    }\n\n    return GoogleProtoFilesRoot._findIncludePath(originPath, includePath);\n  }\n\n  static _findIncludePath(originPath: string, includePath: string) {\n    originPath = path.normalize(originPath);\n    includePath = path.normalize(includePath);\n\n    let current = originPath;\n    let found = fs.existsSync(path.join(current, includePath));\n    while (!found && current.length > 0) {\n      current = current.substring(0, current.lastIndexOf(path.sep));\n      found = fs.existsSync(path.join(current, includePath));\n    }\n    if (!found) {\n      throw new Error('The include `' + includePath + '` was not found.');\n    }\n    return path.join(current, includePath);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ClientStubOptions.html":{"url":"interfaces/ClientStubOptions.html","title":"interface - ClientStubOptions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  ClientStubOptions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/grpc.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        port\n                                \n                                \n                                        servicePath\n                                \n                                \n                                            Optional\n                                        sslCreds\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        port\n                                    \n                                \n                                \n                                    \n                                        port:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        servicePath\n                                    \n                                \n                                \n                                    \n                                        servicePath:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        sslCreds\n                                    \n                                \n                                \n                                    \n                                        sslCreds:         any\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         any\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import * as grpcProtoLoader from '@grpc/proto-loader';\nimport * as fs from 'fs';\nimport {GoogleAuth, GoogleAuthOptions} from 'google-auth-library';\nimport * as grpc from '@grpc/grpc-js';\nimport {OutgoingHttpHeaders} from 'http';\nimport * as path from 'path';\nimport * as protobuf from 'protobufjs';\nimport * as semver from 'semver';\nimport * as walk from 'walkdir';\n\nimport * as gax from './gax';\n\nconst googleProtoFilesDir = path.join(__dirname, '..', '..', 'protos');\n\n// INCLUDE_DIRS is passed to @grpc/proto-loader\nconst INCLUDE_DIRS: string[] = [];\nINCLUDE_DIRS.push(googleProtoFilesDir);\n\n// COMMON_PROTO_FILES logic is here for protobufjs loads (see\n// GoogleProtoFilesRoot below)\nconst COMMON_PROTO_FILES = walk\n  .sync(googleProtoFilesDir)\n  .filter(f => path.extname(f) === '.proto')\n  .map(f => path.normalize(f).substring(googleProtoFilesDir.length + 1));\n\nexport interface GrpcClientOptions extends GoogleAuthOptions {\n  auth?: GoogleAuth;\n  promise?: PromiseConstructor;\n  grpc?: GrpcModule;\n}\n\nexport interface MetadataValue {\n  equals: Function;\n}\n\nexport interface Metadata {\n  new (): Metadata;\n  set: (key: {}, value?: {} | null) => void;\n  clone: () => Metadata;\n  value: MetadataValue;\n  get: (key: {}) => {};\n}\n\nexport type GrpcModule = typeof grpc;\n\nexport interface ClientStubOptions {\n  servicePath: string;\n  port: number;\n  // TODO: use sslCreds?: grpc.ChannelCredentials;\n  // tslint:disable-next-line no-any\n  sslCreds?: any;\n}\n\nexport class ClientStub extends grpc.Client {\n  [name: string]: Function;\n}\n\nexport class GrpcClient {\n  auth: GoogleAuth;\n  promise: PromiseConstructor;\n  grpc: GrpcModule;\n  grpcVersion: string;\n\n  /**\n   * A class which keeps the context of gRPC and auth for the gRPC.\n   *\n   * @param {Object=} options - The optional parameters. It will be directly\n   *   passed to google-auth-library library, so parameters like keyFile or\n   *   credentials will be valid.\n   * @param {Object=} options.auth - An instance of google-auth-library.\n   *   When specified, this auth instance will be used instead of creating\n   *   a new one.\n   * @param {Object=} options.grpc - When specified, this will be used\n   *   for the 'grpc' module in this context. By default, it will load the grpc\n   *   module in the standard way.\n   * @param {Function=} options.promise - A constructor for a promise that\n   * implements the ES6 specification of promise. If not provided, native\n   * promises will be used.\n   * @constructor\n   */\n  constructor(options: GrpcClientOptions = {}) {\n    this.auth = options.auth || new GoogleAuth(options);\n    this.promise = options.promise || Promise;\n\n    if ('grpc' in options) {\n      this.grpc = options.grpc!;\n      this.grpcVersion = '';\n    } else {\n      if (semver.gte(process.version, '8.13.0')) {\n        this.grpc = grpc;\n        this.grpcVersion = require('@grpc/grpc-js/package.json').version;\n      } else {\n        const errorMessage =\n          'To use @grpc/grpc-js you must run your code on Node.js v8.13.0 or newer. Please see README if you need to use an older version. ' +\n          'https://github.com/googleapis/gax-nodejs/blob/master/README.md';\n        throw new Error(errorMessage);\n      }\n    }\n  }\n\n  /**\n   * Creates a gRPC credentials. It asks the auth data if necessary.\n   * @private\n   * @param {Object} opts - options values for configuring credentials.\n   * @param {Object=} opts.sslCreds - when specified, this is used instead\n   *   of default channel credentials.\n   * @return {Promise} The promise which will be resolved to the gRPC credential.\n   */\n  async _getCredentials(opts: ClientStubOptions) {\n    if (opts.sslCreds) {\n      return opts.sslCreds;\n    }\n    const grpc = this.grpc;\n    const sslCreds = grpc.credentials.createSsl();\n    const client = await this.auth.getClient();\n    const credentials = grpc.credentials.combineChannelCredentials(\n      sslCreds,\n      grpc.credentials.createFromGoogleCredential(client)\n    );\n    return credentials;\n  }\n\n  /**\n   * Loads the gRPC service from the proto file at the given path and with the\n   * given options.\n   * @param filename The path to the proto file.\n   * @param options Options for loading the proto file.\n   */\n  loadFromProto(filename: string, options: grpcProtoLoader.Options) {\n    const packageDef = grpcProtoLoader.loadSync(filename, options);\n    return this.grpc.loadPackageDefinition(packageDef);\n  }\n\n  /**\n   * Load grpc proto service from a filename hooking in googleapis common protos\n   * when necessary.\n   * @param {String} protoPath - The directory to search for the protofile.\n   * @param {String} filename - The filename of the proto to be loaded.\n   * @return {Object} The gRPC loaded result (the toplevel namespace\n   *   object).\n   */\n  loadProto(protoPath: string, filename: string) {\n    // This set of @grpc/proto-loader options\n    // 'closely approximates the existing behavior of grpc.load'\n    const includeDirs = INCLUDE_DIRS.slice();\n    includeDirs.unshift(protoPath);\n    const options = {\n      keepCase: false,\n      longs: String,\n      enums: String,\n      defaults: true,\n      oneofs: true,\n      includeDirs,\n    };\n    return this.loadFromProto(filename, options);\n  }\n\n  static _resolveFile(protoPath: string, filename: string) {\n    if (fs.existsSync(path.join(protoPath, filename))) {\n      return path.join(protoPath, filename);\n    } else if (COMMON_PROTO_FILES.indexOf(filename) > -1) {\n      return path.join(googleProtoFilesDir, filename);\n    }\n    throw new Error(filename + ' could not be found in ' + protoPath);\n  }\n\n  metadataBuilder(headers: OutgoingHttpHeaders) {\n    const Metadata = this.grpc.Metadata;\n    const baseMetadata = new Metadata();\n    // tslint:disable-next-line forin\n    for (const key in headers) {\n      const value = headers[key];\n      if (Array.isArray(value)) {\n        value.forEach(v => baseMetadata.add(key, v));\n      } else {\n        baseMetadata.set(key, `${value}`);\n      }\n    }\n    return function buildMetadata(\n      abTests?: {},\n      moreHeaders?: OutgoingHttpHeaders\n    ) {\n      // TODO: bring the A/B testing info into the metadata.\n      let copied = false;\n      let metadata = baseMetadata;\n      if (moreHeaders) {\n        for (const key in moreHeaders) {\n          if (\n            key.toLowerCase() !== 'x-goog-api-client' &&\n            moreHeaders!.hasOwnProperty(key)\n          ) {\n            if (!copied) {\n              copied = true;\n              metadata = metadata.clone();\n            }\n            const value = moreHeaders[key];\n            if (Array.isArray(value)) {\n              value.forEach(v => metadata.add(key, v));\n            } else {\n              metadata.set(key, `${value}`);\n            }\n          }\n        }\n      }\n      return metadata;\n    };\n  }\n\n  /**\n   * A wrapper of {@link constructSettings} function under the gRPC context.\n   *\n   * Most of parameters are common among constructSettings, please take a look.\n   * @param {string} serviceName - The fullly-qualified name of the service.\n   * @param {Object} clientConfig - A dictionary of the client config.\n   * @param {Object} configOverrides - A dictionary of overriding configs.\n   * @param {Object} headers - A dictionary of additional HTTP header name to\n   *   its value.\n   * @return {Object} A mapping of method names to CallSettings.\n   */\n  constructSettings(\n    serviceName: string,\n    clientConfig: gax.ClientConfig,\n    configOverrides: gax.ClientConfig,\n    headers: OutgoingHttpHeaders\n  ) {\n    return gax.constructSettings(\n      serviceName,\n      clientConfig,\n      configOverrides,\n      this.grpc.status,\n      {metadataBuilder: this.metadataBuilder(headers)},\n      this.promise\n    );\n  }\n\n  /**\n   * Creates a gRPC stub with current gRPC and auth.\n   * @param {function} CreateStub - The constructor function of the stub.\n   * @param {Object} options - The optional arguments to customize\n   *   gRPC connection. This options will be passed to the constructor of\n   *   gRPC client too.\n   * @param {string} options.servicePath - The name of the server of the service.\n   * @param {number} options.port - The port of the service.\n   * @param {grpcTypes.ClientCredentials=} options.sslCreds - The credentials to be used\n   *   to set up gRPC connection.\n   * @return {Promise} A promse which resolves to a gRPC stub instance.\n   */\n  // tslint:disable-next-line variable-name\n  async createStub(CreateStub: typeof ClientStub, options: ClientStubOptions) {\n    const serviceAddress = options.servicePath + ':' + options.port;\n    const creds = await this._getCredentials(options);\n    const grpcOptions: {[index: string]: string} = {};\n    Object.keys(options).forEach(key => {\n      if (key.startsWith('grpc.')) {\n        grpcOptions[key.replace(/^grpc\\./, '')] = options[key];\n      }\n    });\n    const stub = new CreateStub(serviceAddress, creds, grpcOptions);\n    return stub;\n  }\n\n  /**\n   * Creates a 'bytelength' function for a given proto message class.\n   *\n   * See {@link BundleDescriptor} about the meaning of the return value.\n   *\n   * @param {function} message - a constructor function that is generated by\n   *   protobuf.js. Assumes 'encoder' field in the message.\n   * @return {function(Object):number} - a function to compute the byte length\n   *   for an object.\n   */\n  static createByteLengthFunction(message: {\n    encode: (obj: {}) => {\n      finish: () => Array;\n    };\n  }) {\n    return function getByteLength(obj: {}) {\n      return message.encode(obj).finish().length;\n    };\n  }\n}\n\nexport class GoogleProtoFilesRoot extends protobuf.Root {\n  constructor(...args: Array) {\n    super(...args);\n  }\n\n  // Causes the loading of an included proto to check if it is a common\n  // proto. If it is a common proto, use the bundled proto.\n  resolvePath(originPath: string, includePath: string) {\n    originPath = path.normalize(originPath);\n    includePath = path.normalize(includePath);\n\n    // Fully qualified paths don't need to be resolved.\n    if (path.isAbsolute(includePath)) {\n      if (!fs.existsSync(includePath)) {\n        throw new Error('The include `' + includePath + '` was not found.');\n      }\n      return includePath;\n    }\n\n    if (COMMON_PROTO_FILES.indexOf(includePath) > -1) {\n      return path.join(googleProtoFilesDir, includePath);\n    }\n\n    return GoogleProtoFilesRoot._findIncludePath(originPath, includePath);\n  }\n\n  static _findIncludePath(originPath: string, includePath: string) {\n    originPath = path.normalize(originPath);\n    includePath = path.normalize(includePath);\n\n    let current = originPath;\n    let found = fs.existsSync(path.join(current, includePath));\n    while (!found && current.length > 0) {\n      current = current.substring(0, current.lastIndexOf(path.sep));\n      found = fs.existsSync(path.join(current, includePath));\n    }\n    if (!found) {\n      throw new Error('The include `' + includePath + '` was not found.');\n    }\n    return path.join(current, includePath);\n  }\n}\n\n    \n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Descriptor.html":{"url":"interfaces/Descriptor.html","title":"interface - Descriptor","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  Descriptor\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/descriptor.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    getApiCaller\n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getApiCaller\n                        \n                        \n                    \n                \n            \n            \n                \ngetApiCaller(settings: CallSettings)\n                \n            \n\n\n            \n                \n                    Defined in src/descriptor.ts:42\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    settings\n                                    \n                                                CallSettings\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         APICaller\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {APICaller} from './apiCaller';\nimport {CallSettings} from './gax';\n\nexport interface Descriptor {\n  getApiCaller(settings: CallSettings): APICaller;\n}\n\nexport {\n  LongRunningDescriptor as LongrunningDescriptor,\n} from './longRunningCalls/longRunningDescriptor';\nexport {PageDescriptor} from './paginationCalls/pageDescriptor';\nexport {StreamDescriptor} from './streamingCalls/streamDescriptor';\nexport {BundleDescriptor} from './bundlingCalls/bundleDescriptor';\n\n    \n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Duplexify.html":{"url":"interfaces/Duplexify.html","title":"interface - Duplexify","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  Duplexify\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/streamingCalls/streaming.ts\n        \n\n\n            \n                Extends\n            \n            \n                    Duplex\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        destroyed\n                                \n                            \n                        \n                    \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    setReadable\n                                \n                                \n                                    setWritable\n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            setReadable\n                        \n                        \n                    \n                \n            \n            \n                \nsetReadable(readable: Readable | \"undefined\" | null)\n                \n            \n\n\n            \n                \n                    Defined in src/streamingCalls/streaming.ts:55\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    readable\n                                    \n                                            Readable | \"undefined\" | null\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            setWritable\n                        \n                        \n                    \n                \n            \n            \n                \nsetWritable(writable: Writable | \"undefined\" | null)\n                \n            \n\n\n            \n                \n                    Defined in src/streamingCalls/streaming.ts:54\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    writable\n                                    \n                                            Writable | \"undefined\" | null\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        destroyed\n                                    \n                                \n                                \n                                    \n                                        destroyed:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import {Duplex, DuplexOptions, Readable, Stream, Writable} from 'stream';\n\nimport {\n  APICallback,\n  CancellableStream,\n  GRPCCallResult,\n  SimpleCallbackFunction,\n} from '../apitypes';\n\nconst duplexify: DuplexifyConstructor = require('duplexify');\nconst retryRequest = require('retry-request');\n\n// Directly copy over Duplexify interfaces\nexport interface DuplexifyOptions extends DuplexOptions {\n  autoDestroy?: boolean;\n  end?: boolean;\n}\n\nexport interface Duplexify extends Duplex {\n  readonly destroyed: boolean;\n  setWritable(writable: Writable | false | null): void;\n  setReadable(readable: Readable | false | null): void;\n}\n\nexport interface DuplexifyConstructor {\n  obj(\n    writable?: Writable | false | null,\n    readable?: Readable | false | null,\n    options?: DuplexifyOptions\n  ): Duplexify;\n  new (\n    writable?: Writable | false | null,\n    readable?: Readable | false | null,\n    options?: DuplexifyOptions\n  ): Duplexify;\n  (\n    writable?: Writable | false | null,\n    readable?: Readable | false | null,\n    options?: DuplexifyOptions\n  ): Duplexify;\n}\n\n/**\n * The type of gRPC streaming.\n * @enum {number}\n */\nexport enum StreamType {\n  /** Client sends a single request, server streams responses. */\n  SERVER_STREAMING = 1,\n\n  /** Client streams requests, server returns a single response. */\n  CLIENT_STREAMING = 2,\n\n  /** Both client and server stream objects. */\n  BIDI_STREAMING = 3,\n}\n\nexport class StreamProxy extends duplexify implements GRPCCallResult {\n  type: StreamType;\n  private _callback: APICallback;\n  private _isCancelCalled: boolean;\n  stream?: CancellableStream;\n  /**\n   * StreamProxy is a proxy to gRPC-streaming method.\n   *\n   * @private\n   * @constructor\n   * @param {StreamType} type - the type of gRPC stream.\n   * @param {ApiCallback} callback - the callback for further API call.\n   */\n  constructor(type: StreamType, callback: APICallback) {\n    super(undefined, undefined, {\n      objectMode: true,\n      readable: type !== StreamType.CLIENT_STREAMING,\n      writable: type !== StreamType.SERVER_STREAMING,\n    } as DuplexOptions);\n    this.type = type;\n    this._callback = callback;\n    this._isCancelCalled = false;\n  }\n\n  cancel() {\n    if (this.stream) {\n      this.stream.cancel();\n    } else {\n      this._isCancelCalled = true;\n    }\n  }\n\n  /**\n   * Forward events from an API request stream to the user's stream.\n   * @param {Stream} stream - The API request stream.\n   */\n  forwardEvents(stream: Stream) {\n    const eventsToForward = ['metadata', 'response', 'status'];\n\n    eventsToForward.forEach(event => {\n      stream.on(event, this.emit.bind(this, event));\n    });\n\n    // We also want to supply the status data as 'response' event to support\n    // the behavior of google-cloud-node expects.\n    // see:\n    // https://github.com/GoogleCloudPlatform/google-cloud-node/pull/1775#issuecomment-259141029\n    // https://github.com/GoogleCloudPlatform/google-cloud-node/blob/116436fa789d8b0f7fc5100b19b424e3ec63e6bf/packages/common/src/grpc-service.js#L355\n    stream.on('metadata', metadata => {\n      // Create a response object with succeeds.\n      // TODO: unify this logic with the decoration of gRPC response when it's\n      // added. see: https://github.com/googleapis/gax-nodejs/issues/65\n      stream.emit('response', {\n        code: 200,\n        details: '',\n        message: 'OK',\n        metadata,\n      });\n    });\n  }\n\n  /**\n   * Specifies the target stream.\n   * @param {ApiCall} apiCall - the API function to be called.\n   * @param {Object} argument - the argument to be passed to the apiCall.\n   */\n  setStream(apiCall: SimpleCallbackFunction, argument: {}) {\n    if (this.type === StreamType.SERVER_STREAMING) {\n      const retryStream = retryRequest(null, {\n        objectMode: true,\n        request: () => {\n          if (this._isCancelCalled) {\n            if (this.stream) {\n              this.stream.cancel();\n            }\n            return;\n          }\n          const stream = apiCall(argument, this._callback) as CancellableStream;\n          this.stream = stream;\n          this.forwardEvents(stream);\n          return stream;\n        },\n      });\n      this.setReadable(retryStream);\n      return;\n    }\n\n    const stream = apiCall(argument, this._callback) as CancellableStream;\n    this.stream = stream;\n    this.forwardEvents(stream);\n\n    if (this.type === StreamType.CLIENT_STREAMING) {\n      this.setWritable(stream);\n    }\n\n    if (this.type === StreamType.BIDI_STREAMING) {\n      this.setReadable(stream);\n      this.setWritable(stream);\n    }\n\n    if (this._isCancelCalled && this.stream) {\n      this.stream.cancel();\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/DuplexifyConstructor.html":{"url":"interfaces/DuplexifyConstructor.html","title":"interface - DuplexifyConstructor","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  DuplexifyConstructor\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/streamingCalls/streaming.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Unamed property\n                                \n                            \n                        \n                    \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    obj\n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            obj\n                        \n                        \n                    \n                \n            \n            \n                \nobj(writable?: Writable | \"undefined\" | null, readable?: Readable | \"undefined\" | null, options?: DuplexifyOptions)\n                \n            \n\n\n            \n                \n                    Defined in src/streamingCalls/streaming.ts:59\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    writable\n                                    \n                                            Writable | \"undefined\" | null\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                                \n                                    readable\n                                    \n                                            Readable | \"undefined\" | null\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                                \n                                    options\n                                    \n                                                DuplexifyOptions\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Duplexify\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n            \n                Properties\n                    \n                        \n\n                                    \n                                        \n                                            Signature :\n                                            \n                                            \n                                                \n                                                    [writable: Writable | \"undefined\" | null, readable: Readable | \"undefined\" | null, options: DuplexifyOptions]\n                                            \n                                        \n                                    \n\n\n                                    \n                                        \n                                            Returns :         Duplexify\n\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import {Duplex, DuplexOptions, Readable, Stream, Writable} from 'stream';\n\nimport {\n  APICallback,\n  CancellableStream,\n  GRPCCallResult,\n  SimpleCallbackFunction,\n} from '../apitypes';\n\nconst duplexify: DuplexifyConstructor = require('duplexify');\nconst retryRequest = require('retry-request');\n\n// Directly copy over Duplexify interfaces\nexport interface DuplexifyOptions extends DuplexOptions {\n  autoDestroy?: boolean;\n  end?: boolean;\n}\n\nexport interface Duplexify extends Duplex {\n  readonly destroyed: boolean;\n  setWritable(writable: Writable | false | null): void;\n  setReadable(readable: Readable | false | null): void;\n}\n\nexport interface DuplexifyConstructor {\n  obj(\n    writable?: Writable | false | null,\n    readable?: Readable | false | null,\n    options?: DuplexifyOptions\n  ): Duplexify;\n  new (\n    writable?: Writable | false | null,\n    readable?: Readable | false | null,\n    options?: DuplexifyOptions\n  ): Duplexify;\n  (\n    writable?: Writable | false | null,\n    readable?: Readable | false | null,\n    options?: DuplexifyOptions\n  ): Duplexify;\n}\n\n/**\n * The type of gRPC streaming.\n * @enum {number}\n */\nexport enum StreamType {\n  /** Client sends a single request, server streams responses. */\n  SERVER_STREAMING = 1,\n\n  /** Client streams requests, server returns a single response. */\n  CLIENT_STREAMING = 2,\n\n  /** Both client and server stream objects. */\n  BIDI_STREAMING = 3,\n}\n\nexport class StreamProxy extends duplexify implements GRPCCallResult {\n  type: StreamType;\n  private _callback: APICallback;\n  private _isCancelCalled: boolean;\n  stream?: CancellableStream;\n  /**\n   * StreamProxy is a proxy to gRPC-streaming method.\n   *\n   * @private\n   * @constructor\n   * @param {StreamType} type - the type of gRPC stream.\n   * @param {ApiCallback} callback - the callback for further API call.\n   */\n  constructor(type: StreamType, callback: APICallback) {\n    super(undefined, undefined, {\n      objectMode: true,\n      readable: type !== StreamType.CLIENT_STREAMING,\n      writable: type !== StreamType.SERVER_STREAMING,\n    } as DuplexOptions);\n    this.type = type;\n    this._callback = callback;\n    this._isCancelCalled = false;\n  }\n\n  cancel() {\n    if (this.stream) {\n      this.stream.cancel();\n    } else {\n      this._isCancelCalled = true;\n    }\n  }\n\n  /**\n   * Forward events from an API request stream to the user's stream.\n   * @param {Stream} stream - The API request stream.\n   */\n  forwardEvents(stream: Stream) {\n    const eventsToForward = ['metadata', 'response', 'status'];\n\n    eventsToForward.forEach(event => {\n      stream.on(event, this.emit.bind(this, event));\n    });\n\n    // We also want to supply the status data as 'response' event to support\n    // the behavior of google-cloud-node expects.\n    // see:\n    // https://github.com/GoogleCloudPlatform/google-cloud-node/pull/1775#issuecomment-259141029\n    // https://github.com/GoogleCloudPlatform/google-cloud-node/blob/116436fa789d8b0f7fc5100b19b424e3ec63e6bf/packages/common/src/grpc-service.js#L355\n    stream.on('metadata', metadata => {\n      // Create a response object with succeeds.\n      // TODO: unify this logic with the decoration of gRPC response when it's\n      // added. see: https://github.com/googleapis/gax-nodejs/issues/65\n      stream.emit('response', {\n        code: 200,\n        details: '',\n        message: 'OK',\n        metadata,\n      });\n    });\n  }\n\n  /**\n   * Specifies the target stream.\n   * @param {ApiCall} apiCall - the API function to be called.\n   * @param {Object} argument - the argument to be passed to the apiCall.\n   */\n  setStream(apiCall: SimpleCallbackFunction, argument: {}) {\n    if (this.type === StreamType.SERVER_STREAMING) {\n      const retryStream = retryRequest(null, {\n        objectMode: true,\n        request: () => {\n          if (this._isCancelCalled) {\n            if (this.stream) {\n              this.stream.cancel();\n            }\n            return;\n          }\n          const stream = apiCall(argument, this._callback) as CancellableStream;\n          this.stream = stream;\n          this.forwardEvents(stream);\n          return stream;\n        },\n      });\n      this.setReadable(retryStream);\n      return;\n    }\n\n    const stream = apiCall(argument, this._callback) as CancellableStream;\n    this.stream = stream;\n    this.forwardEvents(stream);\n\n    if (this.type === StreamType.CLIENT_STREAMING) {\n      this.setWritable(stream);\n    }\n\n    if (this.type === StreamType.BIDI_STREAMING) {\n      this.setReadable(stream);\n      this.setWritable(stream);\n    }\n\n    if (this._isCancelCalled && this.stream) {\n      this.stream.cancel();\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/DuplexifyOptions.html":{"url":"interfaces/DuplexifyOptions.html","title":"interface - DuplexifyOptions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  DuplexifyOptions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/streamingCalls/streaming.ts\n        \n\n\n            \n                Extends\n            \n            \n                    DuplexOptions\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        autoDestroy\n                                \n                                \n                                            Optional\n                                        end\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        autoDestroy\n                                    \n                                \n                                \n                                    \n                                        autoDestroy:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        end\n                                    \n                                \n                                \n                                    \n                                        end:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import {Duplex, DuplexOptions, Readable, Stream, Writable} from 'stream';\n\nimport {\n  APICallback,\n  CancellableStream,\n  GRPCCallResult,\n  SimpleCallbackFunction,\n} from '../apitypes';\n\nconst duplexify: DuplexifyConstructor = require('duplexify');\nconst retryRequest = require('retry-request');\n\n// Directly copy over Duplexify interfaces\nexport interface DuplexifyOptions extends DuplexOptions {\n  autoDestroy?: boolean;\n  end?: boolean;\n}\n\nexport interface Duplexify extends Duplex {\n  readonly destroyed: boolean;\n  setWritable(writable: Writable | false | null): void;\n  setReadable(readable: Readable | false | null): void;\n}\n\nexport interface DuplexifyConstructor {\n  obj(\n    writable?: Writable | false | null,\n    readable?: Readable | false | null,\n    options?: DuplexifyOptions\n  ): Duplexify;\n  new (\n    writable?: Writable | false | null,\n    readable?: Readable | false | null,\n    options?: DuplexifyOptions\n  ): Duplexify;\n  (\n    writable?: Writable | false | null,\n    readable?: Readable | false | null,\n    options?: DuplexifyOptions\n  ): Duplexify;\n}\n\n/**\n * The type of gRPC streaming.\n * @enum {number}\n */\nexport enum StreamType {\n  /** Client sends a single request, server streams responses. */\n  SERVER_STREAMING = 1,\n\n  /** Client streams requests, server returns a single response. */\n  CLIENT_STREAMING = 2,\n\n  /** Both client and server stream objects. */\n  BIDI_STREAMING = 3,\n}\n\nexport class StreamProxy extends duplexify implements GRPCCallResult {\n  type: StreamType;\n  private _callback: APICallback;\n  private _isCancelCalled: boolean;\n  stream?: CancellableStream;\n  /**\n   * StreamProxy is a proxy to gRPC-streaming method.\n   *\n   * @private\n   * @constructor\n   * @param {StreamType} type - the type of gRPC stream.\n   * @param {ApiCallback} callback - the callback for further API call.\n   */\n  constructor(type: StreamType, callback: APICallback) {\n    super(undefined, undefined, {\n      objectMode: true,\n      readable: type !== StreamType.CLIENT_STREAMING,\n      writable: type !== StreamType.SERVER_STREAMING,\n    } as DuplexOptions);\n    this.type = type;\n    this._callback = callback;\n    this._isCancelCalled = false;\n  }\n\n  cancel() {\n    if (this.stream) {\n      this.stream.cancel();\n    } else {\n      this._isCancelCalled = true;\n    }\n  }\n\n  /**\n   * Forward events from an API request stream to the user's stream.\n   * @param {Stream} stream - The API request stream.\n   */\n  forwardEvents(stream: Stream) {\n    const eventsToForward = ['metadata', 'response', 'status'];\n\n    eventsToForward.forEach(event => {\n      stream.on(event, this.emit.bind(this, event));\n    });\n\n    // We also want to supply the status data as 'response' event to support\n    // the behavior of google-cloud-node expects.\n    // see:\n    // https://github.com/GoogleCloudPlatform/google-cloud-node/pull/1775#issuecomment-259141029\n    // https://github.com/GoogleCloudPlatform/google-cloud-node/blob/116436fa789d8b0f7fc5100b19b424e3ec63e6bf/packages/common/src/grpc-service.js#L355\n    stream.on('metadata', metadata => {\n      // Create a response object with succeeds.\n      // TODO: unify this logic with the decoration of gRPC response when it's\n      // added. see: https://github.com/googleapis/gax-nodejs/issues/65\n      stream.emit('response', {\n        code: 200,\n        details: '',\n        message: 'OK',\n        metadata,\n      });\n    });\n  }\n\n  /**\n   * Specifies the target stream.\n   * @param {ApiCall} apiCall - the API function to be called.\n   * @param {Object} argument - the argument to be passed to the apiCall.\n   */\n  setStream(apiCall: SimpleCallbackFunction, argument: {}) {\n    if (this.type === StreamType.SERVER_STREAMING) {\n      const retryStream = retryRequest(null, {\n        objectMode: true,\n        request: () => {\n          if (this._isCancelCalled) {\n            if (this.stream) {\n              this.stream.cancel();\n            }\n            return;\n          }\n          const stream = apiCall(argument, this._callback) as CancellableStream;\n          this.stream = stream;\n          this.forwardEvents(stream);\n          return stream;\n        },\n      });\n      this.setReadable(retryStream);\n      return;\n    }\n\n    const stream = apiCall(argument, this._callback) as CancellableStream;\n    this.stream = stream;\n    this.forwardEvents(stream);\n\n    if (this.type === StreamType.CLIENT_STREAMING) {\n      this.setWritable(stream);\n    }\n\n    if (this.type === StreamType.BIDI_STREAMING) {\n      this.setReadable(stream);\n      this.setWritable(stream);\n    }\n\n    if (this._isCancelCalled && this.stream) {\n      this.stream.cancel();\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/GRPCCallOtherArgs.html":{"url":"interfaces/GRPCCallOtherArgs.html","title":"interface - GRPCCallOtherArgs","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  GRPCCallOtherArgs\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/apitypes.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        headers\n                                \n                                \n                                        metadataBuilder\n                                \n                                \n                                            Optional\n                                        options\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        headers\n                                    \n                                \n                                \n                                    \n                                        headers:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        metadataBuilder\n                                    \n                                \n                                \n                                    \n                                        metadataBuilder:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        options\n                                    \n                                \n                                \n                                    \n                                        options:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import {Duplex} from 'stream';\n\nimport {CancellablePromise} from './call';\nimport {CallOptions} from './gax';\nimport {GoogleError} from './googleError';\nimport {Operation} from './longRunningCalls/longrunning';\n\n// gRPC functions return object with `.cancel()` method that can be used for\n// canceling the ongoing call.\nexport interface GRPCCallResult {\n  cancel(): void;\n}\n\n// All GAX calls take RequestType and return ResultTuple, which can contain up\n// to three elements. The first element is always a response (post-processed for\n// special types of call such as pagination or long-running), the second\n// parameter is defined for paginated calls and stores the next page request\n// object, the third parameter stores raw (unprocessed) response object in cases\n// when it might be useful for users.\nexport interface RequestType {}\nexport type ResponseType = {} | null;\nexport type NextPageRequestType = {\n  [index: string]: string;\n} | null;\nexport type RawResponseType = Operation | {};\nexport type ResultTuple = [\n  ResponseType,\n  NextPageRequestType | undefined,\n  RawResponseType | undefined\n];\n\nexport interface SimpleCallbackFunction {\n  (argument: RequestType, callback: APICallback): GRPCCallResult;\n}\n\nexport type APICallback = (\n  err: GoogleError | null,\n  response?: ResponseType,\n  next?: NextPageRequestType,\n  rawResponse?: RawResponseType\n) => void;\n\n// The following five types mimic various gRPC calls (regular UnaryCall and\n// various streaming calls).\nexport type UnaryCall = (\n  argument: {},\n  metadata: {},\n  options: {},\n  callback: APICallback\n) => GRPCCallResult;\nexport type ServerStreamingCall = (\n  argument: {},\n  metadata: {},\n  options: {}\n) => Duplex & GRPCCallResult;\nexport type ClientStreamingCall = (\n  metadata: {},\n  options: {},\n  callback?: APICallback\n) => Duplex & GRPCCallResult;\nexport type BiDiStreamingCall = (\n  metadata: {},\n  options: {}\n) => Duplex & GRPCCallResult;\nexport type GRPCCall =\n  | UnaryCall\n  | ServerStreamingCall\n  | ClientStreamingCall\n  | BiDiStreamingCall;\n\n// GAX wraps gRPC calls so that the wrapper functions return either a\n// cancellable promise, or a stream (also cancellable!)\nexport type CancellableStream = Duplex & GRPCCallResult;\nexport type GaxCallResult = CancellablePromise | CancellableStream;\nexport interface GaxCallPromise {\n  (\n    argument: {},\n    callOptions?: CallOptions,\n    callback?: APICallback\n  ): CancellablePromise;\n}\nexport interface GaxCallStream {\n  (\n    argument: {},\n    callOptions?: CallOptions,\n    callback?: APICallback\n  ): CancellableStream;\n}\nexport interface GaxCall {\n  (\n    argument: {},\n    callOptions?: CallOptions,\n    callback?: APICallback\n  ): GaxCallResult;\n}\nexport interface GRPCCallOtherArgs {\n  options?: {deadline?: Date};\n  headers?: {};\n  metadataBuilder: (abTests?: {}, headers?: {}) => {};\n}\n\n    \n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/GRPCCallResult.html":{"url":"interfaces/GRPCCallResult.html","title":"interface - GRPCCallResult","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  GRPCCallResult\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/apitypes.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    cancel\n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            cancel\n                        \n                        \n                    \n                \n            \n            \n                \ncancel()\n                \n            \n\n\n            \n                \n                    Defined in src/apitypes.ts:42\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {Duplex} from 'stream';\n\nimport {CancellablePromise} from './call';\nimport {CallOptions} from './gax';\nimport {GoogleError} from './googleError';\nimport {Operation} from './longRunningCalls/longrunning';\n\n// gRPC functions return object with `.cancel()` method that can be used for\n// canceling the ongoing call.\nexport interface GRPCCallResult {\n  cancel(): void;\n}\n\n// All GAX calls take RequestType and return ResultTuple, which can contain up\n// to three elements. The first element is always a response (post-processed for\n// special types of call such as pagination or long-running), the second\n// parameter is defined for paginated calls and stores the next page request\n// object, the third parameter stores raw (unprocessed) response object in cases\n// when it might be useful for users.\nexport interface RequestType {}\nexport type ResponseType = {} | null;\nexport type NextPageRequestType = {\n  [index: string]: string;\n} | null;\nexport type RawResponseType = Operation | {};\nexport type ResultTuple = [\n  ResponseType,\n  NextPageRequestType | undefined,\n  RawResponseType | undefined\n];\n\nexport interface SimpleCallbackFunction {\n  (argument: RequestType, callback: APICallback): GRPCCallResult;\n}\n\nexport type APICallback = (\n  err: GoogleError | null,\n  response?: ResponseType,\n  next?: NextPageRequestType,\n  rawResponse?: RawResponseType\n) => void;\n\n// The following five types mimic various gRPC calls (regular UnaryCall and\n// various streaming calls).\nexport type UnaryCall = (\n  argument: {},\n  metadata: {},\n  options: {},\n  callback: APICallback\n) => GRPCCallResult;\nexport type ServerStreamingCall = (\n  argument: {},\n  metadata: {},\n  options: {}\n) => Duplex & GRPCCallResult;\nexport type ClientStreamingCall = (\n  metadata: {},\n  options: {},\n  callback?: APICallback\n) => Duplex & GRPCCallResult;\nexport type BiDiStreamingCall = (\n  metadata: {},\n  options: {}\n) => Duplex & GRPCCallResult;\nexport type GRPCCall =\n  | UnaryCall\n  | ServerStreamingCall\n  | ClientStreamingCall\n  | BiDiStreamingCall;\n\n// GAX wraps gRPC calls so that the wrapper functions return either a\n// cancellable promise, or a stream (also cancellable!)\nexport type CancellableStream = Duplex & GRPCCallResult;\nexport type GaxCallResult = CancellablePromise | CancellableStream;\nexport interface GaxCallPromise {\n  (\n    argument: {},\n    callOptions?: CallOptions,\n    callback?: APICallback\n  ): CancellablePromise;\n}\nexport interface GaxCallStream {\n  (\n    argument: {},\n    callOptions?: CallOptions,\n    callback?: APICallback\n  ): CancellableStream;\n}\nexport interface GaxCall {\n  (\n    argument: {},\n    callOptions?: CallOptions,\n    callback?: APICallback\n  ): GaxCallResult;\n}\nexport interface GRPCCallOtherArgs {\n  options?: {deadline?: Date};\n  headers?: {};\n  metadataBuilder: (abTests?: {}, headers?: {}) => {};\n}\n\n    \n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/GaxCall.html":{"url":"interfaces/GaxCall.html","title":"interface - GaxCall","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  GaxCall\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/apitypes.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Unamed property\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n\n                                    \n                                        \n                                            Signature :\n                                            \n                                            \n                                                \n                                                    [argument: literal type, callOptions: CallOptions, callback: APICallback]\n                                            \n                                        \n                                    \n\n\n                                    \n                                        \n                                            Returns :         GaxCallResult\n\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import {Duplex} from 'stream';\n\nimport {CancellablePromise} from './call';\nimport {CallOptions} from './gax';\nimport {GoogleError} from './googleError';\nimport {Operation} from './longRunningCalls/longrunning';\n\n// gRPC functions return object with `.cancel()` method that can be used for\n// canceling the ongoing call.\nexport interface GRPCCallResult {\n  cancel(): void;\n}\n\n// All GAX calls take RequestType and return ResultTuple, which can contain up\n// to three elements. The first element is always a response (post-processed for\n// special types of call such as pagination or long-running), the second\n// parameter is defined for paginated calls and stores the next page request\n// object, the third parameter stores raw (unprocessed) response object in cases\n// when it might be useful for users.\nexport interface RequestType {}\nexport type ResponseType = {} | null;\nexport type NextPageRequestType = {\n  [index: string]: string;\n} | null;\nexport type RawResponseType = Operation | {};\nexport type ResultTuple = [\n  ResponseType,\n  NextPageRequestType | undefined,\n  RawResponseType | undefined\n];\n\nexport interface SimpleCallbackFunction {\n  (argument: RequestType, callback: APICallback): GRPCCallResult;\n}\n\nexport type APICallback = (\n  err: GoogleError | null,\n  response?: ResponseType,\n  next?: NextPageRequestType,\n  rawResponse?: RawResponseType\n) => void;\n\n// The following five types mimic various gRPC calls (regular UnaryCall and\n// various streaming calls).\nexport type UnaryCall = (\n  argument: {},\n  metadata: {},\n  options: {},\n  callback: APICallback\n) => GRPCCallResult;\nexport type ServerStreamingCall = (\n  argument: {},\n  metadata: {},\n  options: {}\n) => Duplex & GRPCCallResult;\nexport type ClientStreamingCall = (\n  metadata: {},\n  options: {},\n  callback?: APICallback\n) => Duplex & GRPCCallResult;\nexport type BiDiStreamingCall = (\n  metadata: {},\n  options: {}\n) => Duplex & GRPCCallResult;\nexport type GRPCCall =\n  | UnaryCall\n  | ServerStreamingCall\n  | ClientStreamingCall\n  | BiDiStreamingCall;\n\n// GAX wraps gRPC calls so that the wrapper functions return either a\n// cancellable promise, or a stream (also cancellable!)\nexport type CancellableStream = Duplex & GRPCCallResult;\nexport type GaxCallResult = CancellablePromise | CancellableStream;\nexport interface GaxCallPromise {\n  (\n    argument: {},\n    callOptions?: CallOptions,\n    callback?: APICallback\n  ): CancellablePromise;\n}\nexport interface GaxCallStream {\n  (\n    argument: {},\n    callOptions?: CallOptions,\n    callback?: APICallback\n  ): CancellableStream;\n}\nexport interface GaxCall {\n  (\n    argument: {},\n    callOptions?: CallOptions,\n    callback?: APICallback\n  ): GaxCallResult;\n}\nexport interface GRPCCallOtherArgs {\n  options?: {deadline?: Date};\n  headers?: {};\n  metadataBuilder: (abTests?: {}, headers?: {}) => {};\n}\n\n    \n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/GaxCallPromise.html":{"url":"interfaces/GaxCallPromise.html","title":"interface - GaxCallPromise","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  GaxCallPromise\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/apitypes.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Unamed property\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n\n                                    \n                                        \n                                            Signature :\n                                            \n                                            \n                                                \n                                                    [argument: literal type, callOptions: CallOptions, callback: APICallback]\n                                            \n                                        \n                                    \n\n\n                                    \n                                        \n                                            Returns :         CancellablePromise\n\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import {Duplex} from 'stream';\n\nimport {CancellablePromise} from './call';\nimport {CallOptions} from './gax';\nimport {GoogleError} from './googleError';\nimport {Operation} from './longRunningCalls/longrunning';\n\n// gRPC functions return object with `.cancel()` method that can be used for\n// canceling the ongoing call.\nexport interface GRPCCallResult {\n  cancel(): void;\n}\n\n// All GAX calls take RequestType and return ResultTuple, which can contain up\n// to three elements. The first element is always a response (post-processed for\n// special types of call such as pagination or long-running), the second\n// parameter is defined for paginated calls and stores the next page request\n// object, the third parameter stores raw (unprocessed) response object in cases\n// when it might be useful for users.\nexport interface RequestType {}\nexport type ResponseType = {} | null;\nexport type NextPageRequestType = {\n  [index: string]: string;\n} | null;\nexport type RawResponseType = Operation | {};\nexport type ResultTuple = [\n  ResponseType,\n  NextPageRequestType | undefined,\n  RawResponseType | undefined\n];\n\nexport interface SimpleCallbackFunction {\n  (argument: RequestType, callback: APICallback): GRPCCallResult;\n}\n\nexport type APICallback = (\n  err: GoogleError | null,\n  response?: ResponseType,\n  next?: NextPageRequestType,\n  rawResponse?: RawResponseType\n) => void;\n\n// The following five types mimic various gRPC calls (regular UnaryCall and\n// various streaming calls).\nexport type UnaryCall = (\n  argument: {},\n  metadata: {},\n  options: {},\n  callback: APICallback\n) => GRPCCallResult;\nexport type ServerStreamingCall = (\n  argument: {},\n  metadata: {},\n  options: {}\n) => Duplex & GRPCCallResult;\nexport type ClientStreamingCall = (\n  metadata: {},\n  options: {},\n  callback?: APICallback\n) => Duplex & GRPCCallResult;\nexport type BiDiStreamingCall = (\n  metadata: {},\n  options: {}\n) => Duplex & GRPCCallResult;\nexport type GRPCCall =\n  | UnaryCall\n  | ServerStreamingCall\n  | ClientStreamingCall\n  | BiDiStreamingCall;\n\n// GAX wraps gRPC calls so that the wrapper functions return either a\n// cancellable promise, or a stream (also cancellable!)\nexport type CancellableStream = Duplex & GRPCCallResult;\nexport type GaxCallResult = CancellablePromise | CancellableStream;\nexport interface GaxCallPromise {\n  (\n    argument: {},\n    callOptions?: CallOptions,\n    callback?: APICallback\n  ): CancellablePromise;\n}\nexport interface GaxCallStream {\n  (\n    argument: {},\n    callOptions?: CallOptions,\n    callback?: APICallback\n  ): CancellableStream;\n}\nexport interface GaxCall {\n  (\n    argument: {},\n    callOptions?: CallOptions,\n    callback?: APICallback\n  ): GaxCallResult;\n}\nexport interface GRPCCallOtherArgs {\n  options?: {deadline?: Date};\n  headers?: {};\n  metadataBuilder: (abTests?: {}, headers?: {}) => {};\n}\n\n    \n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/GaxCallStream.html":{"url":"interfaces/GaxCallStream.html","title":"interface - GaxCallStream","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  GaxCallStream\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/apitypes.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Unamed property\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n\n                                    \n                                        \n                                            Signature :\n                                            \n                                            \n                                                \n                                                    [argument: literal type, callOptions: CallOptions, callback: APICallback]\n                                            \n                                        \n                                    \n\n\n                                    \n                                        \n                                            Returns :         CancellableStream\n\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import {Duplex} from 'stream';\n\nimport {CancellablePromise} from './call';\nimport {CallOptions} from './gax';\nimport {GoogleError} from './googleError';\nimport {Operation} from './longRunningCalls/longrunning';\n\n// gRPC functions return object with `.cancel()` method that can be used for\n// canceling the ongoing call.\nexport interface GRPCCallResult {\n  cancel(): void;\n}\n\n// All GAX calls take RequestType and return ResultTuple, which can contain up\n// to three elements. The first element is always a response (post-processed for\n// special types of call such as pagination or long-running), the second\n// parameter is defined for paginated calls and stores the next page request\n// object, the third parameter stores raw (unprocessed) response object in cases\n// when it might be useful for users.\nexport interface RequestType {}\nexport type ResponseType = {} | null;\nexport type NextPageRequestType = {\n  [index: string]: string;\n} | null;\nexport type RawResponseType = Operation | {};\nexport type ResultTuple = [\n  ResponseType,\n  NextPageRequestType | undefined,\n  RawResponseType | undefined\n];\n\nexport interface SimpleCallbackFunction {\n  (argument: RequestType, callback: APICallback): GRPCCallResult;\n}\n\nexport type APICallback = (\n  err: GoogleError | null,\n  response?: ResponseType,\n  next?: NextPageRequestType,\n  rawResponse?: RawResponseType\n) => void;\n\n// The following five types mimic various gRPC calls (regular UnaryCall and\n// various streaming calls).\nexport type UnaryCall = (\n  argument: {},\n  metadata: {},\n  options: {},\n  callback: APICallback\n) => GRPCCallResult;\nexport type ServerStreamingCall = (\n  argument: {},\n  metadata: {},\n  options: {}\n) => Duplex & GRPCCallResult;\nexport type ClientStreamingCall = (\n  metadata: {},\n  options: {},\n  callback?: APICallback\n) => Duplex & GRPCCallResult;\nexport type BiDiStreamingCall = (\n  metadata: {},\n  options: {}\n) => Duplex & GRPCCallResult;\nexport type GRPCCall =\n  | UnaryCall\n  | ServerStreamingCall\n  | ClientStreamingCall\n  | BiDiStreamingCall;\n\n// GAX wraps gRPC calls so that the wrapper functions return either a\n// cancellable promise, or a stream (also cancellable!)\nexport type CancellableStream = Duplex & GRPCCallResult;\nexport type GaxCallResult = CancellablePromise | CancellableStream;\nexport interface GaxCallPromise {\n  (\n    argument: {},\n    callOptions?: CallOptions,\n    callback?: APICallback\n  ): CancellablePromise;\n}\nexport interface GaxCallStream {\n  (\n    argument: {},\n    callOptions?: CallOptions,\n    callback?: APICallback\n  ): CancellableStream;\n}\nexport interface GaxCall {\n  (\n    argument: {},\n    callOptions?: CallOptions,\n    callback?: APICallback\n  ): GaxCallResult;\n}\nexport interface GRPCCallOtherArgs {\n  options?: {deadline?: Date};\n  headers?: {};\n  metadataBuilder: (abTests?: {}, headers?: {}) => {};\n}\n\n    \n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/GetOperationCallback.html":{"url":"interfaces/GetOperationCallback.html","title":"interface - GetOperationCallback","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  GetOperationCallback\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/longRunningCalls/longrunning.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Unamed property\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n\n                                    \n                                        \n                                            Signature :\n                                            \n                                            \n                                                \n                                                    [err: Error | null, result: literal type, metadata: literal type, rawResponse: Operation]\n                                            \n                                        \n                                    \n\n\n                                    \n                                        \n                                            Returns :         void\n\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import {EventEmitter} from 'events';\nimport {status} from '@grpc/grpc-js';\n\nimport {GaxCallPromise, ResultTuple} from '../apitypes';\nimport {CancellablePromise} from '../call';\nimport {BackoffSettings, CallOptions} from '../gax';\nimport {GoogleError} from '../googleError';\nimport {Metadata, MetadataValue} from '../grpc';\n\nimport {LongRunningDescriptor} from './longRunningDescriptor';\n\n/**\n * @callback GetOperationCallback\n * @param {?Error} error\n * @param {?Object} result\n * @param {?Object} metadata\n * @param {?google.longrunning.Operation} rawResponse\n */\nexport interface GetOperationCallback {\n  (\n    err?: Error | null,\n    result?: {},\n    metadata?: {},\n    rawResponse?: Operation\n  ): void;\n}\n\nexport class Operation extends EventEmitter {\n  completeListeners: number;\n  hasActiveListeners: boolean;\n  latestResponse: Operation;\n  longrunningDescriptor: LongRunningDescriptor;\n  result: {} | null;\n  metadata: Metadata | null;\n  backoffSettings: BackoffSettings;\n  _callOptions?: CallOptions;\n  currentCallPromise_?: CancellablePromise;\n  name?: string;\n  done?: boolean;\n  error?: GoogleError;\n  response?: {value: {}};\n\n  /**\n   * Wrapper for a google.longrunnung.Operation.\n   *\n   * @constructor\n   *\n   * @param {google.longrunning.Operation} grpcOp - The operation to be wrapped.\n   * @param {LongRunningDescriptor} longrunningDescriptor - This defines the\n   * operations service client and unpacking mechanisms for the operation.\n   * @param {BackoffSettings} backoffSettings - The backoff settings used in\n   * in polling the operation.\n   * @param {CallOptions} callOptions - CallOptions used in making get operation\n   * requests.\n   */\n  constructor(\n    grpcOp: Operation,\n    longrunningDescriptor: LongRunningDescriptor,\n    backoffSettings: BackoffSettings,\n    callOptions?: CallOptions\n  ) {\n    super();\n    this.completeListeners = 0;\n    this.hasActiveListeners = false;\n    this.latestResponse = grpcOp;\n    this.longrunningDescriptor = longrunningDescriptor;\n    this.result = null;\n    this.metadata = null;\n    this.backoffSettings = backoffSettings;\n    this._unpackResponse(grpcOp);\n    this._listenForEvents();\n    this._callOptions = callOptions;\n  }\n\n  /**\n   * Begin listening for events on the operation. This method keeps track of how\n   * many \"complete\" listeners are registered and removed, making sure polling\n   * is handled automatically.\n   *\n   * As long as there is one active \"complete\" listener, the connection is open.\n   * When there are no more listeners, the polling stops.\n   *\n   * @private\n   */\n  _listenForEvents() {\n    this.on('newListener', event => {\n      if (event === 'complete') {\n        this.completeListeners++;\n\n        if (!this.hasActiveListeners) {\n          this.hasActiveListeners = true;\n          this.startPolling_();\n        }\n      }\n    });\n\n    this.on('removeListener', event => {\n      if (event === 'complete' && --this.completeListeners === 0) {\n        this.hasActiveListeners = false;\n      }\n    });\n  }\n\n  /**\n   * Cancels current polling api call and cancels the operation.\n   *\n   * @return {Promise} the promise of the OperationsClient#cancelOperation api\n   * request.\n   */\n  cancel() {\n    if (this.currentCallPromise_) {\n      this.currentCallPromise_.cancel();\n    }\n    const operationsClient = this.longrunningDescriptor.operationsClient;\n    return operationsClient.cancelOperation({\n      name: this.latestResponse.name,\n    }) as CancellablePromise;\n  }\n\n  /**\n   * Get the updated status of the operation. If the Operation has previously\n   * completed, this will use the status of the cached completed operation.\n   *\n   *   - callback(err): Operation failed\n   *   - callback(null, result, metadata, rawResponse): Operation complete\n   *   - callback(null, null, metadata, rawResponse): Operation incomplete\n   *\n   * @param {getOperationCallback} callback - Callback to handle the polled\n   * operation result and metadata.\n   * @return {Promise|undefined} - This returns a promise if a callback is not specified.\n   * The promise resolves to an array where the first element is the unpacked\n   * result, the second element is the metadata, and the third element is the\n   * raw response of the api call. The promise rejects if the operation returns\n   * an error.\n   */\n  getOperation(): Promise;\n  getOperation(callback: GetOperationCallback): void;\n  getOperation(callback?: GetOperationCallback): Promise | void {\n    const self = this;\n    const operationsClient = this.longrunningDescriptor.operationsClient;\n\n    function promisifyResponse() {\n      if (!callback) {\n        // tslint:disable-next-line variable-name\n        const PromiseCtor = self._callOptions!.promise!;\n        return new PromiseCtor((resolve, reject) => {\n          if (self.latestResponse.error) {\n            const error = new GoogleError(self.latestResponse.error.message);\n            error.code = self.latestResponse.error.code;\n            reject(error);\n          } else {\n            resolve([self.result, self.metadata, self.latestResponse]);\n          }\n        });\n      }\n      return;\n    }\n\n    if (this.latestResponse.done) {\n      this._unpackResponse(this.latestResponse, callback);\n      return promisifyResponse();\n    }\n\n    this.currentCallPromise_ = (operationsClient.getOperation as GaxCallPromise)(\n      {name: this.latestResponse.name},\n      this._callOptions!\n    );\n\n    const noCallbackPromise = this.currentCallPromise_!.then(responses => {\n      self.latestResponse = responses[0] as Operation;\n      self._unpackResponse(responses[0] as Operation, callback);\n      return promisifyResponse()!;\n    });\n\n    if (!callback) {\n      return noCallbackPromise;\n    }\n  }\n\n  _unpackResponse(op: Operation, callback?: GetOperationCallback) {\n    const responseDecoder = this.longrunningDescriptor.responseDecoder;\n    const metadataDecoder = this.longrunningDescriptor.metadataDecoder;\n    let response: {};\n    let metadata: Metadata;\n\n    if (op.done) {\n      if (op.result === 'error') {\n        const error = new GoogleError(op.error!.message);\n        error.code = op.error!.code;\n        if (callback) {\n          callback(error);\n        }\n        return;\n      }\n\n      if (responseDecoder && op.response) {\n        response = responseDecoder(op.response.value);\n        this.result = response;\n      }\n    }\n\n    if (metadataDecoder && op.metadata) {\n      metadata = metadataDecoder(op.metadata.value);\n      this.metadata = metadata;\n    }\n    if (callback) {\n      callback(null, response!, metadata!, op);\n    }\n  }\n\n  /**\n   * Poll `getOperation` to check the operation's status. This runs a loop to\n   * ping using the backoff strategy specified at initialization.\n   *\n   * Note: This method is automatically called once a \"complete\" event handler\n   * is registered on the operation.\n   *\n   * @private\n   */\n  startPolling_() {\n    const self = this;\n\n    let now = new Date();\n    const delayMult = this.backoffSettings.retryDelayMultiplier;\n    const maxDelay = this.backoffSettings.maxRetryDelayMillis;\n    let delay = this.backoffSettings.initialRetryDelayMillis;\n    let deadline = Infinity;\n    if (this.backoffSettings.totalTimeoutMillis) {\n      deadline = now.getTime() + this.backoffSettings.totalTimeoutMillis;\n    }\n    let previousMetadataBytes: MetadataValue;\n    if (this.latestResponse.metadata) {\n      previousMetadataBytes = this.latestResponse.metadata.value;\n    }\n\n    // tslint:disable-next-line no-any\n    function emit(event: string | symbol, ...args: any[]) {\n      self.emit(event, ...args);\n    }\n\n    function retry() {\n      if (!self.hasActiveListeners) {\n        return;\n      }\n\n      if (now.getTime() >= deadline) {\n        const error = new GoogleError(\n          'Total timeout exceeded before any response was received'\n        );\n        error.code = status.DEADLINE_EXCEEDED;\n        setImmediate(emit, 'error', error);\n        return;\n      }\n\n      self.getOperation((err, result, metadata, rawResponse) => {\n        if (err) {\n          setImmediate(emit, 'error', err);\n          return;\n        }\n\n        if (!result) {\n          if (\n            rawResponse!.metadata &&\n            (!previousMetadataBytes ||\n              !rawResponse!.metadata!.value.equals(previousMetadataBytes))\n          ) {\n            setImmediate(emit, 'progress', metadata, rawResponse);\n            previousMetadataBytes = rawResponse!.metadata!.value;\n          }\n          // special case: some APIs fail to set either result or error\n          // but set done = true (e.g. speech with silent file).\n          // Don't hang forever in this case.\n          if (rawResponse!.done) {\n            const error = new GoogleError(\n              'Long running operation has finished but there was no result'\n            );\n            error.code = status.UNKNOWN;\n            setImmediate(emit, 'error', error);\n            return;\n          }\n          setTimeout(() => {\n            now = new Date();\n            delay = Math.min(delay * delayMult, maxDelay);\n            retry();\n          }, delay);\n          return;\n        }\n\n        setImmediate(emit, 'complete', result, metadata, rawResponse);\n      });\n    }\n    retry();\n  }\n\n  /**\n   * Wraps the `complete` and `error` events in a Promise.\n   *\n   * @return {promise} - Promise that resolves on operation completion and rejects\n   * on operation error.\n   */\n  promise() {\n    // tslint:disable-next-line variable-name\n    const PromiseCtor = this._callOptions!.promise!;\n    return new PromiseCtor((resolve, reject) => {\n      this.on('error', reject).on(\n        'complete',\n        (result, metadata, rawResponse) => {\n          resolve([result, metadata, rawResponse]);\n        }\n      );\n    });\n  }\n}\n\n/**\n * Method used to create Operation objects.\n *\n * @constructor\n *\n * @param {google.longrunning.Operation} op - The operation to be wrapped.\n * @param {LongRunningDescriptor} longrunningDescriptor - This defines the\n * operations service client and unpacking mechanisms for the operation.\n * @param {BackoffSettings} backoffSettings - The backoff settings used in\n * in polling the operation.\n * @param {CallOptions=} callOptions - CallOptions used in making get operation\n * requests.\n */\nexport function operation(\n  op: Operation,\n  longrunningDescriptor: LongRunningDescriptor,\n  backoffSettings: BackoffSettings,\n  callOptions?: CallOptions\n) {\n  return new Operation(op, longrunningDescriptor, backoffSettings, callOptions);\n}\n\n    \n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GoogleError.html":{"url":"classes/GoogleError.html","title":"class - GoogleError","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GoogleError\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/googleError.ts\n        \n\n\n            \n                Extends\n            \n            \n                    Error\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                code\n                            \n                            \n                                    Optional\n                                note\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            code\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     status\n\n                        \n                    \n                        \n                            \n                                    Defined in src/googleError.ts:35\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            note\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/googleError.ts:36\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {status} from '@grpc/grpc-js';\n\nexport class GoogleError extends Error {\n  code?: status;\n  note?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GoogleProtoFilesRoot.html":{"url":"classes/GoogleProtoFilesRoot.html","title":"class - GoogleProtoFilesRoot","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GoogleProtoFilesRoot\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/grpc.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                _findIncludePath\n                            \n                            \n                                resolvePath\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(...args: Array)\n                    \n                \n                        \n                            \n                                Defined in src/grpc.ts:315\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        args\n                                                  \n                                                        \n                                                                    Array\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Static\n                            _findIncludePath\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    _findIncludePath(originPath: string, includePath: string)\n                \n            \n\n\n            \n                \n                    Defined in src/grpc.ts:341\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    originPath\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    includePath\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            resolvePath\n                        \n                        \n                    \n                \n            \n            \n                \nresolvePath(originPath: string, includePath: string)\n                \n            \n\n\n            \n                \n                    Defined in src/grpc.ts:322\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    originPath\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    includePath\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import * as grpcProtoLoader from '@grpc/proto-loader';\nimport * as fs from 'fs';\nimport {GoogleAuth, GoogleAuthOptions} from 'google-auth-library';\nimport * as grpc from '@grpc/grpc-js';\nimport {OutgoingHttpHeaders} from 'http';\nimport * as path from 'path';\nimport * as protobuf from 'protobufjs';\nimport * as semver from 'semver';\nimport * as walk from 'walkdir';\n\nimport * as gax from './gax';\n\nconst googleProtoFilesDir = path.join(__dirname, '..', '..', 'protos');\n\n// INCLUDE_DIRS is passed to @grpc/proto-loader\nconst INCLUDE_DIRS: string[] = [];\nINCLUDE_DIRS.push(googleProtoFilesDir);\n\n// COMMON_PROTO_FILES logic is here for protobufjs loads (see\n// GoogleProtoFilesRoot below)\nconst COMMON_PROTO_FILES = walk\n  .sync(googleProtoFilesDir)\n  .filter(f => path.extname(f) === '.proto')\n  .map(f => path.normalize(f).substring(googleProtoFilesDir.length + 1));\n\nexport interface GrpcClientOptions extends GoogleAuthOptions {\n  auth?: GoogleAuth;\n  promise?: PromiseConstructor;\n  grpc?: GrpcModule;\n}\n\nexport interface MetadataValue {\n  equals: Function;\n}\n\nexport interface Metadata {\n  new (): Metadata;\n  set: (key: {}, value?: {} | null) => void;\n  clone: () => Metadata;\n  value: MetadataValue;\n  get: (key: {}) => {};\n}\n\nexport type GrpcModule = typeof grpc;\n\nexport interface ClientStubOptions {\n  servicePath: string;\n  port: number;\n  // TODO: use sslCreds?: grpc.ChannelCredentials;\n  // tslint:disable-next-line no-any\n  sslCreds?: any;\n}\n\nexport class ClientStub extends grpc.Client {\n  [name: string]: Function;\n}\n\nexport class GrpcClient {\n  auth: GoogleAuth;\n  promise: PromiseConstructor;\n  grpc: GrpcModule;\n  grpcVersion: string;\n\n  /**\n   * A class which keeps the context of gRPC and auth for the gRPC.\n   *\n   * @param {Object=} options - The optional parameters. It will be directly\n   *   passed to google-auth-library library, so parameters like keyFile or\n   *   credentials will be valid.\n   * @param {Object=} options.auth - An instance of google-auth-library.\n   *   When specified, this auth instance will be used instead of creating\n   *   a new one.\n   * @param {Object=} options.grpc - When specified, this will be used\n   *   for the 'grpc' module in this context. By default, it will load the grpc\n   *   module in the standard way.\n   * @param {Function=} options.promise - A constructor for a promise that\n   * implements the ES6 specification of promise. If not provided, native\n   * promises will be used.\n   * @constructor\n   */\n  constructor(options: GrpcClientOptions = {}) {\n    this.auth = options.auth || new GoogleAuth(options);\n    this.promise = options.promise || Promise;\n\n    if ('grpc' in options) {\n      this.grpc = options.grpc!;\n      this.grpcVersion = '';\n    } else {\n      if (semver.gte(process.version, '8.13.0')) {\n        this.grpc = grpc;\n        this.grpcVersion = require('@grpc/grpc-js/package.json').version;\n      } else {\n        const errorMessage =\n          'To use @grpc/grpc-js you must run your code on Node.js v8.13.0 or newer. Please see README if you need to use an older version. ' +\n          'https://github.com/googleapis/gax-nodejs/blob/master/README.md';\n        throw new Error(errorMessage);\n      }\n    }\n  }\n\n  /**\n   * Creates a gRPC credentials. It asks the auth data if necessary.\n   * @private\n   * @param {Object} opts - options values for configuring credentials.\n   * @param {Object=} opts.sslCreds - when specified, this is used instead\n   *   of default channel credentials.\n   * @return {Promise} The promise which will be resolved to the gRPC credential.\n   */\n  async _getCredentials(opts: ClientStubOptions) {\n    if (opts.sslCreds) {\n      return opts.sslCreds;\n    }\n    const grpc = this.grpc;\n    const sslCreds = grpc.credentials.createSsl();\n    const client = await this.auth.getClient();\n    const credentials = grpc.credentials.combineChannelCredentials(\n      sslCreds,\n      grpc.credentials.createFromGoogleCredential(client)\n    );\n    return credentials;\n  }\n\n  /**\n   * Loads the gRPC service from the proto file at the given path and with the\n   * given options.\n   * @param filename The path to the proto file.\n   * @param options Options for loading the proto file.\n   */\n  loadFromProto(filename: string, options: grpcProtoLoader.Options) {\n    const packageDef = grpcProtoLoader.loadSync(filename, options);\n    return this.grpc.loadPackageDefinition(packageDef);\n  }\n\n  /**\n   * Load grpc proto service from a filename hooking in googleapis common protos\n   * when necessary.\n   * @param {String} protoPath - The directory to search for the protofile.\n   * @param {String} filename - The filename of the proto to be loaded.\n   * @return {Object} The gRPC loaded result (the toplevel namespace\n   *   object).\n   */\n  loadProto(protoPath: string, filename: string) {\n    // This set of @grpc/proto-loader options\n    // 'closely approximates the existing behavior of grpc.load'\n    const includeDirs = INCLUDE_DIRS.slice();\n    includeDirs.unshift(protoPath);\n    const options = {\n      keepCase: false,\n      longs: String,\n      enums: String,\n      defaults: true,\n      oneofs: true,\n      includeDirs,\n    };\n    return this.loadFromProto(filename, options);\n  }\n\n  static _resolveFile(protoPath: string, filename: string) {\n    if (fs.existsSync(path.join(protoPath, filename))) {\n      return path.join(protoPath, filename);\n    } else if (COMMON_PROTO_FILES.indexOf(filename) > -1) {\n      return path.join(googleProtoFilesDir, filename);\n    }\n    throw new Error(filename + ' could not be found in ' + protoPath);\n  }\n\n  metadataBuilder(headers: OutgoingHttpHeaders) {\n    const Metadata = this.grpc.Metadata;\n    const baseMetadata = new Metadata();\n    // tslint:disable-next-line forin\n    for (const key in headers) {\n      const value = headers[key];\n      if (Array.isArray(value)) {\n        value.forEach(v => baseMetadata.add(key, v));\n      } else {\n        baseMetadata.set(key, `${value}`);\n      }\n    }\n    return function buildMetadata(\n      abTests?: {},\n      moreHeaders?: OutgoingHttpHeaders\n    ) {\n      // TODO: bring the A/B testing info into the metadata.\n      let copied = false;\n      let metadata = baseMetadata;\n      if (moreHeaders) {\n        for (const key in moreHeaders) {\n          if (\n            key.toLowerCase() !== 'x-goog-api-client' &&\n            moreHeaders!.hasOwnProperty(key)\n          ) {\n            if (!copied) {\n              copied = true;\n              metadata = metadata.clone();\n            }\n            const value = moreHeaders[key];\n            if (Array.isArray(value)) {\n              value.forEach(v => metadata.add(key, v));\n            } else {\n              metadata.set(key, `${value}`);\n            }\n          }\n        }\n      }\n      return metadata;\n    };\n  }\n\n  /**\n   * A wrapper of {@link constructSettings} function under the gRPC context.\n   *\n   * Most of parameters are common among constructSettings, please take a look.\n   * @param {string} serviceName - The fullly-qualified name of the service.\n   * @param {Object} clientConfig - A dictionary of the client config.\n   * @param {Object} configOverrides - A dictionary of overriding configs.\n   * @param {Object} headers - A dictionary of additional HTTP header name to\n   *   its value.\n   * @return {Object} A mapping of method names to CallSettings.\n   */\n  constructSettings(\n    serviceName: string,\n    clientConfig: gax.ClientConfig,\n    configOverrides: gax.ClientConfig,\n    headers: OutgoingHttpHeaders\n  ) {\n    return gax.constructSettings(\n      serviceName,\n      clientConfig,\n      configOverrides,\n      this.grpc.status,\n      {metadataBuilder: this.metadataBuilder(headers)},\n      this.promise\n    );\n  }\n\n  /**\n   * Creates a gRPC stub with current gRPC and auth.\n   * @param {function} CreateStub - The constructor function of the stub.\n   * @param {Object} options - The optional arguments to customize\n   *   gRPC connection. This options will be passed to the constructor of\n   *   gRPC client too.\n   * @param {string} options.servicePath - The name of the server of the service.\n   * @param {number} options.port - The port of the service.\n   * @param {grpcTypes.ClientCredentials=} options.sslCreds - The credentials to be used\n   *   to set up gRPC connection.\n   * @return {Promise} A promse which resolves to a gRPC stub instance.\n   */\n  // tslint:disable-next-line variable-name\n  async createStub(CreateStub: typeof ClientStub, options: ClientStubOptions) {\n    const serviceAddress = options.servicePath + ':' + options.port;\n    const creds = await this._getCredentials(options);\n    const grpcOptions: {[index: string]: string} = {};\n    Object.keys(options).forEach(key => {\n      if (key.startsWith('grpc.')) {\n        grpcOptions[key.replace(/^grpc\\./, '')] = options[key];\n      }\n    });\n    const stub = new CreateStub(serviceAddress, creds, grpcOptions);\n    return stub;\n  }\n\n  /**\n   * Creates a 'bytelength' function for a given proto message class.\n   *\n   * See {@link BundleDescriptor} about the meaning of the return value.\n   *\n   * @param {function} message - a constructor function that is generated by\n   *   protobuf.js. Assumes 'encoder' field in the message.\n   * @return {function(Object):number} - a function to compute the byte length\n   *   for an object.\n   */\n  static createByteLengthFunction(message: {\n    encode: (obj: {}) => {\n      finish: () => Array;\n    };\n  }) {\n    return function getByteLength(obj: {}) {\n      return message.encode(obj).finish().length;\n    };\n  }\n}\n\nexport class GoogleProtoFilesRoot extends protobuf.Root {\n  constructor(...args: Array) {\n    super(...args);\n  }\n\n  // Causes the loading of an included proto to check if it is a common\n  // proto. If it is a common proto, use the bundled proto.\n  resolvePath(originPath: string, includePath: string) {\n    originPath = path.normalize(originPath);\n    includePath = path.normalize(includePath);\n\n    // Fully qualified paths don't need to be resolved.\n    if (path.isAbsolute(includePath)) {\n      if (!fs.existsSync(includePath)) {\n        throw new Error('The include `' + includePath + '` was not found.');\n      }\n      return includePath;\n    }\n\n    if (COMMON_PROTO_FILES.indexOf(includePath) > -1) {\n      return path.join(googleProtoFilesDir, includePath);\n    }\n\n    return GoogleProtoFilesRoot._findIncludePath(originPath, includePath);\n  }\n\n  static _findIncludePath(originPath: string, includePath: string) {\n    originPath = path.normalize(originPath);\n    includePath = path.normalize(includePath);\n\n    let current = originPath;\n    let found = fs.existsSync(path.join(current, includePath));\n    while (!found && current.length > 0) {\n      current = current.substring(0, current.lastIndexOf(path.sep));\n      found = fs.existsSync(path.join(current, includePath));\n    }\n    if (!found) {\n      throw new Error('The include `' + includePath + '` was not found.');\n    }\n    return path.join(current, includePath);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GrpcClient.html":{"url":"classes/GrpcClient.html","title":"class - GrpcClient","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GrpcClient\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/grpc.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                auth\n                            \n                            \n                                grpc\n                            \n                            \n                                grpcVersion\n                            \n                            \n                                promise\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                _getCredentials\n                            \n                            \n                                    Static\n                                _resolveFile\n                            \n                            \n                                constructSettings\n                            \n                            \n                                    Static\n                                createByteLengthFunction\n                            \n                            \n                                    Async\n                                createStub\n                            \n                            \n                                loadFromProto\n                            \n                            \n                                loadProto\n                            \n                            \n                                metadataBuilder\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(options: GrpcClientOptions)\n                    \n                \n                        \n                            \n                                Defined in src/grpc.ts:94\n                            \n                        \n\n                \n                    \n                            A class which keeps the context of gRPC and auth for the gRPC.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        options\n                                                  \n                                                        \n                                                                        GrpcClientOptions\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nThe optional parameters. It will be directly\npassed to google-auth-library library, so parameters like keyFile or\ncredentials will be valid.\n\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            auth\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     GoogleAuth\n\n                        \n                    \n                        \n                            \n                                    Defined in src/grpc.ts:91\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            grpc\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         GrpcModule\n\n                        \n                    \n                        \n                            \n                                    Defined in src/grpc.ts:93\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            grpcVersion\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/grpc.ts:94\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            promise\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     PromiseConstructor\n\n                        \n                    \n                        \n                            \n                                    Defined in src/grpc.ts:92\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            _getCredentials\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    _getCredentials(opts: ClientStubOptions)\n                \n            \n\n\n            \n                \n                    Defined in src/grpc.ts:141\n                \n            \n\n\n            \n                \n                    Creates a gRPC credentials. It asks the auth data if necessary.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    opts\n                                    \n                                                ClientStubOptions\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \noptions values for configuring credentials.\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        The promise which will be resolved to the gRPC credential.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Static\n                            _resolveFile\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    _resolveFile(protoPath: string, filename: string)\n                \n            \n\n\n            \n                \n                    Defined in src/grpc.ts:190\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    protoPath\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    filename\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            constructSettings\n                        \n                        \n                    \n                \n            \n            \n                \nconstructSettings(serviceName: string, clientConfig: gax.ClientConfig, configOverrides: gax.ClientConfig, headers: OutgoingHttpHeaders)\n                \n            \n\n\n            \n                \n                    Defined in src/grpc.ts:252\n                \n            \n\n\n            \n                \n                    A wrapper of constructSettings function under the gRPC context.\nMost of parameters are common among constructSettings, please take a look.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    serviceName\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nThe fullly-qualified name of the service.\n\n\n                                    \n                                \n                                \n                                    clientConfig\n                                    \n                                                gax.ClientConfig\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nA dictionary of the client config.\n\n\n                                    \n                                \n                                \n                                    configOverrides\n                                    \n                                                gax.ClientConfig\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nA dictionary of overriding configs.\n\n\n                                    \n                                \n                                \n                                    headers\n                                    \n                                            OutgoingHttpHeaders\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nA dictionary of additional HTTP header name to\nits value.\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        A mapping of method names to CallSettings.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Static\n                            createByteLengthFunction\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    createByteLengthFunction(message: literal type)\n                \n            \n\n\n            \n                \n                    Defined in src/grpc.ts:304\n                \n            \n\n\n            \n                \n                    Creates a 'bytelength' function for a given proto message class.\nSee BundleDescriptor about the meaning of the return value.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    message\n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \na constructor function that is generated by\nprotobuf.js. Assumes 'encoder' field in the message.\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     (obj: {}) => any\n\n                    \n                    \n                        \na function to compute the byte length\nfor an object.\n\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            createStub\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    createStub(CreateStub, options: ClientStubOptions)\n                \n            \n\n\n            \n                \n                    Defined in src/grpc.ts:281\n                \n            \n\n\n            \n                \n                    Creates a gRPC stub with current gRPC and auth.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    CreateStub\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nThe constructor function of the stub.\n\n\n                                    \n                                \n                                \n                                    options\n                                    \n                                                ClientStubOptions\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nThe optional arguments to customize\ngRPC connection. This options will be passed to the constructor of\ngRPC client too.\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        A promse which resolves to a gRPC stub instance.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            loadFromProto\n                        \n                        \n                    \n                \n            \n            \n                \nloadFromProto(filename: string, options: grpcProtoLoader.Options)\n                \n            \n\n\n            \n                \n                    Defined in src/grpc.ts:161\n                \n            \n\n\n            \n                \n                    Loads the gRPC service from the proto file at the given path and with the\ngiven options.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    filename\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The path to the proto file.\n\n                                    \n                                \n                                \n                                    options\n                                    \n                                            grpcProtoLoader.Options\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Options for loading the proto file.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            loadProto\n                        \n                        \n                    \n                \n            \n            \n                \nloadProto(protoPath: string, filename: string)\n                \n            \n\n\n            \n                \n                    Defined in src/grpc.ts:174\n                \n            \n\n\n            \n                \n                    Load grpc proto service from a filename hooking in googleapis common protos\nwhen necessary.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    protoPath\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nThe directory to search for the protofile.\n\n\n                                    \n                                \n                                \n                                    filename\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nThe filename of the proto to be loaded.\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        The gRPC loaded result (the toplevel namespace\nobject).\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            metadataBuilder\n                        \n                        \n                    \n                \n            \n            \n                \nmetadataBuilder(headers: OutgoingHttpHeaders)\n                \n            \n\n\n            \n                \n                    Defined in src/grpc.ts:199\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    headers\n                                    \n                                            OutgoingHttpHeaders\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     (abTests?: {}, moreHeaders?: any) => any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import * as grpcProtoLoader from '@grpc/proto-loader';\nimport * as fs from 'fs';\nimport {GoogleAuth, GoogleAuthOptions} from 'google-auth-library';\nimport * as grpc from '@grpc/grpc-js';\nimport {OutgoingHttpHeaders} from 'http';\nimport * as path from 'path';\nimport * as protobuf from 'protobufjs';\nimport * as semver from 'semver';\nimport * as walk from 'walkdir';\n\nimport * as gax from './gax';\n\nconst googleProtoFilesDir = path.join(__dirname, '..', '..', 'protos');\n\n// INCLUDE_DIRS is passed to @grpc/proto-loader\nconst INCLUDE_DIRS: string[] = [];\nINCLUDE_DIRS.push(googleProtoFilesDir);\n\n// COMMON_PROTO_FILES logic is here for protobufjs loads (see\n// GoogleProtoFilesRoot below)\nconst COMMON_PROTO_FILES = walk\n  .sync(googleProtoFilesDir)\n  .filter(f => path.extname(f) === '.proto')\n  .map(f => path.normalize(f).substring(googleProtoFilesDir.length + 1));\n\nexport interface GrpcClientOptions extends GoogleAuthOptions {\n  auth?: GoogleAuth;\n  promise?: PromiseConstructor;\n  grpc?: GrpcModule;\n}\n\nexport interface MetadataValue {\n  equals: Function;\n}\n\nexport interface Metadata {\n  new (): Metadata;\n  set: (key: {}, value?: {} | null) => void;\n  clone: () => Metadata;\n  value: MetadataValue;\n  get: (key: {}) => {};\n}\n\nexport type GrpcModule = typeof grpc;\n\nexport interface ClientStubOptions {\n  servicePath: string;\n  port: number;\n  // TODO: use sslCreds?: grpc.ChannelCredentials;\n  // tslint:disable-next-line no-any\n  sslCreds?: any;\n}\n\nexport class ClientStub extends grpc.Client {\n  [name: string]: Function;\n}\n\nexport class GrpcClient {\n  auth: GoogleAuth;\n  promise: PromiseConstructor;\n  grpc: GrpcModule;\n  grpcVersion: string;\n\n  /**\n   * A class which keeps the context of gRPC and auth for the gRPC.\n   *\n   * @param {Object=} options - The optional parameters. It will be directly\n   *   passed to google-auth-library library, so parameters like keyFile or\n   *   credentials will be valid.\n   * @param {Object=} options.auth - An instance of google-auth-library.\n   *   When specified, this auth instance will be used instead of creating\n   *   a new one.\n   * @param {Object=} options.grpc - When specified, this will be used\n   *   for the 'grpc' module in this context. By default, it will load the grpc\n   *   module in the standard way.\n   * @param {Function=} options.promise - A constructor for a promise that\n   * implements the ES6 specification of promise. If not provided, native\n   * promises will be used.\n   * @constructor\n   */\n  constructor(options: GrpcClientOptions = {}) {\n    this.auth = options.auth || new GoogleAuth(options);\n    this.promise = options.promise || Promise;\n\n    if ('grpc' in options) {\n      this.grpc = options.grpc!;\n      this.grpcVersion = '';\n    } else {\n      if (semver.gte(process.version, '8.13.0')) {\n        this.grpc = grpc;\n        this.grpcVersion = require('@grpc/grpc-js/package.json').version;\n      } else {\n        const errorMessage =\n          'To use @grpc/grpc-js you must run your code on Node.js v8.13.0 or newer. Please see README if you need to use an older version. ' +\n          'https://github.com/googleapis/gax-nodejs/blob/master/README.md';\n        throw new Error(errorMessage);\n      }\n    }\n  }\n\n  /**\n   * Creates a gRPC credentials. It asks the auth data if necessary.\n   * @private\n   * @param {Object} opts - options values for configuring credentials.\n   * @param {Object=} opts.sslCreds - when specified, this is used instead\n   *   of default channel credentials.\n   * @return {Promise} The promise which will be resolved to the gRPC credential.\n   */\n  async _getCredentials(opts: ClientStubOptions) {\n    if (opts.sslCreds) {\n      return opts.sslCreds;\n    }\n    const grpc = this.grpc;\n    const sslCreds = grpc.credentials.createSsl();\n    const client = await this.auth.getClient();\n    const credentials = grpc.credentials.combineChannelCredentials(\n      sslCreds,\n      grpc.credentials.createFromGoogleCredential(client)\n    );\n    return credentials;\n  }\n\n  /**\n   * Loads the gRPC service from the proto file at the given path and with the\n   * given options.\n   * @param filename The path to the proto file.\n   * @param options Options for loading the proto file.\n   */\n  loadFromProto(filename: string, options: grpcProtoLoader.Options) {\n    const packageDef = grpcProtoLoader.loadSync(filename, options);\n    return this.grpc.loadPackageDefinition(packageDef);\n  }\n\n  /**\n   * Load grpc proto service from a filename hooking in googleapis common protos\n   * when necessary.\n   * @param {String} protoPath - The directory to search for the protofile.\n   * @param {String} filename - The filename of the proto to be loaded.\n   * @return {Object} The gRPC loaded result (the toplevel namespace\n   *   object).\n   */\n  loadProto(protoPath: string, filename: string) {\n    // This set of @grpc/proto-loader options\n    // 'closely approximates the existing behavior of grpc.load'\n    const includeDirs = INCLUDE_DIRS.slice();\n    includeDirs.unshift(protoPath);\n    const options = {\n      keepCase: false,\n      longs: String,\n      enums: String,\n      defaults: true,\n      oneofs: true,\n      includeDirs,\n    };\n    return this.loadFromProto(filename, options);\n  }\n\n  static _resolveFile(protoPath: string, filename: string) {\n    if (fs.existsSync(path.join(protoPath, filename))) {\n      return path.join(protoPath, filename);\n    } else if (COMMON_PROTO_FILES.indexOf(filename) > -1) {\n      return path.join(googleProtoFilesDir, filename);\n    }\n    throw new Error(filename + ' could not be found in ' + protoPath);\n  }\n\n  metadataBuilder(headers: OutgoingHttpHeaders) {\n    const Metadata = this.grpc.Metadata;\n    const baseMetadata = new Metadata();\n    // tslint:disable-next-line forin\n    for (const key in headers) {\n      const value = headers[key];\n      if (Array.isArray(value)) {\n        value.forEach(v => baseMetadata.add(key, v));\n      } else {\n        baseMetadata.set(key, `${value}`);\n      }\n    }\n    return function buildMetadata(\n      abTests?: {},\n      moreHeaders?: OutgoingHttpHeaders\n    ) {\n      // TODO: bring the A/B testing info into the metadata.\n      let copied = false;\n      let metadata = baseMetadata;\n      if (moreHeaders) {\n        for (const key in moreHeaders) {\n          if (\n            key.toLowerCase() !== 'x-goog-api-client' &&\n            moreHeaders!.hasOwnProperty(key)\n          ) {\n            if (!copied) {\n              copied = true;\n              metadata = metadata.clone();\n            }\n            const value = moreHeaders[key];\n            if (Array.isArray(value)) {\n              value.forEach(v => metadata.add(key, v));\n            } else {\n              metadata.set(key, `${value}`);\n            }\n          }\n        }\n      }\n      return metadata;\n    };\n  }\n\n  /**\n   * A wrapper of {@link constructSettings} function under the gRPC context.\n   *\n   * Most of parameters are common among constructSettings, please take a look.\n   * @param {string} serviceName - The fullly-qualified name of the service.\n   * @param {Object} clientConfig - A dictionary of the client config.\n   * @param {Object} configOverrides - A dictionary of overriding configs.\n   * @param {Object} headers - A dictionary of additional HTTP header name to\n   *   its value.\n   * @return {Object} A mapping of method names to CallSettings.\n   */\n  constructSettings(\n    serviceName: string,\n    clientConfig: gax.ClientConfig,\n    configOverrides: gax.ClientConfig,\n    headers: OutgoingHttpHeaders\n  ) {\n    return gax.constructSettings(\n      serviceName,\n      clientConfig,\n      configOverrides,\n      this.grpc.status,\n      {metadataBuilder: this.metadataBuilder(headers)},\n      this.promise\n    );\n  }\n\n  /**\n   * Creates a gRPC stub with current gRPC and auth.\n   * @param {function} CreateStub - The constructor function of the stub.\n   * @param {Object} options - The optional arguments to customize\n   *   gRPC connection. This options will be passed to the constructor of\n   *   gRPC client too.\n   * @param {string} options.servicePath - The name of the server of the service.\n   * @param {number} options.port - The port of the service.\n   * @param {grpcTypes.ClientCredentials=} options.sslCreds - The credentials to be used\n   *   to set up gRPC connection.\n   * @return {Promise} A promse which resolves to a gRPC stub instance.\n   */\n  // tslint:disable-next-line variable-name\n  async createStub(CreateStub: typeof ClientStub, options: ClientStubOptions) {\n    const serviceAddress = options.servicePath + ':' + options.port;\n    const creds = await this._getCredentials(options);\n    const grpcOptions: {[index: string]: string} = {};\n    Object.keys(options).forEach(key => {\n      if (key.startsWith('grpc.')) {\n        grpcOptions[key.replace(/^grpc\\./, '')] = options[key];\n      }\n    });\n    const stub = new CreateStub(serviceAddress, creds, grpcOptions);\n    return stub;\n  }\n\n  /**\n   * Creates a 'bytelength' function for a given proto message class.\n   *\n   * See {@link BundleDescriptor} about the meaning of the return value.\n   *\n   * @param {function} message - a constructor function that is generated by\n   *   protobuf.js. Assumes 'encoder' field in the message.\n   * @return {function(Object):number} - a function to compute the byte length\n   *   for an object.\n   */\n  static createByteLengthFunction(message: {\n    encode: (obj: {}) => {\n      finish: () => Array;\n    };\n  }) {\n    return function getByteLength(obj: {}) {\n      return message.encode(obj).finish().length;\n    };\n  }\n}\n\nexport class GoogleProtoFilesRoot extends protobuf.Root {\n  constructor(...args: Array) {\n    super(...args);\n  }\n\n  // Causes the loading of an included proto to check if it is a common\n  // proto. If it is a common proto, use the bundled proto.\n  resolvePath(originPath: string, includePath: string) {\n    originPath = path.normalize(originPath);\n    includePath = path.normalize(includePath);\n\n    // Fully qualified paths don't need to be resolved.\n    if (path.isAbsolute(includePath)) {\n      if (!fs.existsSync(includePath)) {\n        throw new Error('The include `' + includePath + '` was not found.');\n      }\n      return includePath;\n    }\n\n    if (COMMON_PROTO_FILES.indexOf(includePath) > -1) {\n      return path.join(googleProtoFilesDir, includePath);\n    }\n\n    return GoogleProtoFilesRoot._findIncludePath(originPath, includePath);\n  }\n\n  static _findIncludePath(originPath: string, includePath: string) {\n    originPath = path.normalize(originPath);\n    includePath = path.normalize(includePath);\n\n    let current = originPath;\n    let found = fs.existsSync(path.join(current, includePath));\n    while (!found && current.length > 0) {\n      current = current.substring(0, current.lastIndexOf(path.sep));\n      found = fs.existsSync(path.join(current, includePath));\n    }\n    if (!found) {\n      throw new Error('The include `' + includePath + '` was not found.');\n    }\n    return path.join(current, includePath);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/GrpcClientOptions.html":{"url":"interfaces/GrpcClientOptions.html","title":"interface - GrpcClientOptions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  GrpcClientOptions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/grpc.ts\n        \n\n\n            \n                Extends\n            \n            \n                    GoogleAuthOptions\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        auth\n                                \n                                \n                                            Optional\n                                        grpc\n                                \n                                \n                                            Optional\n                                        promise\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        auth\n                                    \n                                \n                                \n                                    \n                                        auth:     GoogleAuth\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     GoogleAuth\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        grpc\n                                    \n                                \n                                \n                                    \n                                        grpc:         GrpcModule\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         GrpcModule\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        promise\n                                    \n                                \n                                \n                                    \n                                        promise:     PromiseConstructor\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     PromiseConstructor\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import * as grpcProtoLoader from '@grpc/proto-loader';\nimport * as fs from 'fs';\nimport {GoogleAuth, GoogleAuthOptions} from 'google-auth-library';\nimport * as grpc from '@grpc/grpc-js';\nimport {OutgoingHttpHeaders} from 'http';\nimport * as path from 'path';\nimport * as protobuf from 'protobufjs';\nimport * as semver from 'semver';\nimport * as walk from 'walkdir';\n\nimport * as gax from './gax';\n\nconst googleProtoFilesDir = path.join(__dirname, '..', '..', 'protos');\n\n// INCLUDE_DIRS is passed to @grpc/proto-loader\nconst INCLUDE_DIRS: string[] = [];\nINCLUDE_DIRS.push(googleProtoFilesDir);\n\n// COMMON_PROTO_FILES logic is here for protobufjs loads (see\n// GoogleProtoFilesRoot below)\nconst COMMON_PROTO_FILES = walk\n  .sync(googleProtoFilesDir)\n  .filter(f => path.extname(f) === '.proto')\n  .map(f => path.normalize(f).substring(googleProtoFilesDir.length + 1));\n\nexport interface GrpcClientOptions extends GoogleAuthOptions {\n  auth?: GoogleAuth;\n  promise?: PromiseConstructor;\n  grpc?: GrpcModule;\n}\n\nexport interface MetadataValue {\n  equals: Function;\n}\n\nexport interface Metadata {\n  new (): Metadata;\n  set: (key: {}, value?: {} | null) => void;\n  clone: () => Metadata;\n  value: MetadataValue;\n  get: (key: {}) => {};\n}\n\nexport type GrpcModule = typeof grpc;\n\nexport interface ClientStubOptions {\n  servicePath: string;\n  port: number;\n  // TODO: use sslCreds?: grpc.ChannelCredentials;\n  // tslint:disable-next-line no-any\n  sslCreds?: any;\n}\n\nexport class ClientStub extends grpc.Client {\n  [name: string]: Function;\n}\n\nexport class GrpcClient {\n  auth: GoogleAuth;\n  promise: PromiseConstructor;\n  grpc: GrpcModule;\n  grpcVersion: string;\n\n  /**\n   * A class which keeps the context of gRPC and auth for the gRPC.\n   *\n   * @param {Object=} options - The optional parameters. It will be directly\n   *   passed to google-auth-library library, so parameters like keyFile or\n   *   credentials will be valid.\n   * @param {Object=} options.auth - An instance of google-auth-library.\n   *   When specified, this auth instance will be used instead of creating\n   *   a new one.\n   * @param {Object=} options.grpc - When specified, this will be used\n   *   for the 'grpc' module in this context. By default, it will load the grpc\n   *   module in the standard way.\n   * @param {Function=} options.promise - A constructor for a promise that\n   * implements the ES6 specification of promise. If not provided, native\n   * promises will be used.\n   * @constructor\n   */\n  constructor(options: GrpcClientOptions = {}) {\n    this.auth = options.auth || new GoogleAuth(options);\n    this.promise = options.promise || Promise;\n\n    if ('grpc' in options) {\n      this.grpc = options.grpc!;\n      this.grpcVersion = '';\n    } else {\n      if (semver.gte(process.version, '8.13.0')) {\n        this.grpc = grpc;\n        this.grpcVersion = require('@grpc/grpc-js/package.json').version;\n      } else {\n        const errorMessage =\n          'To use @grpc/grpc-js you must run your code on Node.js v8.13.0 or newer. Please see README if you need to use an older version. ' +\n          'https://github.com/googleapis/gax-nodejs/blob/master/README.md';\n        throw new Error(errorMessage);\n      }\n    }\n  }\n\n  /**\n   * Creates a gRPC credentials. It asks the auth data if necessary.\n   * @private\n   * @param {Object} opts - options values for configuring credentials.\n   * @param {Object=} opts.sslCreds - when specified, this is used instead\n   *   of default channel credentials.\n   * @return {Promise} The promise which will be resolved to the gRPC credential.\n   */\n  async _getCredentials(opts: ClientStubOptions) {\n    if (opts.sslCreds) {\n      return opts.sslCreds;\n    }\n    const grpc = this.grpc;\n    const sslCreds = grpc.credentials.createSsl();\n    const client = await this.auth.getClient();\n    const credentials = grpc.credentials.combineChannelCredentials(\n      sslCreds,\n      grpc.credentials.createFromGoogleCredential(client)\n    );\n    return credentials;\n  }\n\n  /**\n   * Loads the gRPC service from the proto file at the given path and with the\n   * given options.\n   * @param filename The path to the proto file.\n   * @param options Options for loading the proto file.\n   */\n  loadFromProto(filename: string, options: grpcProtoLoader.Options) {\n    const packageDef = grpcProtoLoader.loadSync(filename, options);\n    return this.grpc.loadPackageDefinition(packageDef);\n  }\n\n  /**\n   * Load grpc proto service from a filename hooking in googleapis common protos\n   * when necessary.\n   * @param {String} protoPath - The directory to search for the protofile.\n   * @param {String} filename - The filename of the proto to be loaded.\n   * @return {Object} The gRPC loaded result (the toplevel namespace\n   *   object).\n   */\n  loadProto(protoPath: string, filename: string) {\n    // This set of @grpc/proto-loader options\n    // 'closely approximates the existing behavior of grpc.load'\n    const includeDirs = INCLUDE_DIRS.slice();\n    includeDirs.unshift(protoPath);\n    const options = {\n      keepCase: false,\n      longs: String,\n      enums: String,\n      defaults: true,\n      oneofs: true,\n      includeDirs,\n    };\n    return this.loadFromProto(filename, options);\n  }\n\n  static _resolveFile(protoPath: string, filename: string) {\n    if (fs.existsSync(path.join(protoPath, filename))) {\n      return path.join(protoPath, filename);\n    } else if (COMMON_PROTO_FILES.indexOf(filename) > -1) {\n      return path.join(googleProtoFilesDir, filename);\n    }\n    throw new Error(filename + ' could not be found in ' + protoPath);\n  }\n\n  metadataBuilder(headers: OutgoingHttpHeaders) {\n    const Metadata = this.grpc.Metadata;\n    const baseMetadata = new Metadata();\n    // tslint:disable-next-line forin\n    for (const key in headers) {\n      const value = headers[key];\n      if (Array.isArray(value)) {\n        value.forEach(v => baseMetadata.add(key, v));\n      } else {\n        baseMetadata.set(key, `${value}`);\n      }\n    }\n    return function buildMetadata(\n      abTests?: {},\n      moreHeaders?: OutgoingHttpHeaders\n    ) {\n      // TODO: bring the A/B testing info into the metadata.\n      let copied = false;\n      let metadata = baseMetadata;\n      if (moreHeaders) {\n        for (const key in moreHeaders) {\n          if (\n            key.toLowerCase() !== 'x-goog-api-client' &&\n            moreHeaders!.hasOwnProperty(key)\n          ) {\n            if (!copied) {\n              copied = true;\n              metadata = metadata.clone();\n            }\n            const value = moreHeaders[key];\n            if (Array.isArray(value)) {\n              value.forEach(v => metadata.add(key, v));\n            } else {\n              metadata.set(key, `${value}`);\n            }\n          }\n        }\n      }\n      return metadata;\n    };\n  }\n\n  /**\n   * A wrapper of {@link constructSettings} function under the gRPC context.\n   *\n   * Most of parameters are common among constructSettings, please take a look.\n   * @param {string} serviceName - The fullly-qualified name of the service.\n   * @param {Object} clientConfig - A dictionary of the client config.\n   * @param {Object} configOverrides - A dictionary of overriding configs.\n   * @param {Object} headers - A dictionary of additional HTTP header name to\n   *   its value.\n   * @return {Object} A mapping of method names to CallSettings.\n   */\n  constructSettings(\n    serviceName: string,\n    clientConfig: gax.ClientConfig,\n    configOverrides: gax.ClientConfig,\n    headers: OutgoingHttpHeaders\n  ) {\n    return gax.constructSettings(\n      serviceName,\n      clientConfig,\n      configOverrides,\n      this.grpc.status,\n      {metadataBuilder: this.metadataBuilder(headers)},\n      this.promise\n    );\n  }\n\n  /**\n   * Creates a gRPC stub with current gRPC and auth.\n   * @param {function} CreateStub - The constructor function of the stub.\n   * @param {Object} options - The optional arguments to customize\n   *   gRPC connection. This options will be passed to the constructor of\n   *   gRPC client too.\n   * @param {string} options.servicePath - The name of the server of the service.\n   * @param {number} options.port - The port of the service.\n   * @param {grpcTypes.ClientCredentials=} options.sslCreds - The credentials to be used\n   *   to set up gRPC connection.\n   * @return {Promise} A promse which resolves to a gRPC stub instance.\n   */\n  // tslint:disable-next-line variable-name\n  async createStub(CreateStub: typeof ClientStub, options: ClientStubOptions) {\n    const serviceAddress = options.servicePath + ':' + options.port;\n    const creds = await this._getCredentials(options);\n    const grpcOptions: {[index: string]: string} = {};\n    Object.keys(options).forEach(key => {\n      if (key.startsWith('grpc.')) {\n        grpcOptions[key.replace(/^grpc\\./, '')] = options[key];\n      }\n    });\n    const stub = new CreateStub(serviceAddress, creds, grpcOptions);\n    return stub;\n  }\n\n  /**\n   * Creates a 'bytelength' function for a given proto message class.\n   *\n   * See {@link BundleDescriptor} about the meaning of the return value.\n   *\n   * @param {function} message - a constructor function that is generated by\n   *   protobuf.js. Assumes 'encoder' field in the message.\n   * @return {function(Object):number} - a function to compute the byte length\n   *   for an object.\n   */\n  static createByteLengthFunction(message: {\n    encode: (obj: {}) => {\n      finish: () => Array;\n    };\n  }) {\n    return function getByteLength(obj: {}) {\n      return message.encode(obj).finish().length;\n    };\n  }\n}\n\nexport class GoogleProtoFilesRoot extends protobuf.Root {\n  constructor(...args: Array) {\n    super(...args);\n  }\n\n  // Causes the loading of an included proto to check if it is a common\n  // proto. If it is a common proto, use the bundled proto.\n  resolvePath(originPath: string, includePath: string) {\n    originPath = path.normalize(originPath);\n    includePath = path.normalize(includePath);\n\n    // Fully qualified paths don't need to be resolved.\n    if (path.isAbsolute(includePath)) {\n      if (!fs.existsSync(includePath)) {\n        throw new Error('The include `' + includePath + '` was not found.');\n      }\n      return includePath;\n    }\n\n    if (COMMON_PROTO_FILES.indexOf(includePath) > -1) {\n      return path.join(googleProtoFilesDir, includePath);\n    }\n\n    return GoogleProtoFilesRoot._findIncludePath(originPath, includePath);\n  }\n\n  static _findIncludePath(originPath: string, includePath: string) {\n    originPath = path.normalize(originPath);\n    includePath = path.normalize(includePath);\n\n    let current = originPath;\n    let found = fs.existsSync(path.join(current, includePath));\n    while (!found && current.length > 0) {\n      current = current.substring(0, current.lastIndexOf(path.sep));\n      found = fs.existsSync(path.join(current, includePath));\n    }\n    if (!found) {\n      throw new Error('The include `' + includePath + '` was not found.');\n    }\n    return path.join(current, includePath);\n  }\n}\n\n    \n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/LongRunningDescriptor.html":{"url":"classes/LongRunningDescriptor.html","title":"class - LongRunningDescriptor","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  LongRunningDescriptor\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/longRunningCalls/longRunningDescriptor.ts\n        \n\n            \n                Description\n            \n            \n                A descriptor for long-running operations.\n\n            \n\n\n            \n                Implements\n            \n            \n                            Descriptor\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                metadataDecoder\n                            \n                            \n                                operationsClient\n                            \n                            \n                                responseDecoder\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getApiCaller\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(operationsClient: OperationsClient, responseDecoder: AnyDecoder, metadataDecoder: AnyDecoder)\n                    \n                \n                        \n                            \n                                Defined in src/longRunningCalls/longRunningDescriptor.ts:52\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        operationsClient\n                                                  \n                                                        \n                                                                        OperationsClient\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        responseDecoder\n                                                  \n                                                        \n                                                                        AnyDecoder\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        metadataDecoder\n                                                  \n                                                        \n                                                                        AnyDecoder\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            metadataDecoder\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         AnyDecoder\n\n                        \n                    \n                        \n                            \n                                    Defined in src/longRunningCalls/longRunningDescriptor.ts:52\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            operationsClient\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         OperationsClient\n\n                        \n                    \n                        \n                            \n                                    Defined in src/longRunningCalls/longRunningDescriptor.ts:50\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            responseDecoder\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         AnyDecoder\n\n                        \n                    \n                        \n                            \n                                    Defined in src/longRunningCalls/longRunningDescriptor.ts:51\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getApiCaller\n                        \n                        \n                    \n                \n            \n            \n                \ngetApiCaller(settings: CallSettings)\n                \n            \n\n\n            \n                \n                    Defined in src/longRunningCalls/longRunningDescriptor.ts:64\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    settings\n                                    \n                                                CallSettings\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {Descriptor} from '../descriptor';\nimport {CallSettings} from '../gax';\nimport {Metadata} from '../grpc';\nimport {OperationsClient} from '../operationsClient';\n\nimport {LongrunningApiCaller} from './longRunningApiCaller';\n\n/**\n * A callback to upack a google.protobuf.Any message.\n */\nexport interface AnyDecoder {\n  (message: {}): Metadata;\n}\n\n/**\n * A descriptor for long-running operations.\n */\nexport class LongRunningDescriptor implements Descriptor {\n  operationsClient: OperationsClient;\n  responseDecoder: AnyDecoder;\n  metadataDecoder: AnyDecoder;\n\n  constructor(\n    operationsClient: OperationsClient,\n    responseDecoder: AnyDecoder,\n    metadataDecoder: AnyDecoder\n  ) {\n    this.operationsClient = operationsClient;\n    this.responseDecoder = responseDecoder;\n    this.metadataDecoder = metadataDecoder;\n  }\n\n  getApiCaller(settings: CallSettings) {\n    return new LongrunningApiCaller(this);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/LongrunningApiCaller.html":{"url":"classes/LongrunningApiCaller.html","title":"class - LongrunningApiCaller","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  LongrunningApiCaller\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/longRunningCalls/longRunningApiCaller.ts\n        \n\n\n\n            \n                Implements\n            \n            \n                            APICaller\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                longrunningDescriptor\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                call\n                            \n                            \n                                fail\n                            \n                            \n                                init\n                            \n                            \n                                result\n                            \n                            \n                                wrap\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(longrunningDescriptor: LongRunningDescriptor)\n                    \n                \n                        \n                            \n                                Defined in src/longRunningCalls/longRunningApiCaller.ts:48\n                            \n                        \n\n                \n                    \n                            Creates an API caller that performs polling on a long running operation.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        longrunningDescriptor\n                                                  \n                                                        \n                                                                        LongRunningDescriptor\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nHolds the\ndecoders used for unpacking responses and the operationsClient\nused for polling the operation.\n\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            longrunningDescriptor\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         LongRunningDescriptor\n\n                        \n                    \n                        \n                            \n                                    Defined in src/longRunningCalls/longRunningApiCaller.ts:48\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            call\n                        \n                        \n                    \n                \n            \n            \n                \ncall(apiCall: SimpleCallbackFunction, argument: literal type, settings: CallOptions, canceller: OngoingCallPromise)\n                \n            \n\n\n            \n                \n                    Defined in src/longRunningCalls/longRunningApiCaller.ts:76\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    apiCall\n                                    \n                                                SimpleCallbackFunction\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    argument\n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    settings\n                                    \n                                                CallOptions\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    canceller\n                                    \n                                                OngoingCallPromise\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            fail\n                        \n                        \n                    \n                \n            \n            \n                \nfail(canceller: OngoingCallPromise, err: GoogleError)\n                \n            \n\n\n            \n                \n                    Defined in src/longRunningCalls/longRunningApiCaller.ts:119\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    canceller\n                                    \n                                                OngoingCallPromise\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    err\n                                    \n                                                GoogleError\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            init\n                        \n                        \n                    \n                \n            \n            \n                \ninit(settings: ApiCallerSettings, callback?: APICallback)\n                \n            \n\n\n            \n                \n                    Defined in src/longRunningCalls/longRunningApiCaller.ts:62\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    settings\n                                    \n                                                ApiCallerSettings\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    callback\n                                    \n                                                APICallback\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     OngoingCallPromise | OngoingCall\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            result\n                        \n                        \n                    \n                \n            \n            \n                \nresult(canceller: OngoingCallPromise)\n                \n            \n\n\n            \n                \n                    Defined in src/longRunningCalls/longRunningApiCaller.ts:123\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    canceller\n                                    \n                                                OngoingCallPromise\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            wrap\n                        \n                        \n                    \n                \n            \n            \n                \nwrap(func: GRPCCall)\n                \n            \n\n\n            \n                \n                    Defined in src/longRunningCalls/longRunningApiCaller.ts:72\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    func\n                                    \n                                                GRPCCall\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         GRPCCall\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {APICaller, ApiCallerSettings} from '../apiCaller';\nimport {APICallback, GRPCCall, SimpleCallbackFunction} from '../apitypes';\nimport {OngoingCall, OngoingCallPromise} from '../call';\nimport {\n  BackoffSettings,\n  CallOptions,\n  CallSettings,\n  createBackoffSettings,\n  createDefaultBackoffSettings,\n} from '../gax';\nimport {GoogleError} from '../googleError';\n\nimport {Operation} from './longrunning';\nimport {LongRunningDescriptor} from './longRunningDescriptor';\n\nexport class LongrunningApiCaller implements APICaller {\n  longrunningDescriptor: LongRunningDescriptor;\n  /**\n   * Creates an API caller that performs polling on a long running operation.\n   *\n   * @private\n   * @constructor\n   * @param {LongRunningDescriptor} longrunningDescriptor - Holds the\n   * decoders used for unpacking responses and the operationsClient\n   * used for polling the operation.\n   */\n  constructor(longrunningDescriptor: LongRunningDescriptor) {\n    this.longrunningDescriptor = longrunningDescriptor;\n  }\n\n  init(\n    settings: ApiCallerSettings,\n    callback?: APICallback\n  ): OngoingCallPromise | OngoingCall {\n    if (callback) {\n      return new OngoingCall(callback);\n    }\n    return new OngoingCallPromise(settings.promise);\n  }\n\n  wrap(func: GRPCCall): GRPCCall {\n    return func;\n  }\n\n  call(\n    apiCall: SimpleCallbackFunction,\n    argument: {},\n    settings: CallOptions,\n    canceller: OngoingCallPromise\n  ) {\n    canceller.call((argument, callback) => {\n      return this._wrapOperation(apiCall, settings, argument, callback);\n    }, argument);\n  }\n\n  private _wrapOperation(\n    apiCall: SimpleCallbackFunction,\n    settings: CallOptions,\n    argument: {},\n    callback: APICallback\n  ) {\n    let backoffSettings: BackoffSettings | undefined = settings.longrunning;\n    if (!backoffSettings) {\n      backoffSettings = createDefaultBackoffSettings();\n    }\n\n    const longrunningDescriptor = this.longrunningDescriptor;\n    return apiCall(\n      argument,\n      (err: GoogleError | null, rawResponse: {} | null | undefined) => {\n        if (err) {\n          callback(err, null, null, rawResponse as Operation);\n          return;\n        }\n\n        const operation = new Operation(\n          rawResponse as Operation,\n          longrunningDescriptor,\n          backoffSettings!,\n          settings\n        );\n\n        callback(null, operation, rawResponse);\n      }\n    );\n  }\n\n  fail(canceller: OngoingCallPromise, err: GoogleError): void {\n    canceller.callback!(err);\n  }\n\n  result(canceller: OngoingCallPromise) {\n    return canceller.promise;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Metadata.html":{"url":"interfaces/Metadata.html","title":"interface - Metadata","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  Metadata\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/grpc.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        clone\n                                \n                                \n                                        get\n                                \n                                \n                                        set\n                                \n                                \n                                        value\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        clone\n                                    \n                                \n                                \n                                    \n                                        clone:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        get\n                                    \n                                \n                                \n                                    \n                                        get:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        set\n                                    \n                                \n                                \n                                    \n                                        set:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        value\n                                    \n                                \n                                \n                                    \n                                        value:         MetadataValue\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         MetadataValue\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import * as grpcProtoLoader from '@grpc/proto-loader';\nimport * as fs from 'fs';\nimport {GoogleAuth, GoogleAuthOptions} from 'google-auth-library';\nimport * as grpc from '@grpc/grpc-js';\nimport {OutgoingHttpHeaders} from 'http';\nimport * as path from 'path';\nimport * as protobuf from 'protobufjs';\nimport * as semver from 'semver';\nimport * as walk from 'walkdir';\n\nimport * as gax from './gax';\n\nconst googleProtoFilesDir = path.join(__dirname, '..', '..', 'protos');\n\n// INCLUDE_DIRS is passed to @grpc/proto-loader\nconst INCLUDE_DIRS: string[] = [];\nINCLUDE_DIRS.push(googleProtoFilesDir);\n\n// COMMON_PROTO_FILES logic is here for protobufjs loads (see\n// GoogleProtoFilesRoot below)\nconst COMMON_PROTO_FILES = walk\n  .sync(googleProtoFilesDir)\n  .filter(f => path.extname(f) === '.proto')\n  .map(f => path.normalize(f).substring(googleProtoFilesDir.length + 1));\n\nexport interface GrpcClientOptions extends GoogleAuthOptions {\n  auth?: GoogleAuth;\n  promise?: PromiseConstructor;\n  grpc?: GrpcModule;\n}\n\nexport interface MetadataValue {\n  equals: Function;\n}\n\nexport interface Metadata {\n  new (): Metadata;\n  set: (key: {}, value?: {} | null) => void;\n  clone: () => Metadata;\n  value: MetadataValue;\n  get: (key: {}) => {};\n}\n\nexport type GrpcModule = typeof grpc;\n\nexport interface ClientStubOptions {\n  servicePath: string;\n  port: number;\n  // TODO: use sslCreds?: grpc.ChannelCredentials;\n  // tslint:disable-next-line no-any\n  sslCreds?: any;\n}\n\nexport class ClientStub extends grpc.Client {\n  [name: string]: Function;\n}\n\nexport class GrpcClient {\n  auth: GoogleAuth;\n  promise: PromiseConstructor;\n  grpc: GrpcModule;\n  grpcVersion: string;\n\n  /**\n   * A class which keeps the context of gRPC and auth for the gRPC.\n   *\n   * @param {Object=} options - The optional parameters. It will be directly\n   *   passed to google-auth-library library, so parameters like keyFile or\n   *   credentials will be valid.\n   * @param {Object=} options.auth - An instance of google-auth-library.\n   *   When specified, this auth instance will be used instead of creating\n   *   a new one.\n   * @param {Object=} options.grpc - When specified, this will be used\n   *   for the 'grpc' module in this context. By default, it will load the grpc\n   *   module in the standard way.\n   * @param {Function=} options.promise - A constructor for a promise that\n   * implements the ES6 specification of promise. If not provided, native\n   * promises will be used.\n   * @constructor\n   */\n  constructor(options: GrpcClientOptions = {}) {\n    this.auth = options.auth || new GoogleAuth(options);\n    this.promise = options.promise || Promise;\n\n    if ('grpc' in options) {\n      this.grpc = options.grpc!;\n      this.grpcVersion = '';\n    } else {\n      if (semver.gte(process.version, '8.13.0')) {\n        this.grpc = grpc;\n        this.grpcVersion = require('@grpc/grpc-js/package.json').version;\n      } else {\n        const errorMessage =\n          'To use @grpc/grpc-js you must run your code on Node.js v8.13.0 or newer. Please see README if you need to use an older version. ' +\n          'https://github.com/googleapis/gax-nodejs/blob/master/README.md';\n        throw new Error(errorMessage);\n      }\n    }\n  }\n\n  /**\n   * Creates a gRPC credentials. It asks the auth data if necessary.\n   * @private\n   * @param {Object} opts - options values for configuring credentials.\n   * @param {Object=} opts.sslCreds - when specified, this is used instead\n   *   of default channel credentials.\n   * @return {Promise} The promise which will be resolved to the gRPC credential.\n   */\n  async _getCredentials(opts: ClientStubOptions) {\n    if (opts.sslCreds) {\n      return opts.sslCreds;\n    }\n    const grpc = this.grpc;\n    const sslCreds = grpc.credentials.createSsl();\n    const client = await this.auth.getClient();\n    const credentials = grpc.credentials.combineChannelCredentials(\n      sslCreds,\n      grpc.credentials.createFromGoogleCredential(client)\n    );\n    return credentials;\n  }\n\n  /**\n   * Loads the gRPC service from the proto file at the given path and with the\n   * given options.\n   * @param filename The path to the proto file.\n   * @param options Options for loading the proto file.\n   */\n  loadFromProto(filename: string, options: grpcProtoLoader.Options) {\n    const packageDef = grpcProtoLoader.loadSync(filename, options);\n    return this.grpc.loadPackageDefinition(packageDef);\n  }\n\n  /**\n   * Load grpc proto service from a filename hooking in googleapis common protos\n   * when necessary.\n   * @param {String} protoPath - The directory to search for the protofile.\n   * @param {String} filename - The filename of the proto to be loaded.\n   * @return {Object} The gRPC loaded result (the toplevel namespace\n   *   object).\n   */\n  loadProto(protoPath: string, filename: string) {\n    // This set of @grpc/proto-loader options\n    // 'closely approximates the existing behavior of grpc.load'\n    const includeDirs = INCLUDE_DIRS.slice();\n    includeDirs.unshift(protoPath);\n    const options = {\n      keepCase: false,\n      longs: String,\n      enums: String,\n      defaults: true,\n      oneofs: true,\n      includeDirs,\n    };\n    return this.loadFromProto(filename, options);\n  }\n\n  static _resolveFile(protoPath: string, filename: string) {\n    if (fs.existsSync(path.join(protoPath, filename))) {\n      return path.join(protoPath, filename);\n    } else if (COMMON_PROTO_FILES.indexOf(filename) > -1) {\n      return path.join(googleProtoFilesDir, filename);\n    }\n    throw new Error(filename + ' could not be found in ' + protoPath);\n  }\n\n  metadataBuilder(headers: OutgoingHttpHeaders) {\n    const Metadata = this.grpc.Metadata;\n    const baseMetadata = new Metadata();\n    // tslint:disable-next-line forin\n    for (const key in headers) {\n      const value = headers[key];\n      if (Array.isArray(value)) {\n        value.forEach(v => baseMetadata.add(key, v));\n      } else {\n        baseMetadata.set(key, `${value}`);\n      }\n    }\n    return function buildMetadata(\n      abTests?: {},\n      moreHeaders?: OutgoingHttpHeaders\n    ) {\n      // TODO: bring the A/B testing info into the metadata.\n      let copied = false;\n      let metadata = baseMetadata;\n      if (moreHeaders) {\n        for (const key in moreHeaders) {\n          if (\n            key.toLowerCase() !== 'x-goog-api-client' &&\n            moreHeaders!.hasOwnProperty(key)\n          ) {\n            if (!copied) {\n              copied = true;\n              metadata = metadata.clone();\n            }\n            const value = moreHeaders[key];\n            if (Array.isArray(value)) {\n              value.forEach(v => metadata.add(key, v));\n            } else {\n              metadata.set(key, `${value}`);\n            }\n          }\n        }\n      }\n      return metadata;\n    };\n  }\n\n  /**\n   * A wrapper of {@link constructSettings} function under the gRPC context.\n   *\n   * Most of parameters are common among constructSettings, please take a look.\n   * @param {string} serviceName - The fullly-qualified name of the service.\n   * @param {Object} clientConfig - A dictionary of the client config.\n   * @param {Object} configOverrides - A dictionary of overriding configs.\n   * @param {Object} headers - A dictionary of additional HTTP header name to\n   *   its value.\n   * @return {Object} A mapping of method names to CallSettings.\n   */\n  constructSettings(\n    serviceName: string,\n    clientConfig: gax.ClientConfig,\n    configOverrides: gax.ClientConfig,\n    headers: OutgoingHttpHeaders\n  ) {\n    return gax.constructSettings(\n      serviceName,\n      clientConfig,\n      configOverrides,\n      this.grpc.status,\n      {metadataBuilder: this.metadataBuilder(headers)},\n      this.promise\n    );\n  }\n\n  /**\n   * Creates a gRPC stub with current gRPC and auth.\n   * @param {function} CreateStub - The constructor function of the stub.\n   * @param {Object} options - The optional arguments to customize\n   *   gRPC connection. This options will be passed to the constructor of\n   *   gRPC client too.\n   * @param {string} options.servicePath - The name of the server of the service.\n   * @param {number} options.port - The port of the service.\n   * @param {grpcTypes.ClientCredentials=} options.sslCreds - The credentials to be used\n   *   to set up gRPC connection.\n   * @return {Promise} A promse which resolves to a gRPC stub instance.\n   */\n  // tslint:disable-next-line variable-name\n  async createStub(CreateStub: typeof ClientStub, options: ClientStubOptions) {\n    const serviceAddress = options.servicePath + ':' + options.port;\n    const creds = await this._getCredentials(options);\n    const grpcOptions: {[index: string]: string} = {};\n    Object.keys(options).forEach(key => {\n      if (key.startsWith('grpc.')) {\n        grpcOptions[key.replace(/^grpc\\./, '')] = options[key];\n      }\n    });\n    const stub = new CreateStub(serviceAddress, creds, grpcOptions);\n    return stub;\n  }\n\n  /**\n   * Creates a 'bytelength' function for a given proto message class.\n   *\n   * See {@link BundleDescriptor} about the meaning of the return value.\n   *\n   * @param {function} message - a constructor function that is generated by\n   *   protobuf.js. Assumes 'encoder' field in the message.\n   * @return {function(Object):number} - a function to compute the byte length\n   *   for an object.\n   */\n  static createByteLengthFunction(message: {\n    encode: (obj: {}) => {\n      finish: () => Array;\n    };\n  }) {\n    return function getByteLength(obj: {}) {\n      return message.encode(obj).finish().length;\n    };\n  }\n}\n\nexport class GoogleProtoFilesRoot extends protobuf.Root {\n  constructor(...args: Array) {\n    super(...args);\n  }\n\n  // Causes the loading of an included proto to check if it is a common\n  // proto. If it is a common proto, use the bundled proto.\n  resolvePath(originPath: string, includePath: string) {\n    originPath = path.normalize(originPath);\n    includePath = path.normalize(includePath);\n\n    // Fully qualified paths don't need to be resolved.\n    if (path.isAbsolute(includePath)) {\n      if (!fs.existsSync(includePath)) {\n        throw new Error('The include `' + includePath + '` was not found.');\n      }\n      return includePath;\n    }\n\n    if (COMMON_PROTO_FILES.indexOf(includePath) > -1) {\n      return path.join(googleProtoFilesDir, includePath);\n    }\n\n    return GoogleProtoFilesRoot._findIncludePath(originPath, includePath);\n  }\n\n  static _findIncludePath(originPath: string, includePath: string) {\n    originPath = path.normalize(originPath);\n    includePath = path.normalize(includePath);\n\n    let current = originPath;\n    let found = fs.existsSync(path.join(current, includePath));\n    while (!found && current.length > 0) {\n      current = current.substring(0, current.lastIndexOf(path.sep));\n      found = fs.existsSync(path.join(current, includePath));\n    }\n    if (!found) {\n      throw new Error('The include `' + includePath + '` was not found.');\n    }\n    return path.join(current, includePath);\n  }\n}\n\n    \n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/MetadataValue.html":{"url":"interfaces/MetadataValue.html","title":"interface - MetadataValue","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  MetadataValue\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/grpc.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        equals\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        equals\n                                    \n                                \n                                \n                                    \n                                        equals:         Function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Function\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import * as grpcProtoLoader from '@grpc/proto-loader';\nimport * as fs from 'fs';\nimport {GoogleAuth, GoogleAuthOptions} from 'google-auth-library';\nimport * as grpc from '@grpc/grpc-js';\nimport {OutgoingHttpHeaders} from 'http';\nimport * as path from 'path';\nimport * as protobuf from 'protobufjs';\nimport * as semver from 'semver';\nimport * as walk from 'walkdir';\n\nimport * as gax from './gax';\n\nconst googleProtoFilesDir = path.join(__dirname, '..', '..', 'protos');\n\n// INCLUDE_DIRS is passed to @grpc/proto-loader\nconst INCLUDE_DIRS: string[] = [];\nINCLUDE_DIRS.push(googleProtoFilesDir);\n\n// COMMON_PROTO_FILES logic is here for protobufjs loads (see\n// GoogleProtoFilesRoot below)\nconst COMMON_PROTO_FILES = walk\n  .sync(googleProtoFilesDir)\n  .filter(f => path.extname(f) === '.proto')\n  .map(f => path.normalize(f).substring(googleProtoFilesDir.length + 1));\n\nexport interface GrpcClientOptions extends GoogleAuthOptions {\n  auth?: GoogleAuth;\n  promise?: PromiseConstructor;\n  grpc?: GrpcModule;\n}\n\nexport interface MetadataValue {\n  equals: Function;\n}\n\nexport interface Metadata {\n  new (): Metadata;\n  set: (key: {}, value?: {} | null) => void;\n  clone: () => Metadata;\n  value: MetadataValue;\n  get: (key: {}) => {};\n}\n\nexport type GrpcModule = typeof grpc;\n\nexport interface ClientStubOptions {\n  servicePath: string;\n  port: number;\n  // TODO: use sslCreds?: grpc.ChannelCredentials;\n  // tslint:disable-next-line no-any\n  sslCreds?: any;\n}\n\nexport class ClientStub extends grpc.Client {\n  [name: string]: Function;\n}\n\nexport class GrpcClient {\n  auth: GoogleAuth;\n  promise: PromiseConstructor;\n  grpc: GrpcModule;\n  grpcVersion: string;\n\n  /**\n   * A class which keeps the context of gRPC and auth for the gRPC.\n   *\n   * @param {Object=} options - The optional parameters. It will be directly\n   *   passed to google-auth-library library, so parameters like keyFile or\n   *   credentials will be valid.\n   * @param {Object=} options.auth - An instance of google-auth-library.\n   *   When specified, this auth instance will be used instead of creating\n   *   a new one.\n   * @param {Object=} options.grpc - When specified, this will be used\n   *   for the 'grpc' module in this context. By default, it will load the grpc\n   *   module in the standard way.\n   * @param {Function=} options.promise - A constructor for a promise that\n   * implements the ES6 specification of promise. If not provided, native\n   * promises will be used.\n   * @constructor\n   */\n  constructor(options: GrpcClientOptions = {}) {\n    this.auth = options.auth || new GoogleAuth(options);\n    this.promise = options.promise || Promise;\n\n    if ('grpc' in options) {\n      this.grpc = options.grpc!;\n      this.grpcVersion = '';\n    } else {\n      if (semver.gte(process.version, '8.13.0')) {\n        this.grpc = grpc;\n        this.grpcVersion = require('@grpc/grpc-js/package.json').version;\n      } else {\n        const errorMessage =\n          'To use @grpc/grpc-js you must run your code on Node.js v8.13.0 or newer. Please see README if you need to use an older version. ' +\n          'https://github.com/googleapis/gax-nodejs/blob/master/README.md';\n        throw new Error(errorMessage);\n      }\n    }\n  }\n\n  /**\n   * Creates a gRPC credentials. It asks the auth data if necessary.\n   * @private\n   * @param {Object} opts - options values for configuring credentials.\n   * @param {Object=} opts.sslCreds - when specified, this is used instead\n   *   of default channel credentials.\n   * @return {Promise} The promise which will be resolved to the gRPC credential.\n   */\n  async _getCredentials(opts: ClientStubOptions) {\n    if (opts.sslCreds) {\n      return opts.sslCreds;\n    }\n    const grpc = this.grpc;\n    const sslCreds = grpc.credentials.createSsl();\n    const client = await this.auth.getClient();\n    const credentials = grpc.credentials.combineChannelCredentials(\n      sslCreds,\n      grpc.credentials.createFromGoogleCredential(client)\n    );\n    return credentials;\n  }\n\n  /**\n   * Loads the gRPC service from the proto file at the given path and with the\n   * given options.\n   * @param filename The path to the proto file.\n   * @param options Options for loading the proto file.\n   */\n  loadFromProto(filename: string, options: grpcProtoLoader.Options) {\n    const packageDef = grpcProtoLoader.loadSync(filename, options);\n    return this.grpc.loadPackageDefinition(packageDef);\n  }\n\n  /**\n   * Load grpc proto service from a filename hooking in googleapis common protos\n   * when necessary.\n   * @param {String} protoPath - The directory to search for the protofile.\n   * @param {String} filename - The filename of the proto to be loaded.\n   * @return {Object} The gRPC loaded result (the toplevel namespace\n   *   object).\n   */\n  loadProto(protoPath: string, filename: string) {\n    // This set of @grpc/proto-loader options\n    // 'closely approximates the existing behavior of grpc.load'\n    const includeDirs = INCLUDE_DIRS.slice();\n    includeDirs.unshift(protoPath);\n    const options = {\n      keepCase: false,\n      longs: String,\n      enums: String,\n      defaults: true,\n      oneofs: true,\n      includeDirs,\n    };\n    return this.loadFromProto(filename, options);\n  }\n\n  static _resolveFile(protoPath: string, filename: string) {\n    if (fs.existsSync(path.join(protoPath, filename))) {\n      return path.join(protoPath, filename);\n    } else if (COMMON_PROTO_FILES.indexOf(filename) > -1) {\n      return path.join(googleProtoFilesDir, filename);\n    }\n    throw new Error(filename + ' could not be found in ' + protoPath);\n  }\n\n  metadataBuilder(headers: OutgoingHttpHeaders) {\n    const Metadata = this.grpc.Metadata;\n    const baseMetadata = new Metadata();\n    // tslint:disable-next-line forin\n    for (const key in headers) {\n      const value = headers[key];\n      if (Array.isArray(value)) {\n        value.forEach(v => baseMetadata.add(key, v));\n      } else {\n        baseMetadata.set(key, `${value}`);\n      }\n    }\n    return function buildMetadata(\n      abTests?: {},\n      moreHeaders?: OutgoingHttpHeaders\n    ) {\n      // TODO: bring the A/B testing info into the metadata.\n      let copied = false;\n      let metadata = baseMetadata;\n      if (moreHeaders) {\n        for (const key in moreHeaders) {\n          if (\n            key.toLowerCase() !== 'x-goog-api-client' &&\n            moreHeaders!.hasOwnProperty(key)\n          ) {\n            if (!copied) {\n              copied = true;\n              metadata = metadata.clone();\n            }\n            const value = moreHeaders[key];\n            if (Array.isArray(value)) {\n              value.forEach(v => metadata.add(key, v));\n            } else {\n              metadata.set(key, `${value}`);\n            }\n          }\n        }\n      }\n      return metadata;\n    };\n  }\n\n  /**\n   * A wrapper of {@link constructSettings} function under the gRPC context.\n   *\n   * Most of parameters are common among constructSettings, please take a look.\n   * @param {string} serviceName - The fullly-qualified name of the service.\n   * @param {Object} clientConfig - A dictionary of the client config.\n   * @param {Object} configOverrides - A dictionary of overriding configs.\n   * @param {Object} headers - A dictionary of additional HTTP header name to\n   *   its value.\n   * @return {Object} A mapping of method names to CallSettings.\n   */\n  constructSettings(\n    serviceName: string,\n    clientConfig: gax.ClientConfig,\n    configOverrides: gax.ClientConfig,\n    headers: OutgoingHttpHeaders\n  ) {\n    return gax.constructSettings(\n      serviceName,\n      clientConfig,\n      configOverrides,\n      this.grpc.status,\n      {metadataBuilder: this.metadataBuilder(headers)},\n      this.promise\n    );\n  }\n\n  /**\n   * Creates a gRPC stub with current gRPC and auth.\n   * @param {function} CreateStub - The constructor function of the stub.\n   * @param {Object} options - The optional arguments to customize\n   *   gRPC connection. This options will be passed to the constructor of\n   *   gRPC client too.\n   * @param {string} options.servicePath - The name of the server of the service.\n   * @param {number} options.port - The port of the service.\n   * @param {grpcTypes.ClientCredentials=} options.sslCreds - The credentials to be used\n   *   to set up gRPC connection.\n   * @return {Promise} A promse which resolves to a gRPC stub instance.\n   */\n  // tslint:disable-next-line variable-name\n  async createStub(CreateStub: typeof ClientStub, options: ClientStubOptions) {\n    const serviceAddress = options.servicePath + ':' + options.port;\n    const creds = await this._getCredentials(options);\n    const grpcOptions: {[index: string]: string} = {};\n    Object.keys(options).forEach(key => {\n      if (key.startsWith('grpc.')) {\n        grpcOptions[key.replace(/^grpc\\./, '')] = options[key];\n      }\n    });\n    const stub = new CreateStub(serviceAddress, creds, grpcOptions);\n    return stub;\n  }\n\n  /**\n   * Creates a 'bytelength' function for a given proto message class.\n   *\n   * See {@link BundleDescriptor} about the meaning of the return value.\n   *\n   * @param {function} message - a constructor function that is generated by\n   *   protobuf.js. Assumes 'encoder' field in the message.\n   * @return {function(Object):number} - a function to compute the byte length\n   *   for an object.\n   */\n  static createByteLengthFunction(message: {\n    encode: (obj: {}) => {\n      finish: () => Array;\n    };\n  }) {\n    return function getByteLength(obj: {}) {\n      return message.encode(obj).finish().length;\n    };\n  }\n}\n\nexport class GoogleProtoFilesRoot extends protobuf.Root {\n  constructor(...args: Array) {\n    super(...args);\n  }\n\n  // Causes the loading of an included proto to check if it is a common\n  // proto. If it is a common proto, use the bundled proto.\n  resolvePath(originPath: string, includePath: string) {\n    originPath = path.normalize(originPath);\n    includePath = path.normalize(includePath);\n\n    // Fully qualified paths don't need to be resolved.\n    if (path.isAbsolute(includePath)) {\n      if (!fs.existsSync(includePath)) {\n        throw new Error('The include `' + includePath + '` was not found.');\n      }\n      return includePath;\n    }\n\n    if (COMMON_PROTO_FILES.indexOf(includePath) > -1) {\n      return path.join(googleProtoFilesDir, includePath);\n    }\n\n    return GoogleProtoFilesRoot._findIncludePath(originPath, includePath);\n  }\n\n  static _findIncludePath(originPath: string, includePath: string) {\n    originPath = path.normalize(originPath);\n    includePath = path.normalize(includePath);\n\n    let current = originPath;\n    let found = fs.existsSync(path.join(current, includePath));\n    while (!found && current.length > 0) {\n      current = current.substring(0, current.lastIndexOf(path.sep));\n      found = fs.existsSync(path.join(current, includePath));\n    }\n    if (!found) {\n      throw new Error('The include `' + includePath + '` was not found.');\n    }\n    return path.join(current, includePath);\n  }\n}\n\n    \n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/MethodConfig.html":{"url":"interfaces/MethodConfig.html","title":"interface - MethodConfig","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  MethodConfig\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/gax.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        bundling\n                                \n                                \n                                        retry_codes_name\n                                \n                                \n                                        retry_params_name\n                                \n                                \n                                            Optional\n                                        timeout_millis\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        bundling\n                                    \n                                \n                                \n                                    \n                                        bundling:         BundlingConfig\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         BundlingConfig\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        retry_codes_name\n                                    \n                                \n                                \n                                    \n                                        retry_codes_name:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        retry_params_name\n                                    \n                                \n                                \n                                    \n                                        retry_params_name:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        timeout_millis\n                                    \n                                \n                                \n                                    \n                                        timeout_millis:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import {BundleOptions} from './bundlingCalls/bundleExecutor';\n\n/**\n * Encapsulates the overridable settings for a particular API call.\n *\n * ``CallOptions`` is an optional arg for all GAX API calls.  It is used to\n * configure the settings of a specific API call.\n *\n * When provided, its values override the GAX service defaults for that\n * particular call.\n *\n * Typically the API clients will accept this as the second to the last\n * argument. See the examples below.\n * @typedef {Object} CallOptions\n * @property {number=} timeout - The client-side timeout for API calls.\n * @property {RetryOptions=} retry - determines whether and how to retry\n *   on transient errors. When set to null, the call will not retry.\n * @property {boolean=} autoPaginate - If set to false and the call is\n *   configured for paged iteration, page unrolling is not performed, instead\n *   the callback will be called with the response object.\n * @property {Object=} pageToken - If set and the call is configured for\n *   paged iteration, paged iteration is not performed and requested with this\n *   pageToken.\n * @property {number} maxResults - If set and the call is configured for\n *   paged iteration, the call will stop when the number of response elements\n *   reaches to the specified size. By default, it will unroll the page to\n *   the end of the list.\n * @property {boolean=} isBundling - If set to false and the call is configured\n *   for bundling, bundling is not performed.\n * @property {BackoffSettings=} longrunning - BackoffSettings used for polling.\n * @property {Function=} promise - A constructor for a promise that implements the ES6\n * specification of promise which will be used to create promises. If not\n * provided, native promises will be used.\n * @example\n * // suppress bundling for bundled method.\n * api.bundlingMethod(\n *     param, {optParam: aValue, isBundling: false}, function(err, response) {\n *   // handle response.\n * });\n * @example\n * // suppress streaming for page-streaming method.\n * api.pageStreamingMethod(\n *     param, {optParam: aValue, autoPaginate: false}, function(err, page) {\n *   // not returning a stream, but callback is called with the paged response.\n * });\n */\n\n/**\n * Per-call configurable settings for retrying upon transient failure.\n * @typedef {Object} RetryOptions\n * @property {String[]} retryCodes\n * @property {BackoffSettings} backoffSettings\n */\nexport class RetryOptions {\n  retryCodes: number[];\n  backoffSettings: BackoffSettings;\n  constructor(retryCodes: number[], backoffSettings: BackoffSettings) {\n    this.retryCodes = retryCodes;\n    this.backoffSettings = backoffSettings;\n  }\n}\n\n/**\n * Parameters to the exponential backoff algorithm for retrying.\n * @typedef {Object} BackoffSettings\n * @property {number} initialRetryDelayMillis - the initial delay time,\n *   in milliseconds, between the completion of the first failed request and the\n *   initiation of the first retrying request.\n * @property {number} retryDelayMultiplier - the multiplier by which to\n *   increase the delay time between the completion of failed requests, and the\n *   initiation of the subsequent retrying request.\n * @property {number} maxRetryDelayMillis - the maximum delay time, in\n *   milliseconds, between requests. When this value is reached,\n *   ``retryDelayMultiplier`` will no longer be used to increase delay time.\n * @property {number} initialRpcTimeoutMillis - the initial timeout parameter\n *   to the request.\n * @propetry {number} rpcTimeoutMultiplier - the multiplier by which to\n *   increase the timeout parameter between failed requests.\n * @property {number} maxRpcTimeoutMillis - the maximum timeout parameter, in\n *   milliseconds, for a request. When this value is reached,\n *   ``rpcTimeoutMultiplier`` will no longer be used to increase the timeout.\n * @property {number} totalTimeoutMillis - the total time, in milliseconds,\n *   starting from when the initial request is sent, after which an error will\n *   be returned, regardless of the retrying attempts made meanwhile.\n */\nexport interface BackoffSettings {\n  maxRetries?: number;\n  initialRetryDelayMillis: number;\n  retryDelayMultiplier: number;\n  maxRetryDelayMillis: number;\n  initialRpcTimeoutMillis?: number | null;\n  maxRpcTimeoutMillis?: number | null;\n  totalTimeoutMillis?: number | null;\n  rpcTimeoutMultiplier?: number | null;\n}\n\n/**\n * Parameter to configure bundling behavior.\n * @typedef {Object} BundleOptions\n * @property {number} elementCountThreshold -\n *   the bundled request will be sent once the count of outstanding elements\n *   in the repeated field reaches this value.\n * @property {number} elementCountLimit -\n *   represents a hard limit on the number of elements in the repeated field\n *   of the bundle; if adding a request to a bundle would exceed this value,\n *   the bundle is sent and the new request is added to a fresh bundle. It is\n *   invalid for a single request to exceed this limit.\n * @property {number} requestByteThreshold -\n *   the bundled request will be sent once the count of bytes in the request\n *   reaches this value. Note that this value is pessimistically approximated\n *   by summing the bytesizes of the elements in the repeated field, and\n *   therefore may be an under-approximation.\n * @property {number} requestByteLimit -\n *   represents a hard limit on the size of the bundled request; if adding\n *   a request to a bundle would exceed this value, the bundle is sent and\n *   the new request is added to a fresh bundle. It is invalid for a single\n *   request to exceed this limit. Note that this value is pessimistically\n *   approximated by summing the bytesizes of the elements in the repeated\n *   field, with a buffer applied to correspond to the resulting\n *   under-approximation.\n * @property {number} delayThreshold -\n *   the bundled request will be sent this amount of time after the first\n *   element in the bundle was added to it.\n */\n\nexport interface CallOptions {\n  timeout?: number;\n  retry?: RetryOptions | null;\n  autoPaginate?: boolean;\n  pageToken?: string;\n  pageSize?: number;\n  maxResults?: number;\n  maxRetries?: number;\n  // tslint:disable-next-line no-any\n  otherArgs?: {[index: string]: any};\n  bundleOptions?: BundleOptions | null;\n  isBundling?: boolean;\n  longrunning?: BackoffSettings;\n  promise?: PromiseConstructor;\n}\n\nexport class CallSettings {\n  timeout: number;\n  retry?: RetryOptions | null;\n  autoPaginate?: boolean;\n  pageToken?: string;\n  pageSize?: number;\n  maxResults?: number;\n  // tslint:disable-next-line no-any\n  otherArgs: {[index: string]: any};\n  bundleOptions?: BundleOptions | null;\n  isBundling: boolean;\n  longrunning?: BackoffSettings;\n  promise: PromiseConstructor;\n\n  /**\n   * @param {Object} settings - An object containing parameters of this settings.\n   * @param {number} settings.timeout - The client-side timeout for API calls.\n   *   This parameter is ignored for retrying calls.\n   * @param {RetryOptions} settings.retry - The configuration for retrying upon\n   *   transient error. If set to null, this call will not retry.\n   * @param {boolean} settings.autoPaginate - If there is no `pageDescriptor`,\n   *   this attrbute has no meaning. Otherwise, determines whether a page\n   * streamed response should make the page structure transparent to the user by\n   *   flattening the repeated field in the returned generator.\n   * @param {number} settings.pageToken - If there is no `pageDescriptor`,\n   *   this attribute has no meaning. Otherwise, determines the page token used\n   * in the page streaming request.\n   * @param {Object} settings.otherArgs - Additional arguments to be passed to\n   *   the API calls.\n   * @param {Function=} settings.promise - A constructor for a promise that\n   * implements the ES6 specification of promise. If not provided, native\n   * promises will be used.\n   *\n   * @constructor\n   */\n  constructor(settings?: CallOptions) {\n    settings = settings || {};\n    this.timeout = settings.timeout || 30 * 1000;\n    this.retry = settings.retry;\n    this.autoPaginate =\n      'autoPaginate' in settings ? settings.autoPaginate : true;\n    this.pageToken = settings.pageToken;\n    this.maxResults = settings.maxResults;\n    this.otherArgs = settings.otherArgs || {};\n    this.bundleOptions = settings.bundleOptions;\n    this.isBundling = 'isBundling' in settings ? settings.isBundling! : true;\n    this.longrunning =\n      'longrunning' in settings ? settings.longrunning : undefined;\n    this.promise = 'promise' in settings ? settings.promise! : Promise;\n  }\n\n  /**\n   * Returns a new CallSettings merged from this and a CallOptions object.\n   *\n   * @param {CallOptions} options - an instance whose values override\n   *   those in this object. If null, ``merge`` returns a copy of this\n   *   object\n   * @return {CallSettings} The merged CallSettings instance.\n   */\n  merge(options?: CallOptions | null) {\n    if (!options) {\n      return new CallSettings(this);\n    }\n    let timeout = this.timeout;\n    let retry = this.retry;\n    let autoPaginate = this.autoPaginate;\n    let pageToken = this.pageToken;\n    let pageSize = this.pageSize;\n    let maxResults = this.maxResults;\n    let otherArgs = this.otherArgs;\n    let isBundling = this.isBundling;\n    let longrunning = this.longrunning;\n    let promise = this.promise;\n    if ('timeout' in options) {\n      timeout = options.timeout!;\n    }\n    if ('retry' in options) {\n      retry = options.retry;\n    }\n\n    if ('autoPaginate' in options && !options.autoPaginate) {\n      autoPaginate = false;\n    }\n\n    if ('pageToken' in options) {\n      autoPaginate = false;\n      pageToken = options.pageToken;\n    }\n\n    if ('pageSize' in options) {\n      pageSize = options.pageSize;\n    }\n\n    if ('maxResults' in options) {\n      maxResults = options.maxResults;\n    }\n\n    if ('otherArgs' in options) {\n      otherArgs = {};\n      // tslint:disable-next-line forin\n      for (const key in this.otherArgs) {\n        otherArgs[key] = this.otherArgs[key];\n      }\n      // tslint:disable-next-line forin\n      for (const optionsKey in options.otherArgs!) {\n        otherArgs[optionsKey] = options.otherArgs![optionsKey];\n      }\n    }\n\n    if ('isBundling' in options) {\n      isBundling = options.isBundling!;\n    }\n\n    if ('maxRetries' in options) {\n      retry!.backoffSettings!.maxRetries = options.maxRetries;\n      delete retry!.backoffSettings!.totalTimeoutMillis;\n    }\n\n    if ('longrunning' in options) {\n      longrunning = options.longrunning;\n    }\n\n    if ('promise' in options) {\n      promise = options.promise!;\n    }\n\n    return new CallSettings({\n      timeout,\n      retry,\n      bundleOptions: this.bundleOptions,\n      longrunning,\n      autoPaginate,\n      pageToken,\n      pageSize,\n      maxResults,\n      otherArgs,\n      isBundling,\n      promise,\n    });\n  }\n}\n\n/**\n * Per-call configurable settings for retrying upon transient failure.\n *\n * @param {number[]} retryCodes - a list of Google API canonical error codes\n *   upon which a retry should be attempted.\n * @param {BackoffSettings} backoffSettings - configures the retry\n *   exponential backoff algorithm.\n * @return {RetryOptions} A new RetryOptions object.\n *\n */\nexport function createRetryOptions(\n  retryCodes: number[],\n  backoffSettings: BackoffSettings\n): RetryOptions {\n  return {\n    retryCodes,\n    backoffSettings,\n  };\n}\n\n/**\n * Parameters to the exponential backoff algorithm for retrying.\n *\n * @param {number} initialRetryDelayMillis - the initial delay time,\n *   in milliseconds, between the completion of the first failed request and the\n *   initiation of the first retrying request.\n * @param {number} retryDelayMultiplier - the multiplier by which to\n *   increase the delay time between the completion of failed requests, and the\n *   initiation of the subsequent retrying request.\n * @param {number} maxRetryDelayMillis - the maximum delay time, in\n *   milliseconds, between requests. When this value is reached,\n *   ``retryDelayMultiplier`` will no longer be used to increase delay time.\n * @param {number} initialRpcTimeoutMillis - the initial timeout parameter\n *   to the request.\n * @param {number} rpcTimeoutMultiplier - the multiplier by which to\n *   increase the timeout parameter between failed requests.\n * @param {number} maxRpcTimeoutMillis - the maximum timeout parameter, in\n *   milliseconds, for a request. When this value is reached,\n *   ``rpcTimeoutMultiplier`` will no longer be used to increase the timeout.\n * @param {number} totalTimeoutMillis - the total time, in milliseconds,\n *   starting from when the initial request is sent, after which an error will\n *   be returned, regardless of the retrying attempts made meanwhile.\n * @return {BackoffSettings} a new settings.\n *\n */\nexport function createBackoffSettings(\n  initialRetryDelayMillis: number,\n  retryDelayMultiplier: number,\n  maxRetryDelayMillis: number,\n  initialRpcTimeoutMillis: number | null,\n  rpcTimeoutMultiplier: number | null,\n  maxRpcTimeoutMillis: number | null,\n  totalTimeoutMillis: number | null\n): BackoffSettings {\n  return {\n    initialRetryDelayMillis,\n    retryDelayMultiplier,\n    maxRetryDelayMillis,\n    initialRpcTimeoutMillis,\n    rpcTimeoutMultiplier,\n    maxRpcTimeoutMillis,\n    totalTimeoutMillis,\n  };\n}\n\nexport function createDefaultBackoffSettings() {\n  return createBackoffSettings(100, 1.3, 60000, null, null, null, null);\n}\n\n/**\n * Parameters to the exponential backoff algorithm for retrying.\n * This function is unsupported, and intended for internal use only.\n *\n * @param {number} initialRetryDelayMillis - the initial delay time,\n *   in milliseconds, between the completion of the first failed request and the\n *   initiation of the first retrying request.\n * @param {number} retryDelayMultiplier - the multiplier by which to\n *   increase the delay time between the completion of failed requests, and the\n *   initiation of the subsequent retrying request.\n * @param {number} maxRetryDelayMillis - the maximum delay time, in\n *   milliseconds, between requests. When this value is reached,\n *   ``retryDelayMultiplier`` will no longer be used to increase delay time.\n * @param {number} initialRpcTimeoutMillis - the initial timeout parameter\n *   to the request.\n * @param {number} rpcTimeoutMultiplier - the multiplier by which to\n *   increase the timeout parameter between failed requests.\n * @param {number} maxRpcTimeoutMillis - the maximum timeout parameter, in\n *   milliseconds, for a request. When this value is reached,\n *   ``rpcTimeoutMultiplier`` will no longer be used to increase the timeout.\n * @param {number} maxRetries - the maximum number of retrying attempts that\n *   will be made. If reached, an error will be returned.\n * @return {BackoffSettings} a new settings.\n *\n */\nexport function createMaxRetriesBackoffSettings(\n  initialRetryDelayMillis: number,\n  retryDelayMultiplier: number,\n  maxRetryDelayMillis: number,\n  initialRpcTimeoutMillis: number,\n  rpcTimeoutMultiplier: number,\n  maxRpcTimeoutMillis: number,\n  maxRetries: number\n): BackoffSettings {\n  return {\n    initialRetryDelayMillis,\n    retryDelayMultiplier,\n    maxRetryDelayMillis,\n    initialRpcTimeoutMillis,\n    rpcTimeoutMultiplier,\n    maxRpcTimeoutMillis,\n    maxRetries,\n  };\n}\n\n/**\n * Creates a new {@link BundleOptions}.\n *\n * @private\n * @param {Object} options - An object to hold optional parameters. See\n *   properties for the content of options.\n * @return {BundleOptions} - A new options.\n */\nexport function createBundleOptions(options: BundlingConfig): BundleOptions {\n  const params = [\n    'element_count_threshold',\n    'element_count_limit',\n    'request_byte_threshold',\n    'request_byte_limit',\n    'delay_threshold_millis',\n  ];\n  params.forEach(param => {\n    if (param in options && typeof options[param] !== 'number') {\n      throw new Error(`${param} should be a number`);\n    }\n  });\n\n  const elementCountThreshold = options.element_count_threshold || 0;\n  const elementCountLimit = options.element_count_limit || 0;\n  const requestByteThreshold = options.request_byte_threshold || 0;\n  const requestByteLimit = options.request_byte_limit || 0;\n  const delayThreshold = options.delay_threshold_millis || 0;\n\n  if (\n    elementCountThreshold === 0 &&\n    requestByteThreshold === 0 &&\n    delayThreshold === 0\n  ) {\n    throw new Error('one threshold should be > 0');\n  }\n  return {\n    elementCountThreshold,\n    elementCountLimit,\n    requestByteThreshold,\n    requestByteLimit,\n    delayThreshold,\n  };\n}\n\n/**\n * Helper for {@link constructSettings}\n *\n * @private\n *\n * @param {Object} methodConfig - A dictionary representing a single\n *   `methods` entry of the standard API client config file. (See\n *   {@link constructSettings} for information on this yaml.)\n * @param {?Object} retryCodes - A dictionary parsed from the\n *   `retry_codes_def` entry of the standard API client config\n *   file. (See {@link constructSettings} for information on this yaml.)\n * @param {Object} retryParams - A dictionary parsed from the\n *   `retry_params` entry of the standard API client config\n *   file. (See {@link constructSettings} for information on this yaml.)\n * @param {Object} retryNames - A dictionary mapping the string names\n *   used in the standard API client config file to API response\n *   status codes.\n * @return {?RetryOptions} The new retry options.\n */\nfunction constructRetry(\n  methodConfig: MethodConfig,\n  retryCodes: {[index: string]: string[]},\n  retryParams: {[index: string]: {}},\n  retryNames: {[index: string]: {}}\n): RetryOptions | null | undefined {\n  if (!methodConfig) {\n    return null;\n  }\n\n  let codes: number[] | null = null;\n  if (retryCodes && 'retry_codes_name' in methodConfig) {\n    const retryCodesName = methodConfig['retry_codes_name'];\n    codes = (retryCodes[retryCodesName] || []).map(name => {\n      return Number(retryNames[name]);\n    });\n  }\n\n  let backoffSettings: BackoffSettings | null = null;\n  if (retryParams && 'retry_params_name' in methodConfig) {\n    const params = retryParams[\n      methodConfig.retry_params_name\n    ] as RetryParamsConfig;\n    backoffSettings = createBackoffSettings(\n      params.initial_retry_delay_millis,\n      params.retry_delay_multiplier,\n      params.max_retry_delay_millis,\n      params.initial_rpc_timeout_millis,\n      params.rpc_timeout_multiplier,\n      params.max_rpc_timeout_millis,\n      params.total_timeout_millis\n    );\n  }\n  return createRetryOptions(codes!, backoffSettings!);\n}\n\n/**\n * Helper for {@link constructSettings}\n *\n * Takes two retry options, and merges them into a single RetryOption instance.\n *\n * @private\n *\n * @param {RetryOptions} retry - The base RetryOptions.\n * @param {RetryOptions} overrides - The RetryOptions used for overriding\n *   `retry`. Use the values if it is not null. If entire `overrides` is null,\n *   ignore the base retry and return null.\n * @return {?RetryOptions} The merged RetryOptions.\n */\nfunction mergeRetryOptions(\n  retry: RetryOptions,\n  overrides: RetryOptions\n): RetryOptions | null {\n  if (!overrides) {\n    return null;\n  }\n\n  if (!overrides.retryCodes && !overrides.backoffSettings) {\n    return retry;\n  }\n\n  let codes = retry.retryCodes;\n  if (overrides.retryCodes) {\n    codes = overrides.retryCodes;\n  }\n  let backoffSettings = retry.backoffSettings;\n  if (overrides.backoffSettings) {\n    backoffSettings = overrides.backoffSettings;\n  }\n  return createRetryOptions(codes, backoffSettings);\n}\n\nexport interface ServiceConfig {\n  retry_codes: {[index: string]: string[]};\n  retry_params: {[index: string]: RetryParamsConfig};\n  methods: {[index: string]: MethodConfig};\n}\n\nexport interface RetryParamsConfig {\n  initial_retry_delay_millis: number;\n  retry_delay_multiplier: number;\n  max_retry_delay_millis: number;\n  initial_rpc_timeout_millis: number;\n  rpc_timeout_multiplier: number;\n  max_rpc_timeout_millis: number;\n  total_timeout_millis: number;\n}\n\nexport interface MethodConfig {\n  retry_codes_name: string;\n  retry_params_name: string;\n  bundling?: BundlingConfig;\n  timeout_millis?: number;\n}\n\nexport interface BundlingConfig {\n  [index: string]: number;\n  element_count_threshold: number;\n  element_count_limit: number;\n  request_byte_threshold: number;\n  request_byte_limit: number;\n  delay_threshold_millis: number;\n}\n\nexport interface ClientConfig {\n  interfaces?: {[index: string]: ServiceConfig};\n}\n\n/**\n * Constructs a dictionary mapping method names to {@link CallSettings}.\n *\n * The `clientConfig` parameter is parsed from a client configuration JSON\n * file of the form:\n *\n *     {\n *       \"interfaces\": {\n *         \"google.fake.v1.ServiceName\": {\n *           \"retry_codes\": {\n *             \"idempotent\": [\"UNAVAILABLE\", \"DEADLINE_EXCEEDED\"],\n *             \"non_idempotent\": []\n *           },\n *           \"retry_params\": {\n *             \"default\": {\n *               \"initial_retry_delay_millis\": 100,\n *               \"retry_delay_multiplier\": 1.2,\n *               \"max_retry_delay_millis\": 1000,\n *               \"initial_rpc_timeout_millis\": 2000,\n *               \"rpc_timeout_multiplier\": 1.5,\n *               \"max_rpc_timeout_millis\": 30000,\n *               \"total_timeout_millis\": 45000\n *             }\n *           },\n *           \"methods\": {\n *             \"CreateFoo\": {\n *               \"retry_codes_name\": \"idempotent\",\n *               \"retry_params_name\": \"default\"\n *             },\n *             \"Publish\": {\n *               \"retry_codes_name\": \"non_idempotent\",\n *               \"retry_params_name\": \"default\",\n *               \"bundling\": {\n *                 \"element_count_threshold\": 40,\n *                 \"element_count_limit\": 200,\n *                 \"request_byte_threshold\": 90000,\n *                 \"request_byte_limit\": 100000,\n *                 \"delay_threshold_millis\": 100\n *               }\n *             }\n *           }\n *         }\n *       }\n *     }\n *\n * @param {String} serviceName - The fully-qualified name of this\n *   service, used as a key into the client config file (in the\n *   example above, this value should be 'google.fake.v1.ServiceName').\n * @param {Object} clientConfig - A dictionary parsed from the\n *   standard API client config file.\n * @param {Object} configOverrides - A dictionary in the same structure of\n *   client_config to override the settings.\n * @param {Object.} retryNames - A dictionary mapping the strings\n *   referring to response status codes to objects representing\n *   those codes.\n * @param {Object} otherArgs - the non-request arguments to be passed to the API\n *   calls.\n * @param {Function=} promise - A constructor for a promise that implements the\n * ES6 specification of promise. If not provided, native promises will be used.\n * @return {Object} A mapping from method name to CallSettings, or null if the\n *   service is not found in the config.\n */\nexport function constructSettings(\n  serviceName: string,\n  clientConfig: ClientConfig,\n  configOverrides: ClientConfig,\n  retryNames: {},\n  otherArgs?: {},\n  promise?: PromiseConstructor\n) {\n  otherArgs = otherArgs || {};\n  // tslint:disable-next-line no-any\n  const defaults: any = {};\n\n  const serviceConfig = (clientConfig.interfaces || {})[serviceName];\n  if (!serviceConfig) {\n    return null;\n  }\n\n  const overrides = (configOverrides.interfaces || {})[serviceName] || {};\n  const methods = serviceConfig.methods;\n  const overridingMethods = overrides.methods || {};\n  // tslint:disable-next-line forin\n  for (const methodName in methods) {\n    const methodConfig = methods[methodName];\n    const jsName = methodName[0].toLowerCase() + methodName.slice(1);\n\n    let retry = constructRetry(\n      methodConfig,\n      serviceConfig.retry_codes,\n      serviceConfig.retry_params,\n      retryNames\n    );\n    let bundlingConfig = methodConfig.bundling;\n    let timeout = methodConfig.timeout_millis;\n    if (methodName in overridingMethods) {\n      const overridingMethod = overridingMethods[methodName];\n      if (overridingMethod) {\n        if ('bundling' in overridingMethod) {\n          bundlingConfig = overridingMethod.bundling;\n        }\n        if ('timeout_millis' in overridingMethod) {\n          timeout = overridingMethod.timeout_millis;\n        }\n      }\n      retry = mergeRetryOptions(\n        retry!,\n        constructRetry(\n          overridingMethod,\n          overrides.retry_codes,\n          overrides.retry_params,\n          retryNames\n        )!\n      );\n    }\n\n    defaults[jsName] = new CallSettings({\n      timeout,\n      retry,\n      bundleOptions: bundlingConfig\n        ? createBundleOptions(bundlingConfig)\n        : null,\n      otherArgs,\n      promise: promise || Promise,\n    });\n  }\n\n  return defaults;\n}\n\n    \n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/NormalApiCaller.html":{"url":"classes/NormalApiCaller.html","title":"class - NormalApiCaller","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  NormalApiCaller\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/normalCalls/normalApiCaller.ts\n        \n\n            \n                Description\n            \n            \n                Creates an API caller for regular unary methods.\n\n            \n\n\n            \n                Implements\n            \n            \n                            APICaller\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                call\n                            \n                            \n                                fail\n                            \n                            \n                                init\n                            \n                            \n                                result\n                            \n                            \n                                wrap\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            call\n                        \n                        \n                    \n                \n            \n            \n                \ncall(apiCall: SimpleCallbackFunction, argument: literal type, settings: literal type, canceller: OngoingCallPromise)\n                \n            \n\n\n            \n                \n                    Defined in src/normalCalls/normalApiCaller.ts:54\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    apiCall\n                                    \n                                                SimpleCallbackFunction\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    argument\n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    settings\n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    canceller\n                                    \n                                                OngoingCallPromise\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            fail\n                        \n                        \n                    \n                \n            \n            \n                \nfail(canceller: OngoingCallPromise, err: GoogleError)\n                \n            \n\n\n            \n                \n                    Defined in src/normalCalls/normalApiCaller.ts:63\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    canceller\n                                    \n                                                OngoingCallPromise\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    err\n                                    \n                                                GoogleError\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            init\n                        \n                        \n                    \n                \n            \n            \n                \ninit(settings: ApiCallerSettings, callback?: APICallback)\n                \n            \n\n\n            \n                \n                    Defined in src/normalCalls/normalApiCaller.ts:40\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    settings\n                                    \n                                                ApiCallerSettings\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    callback\n                                    \n                                                APICallback\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     OngoingCallPromise | OngoingCall\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            result\n                        \n                        \n                    \n                \n            \n            \n                \nresult(canceller: OngoingCallPromise)\n                \n            \n\n\n            \n                \n                    Defined in src/normalCalls/normalApiCaller.ts:67\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    canceller\n                                    \n                                                OngoingCallPromise\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            wrap\n                        \n                        \n                    \n                \n            \n            \n                \nwrap(func: GRPCCall)\n                \n            \n\n\n            \n                \n                    Defined in src/normalCalls/normalApiCaller.ts:50\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    func\n                                    \n                                                GRPCCall\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         GRPCCall\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {APICaller, ApiCallerSettings} from '../apiCaller';\nimport {APICallback, GRPCCall, SimpleCallbackFunction} from '../apitypes';\nimport {OngoingCall, OngoingCallPromise} from '../call';\nimport {GoogleError} from '../googleError';\n\n/**\n * Creates an API caller for regular unary methods.\n */\nexport class NormalApiCaller implements APICaller {\n  init(\n    settings: ApiCallerSettings,\n    callback?: APICallback\n  ): OngoingCallPromise | OngoingCall {\n    if (callback) {\n      return new OngoingCall(callback);\n    }\n    return new OngoingCallPromise(settings.promise);\n  }\n\n  wrap(func: GRPCCall): GRPCCall {\n    return func;\n  }\n\n  call(\n    apiCall: SimpleCallbackFunction,\n    argument: {},\n    settings: {},\n    canceller: OngoingCallPromise\n  ): void {\n    canceller.call(apiCall, argument);\n  }\n\n  fail(canceller: OngoingCallPromise, err: GoogleError): void {\n    canceller.callback!(err);\n  }\n\n  result(canceller: OngoingCallPromise) {\n    return canceller.promise;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/OngoingCall.html":{"url":"classes/OngoingCall.html","title":"class - OngoingCall","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  OngoingCall\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/call.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                callback\n                            \n                            \n                                    Optional\n                                cancelFunc\n                            \n                            \n                                completed\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                call\n                            \n                            \n                                cancel\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(callback?: APICallback)\n                    \n                \n                        \n                            \n                                Defined in src/call.ts:48\n                            \n                        \n\n                \n                    \n                            OngoingCall manages callback, API calls, and cancellation\nof the API calls.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        callback\n                                                  \n                                                        \n                                                                        APICallback\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                        \n                                                                The callback to be called asynchronously when the API call\nfinishes.\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            callback\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         APICallback\n\n                        \n                    \n                        \n                            \n                                    Defined in src/call.ts:46\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            cancelFunc\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         function\n\n                        \n                    \n                        \n                            \n                                    Defined in src/call.ts:47\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            completed\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                        \n                            \n                                    Defined in src/call.ts:48\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            call\n                        \n                        \n                    \n                \n            \n            \n                \ncall(func: SimpleCallbackFunction, argument: RequestType)\n                \n            \n\n\n            \n                \n                    Defined in src/call.ts:92\n                \n            \n\n\n            \n                \n                    Call calls the specified function. Result will be used to fulfill\nthe promise.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    func\n                                    \n                                                SimpleCallbackFunction\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        A function for an API call.\n\n                                    \n                                \n                                \n                                    argument\n                                    \n                                                RequestType\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        A request object.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            cancel\n                        \n                        \n                    \n                \n            \n            \n                \ncancel()\n                \n            \n\n\n            \n                \n                    Defined in src/call.ts:69\n                \n            \n\n\n            \n                \n                    Cancels the ongoing promise.\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {status} from '@grpc/grpc-js';\n\nimport {\n  APICallback,\n  NextPageRequestType,\n  RawResponseType,\n  RequestType,\n  ResponseType,\n  ResultTuple,\n  SimpleCallbackFunction,\n} from './apitypes';\nimport {GoogleError} from './googleError';\n\nexport class OngoingCall {\n  callback?: APICallback;\n  cancelFunc?: () => void;\n  completed: boolean;\n\n  /**\n   * OngoingCall manages callback, API calls, and cancellation\n   * of the API calls.\n   * @param {APICallback=} callback\n   *   The callback to be called asynchronously when the API call\n   *   finishes.\n   * @constructor\n   * @property {APICallback} callback\n   *   The callback function to be called.\n   * @private\n   */\n  constructor(callback?: APICallback) {\n    this.callback = callback;\n    this.completed = false;\n  }\n\n  /**\n   * Cancels the ongoing promise.\n   */\n  cancel(): void {\n    if (this.completed) {\n      return;\n    }\n    this.completed = true;\n    if (this.cancelFunc) {\n      this.cancelFunc();\n    } else {\n      const error = new GoogleError('cancelled');\n      error.code = status.CANCELLED;\n      this.callback!(error);\n    }\n  }\n\n  /**\n   * Call calls the specified function. Result will be used to fulfill\n   * the promise.\n   *\n   * @param {SimpleCallbackFunction} func\n   *   A function for an API call.\n   * @param {Object} argument\n   *   A request object.\n   */\n  call(func: SimpleCallbackFunction, argument: RequestType): void {\n    if (this.completed) {\n      return;\n    }\n    // tslint:disable-next-line no-any\n    const canceller = func(argument, (...args: any[]) => {\n      this.completed = true;\n      setImmediate(this.callback!, ...args);\n    });\n    this.cancelFunc = () => canceller.cancel();\n  }\n}\n\nexport interface CancellablePromise extends Promise {\n  cancel(): void;\n}\n\nexport class OngoingCallPromise extends OngoingCall {\n  promise: CancellablePromise;\n  /**\n   * GaxPromise is GRPCCallbackWrapper, but it holds a promise when\n   * the API call finishes.\n   * @param {Function} PromiseCtor - A constructor for a promise that implements\n   * the ES6 specification of promise.\n   * @constructor\n   * @private\n   */\n  // tslint:disable-next-line variable-name\n  constructor(PromiseCtor: PromiseConstructor) {\n    super();\n    this.promise = new PromiseCtor((resolve, reject) => {\n      this.callback = (\n        err: GoogleError | null,\n        response?: ResponseType,\n        next?: NextPageRequestType | null,\n        rawResponse?: RawResponseType\n      ) => {\n        if (err) {\n          reject(err);\n        } else if (response !== undefined) {\n          resolve([response, next, rawResponse]);\n        } else {\n          throw new GoogleError('Neither error nor response are defined');\n        }\n      };\n    }) as CancellablePromise;\n    this.promise.cancel = () => {\n      this.cancel();\n    };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/OngoingCallPromise.html":{"url":"classes/OngoingCallPromise.html","title":"class - OngoingCallPromise","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  OngoingCallPromise\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/call.ts\n        \n\n\n            \n                Extends\n            \n            \n                        OngoingCall\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                promise\n                            \n                            \n                                    Optional\n                                callback\n                            \n                            \n                                    Optional\n                                cancelFunc\n                            \n                            \n                                completed\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                call\n                            \n                            \n                                cancel\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(PromiseCtor: PromiseConstructor)\n                    \n                \n                        \n                            \n                                Defined in src/call.ts:110\n                            \n                        \n\n                \n                    \n                            GaxPromise is GRPCCallbackWrapper, but it holds a promise when\nthe API call finishes.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        PromiseCtor\n                                                  \n                                                        \n                                                                    PromiseConstructor\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nA constructor for a promise that implements\nthe ES6 specification of promise.\n\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            promise\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         CancellablePromise\n\n                        \n                    \n                        \n                            \n                                    Defined in src/call.ts:110\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            callback\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         APICallback\n\n                        \n                    \n                            \n                                \n                                    Inherited from         OngoingCall\n\n                                \n                            \n                        \n                            \n                                    Defined in         OngoingCall:46\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            cancelFunc\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         function\n\n                        \n                    \n                            \n                                \n                                    Inherited from         OngoingCall\n\n                                \n                            \n                        \n                            \n                                    Defined in         OngoingCall:47\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            completed\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                            \n                                \n                                    Inherited from         OngoingCall\n\n                                \n                            \n                        \n                            \n                                    Defined in         OngoingCall:48\n\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            call\n                        \n                        \n                    \n                \n            \n            \n                \ncall(func: SimpleCallbackFunction, argument: RequestType)\n                \n            \n\n\n            \n                \n                    Inherited from         OngoingCall\n\n                \n            \n            \n                \n                        Defined in         OngoingCall:92\n\n                \n            \n\n\n            \n                \n                    Call calls the specified function. Result will be used to fulfill\nthe promise.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    func\n                                    \n                                                SimpleCallbackFunction\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        A function for an API call.\n\n                                    \n                                \n                                \n                                    argument\n                                    \n                                                RequestType\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        A request object.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            cancel\n                        \n                        \n                    \n                \n            \n            \n                \ncancel()\n                \n            \n\n\n            \n                \n                    Inherited from         OngoingCall\n\n                \n            \n            \n                \n                        Defined in         OngoingCall:69\n\n                \n            \n\n\n            \n                \n                    Cancels the ongoing promise.\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {status} from '@grpc/grpc-js';\n\nimport {\n  APICallback,\n  NextPageRequestType,\n  RawResponseType,\n  RequestType,\n  ResponseType,\n  ResultTuple,\n  SimpleCallbackFunction,\n} from './apitypes';\nimport {GoogleError} from './googleError';\n\nexport class OngoingCall {\n  callback?: APICallback;\n  cancelFunc?: () => void;\n  completed: boolean;\n\n  /**\n   * OngoingCall manages callback, API calls, and cancellation\n   * of the API calls.\n   * @param {APICallback=} callback\n   *   The callback to be called asynchronously when the API call\n   *   finishes.\n   * @constructor\n   * @property {APICallback} callback\n   *   The callback function to be called.\n   * @private\n   */\n  constructor(callback?: APICallback) {\n    this.callback = callback;\n    this.completed = false;\n  }\n\n  /**\n   * Cancels the ongoing promise.\n   */\n  cancel(): void {\n    if (this.completed) {\n      return;\n    }\n    this.completed = true;\n    if (this.cancelFunc) {\n      this.cancelFunc();\n    } else {\n      const error = new GoogleError('cancelled');\n      error.code = status.CANCELLED;\n      this.callback!(error);\n    }\n  }\n\n  /**\n   * Call calls the specified function. Result will be used to fulfill\n   * the promise.\n   *\n   * @param {SimpleCallbackFunction} func\n   *   A function for an API call.\n   * @param {Object} argument\n   *   A request object.\n   */\n  call(func: SimpleCallbackFunction, argument: RequestType): void {\n    if (this.completed) {\n      return;\n    }\n    // tslint:disable-next-line no-any\n    const canceller = func(argument, (...args: any[]) => {\n      this.completed = true;\n      setImmediate(this.callback!, ...args);\n    });\n    this.cancelFunc = () => canceller.cancel();\n  }\n}\n\nexport interface CancellablePromise extends Promise {\n  cancel(): void;\n}\n\nexport class OngoingCallPromise extends OngoingCall {\n  promise: CancellablePromise;\n  /**\n   * GaxPromise is GRPCCallbackWrapper, but it holds a promise when\n   * the API call finishes.\n   * @param {Function} PromiseCtor - A constructor for a promise that implements\n   * the ES6 specification of promise.\n   * @constructor\n   * @private\n   */\n  // tslint:disable-next-line variable-name\n  constructor(PromiseCtor: PromiseConstructor) {\n    super();\n    this.promise = new PromiseCtor((resolve, reject) => {\n      this.callback = (\n        err: GoogleError | null,\n        response?: ResponseType,\n        next?: NextPageRequestType | null,\n        rawResponse?: RawResponseType\n      ) => {\n        if (err) {\n          reject(err);\n        } else if (response !== undefined) {\n          resolve([response, next, rawResponse]);\n        } else {\n          throw new GoogleError('Neither error nor response are defined');\n        }\n      };\n    }) as CancellablePromise;\n    this.promise.cancel = () => {\n      this.cancel();\n    };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Operation.html":{"url":"classes/Operation.html","title":"class - Operation","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Operation\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/longRunningCalls/longrunning.ts\n        \n\n\n            \n                Extends\n            \n            \n                        EventEmitter\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                _callOptions\n                            \n                            \n                                backoffSettings\n                            \n                            \n                                completeListeners\n                            \n                            \n                                    Optional\n                                currentCallPromise_\n                            \n                            \n                                    Optional\n                                done\n                            \n                            \n                                    Optional\n                                error\n                            \n                            \n                                hasActiveListeners\n                            \n                            \n                                latestResponse\n                            \n                            \n                                longrunningDescriptor\n                            \n                            \n                                metadata\n                            \n                            \n                                    Optional\n                                name\n                            \n                            \n                                    Optional\n                                response\n                            \n                            \n                                result\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                _listenForEvents\n                            \n                            \n                                _unpackResponse\n                            \n                            \n                                cancel\n                            \n                            \n                                getOperation\n                            \n                            \n                                getOperation\n                            \n                            \n                                getOperation\n                            \n                            \n                                promise\n                            \n                            \n                                startPolling_\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(grpcOp: Operation, longrunningDescriptor: LongRunningDescriptor, backoffSettings: BackoffSettings, callOptions?: CallOptions)\n                    \n                \n                        \n                            \n                                Defined in src/longRunningCalls/longrunning.ts:72\n                            \n                        \n\n                \n                    \n                            Wrapper for a google.longrunnung.Operation.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        grpcOp\n                                                  \n                                                        \n                                                                        Operation\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nThe operation to be wrapped.\n\n\n                                                        \n                                                \n                                                \n                                                        longrunningDescriptor\n                                                  \n                                                        \n                                                                        LongRunningDescriptor\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nThis defines the\noperations service client and unpacking mechanisms for the operation.\n\n\n                                                        \n                                                \n                                                \n                                                        backoffSettings\n                                                  \n                                                        \n                                                                        BackoffSettings\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nThe backoff settings used in\nin polling the operation.\n\n\n                                                        \n                                                \n                                                \n                                                        callOptions\n                                                  \n                                                        \n                                                                        CallOptions\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                        \n                                                                \nCallOptions used in making get operation\nrequests.\n\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            _callOptions\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         CallOptions\n\n                        \n                    \n                        \n                            \n                                    Defined in src/longRunningCalls/longrunning.ts:67\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            backoffSettings\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         BackoffSettings\n\n                        \n                    \n                        \n                            \n                                    Defined in src/longRunningCalls/longrunning.ts:66\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            completeListeners\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                        \n                            \n                                    Defined in src/longRunningCalls/longrunning.ts:60\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            currentCallPromise_\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         CancellablePromise\n\n                        \n                    \n                        \n                            \n                                    Defined in src/longRunningCalls/longrunning.ts:68\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            done\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                        \n                            \n                                    Defined in src/longRunningCalls/longrunning.ts:70\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            error\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         GoogleError\n\n                        \n                    \n                        \n                            \n                                    Defined in src/longRunningCalls/longrunning.ts:71\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            hasActiveListeners\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                        \n                            \n                                    Defined in src/longRunningCalls/longrunning.ts:61\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            latestResponse\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Operation\n\n                        \n                    \n                        \n                            \n                                    Defined in src/longRunningCalls/longrunning.ts:62\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            longrunningDescriptor\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         LongRunningDescriptor\n\n                        \n                    \n                        \n                            \n                                    Defined in src/longRunningCalls/longrunning.ts:63\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            metadata\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Metadata | null\n\n                        \n                    \n                        \n                            \n                                    Defined in src/longRunningCalls/longrunning.ts:65\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            name\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/longRunningCalls/longrunning.ts:69\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            response\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     literal type\n\n                        \n                    \n                        \n                            \n                                    Defined in src/longRunningCalls/longrunning.ts:72\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            result\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     literal type | null\n\n                        \n                    \n                        \n                            \n                                    Defined in src/longRunningCalls/longrunning.ts:64\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            _listenForEvents\n                        \n                        \n                    \n                \n            \n            \n                \n_listenForEvents()\n                \n            \n\n\n            \n                \n                    Defined in src/longRunningCalls/longrunning.ts:116\n                \n            \n\n\n            \n                \n                    Begin listening for events on the operation. This method keeps track of how\nmany \"complete\" listeners are registered and removed, making sure polling\nis handled automatically.\nAs long as there is one active \"complete\" listener, the connection is open.\nWhen there are no more listeners, the polling stops.\n\n\n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            _unpackResponse\n                        \n                        \n                    \n                \n            \n            \n                \n_unpackResponse(op: Operation, callback?: GetOperationCallback)\n                \n            \n\n\n            \n                \n                    Defined in src/longRunningCalls/longrunning.ts:211\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    op\n                                    \n                                                Operation\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    callback\n                                    \n                                                GetOperationCallback\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            cancel\n                        \n                        \n                    \n                \n            \n            \n                \ncancel()\n                \n            \n\n\n            \n                \n                    Defined in src/longRunningCalls/longrunning.ts:141\n                \n            \n\n\n            \n                \n                    Cancels current polling api call and cancels the operation.\n\n\n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        the promise of the OperationsClient#cancelOperation api\nrequest.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getOperation\n                        \n                        \n                    \n                \n            \n            \n                \ngetOperation()\n                \n            \n\n\n            \n                \n                    Defined in src/longRunningCalls/longrunning.ts:167\n                \n            \n\n\n            \n                \n                    Get the updated status of the operation. If the Operation has previously\ncompleted, this will use the status of the cached completed operation.\n\ncallback(err): Operation failed\ncallback(null, result, metadata, rawResponse): Operation complete\ncallback(null, null, metadata, rawResponse): Operation incomplete\n\n\n\n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \nThis returns a promise if a callback is not specified.\nThe promise resolves to an array where the first element is the unpacked\nresult, the second element is the metadata, and the third element is the\nraw response of the api call. The promise rejects if the operation returns\nan error.\n\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getOperation\n                        \n                        \n                    \n                \n            \n            \n                \ngetOperation(callback: GetOperationCallback)\n                \n            \n\n\n            \n                \n                    Defined in src/longRunningCalls/longrunning.ts:168\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    callback\n                                    \n                                                GetOperationCallback\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getOperation\n                        \n                        \n                    \n                \n            \n            \n                \ngetOperation(callback?: GetOperationCallback)\n                \n            \n\n\n            \n                \n                    Defined in src/longRunningCalls/longrunning.ts:169\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    callback\n                                    \n                                                GetOperationCallback\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise | void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            promise\n                        \n                        \n                    \n                \n            \n            \n                \npromise()\n                \n            \n\n\n            \n                \n                    Defined in src/longRunningCalls/longrunning.ts:332\n                \n            \n\n\n            \n                \n                    Wraps the complete and error events in a Promise.\n\n\n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \nPromise that resolves on operation completion and rejects\non operation error.\n\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            startPolling_\n                        \n                        \n                    \n                \n            \n            \n                \nstartPolling_()\n                \n            \n\n\n            \n                \n                    Defined in src/longRunningCalls/longrunning.ts:251\n                \n            \n\n\n            \n                \n                    Poll getOperation to check the operation's status. This runs a loop to\nping using the backoff strategy specified at initialization.\nNote: This method is automatically called once a \"complete\" event handler\nis registered on the operation.\n\n\n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {EventEmitter} from 'events';\nimport {status} from '@grpc/grpc-js';\n\nimport {GaxCallPromise, ResultTuple} from '../apitypes';\nimport {CancellablePromise} from '../call';\nimport {BackoffSettings, CallOptions} from '../gax';\nimport {GoogleError} from '../googleError';\nimport {Metadata, MetadataValue} from '../grpc';\n\nimport {LongRunningDescriptor} from './longRunningDescriptor';\n\n/**\n * @callback GetOperationCallback\n * @param {?Error} error\n * @param {?Object} result\n * @param {?Object} metadata\n * @param {?google.longrunning.Operation} rawResponse\n */\nexport interface GetOperationCallback {\n  (\n    err?: Error | null,\n    result?: {},\n    metadata?: {},\n    rawResponse?: Operation\n  ): void;\n}\n\nexport class Operation extends EventEmitter {\n  completeListeners: number;\n  hasActiveListeners: boolean;\n  latestResponse: Operation;\n  longrunningDescriptor: LongRunningDescriptor;\n  result: {} | null;\n  metadata: Metadata | null;\n  backoffSettings: BackoffSettings;\n  _callOptions?: CallOptions;\n  currentCallPromise_?: CancellablePromise;\n  name?: string;\n  done?: boolean;\n  error?: GoogleError;\n  response?: {value: {}};\n\n  /**\n   * Wrapper for a google.longrunnung.Operation.\n   *\n   * @constructor\n   *\n   * @param {google.longrunning.Operation} grpcOp - The operation to be wrapped.\n   * @param {LongRunningDescriptor} longrunningDescriptor - This defines the\n   * operations service client and unpacking mechanisms for the operation.\n   * @param {BackoffSettings} backoffSettings - The backoff settings used in\n   * in polling the operation.\n   * @param {CallOptions} callOptions - CallOptions used in making get operation\n   * requests.\n   */\n  constructor(\n    grpcOp: Operation,\n    longrunningDescriptor: LongRunningDescriptor,\n    backoffSettings: BackoffSettings,\n    callOptions?: CallOptions\n  ) {\n    super();\n    this.completeListeners = 0;\n    this.hasActiveListeners = false;\n    this.latestResponse = grpcOp;\n    this.longrunningDescriptor = longrunningDescriptor;\n    this.result = null;\n    this.metadata = null;\n    this.backoffSettings = backoffSettings;\n    this._unpackResponse(grpcOp);\n    this._listenForEvents();\n    this._callOptions = callOptions;\n  }\n\n  /**\n   * Begin listening for events on the operation. This method keeps track of how\n   * many \"complete\" listeners are registered and removed, making sure polling\n   * is handled automatically.\n   *\n   * As long as there is one active \"complete\" listener, the connection is open.\n   * When there are no more listeners, the polling stops.\n   *\n   * @private\n   */\n  _listenForEvents() {\n    this.on('newListener', event => {\n      if (event === 'complete') {\n        this.completeListeners++;\n\n        if (!this.hasActiveListeners) {\n          this.hasActiveListeners = true;\n          this.startPolling_();\n        }\n      }\n    });\n\n    this.on('removeListener', event => {\n      if (event === 'complete' && --this.completeListeners === 0) {\n        this.hasActiveListeners = false;\n      }\n    });\n  }\n\n  /**\n   * Cancels current polling api call and cancels the operation.\n   *\n   * @return {Promise} the promise of the OperationsClient#cancelOperation api\n   * request.\n   */\n  cancel() {\n    if (this.currentCallPromise_) {\n      this.currentCallPromise_.cancel();\n    }\n    const operationsClient = this.longrunningDescriptor.operationsClient;\n    return operationsClient.cancelOperation({\n      name: this.latestResponse.name,\n    }) as CancellablePromise;\n  }\n\n  /**\n   * Get the updated status of the operation. If the Operation has previously\n   * completed, this will use the status of the cached completed operation.\n   *\n   *   - callback(err): Operation failed\n   *   - callback(null, result, metadata, rawResponse): Operation complete\n   *   - callback(null, null, metadata, rawResponse): Operation incomplete\n   *\n   * @param {getOperationCallback} callback - Callback to handle the polled\n   * operation result and metadata.\n   * @return {Promise|undefined} - This returns a promise if a callback is not specified.\n   * The promise resolves to an array where the first element is the unpacked\n   * result, the second element is the metadata, and the third element is the\n   * raw response of the api call. The promise rejects if the operation returns\n   * an error.\n   */\n  getOperation(): Promise;\n  getOperation(callback: GetOperationCallback): void;\n  getOperation(callback?: GetOperationCallback): Promise | void {\n    const self = this;\n    const operationsClient = this.longrunningDescriptor.operationsClient;\n\n    function promisifyResponse() {\n      if (!callback) {\n        // tslint:disable-next-line variable-name\n        const PromiseCtor = self._callOptions!.promise!;\n        return new PromiseCtor((resolve, reject) => {\n          if (self.latestResponse.error) {\n            const error = new GoogleError(self.latestResponse.error.message);\n            error.code = self.latestResponse.error.code;\n            reject(error);\n          } else {\n            resolve([self.result, self.metadata, self.latestResponse]);\n          }\n        });\n      }\n      return;\n    }\n\n    if (this.latestResponse.done) {\n      this._unpackResponse(this.latestResponse, callback);\n      return promisifyResponse();\n    }\n\n    this.currentCallPromise_ = (operationsClient.getOperation as GaxCallPromise)(\n      {name: this.latestResponse.name},\n      this._callOptions!\n    );\n\n    const noCallbackPromise = this.currentCallPromise_!.then(responses => {\n      self.latestResponse = responses[0] as Operation;\n      self._unpackResponse(responses[0] as Operation, callback);\n      return promisifyResponse()!;\n    });\n\n    if (!callback) {\n      return noCallbackPromise;\n    }\n  }\n\n  _unpackResponse(op: Operation, callback?: GetOperationCallback) {\n    const responseDecoder = this.longrunningDescriptor.responseDecoder;\n    const metadataDecoder = this.longrunningDescriptor.metadataDecoder;\n    let response: {};\n    let metadata: Metadata;\n\n    if (op.done) {\n      if (op.result === 'error') {\n        const error = new GoogleError(op.error!.message);\n        error.code = op.error!.code;\n        if (callback) {\n          callback(error);\n        }\n        return;\n      }\n\n      if (responseDecoder && op.response) {\n        response = responseDecoder(op.response.value);\n        this.result = response;\n      }\n    }\n\n    if (metadataDecoder && op.metadata) {\n      metadata = metadataDecoder(op.metadata.value);\n      this.metadata = metadata;\n    }\n    if (callback) {\n      callback(null, response!, metadata!, op);\n    }\n  }\n\n  /**\n   * Poll `getOperation` to check the operation's status. This runs a loop to\n   * ping using the backoff strategy specified at initialization.\n   *\n   * Note: This method is automatically called once a \"complete\" event handler\n   * is registered on the operation.\n   *\n   * @private\n   */\n  startPolling_() {\n    const self = this;\n\n    let now = new Date();\n    const delayMult = this.backoffSettings.retryDelayMultiplier;\n    const maxDelay = this.backoffSettings.maxRetryDelayMillis;\n    let delay = this.backoffSettings.initialRetryDelayMillis;\n    let deadline = Infinity;\n    if (this.backoffSettings.totalTimeoutMillis) {\n      deadline = now.getTime() + this.backoffSettings.totalTimeoutMillis;\n    }\n    let previousMetadataBytes: MetadataValue;\n    if (this.latestResponse.metadata) {\n      previousMetadataBytes = this.latestResponse.metadata.value;\n    }\n\n    // tslint:disable-next-line no-any\n    function emit(event: string | symbol, ...args: any[]) {\n      self.emit(event, ...args);\n    }\n\n    function retry() {\n      if (!self.hasActiveListeners) {\n        return;\n      }\n\n      if (now.getTime() >= deadline) {\n        const error = new GoogleError(\n          'Total timeout exceeded before any response was received'\n        );\n        error.code = status.DEADLINE_EXCEEDED;\n        setImmediate(emit, 'error', error);\n        return;\n      }\n\n      self.getOperation((err, result, metadata, rawResponse) => {\n        if (err) {\n          setImmediate(emit, 'error', err);\n          return;\n        }\n\n        if (!result) {\n          if (\n            rawResponse!.metadata &&\n            (!previousMetadataBytes ||\n              !rawResponse!.metadata!.value.equals(previousMetadataBytes))\n          ) {\n            setImmediate(emit, 'progress', metadata, rawResponse);\n            previousMetadataBytes = rawResponse!.metadata!.value;\n          }\n          // special case: some APIs fail to set either result or error\n          // but set done = true (e.g. speech with silent file).\n          // Don't hang forever in this case.\n          if (rawResponse!.done) {\n            const error = new GoogleError(\n              'Long running operation has finished but there was no result'\n            );\n            error.code = status.UNKNOWN;\n            setImmediate(emit, 'error', error);\n            return;\n          }\n          setTimeout(() => {\n            now = new Date();\n            delay = Math.min(delay * delayMult, maxDelay);\n            retry();\n          }, delay);\n          return;\n        }\n\n        setImmediate(emit, 'complete', result, metadata, rawResponse);\n      });\n    }\n    retry();\n  }\n\n  /**\n   * Wraps the `complete` and `error` events in a Promise.\n   *\n   * @return {promise} - Promise that resolves on operation completion and rejects\n   * on operation error.\n   */\n  promise() {\n    // tslint:disable-next-line variable-name\n    const PromiseCtor = this._callOptions!.promise!;\n    return new PromiseCtor((resolve, reject) => {\n      this.on('error', reject).on(\n        'complete',\n        (result, metadata, rawResponse) => {\n          resolve([result, metadata, rawResponse]);\n        }\n      );\n    });\n  }\n}\n\n/**\n * Method used to create Operation objects.\n *\n * @constructor\n *\n * @param {google.longrunning.Operation} op - The operation to be wrapped.\n * @param {LongRunningDescriptor} longrunningDescriptor - This defines the\n * operations service client and unpacking mechanisms for the operation.\n * @param {BackoffSettings} backoffSettings - The backoff settings used in\n * in polling the operation.\n * @param {CallOptions=} callOptions - CallOptions used in making get operation\n * requests.\n */\nexport function operation(\n  op: Operation,\n  longrunningDescriptor: LongRunningDescriptor,\n  backoffSettings: BackoffSettings,\n  callOptions?: CallOptions\n) {\n  return new Operation(op, longrunningDescriptor, backoffSettings, callOptions);\n}\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/OperationsClient.html":{"url":"classes/OperationsClient.html","title":"class - OperationsClient","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  OperationsClient\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/operationsClient.ts\n        \n\n            \n                Description\n            \n            \n                Manages long-running operations with an API service.\nWhen an API method normally takes long time to complete, it can be designed\nto return Operation to the client, and the client can use this\ninterface to receive the real response asynchronously by polling the\noperation resource, or pass the operation resource to another API (such as\nGoogle Cloud Pub/Sub API) to receive the response.  Any API service that\nreturns long-running operations should implement the Operations interface\nso developers can have a consistent client experience.\nThis will be created through a builder function which can be obtained by the\nmodule. See the following example of how to initialize the module and how to\naccess to the builder.\n\n            \n\n\n\n            \n                Example\n            \n            \n            \n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                auth\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                cancelOperation\n                            \n                            \n                                deleteOperation\n                            \n                            \n                                getOperation\n                            \n                            \n                                getProjectId\n                            \n                            \n                                getProjectId\n                            \n                            \n                                getProjectId\n                            \n                            \n                                listOperations\n                            \n                            \n                                listOperationsStream\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(gaxGrpc: GrpcClient, grpcClients: any, options: OperationsClientOptions)\n                    \n                \n                        \n                            \n                                Defined in src/operationsClient.ts:92\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        gaxGrpc\n                                                  \n                                                        \n                                                                        GrpcClient\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        grpcClients\n                                                  \n                                                        \n                                                                        any\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        options\n                                                  \n                                                        \n                                                                        OperationsClientOptions\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            auth\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     GoogleAuth\n\n                        \n                    \n                        \n                            \n                                    Defined in src/operationsClient.ts:88\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            cancelOperation\n                        \n                        \n                    \n                \n            \n            \n                \ncancelOperation(request, options?, callback?)\n                \n            \n\n\n            \n                \n                    Defined in src/operationsClient.ts:371\n                \n            \n\n\n            \n                \n                    Starts asynchronous cancellation on a long-running operation.  The server\nmakes a best effort to cancel the operation, but success is not\nguaranteed.  If the server doesn't support this method, it returns\ngoogle.rpc.Code.UNIMPLEMENTED.  Clients can use\nOperations.GetOperation or\nother methods to check whether the cancellation succeeded or whether the\noperation completed despite cancellation. On successful cancellation,\nthe operation is not deleted; instead, it becomes an operation with\nan Operation.error value with a google.rpc.Status.code of\n1, corresponding to Code.CANCELLED.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    request\n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nThe request object that will be sent.\n\n\n                                    \n                                \n                                \n                                    options\n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        Optional parameters. You can override the default settings for this call,\ne.g, timeout, retries, paginations, etc. See [gax.CallOptions]{\n\n                                    \n                                \n                                \n                                    callback\n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        The function which will be called with the result of the API call.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                        Example :\n                        \n                            const client = longrunning.operationsClient();\nawait client.cancelOperation({name: &#39;&#39;});\n                        \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \nThe promise which resolves when API call finishes.\nThe promise has a method named \"cancel\" which cancels the ongoing API\ncall.\n\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            deleteOperation\n                        \n                        \n                    \n                \n            \n            \n                \ndeleteOperation(request, options, callback)\n                \n            \n\n\n            \n                \n                    Defined in src/operationsClient.ts:404\n                \n            \n\n\n            \n                \n                    Deletes a long-running operation. This method indicates that the client is\nno longer interested in the operation result. It does not cancel the\noperation. If the server doesn't support this method, it returns\ngoogle.rpc.Code.UNIMPLEMENTED.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    request\n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nThe request object that will be sent.\n\n\n                                    \n                                \n                                \n                                    options\n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Optional parameters. You can override the default settings for this call,\ne.g, timeout, retries, paginations, etc. See [gax.CallOptions]{\n\n                                    \n                                \n                                \n                                    callback\n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The function which will be called with the result of the API call.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                        Example :\n                        \n                            const client = longrunning.operationsClient();\nawait client.deleteOperation({name: &#39;&#39;});\n                        \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \nThe promise which resolves when API call finishes.\nThe promise has a method named \"cancel\" which cancels the ongoing API\ncall.\n\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getOperation\n                        \n                        \n                    \n                \n            \n            \n                \ngetOperation(request: literal type, options: literal type, callback?)\n                \n            \n\n\n            \n                \n                    Defined in src/operationsClient.ts:194\n                \n            \n\n\n            \n                \n                    Gets the latest state of a long-running operation.  Clients can use this\nmethod to poll the operation result at intervals as recommended by the API\nservice.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    request\n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nThe request object that will be sent.\n\n\n                                    \n                                \n                                \n                                    options\n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Optional parameters. You can override the default settings for this call,\ne.g, timeout, retries, paginations, etc. See [gax.CallOptions]{\n\n                                    \n                                \n                                \n                                    callback\n                                    \n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        The function which will be called with the result of the API call.\nThe second parameter to the callback is an object representing\n[google.longrunning.Operation]{\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                        Example :\n                        \n                            const client = longrunning.operationsClient();\nconst name = &#39;&#39;;\nconst [response] = await client.getOperation({name});\n// doThingsWith(response)\n                        \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \nThe promise which resolves to an array.\nThe first element of the array is an object representing\n[google.longrunning.Operation]{\n\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getProjectId\n                        \n                        \n                    \n                \n            \n            \n                \ngetProjectId()\n                \n            \n\n\n            \n                \n                    Defined in src/operationsClient.ts:155\n                \n            \n\n\n            \n                \n                    Get the project ID used by this class.\n\n\n                    \n                        Returns :     Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getProjectId\n                        \n                        \n                    \n                \n            \n            \n                \ngetProjectId(callback: ProjectIdCallback)\n                \n            \n\n\n            \n                \n                    Defined in src/operationsClient.ts:156\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    callback\n                                    \n                                            ProjectIdCallback\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getProjectId\n                        \n                        \n                    \n                \n            \n            \n                \ngetProjectId(callback?: ProjectIdCallback)\n                \n            \n\n\n            \n                \n                    Defined in src/operationsClient.ts:157\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    callback\n                                    \n                                            ProjectIdCallback\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     void | Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            listOperations\n                        \n                        \n                    \n                \n            \n            \n                \nlistOperations(request, options, callback)\n                \n            \n\n\n            \n                \n                    Defined in src/operationsClient.ts:280\n                \n            \n\n\n            \n                \n                    Lists operations that match the specified filter in the request. If the\nserver doesn't support this method, it returns UNIMPLEMENTED.\nNOTE: the name binding below allows API services to override the binding\nto use different resource name schemes.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    request\n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nThe request object that will be sent.\n\n\n                                    \n                                \n                                \n                                    options\n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Optional parameters. You can override the default settings for this call,\ne.g, timeout, retries, paginations, etc. See [gax.CallOptions]{\n\n                                    \n                                \n                                \n                                    callback\n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The function which will be called with the result of the API call.\nThe second parameter to the callback is Array of\n[google.longrunning.Operation]{\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                        Example :\n                        \n                            const client = longrunning.operationsClient();\nconst request = {\n     name: &#39;&#39;,\n     filter: &#39;&#39;\n};\n// Iterate over all elements.\nconst [resources] = await client.listOperations(request);\nfor (const resource of resources) {\n   console.log(resources);\n}\n// Or obtain the paged response.\nconst options = {autoPaginate: false};\nlet nextRequest = request;\nwhile(nextRequest) {\n   const response = await client.listOperations(nextRequest, options);\n   const resources = response[0];\n   nextRequest = response[1];\n   const rawResponse = response[2];\n   for (const resource of resources) {\n     // doThingsWith(resource);\n   }\n};\n                        \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \nThe promise which resolves to an array.\nThe first element of the array is Array of\n[google.longrunning.Operation]{\n\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            listOperationsStream\n                        \n                        \n                    \n                \n            \n            \n                \nlistOperationsStream(request: literal type, options: gax.CallSettings)\n                \n            \n\n\n            \n                \n                    Defined in src/operationsClient.ts:333\n                \n            \n\n\n            \n                \n                    Equivalent to listOperations, but returns a NodeJS Stream object.\nThis fetches the paged responses for listOperations continuously\nand invokes the callback registered for 'data' event for each element in\nthe responses.\nThe returned object has 'end' method when no more elements are required.\nautoPaginate option will be ignored.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    request\n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nThe request object that will be sent.\n\n\n                                    \n                                \n                                \n                                    options\n                                    \n                                                gax.CallSettings\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Optional parameters. You can override the default settings for this call,\ne.g, timeout, retries, paginations, etc. See [gax.CallOptions]{\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                        Example :\n                        \n                            const client = longrunning.operationsClient();\nconst request = {\n   name: &#39;&#39;,\n   filter: &#39;&#39;\n};\nclient.listOperationsStream(request)\n   .on(&#39;data&#39;, element =&gt; {\n     // doThingsWith(element)\n   })\n   .on(&#39;error&#39;, err =&gt; {\n     console.error(err);\n   });\n                        \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \nAn object stream which emits an object representing [google.longrunning.Operation]{\n\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {GoogleAuth} from 'google-auth-library';\nimport {ProjectIdCallback} from 'google-auth-library/build/src/auth/googleauth';\nimport * as path from 'path';\n\nimport {GaxCall} from './apitypes';\nimport {createApiCall} from './createApiCall';\nimport {PageDescriptor} from './descriptor';\nimport * as gax from './gax';\nimport {ClientStubOptions, GrpcClient} from './grpc';\n\nconst configData = require('./operations_client_config');\n\nexport const SERVICE_ADDRESS = 'longrunning.googleapis.com';\nconst version = require('../../package.json').version;\n\nconst DEFAULT_SERVICE_PORT = 443;\nconst CODE_GEN_NAME_VERSION = 'gapic/0.7.1';\nconst PAGE_DESCRIPTORS = {\n  listOperations: new PageDescriptor(\n    'pageToken',\n    'nextPageToken',\n    'operations'\n  ),\n};\n\n/**\n * The scopes needed to make gRPC calls to all of the methods defined in\n * this service.\n */\nexport const ALL_SCOPES: string[] = [];\n\nexport interface OperationsClientOptions {\n  libName?: string;\n  libVersion?: string;\n  clientConfig: gax.ClientConfig;\n}\n\n/**\n * Manages long-running operations with an API service.\n *\n * When an API method normally takes long time to complete, it can be designed\n * to return {@link Operation} to the client, and the client can use this\n * interface to receive the real response asynchronously by polling the\n * operation resource, or pass the operation resource to another API (such as\n * Google Cloud Pub/Sub API) to receive the response.  Any API service that\n * returns long-running operations should implement the `Operations` interface\n * so developers can have a consistent client experience.\n *\n * This will be created through a builder function which can be obtained by the\n * module. See the following example of how to initialize the module and how to\n * access to the builder.\n * @see {@link operationsClient}\n *\n * @class\n */\nexport class OperationsClient {\n  auth: GoogleAuth;\n  private _getOperation!: GaxCall;\n  private _listOperations!: GaxCall;\n  private _cancelOperation!: GaxCall;\n  private _deleteOperation!: GaxCall;\n\n  constructor(\n    gaxGrpc: GrpcClient,\n    // tslint:disable-next-line no-any\n    grpcClients: any,\n    options: OperationsClientOptions\n  ) {\n    const opts: OperationsClientOptions & ClientStubOptions = Object.assign(\n      {\n        servicePath: SERVICE_ADDRESS,\n        port: DEFAULT_SERVICE_PORT,\n        clientConfig: {},\n      },\n      options\n    );\n\n    const googleApiClient = ['gl-node/' + process.versions.node];\n    if (opts.libName && opts.libVersion) {\n      googleApiClient.push(opts.libName + '/' + opts.libVersion);\n    }\n    googleApiClient.push(\n      CODE_GEN_NAME_VERSION,\n      'gax/' + version,\n      'grpc/' + gaxGrpc.grpcVersion\n    );\n\n    const defaults = gaxGrpc.constructSettings(\n      'google.longrunning.Operations',\n      configData,\n      opts.clientConfig,\n      {'x-goog-api-client': googleApiClient.join(' ')}\n    );\n\n    this.auth = gaxGrpc.auth;\n    const operationsStub = gaxGrpc.createStub(\n      grpcClients.google.longrunning.Operations,\n      opts\n    );\n    const operationsStubMethods = [\n      'getOperation',\n      'listOperations',\n      'cancelOperation',\n      'deleteOperation',\n    ];\n    operationsStubMethods.forEach(methodName => {\n      this['_' + methodName] = createApiCall(\n        operationsStub.then(operationsStub => {\n          return (...args: Array) => {\n            return operationsStub[methodName].apply(operationsStub, args);\n          };\n        }),\n        defaults[methodName],\n        PAGE_DESCRIPTORS[methodName]\n      );\n    });\n  }\n\n  /**\n   * Get the project ID used by this class.\n   * @aram {function(Error, string)} callback - the callback to be called with\n   *   the current project Id.\n   */\n  getProjectId(): Promise;\n  getProjectId(callback: ProjectIdCallback): void;\n  getProjectId(callback?: ProjectIdCallback): void | Promise {\n    return this.auth.getProjectId(callback!);\n  }\n\n  // Service calls\n\n  /**\n   * Gets the latest state of a long-running operation.  Clients can use this\n   * method to poll the operation result at intervals as recommended by the API\n   * service.\n   *\n   * @param {Object} request - The request object that will be sent.\n   * @param {string} request.name - The name of the operation resource.\n   * @param {Object=} options\n   *   Optional parameters. You can override the default settings for this call,\n   *   e.g, timeout, retries, paginations, etc. See [gax.CallOptions]{@link\n   *   https://googleapis.github.io/gax-nodejs/global.html#CallOptions} for the\n   *   details.\n   * @param {function(?Error, ?Object)=} callback\n   *   The function which will be called with the result of the API call.\n   *\n   *   The second parameter to the callback is an object representing\n   * [google.longrunning.Operation]{@link\n   * external:\"google.longrunning.Operation\"}.\n   * @return {Promise} - The promise which resolves to an array.\n   *   The first element of the array is an object representing\n   * [google.longrunning.Operation]{@link\n   * external:\"google.longrunning.Operation\"}. The promise has a method named\n   * \"cancel\" which cancels the ongoing API call.\n   *\n   * @example\n   *\n   * const client = longrunning.operationsClient();\n   * const name = '';\n   * const [response] = await client.getOperation({name});\n   * // doThingsWith(response)\n   */\n  getOperation(request: {}, options: {}, callback?) {\n    if (options instanceof Function && callback === undefined) {\n      callback = options;\n      options = {};\n    }\n    options = options || {};\n    return this._getOperation(request, options, callback);\n  }\n\n  /**\n   * Lists operations that match the specified filter in the request. If the\n   * server doesn't support this method, it returns `UNIMPLEMENTED`.\n   *\n   * NOTE: the `name` binding below allows API services to override the binding\n   * to use different resource name schemes.\n   *\n   * @param {Object} request - The request object that will be sent.\n   * @param {string} request.name - The name of the operation collection.\n   * @param {string} request.filter - The standard list filter.\n   * @param {number=} request.pageSize\n   *   The maximum number of resources contained in the underlying API\n   *   response. If page streaming is performed per-resource, this\n   *   parameter does not affect the return value. If page streaming is\n   *   performed per-page, this determines the maximum number of\n   *   resources in a page.\n   * @param {Object=} options\n   *   Optional parameters. You can override the default settings for this call,\n   * e.g, timeout, retries, paginations, etc. See [gax.CallOptions]{@link\n   * https://googleapis.github.io/gax-nodejs/global.html#CallOptions} for the\n   * details.\n   * @param {function(?Error, ?Array, ?Object, ?Object)=} callback\n   *   The function which will be called with the result of the API call.\n   *\n   *   The second parameter to the callback is Array of\n   * [google.longrunning.Operation]{@link\n   * external:\"google.longrunning.Operation\"}.\n   *\n   *   When autoPaginate: false is specified through options, it contains the\n   * result in a single response. If the response indicates the next page\n   * exists, the third parameter is set to be used for the next request object.\n   * The fourth parameter keeps the raw response object of an object\n   * representing [google.longrunning.ListOperationsResponse]{@link\n   * external:\"google.longrunning.ListOperationsResponse\"}.\n   * @return {Promise} - The promise which resolves to an array.\n   *   The first element of the array is Array of\n   * [google.longrunning.Operation]{@link\n   * external:\"google.longrunning.Operation\"}.\n   *\n   *   When autoPaginate: false is specified through options, the array has\n   * three elements. The first element is Array of\n   * [google.longrunning.Operation]{@link\n   * external:\"google.longrunning.Operation\"} in a single response. The second\n   * element is the next request object if the response indicates the next page\n   * exists, or null. The third element is an object representing\n   * [google.longrunning.ListOperationsResponse]{@link\n   * external:\"google.longrunning.ListOperationsResponse\"}.\n   *\n   *   The promise has a method named \"cancel\" which cancels the ongoing API\n   * call.\n   *\n   * @example\n   *\n   * const client = longrunning.operationsClient();\n   * const request = {\n   *     name: '',\n   *     filter: ''\n   * };\n   * // Iterate over all elements.\n   * const [resources] = await client.listOperations(request);\n   * for (const resource of resources) {\n   *   console.log(resources);\n   * }\n   *\n   * // Or obtain the paged response.\n   * const options = {autoPaginate: false};\n   * let nextRequest = request;\n   * while(nextRequest) {\n   *   const response = await client.listOperations(nextRequest, options);\n   *   const resources = response[0];\n   *   nextRequest = response[1];\n   *   const rawResponse = response[2];\n   *   for (const resource of resources) {\n   *     // doThingsWith(resource);\n   *   }\n   * };\n   */\n  listOperations(request, options, callback) {\n    if (options instanceof Function && callback === undefined) {\n      callback = options;\n      options = {};\n    }\n    options = options || {};\n    return this['_listOperations'](request, options, callback);\n  }\n\n  /**\n   * Equivalent to {@link listOperations}, but returns a NodeJS Stream object.\n   *\n   * This fetches the paged responses for {@link listOperations} continuously\n   * and invokes the callback registered for 'data' event for each element in\n   * the responses.\n   *\n   * The returned object has 'end' method when no more elements are required.\n   *\n   * autoPaginate option will be ignored.\n   *\n   * @see {@link https://nodejs.org/api/stream.html}\n   *\n   * @param {Object} request - The request object that will be sent.\n   * @param {string} request.name - The name of the operation collection.\n   * @param {string} request.filter - The standard list filter.\n   * @param {number=} request.pageSize -\n   *   The maximum number of resources contained in the underlying API\n   *   response. If page streaming is performed per-resource, this\n   *   parameter does not affect the return value. If page streaming is\n   *   performed per-page, this determines the maximum number of\n   *   resources in a page.\n   * @param {Object=} options\n   *   Optional parameters. You can override the default settings for this call,\n   *   e.g, timeout, retries, paginations, etc. See [gax.CallOptions]{@link\n   *   https://googleapis.github.io/gax-nodejs/global.html#CallOptions} for the\n   *   details.\n   * @return {Stream} - An object stream which emits an object representing [google.longrunning.Operation]{@link external:\"google.longrunning.Operation\"} on 'data' event.\n   *\n   * @example\n   *\n   * const client = longrunning.operationsClient();\n   * const request = {\n   *   name: '',\n   *   filter: ''\n   * };\n   * client.listOperationsStream(request)\n   *   .on('data', element => {\n   *     // doThingsWith(element)\n   *   })\n   *   .on('error', err => {\n   *     console.error(err);\n   *   });\n   */\n  listOperationsStream(request: {}, options: gax.CallSettings) {\n    return PAGE_DESCRIPTORS.listOperations.createStream(\n      this._listOperations,\n      request,\n      options\n    );\n  }\n\n  /**\n   * Starts asynchronous cancellation on a long-running operation.  The server\n   * makes a best effort to cancel the operation, but success is not\n   * guaranteed.  If the server doesn't support this method, it returns\n   * `google.rpc.Code.UNIMPLEMENTED`.  Clients can use\n   * {@link Operations.GetOperation} or\n   * other methods to check whether the cancellation succeeded or whether the\n   * operation completed despite cancellation. On successful cancellation,\n   * the operation is not deleted; instead, it becomes an operation with\n   * an {@link Operation.error} value with a {@link google.rpc.Status.code} of\n   * 1, corresponding to `Code.CANCELLED`.\n   *\n   * @param {Object} request - The request object that will be sent.\n   * @param {string} request.name - The name of the operation resource to be cancelled.\n   * @param {Object=} options\n   *   Optional parameters. You can override the default settings for this call,\n   * e.g, timeout, retries, paginations, etc. See [gax.CallOptions]{@link\n   * https://googleapis.github.io/gax-nodejs/global.html#CallOptions} for the\n   * details.\n   * @param {function(?Error)=} callback\n   *   The function which will be called with the result of the API call.\n   * @return {Promise} - The promise which resolves when API call finishes.\n   *   The promise has a method named \"cancel\" which cancels the ongoing API\n   * call.\n   *\n   * @example\n   *\n   * const client = longrunning.operationsClient();\n   * await client.cancelOperation({name: ''});\n   */\n  cancelOperation(request, options?, callback?) {\n    if (options instanceof Function && callback === undefined) {\n      callback = options;\n      options = {};\n    }\n    options = options || {};\n    return this._cancelOperation(request, options, callback);\n  }\n\n  /**\n   * Deletes a long-running operation. This method indicates that the client is\n   * no longer interested in the operation result. It does not cancel the\n   * operation. If the server doesn't support this method, it returns\n   * `google.rpc.Code.UNIMPLEMENTED`.\n   *\n   * @param {Object} request - The request object that will be sent.\n   * @param {string} request.name - The name of the operation resource to be deleted.\n   * @param {Object=} options\n   *   Optional parameters. You can override the default settings for this call,\n   * e.g, timeout, retries, paginations, etc. See [gax.CallOptions]{@link\n   * https://googleapis.github.io/gax-nodejs/global.html#CallOptions} for the\n   * details.\n   * @param {function(?Error)=} callback\n   *   The function which will be called with the result of the API call.\n   * @return {Promise} - The promise which resolves when API call finishes.\n   *   The promise has a method named \"cancel\" which cancels the ongoing API\n   * call.\n   *\n   * @example\n   *\n   * const client = longrunning.operationsClient();\n   * await client.deleteOperation({name: ''});\n   */\n  deleteOperation(request, options, callback) {\n    if (options instanceof Function && callback === undefined) {\n      callback = options;\n      options = {};\n    }\n    options = options || {};\n    return this._deleteOperation(request, options, callback);\n  }\n}\n\nexport class OperationsClientBuilder {\n  operationsClient: (opts: OperationsClientOptions) => OperationsClient;\n\n  /**\n   * Builds a new Operations Client\n   * @param gaxGrpc {GrpcClient}\n   */\n  constructor(gaxGrpc: GrpcClient) {\n    const protoFilesRoot = path.join(__dirname, '..', '..');\n    // tslint:disable-next-line no-any\n    const operationsClient: any = gaxGrpc.loadProto(\n      protoFilesRoot,\n      'google/longrunning/operations.proto'\n    );\n    Object.assign(this, operationsClient.google.longrunning);\n\n    /**\n     * Build a new instance of {@link OperationsClient}.\n     *\n     * @param {Object=} opts - The optional parameters.\n     * @param {String=} opts.servicePath - Domain name of the API remote host.\n     * @param {number=} opts.port - The port on which to connect to the remote host.\n     * @param {grpc.ClientCredentials=} opts.sslCreds - A ClientCredentials for use with an SSL-enabled channel.\n     * @param {Object=} opts.clientConfig - The customized config to build the call settings. See {@link gax.constructSettings} for the format.\n     */\n    this.operationsClient = opts => {\n      return new OperationsClient(gaxGrpc, operationsClient, opts);\n    };\n    Object.assign(this.operationsClient, OperationsClient);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/OperationsClientBuilder.html":{"url":"classes/OperationsClientBuilder.html","title":"class - OperationsClientBuilder","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  OperationsClientBuilder\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/operationsClient.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                operationsClient\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(gaxGrpc: GrpcClient)\n                    \n                \n                        \n                            \n                                Defined in src/operationsClient.ts:415\n                            \n                        \n\n                \n                    \n                            Builds a new Operations Client\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        gaxGrpc\n                                                  \n                                                        \n                                                                        GrpcClient\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            operationsClient\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         function\n\n                        \n                    \n                        \n                            \n                                    Defined in src/operationsClient.ts:415\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {GoogleAuth} from 'google-auth-library';\nimport {ProjectIdCallback} from 'google-auth-library/build/src/auth/googleauth';\nimport * as path from 'path';\n\nimport {GaxCall} from './apitypes';\nimport {createApiCall} from './createApiCall';\nimport {PageDescriptor} from './descriptor';\nimport * as gax from './gax';\nimport {ClientStubOptions, GrpcClient} from './grpc';\n\nconst configData = require('./operations_client_config');\n\nexport const SERVICE_ADDRESS = 'longrunning.googleapis.com';\nconst version = require('../../package.json').version;\n\nconst DEFAULT_SERVICE_PORT = 443;\nconst CODE_GEN_NAME_VERSION = 'gapic/0.7.1';\nconst PAGE_DESCRIPTORS = {\n  listOperations: new PageDescriptor(\n    'pageToken',\n    'nextPageToken',\n    'operations'\n  ),\n};\n\n/**\n * The scopes needed to make gRPC calls to all of the methods defined in\n * this service.\n */\nexport const ALL_SCOPES: string[] = [];\n\nexport interface OperationsClientOptions {\n  libName?: string;\n  libVersion?: string;\n  clientConfig: gax.ClientConfig;\n}\n\n/**\n * Manages long-running operations with an API service.\n *\n * When an API method normally takes long time to complete, it can be designed\n * to return {@link Operation} to the client, and the client can use this\n * interface to receive the real response asynchronously by polling the\n * operation resource, or pass the operation resource to another API (such as\n * Google Cloud Pub/Sub API) to receive the response.  Any API service that\n * returns long-running operations should implement the `Operations` interface\n * so developers can have a consistent client experience.\n *\n * This will be created through a builder function which can be obtained by the\n * module. See the following example of how to initialize the module and how to\n * access to the builder.\n * @see {@link operationsClient}\n *\n * @class\n */\nexport class OperationsClient {\n  auth: GoogleAuth;\n  private _getOperation!: GaxCall;\n  private _listOperations!: GaxCall;\n  private _cancelOperation!: GaxCall;\n  private _deleteOperation!: GaxCall;\n\n  constructor(\n    gaxGrpc: GrpcClient,\n    // tslint:disable-next-line no-any\n    grpcClients: any,\n    options: OperationsClientOptions\n  ) {\n    const opts: OperationsClientOptions & ClientStubOptions = Object.assign(\n      {\n        servicePath: SERVICE_ADDRESS,\n        port: DEFAULT_SERVICE_PORT,\n        clientConfig: {},\n      },\n      options\n    );\n\n    const googleApiClient = ['gl-node/' + process.versions.node];\n    if (opts.libName && opts.libVersion) {\n      googleApiClient.push(opts.libName + '/' + opts.libVersion);\n    }\n    googleApiClient.push(\n      CODE_GEN_NAME_VERSION,\n      'gax/' + version,\n      'grpc/' + gaxGrpc.grpcVersion\n    );\n\n    const defaults = gaxGrpc.constructSettings(\n      'google.longrunning.Operations',\n      configData,\n      opts.clientConfig,\n      {'x-goog-api-client': googleApiClient.join(' ')}\n    );\n\n    this.auth = gaxGrpc.auth;\n    const operationsStub = gaxGrpc.createStub(\n      grpcClients.google.longrunning.Operations,\n      opts\n    );\n    const operationsStubMethods = [\n      'getOperation',\n      'listOperations',\n      'cancelOperation',\n      'deleteOperation',\n    ];\n    operationsStubMethods.forEach(methodName => {\n      this['_' + methodName] = createApiCall(\n        operationsStub.then(operationsStub => {\n          return (...args: Array) => {\n            return operationsStub[methodName].apply(operationsStub, args);\n          };\n        }),\n        defaults[methodName],\n        PAGE_DESCRIPTORS[methodName]\n      );\n    });\n  }\n\n  /**\n   * Get the project ID used by this class.\n   * @aram {function(Error, string)} callback - the callback to be called with\n   *   the current project Id.\n   */\n  getProjectId(): Promise;\n  getProjectId(callback: ProjectIdCallback): void;\n  getProjectId(callback?: ProjectIdCallback): void | Promise {\n    return this.auth.getProjectId(callback!);\n  }\n\n  // Service calls\n\n  /**\n   * Gets the latest state of a long-running operation.  Clients can use this\n   * method to poll the operation result at intervals as recommended by the API\n   * service.\n   *\n   * @param {Object} request - The request object that will be sent.\n   * @param {string} request.name - The name of the operation resource.\n   * @param {Object=} options\n   *   Optional parameters. You can override the default settings for this call,\n   *   e.g, timeout, retries, paginations, etc. See [gax.CallOptions]{@link\n   *   https://googleapis.github.io/gax-nodejs/global.html#CallOptions} for the\n   *   details.\n   * @param {function(?Error, ?Object)=} callback\n   *   The function which will be called with the result of the API call.\n   *\n   *   The second parameter to the callback is an object representing\n   * [google.longrunning.Operation]{@link\n   * external:\"google.longrunning.Operation\"}.\n   * @return {Promise} - The promise which resolves to an array.\n   *   The first element of the array is an object representing\n   * [google.longrunning.Operation]{@link\n   * external:\"google.longrunning.Operation\"}. The promise has a method named\n   * \"cancel\" which cancels the ongoing API call.\n   *\n   * @example\n   *\n   * const client = longrunning.operationsClient();\n   * const name = '';\n   * const [response] = await client.getOperation({name});\n   * // doThingsWith(response)\n   */\n  getOperation(request: {}, options: {}, callback?) {\n    if (options instanceof Function && callback === undefined) {\n      callback = options;\n      options = {};\n    }\n    options = options || {};\n    return this._getOperation(request, options, callback);\n  }\n\n  /**\n   * Lists operations that match the specified filter in the request. If the\n   * server doesn't support this method, it returns `UNIMPLEMENTED`.\n   *\n   * NOTE: the `name` binding below allows API services to override the binding\n   * to use different resource name schemes.\n   *\n   * @param {Object} request - The request object that will be sent.\n   * @param {string} request.name - The name of the operation collection.\n   * @param {string} request.filter - The standard list filter.\n   * @param {number=} request.pageSize\n   *   The maximum number of resources contained in the underlying API\n   *   response. If page streaming is performed per-resource, this\n   *   parameter does not affect the return value. If page streaming is\n   *   performed per-page, this determines the maximum number of\n   *   resources in a page.\n   * @param {Object=} options\n   *   Optional parameters. You can override the default settings for this call,\n   * e.g, timeout, retries, paginations, etc. See [gax.CallOptions]{@link\n   * https://googleapis.github.io/gax-nodejs/global.html#CallOptions} for the\n   * details.\n   * @param {function(?Error, ?Array, ?Object, ?Object)=} callback\n   *   The function which will be called with the result of the API call.\n   *\n   *   The second parameter to the callback is Array of\n   * [google.longrunning.Operation]{@link\n   * external:\"google.longrunning.Operation\"}.\n   *\n   *   When autoPaginate: false is specified through options, it contains the\n   * result in a single response. If the response indicates the next page\n   * exists, the third parameter is set to be used for the next request object.\n   * The fourth parameter keeps the raw response object of an object\n   * representing [google.longrunning.ListOperationsResponse]{@link\n   * external:\"google.longrunning.ListOperationsResponse\"}.\n   * @return {Promise} - The promise which resolves to an array.\n   *   The first element of the array is Array of\n   * [google.longrunning.Operation]{@link\n   * external:\"google.longrunning.Operation\"}.\n   *\n   *   When autoPaginate: false is specified through options, the array has\n   * three elements. The first element is Array of\n   * [google.longrunning.Operation]{@link\n   * external:\"google.longrunning.Operation\"} in a single response. The second\n   * element is the next request object if the response indicates the next page\n   * exists, or null. The third element is an object representing\n   * [google.longrunning.ListOperationsResponse]{@link\n   * external:\"google.longrunning.ListOperationsResponse\"}.\n   *\n   *   The promise has a method named \"cancel\" which cancels the ongoing API\n   * call.\n   *\n   * @example\n   *\n   * const client = longrunning.operationsClient();\n   * const request = {\n   *     name: '',\n   *     filter: ''\n   * };\n   * // Iterate over all elements.\n   * const [resources] = await client.listOperations(request);\n   * for (const resource of resources) {\n   *   console.log(resources);\n   * }\n   *\n   * // Or obtain the paged response.\n   * const options = {autoPaginate: false};\n   * let nextRequest = request;\n   * while(nextRequest) {\n   *   const response = await client.listOperations(nextRequest, options);\n   *   const resources = response[0];\n   *   nextRequest = response[1];\n   *   const rawResponse = response[2];\n   *   for (const resource of resources) {\n   *     // doThingsWith(resource);\n   *   }\n   * };\n   */\n  listOperations(request, options, callback) {\n    if (options instanceof Function && callback === undefined) {\n      callback = options;\n      options = {};\n    }\n    options = options || {};\n    return this['_listOperations'](request, options, callback);\n  }\n\n  /**\n   * Equivalent to {@link listOperations}, but returns a NodeJS Stream object.\n   *\n   * This fetches the paged responses for {@link listOperations} continuously\n   * and invokes the callback registered for 'data' event for each element in\n   * the responses.\n   *\n   * The returned object has 'end' method when no more elements are required.\n   *\n   * autoPaginate option will be ignored.\n   *\n   * @see {@link https://nodejs.org/api/stream.html}\n   *\n   * @param {Object} request - The request object that will be sent.\n   * @param {string} request.name - The name of the operation collection.\n   * @param {string} request.filter - The standard list filter.\n   * @param {number=} request.pageSize -\n   *   The maximum number of resources contained in the underlying API\n   *   response. If page streaming is performed per-resource, this\n   *   parameter does not affect the return value. If page streaming is\n   *   performed per-page, this determines the maximum number of\n   *   resources in a page.\n   * @param {Object=} options\n   *   Optional parameters. You can override the default settings for this call,\n   *   e.g, timeout, retries, paginations, etc. See [gax.CallOptions]{@link\n   *   https://googleapis.github.io/gax-nodejs/global.html#CallOptions} for the\n   *   details.\n   * @return {Stream} - An object stream which emits an object representing [google.longrunning.Operation]{@link external:\"google.longrunning.Operation\"} on 'data' event.\n   *\n   * @example\n   *\n   * const client = longrunning.operationsClient();\n   * const request = {\n   *   name: '',\n   *   filter: ''\n   * };\n   * client.listOperationsStream(request)\n   *   .on('data', element => {\n   *     // doThingsWith(element)\n   *   })\n   *   .on('error', err => {\n   *     console.error(err);\n   *   });\n   */\n  listOperationsStream(request: {}, options: gax.CallSettings) {\n    return PAGE_DESCRIPTORS.listOperations.createStream(\n      this._listOperations,\n      request,\n      options\n    );\n  }\n\n  /**\n   * Starts asynchronous cancellation on a long-running operation.  The server\n   * makes a best effort to cancel the operation, but success is not\n   * guaranteed.  If the server doesn't support this method, it returns\n   * `google.rpc.Code.UNIMPLEMENTED`.  Clients can use\n   * {@link Operations.GetOperation} or\n   * other methods to check whether the cancellation succeeded or whether the\n   * operation completed despite cancellation. On successful cancellation,\n   * the operation is not deleted; instead, it becomes an operation with\n   * an {@link Operation.error} value with a {@link google.rpc.Status.code} of\n   * 1, corresponding to `Code.CANCELLED`.\n   *\n   * @param {Object} request - The request object that will be sent.\n   * @param {string} request.name - The name of the operation resource to be cancelled.\n   * @param {Object=} options\n   *   Optional parameters. You can override the default settings for this call,\n   * e.g, timeout, retries, paginations, etc. See [gax.CallOptions]{@link\n   * https://googleapis.github.io/gax-nodejs/global.html#CallOptions} for the\n   * details.\n   * @param {function(?Error)=} callback\n   *   The function which will be called with the result of the API call.\n   * @return {Promise} - The promise which resolves when API call finishes.\n   *   The promise has a method named \"cancel\" which cancels the ongoing API\n   * call.\n   *\n   * @example\n   *\n   * const client = longrunning.operationsClient();\n   * await client.cancelOperation({name: ''});\n   */\n  cancelOperation(request, options?, callback?) {\n    if (options instanceof Function && callback === undefined) {\n      callback = options;\n      options = {};\n    }\n    options = options || {};\n    return this._cancelOperation(request, options, callback);\n  }\n\n  /**\n   * Deletes a long-running operation. This method indicates that the client is\n   * no longer interested in the operation result. It does not cancel the\n   * operation. If the server doesn't support this method, it returns\n   * `google.rpc.Code.UNIMPLEMENTED`.\n   *\n   * @param {Object} request - The request object that will be sent.\n   * @param {string} request.name - The name of the operation resource to be deleted.\n   * @param {Object=} options\n   *   Optional parameters. You can override the default settings for this call,\n   * e.g, timeout, retries, paginations, etc. See [gax.CallOptions]{@link\n   * https://googleapis.github.io/gax-nodejs/global.html#CallOptions} for the\n   * details.\n   * @param {function(?Error)=} callback\n   *   The function which will be called with the result of the API call.\n   * @return {Promise} - The promise which resolves when API call finishes.\n   *   The promise has a method named \"cancel\" which cancels the ongoing API\n   * call.\n   *\n   * @example\n   *\n   * const client = longrunning.operationsClient();\n   * await client.deleteOperation({name: ''});\n   */\n  deleteOperation(request, options, callback) {\n    if (options instanceof Function && callback === undefined) {\n      callback = options;\n      options = {};\n    }\n    options = options || {};\n    return this._deleteOperation(request, options, callback);\n  }\n}\n\nexport class OperationsClientBuilder {\n  operationsClient: (opts: OperationsClientOptions) => OperationsClient;\n\n  /**\n   * Builds a new Operations Client\n   * @param gaxGrpc {GrpcClient}\n   */\n  constructor(gaxGrpc: GrpcClient) {\n    const protoFilesRoot = path.join(__dirname, '..', '..');\n    // tslint:disable-next-line no-any\n    const operationsClient: any = gaxGrpc.loadProto(\n      protoFilesRoot,\n      'google/longrunning/operations.proto'\n    );\n    Object.assign(this, operationsClient.google.longrunning);\n\n    /**\n     * Build a new instance of {@link OperationsClient}.\n     *\n     * @param {Object=} opts - The optional parameters.\n     * @param {String=} opts.servicePath - Domain name of the API remote host.\n     * @param {number=} opts.port - The port on which to connect to the remote host.\n     * @param {grpc.ClientCredentials=} opts.sslCreds - A ClientCredentials for use with an SSL-enabled channel.\n     * @param {Object=} opts.clientConfig - The customized config to build the call settings. See {@link gax.constructSettings} for the format.\n     */\n    this.operationsClient = opts => {\n      return new OperationsClient(gaxGrpc, operationsClient, opts);\n    };\n    Object.assign(this.operationsClient, OperationsClient);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/OperationsClientOptions.html":{"url":"interfaces/OperationsClientOptions.html","title":"interface - OperationsClientOptions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  OperationsClientOptions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/operationsClient.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        clientConfig\n                                \n                                \n                                            Optional\n                                        libName\n                                \n                                \n                                            Optional\n                                        libVersion\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        clientConfig\n                                    \n                                \n                                \n                                    \n                                        clientConfig:         gax.ClientConfig\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         gax.ClientConfig\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        libName\n                                    \n                                \n                                \n                                    \n                                        libName:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        libVersion\n                                    \n                                \n                                \n                                    \n                                        libVersion:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import {GoogleAuth} from 'google-auth-library';\nimport {ProjectIdCallback} from 'google-auth-library/build/src/auth/googleauth';\nimport * as path from 'path';\n\nimport {GaxCall} from './apitypes';\nimport {createApiCall} from './createApiCall';\nimport {PageDescriptor} from './descriptor';\nimport * as gax from './gax';\nimport {ClientStubOptions, GrpcClient} from './grpc';\n\nconst configData = require('./operations_client_config');\n\nexport const SERVICE_ADDRESS = 'longrunning.googleapis.com';\nconst version = require('../../package.json').version;\n\nconst DEFAULT_SERVICE_PORT = 443;\nconst CODE_GEN_NAME_VERSION = 'gapic/0.7.1';\nconst PAGE_DESCRIPTORS = {\n  listOperations: new PageDescriptor(\n    'pageToken',\n    'nextPageToken',\n    'operations'\n  ),\n};\n\n/**\n * The scopes needed to make gRPC calls to all of the methods defined in\n * this service.\n */\nexport const ALL_SCOPES: string[] = [];\n\nexport interface OperationsClientOptions {\n  libName?: string;\n  libVersion?: string;\n  clientConfig: gax.ClientConfig;\n}\n\n/**\n * Manages long-running operations with an API service.\n *\n * When an API method normally takes long time to complete, it can be designed\n * to return {@link Operation} to the client, and the client can use this\n * interface to receive the real response asynchronously by polling the\n * operation resource, or pass the operation resource to another API (such as\n * Google Cloud Pub/Sub API) to receive the response.  Any API service that\n * returns long-running operations should implement the `Operations` interface\n * so developers can have a consistent client experience.\n *\n * This will be created through a builder function which can be obtained by the\n * module. See the following example of how to initialize the module and how to\n * access to the builder.\n * @see {@link operationsClient}\n *\n * @class\n */\nexport class OperationsClient {\n  auth: GoogleAuth;\n  private _getOperation!: GaxCall;\n  private _listOperations!: GaxCall;\n  private _cancelOperation!: GaxCall;\n  private _deleteOperation!: GaxCall;\n\n  constructor(\n    gaxGrpc: GrpcClient,\n    // tslint:disable-next-line no-any\n    grpcClients: any,\n    options: OperationsClientOptions\n  ) {\n    const opts: OperationsClientOptions & ClientStubOptions = Object.assign(\n      {\n        servicePath: SERVICE_ADDRESS,\n        port: DEFAULT_SERVICE_PORT,\n        clientConfig: {},\n      },\n      options\n    );\n\n    const googleApiClient = ['gl-node/' + process.versions.node];\n    if (opts.libName && opts.libVersion) {\n      googleApiClient.push(opts.libName + '/' + opts.libVersion);\n    }\n    googleApiClient.push(\n      CODE_GEN_NAME_VERSION,\n      'gax/' + version,\n      'grpc/' + gaxGrpc.grpcVersion\n    );\n\n    const defaults = gaxGrpc.constructSettings(\n      'google.longrunning.Operations',\n      configData,\n      opts.clientConfig,\n      {'x-goog-api-client': googleApiClient.join(' ')}\n    );\n\n    this.auth = gaxGrpc.auth;\n    const operationsStub = gaxGrpc.createStub(\n      grpcClients.google.longrunning.Operations,\n      opts\n    );\n    const operationsStubMethods = [\n      'getOperation',\n      'listOperations',\n      'cancelOperation',\n      'deleteOperation',\n    ];\n    operationsStubMethods.forEach(methodName => {\n      this['_' + methodName] = createApiCall(\n        operationsStub.then(operationsStub => {\n          return (...args: Array) => {\n            return operationsStub[methodName].apply(operationsStub, args);\n          };\n        }),\n        defaults[methodName],\n        PAGE_DESCRIPTORS[methodName]\n      );\n    });\n  }\n\n  /**\n   * Get the project ID used by this class.\n   * @aram {function(Error, string)} callback - the callback to be called with\n   *   the current project Id.\n   */\n  getProjectId(): Promise;\n  getProjectId(callback: ProjectIdCallback): void;\n  getProjectId(callback?: ProjectIdCallback): void | Promise {\n    return this.auth.getProjectId(callback!);\n  }\n\n  // Service calls\n\n  /**\n   * Gets the latest state of a long-running operation.  Clients can use this\n   * method to poll the operation result at intervals as recommended by the API\n   * service.\n   *\n   * @param {Object} request - The request object that will be sent.\n   * @param {string} request.name - The name of the operation resource.\n   * @param {Object=} options\n   *   Optional parameters. You can override the default settings for this call,\n   *   e.g, timeout, retries, paginations, etc. See [gax.CallOptions]{@link\n   *   https://googleapis.github.io/gax-nodejs/global.html#CallOptions} for the\n   *   details.\n   * @param {function(?Error, ?Object)=} callback\n   *   The function which will be called with the result of the API call.\n   *\n   *   The second parameter to the callback is an object representing\n   * [google.longrunning.Operation]{@link\n   * external:\"google.longrunning.Operation\"}.\n   * @return {Promise} - The promise which resolves to an array.\n   *   The first element of the array is an object representing\n   * [google.longrunning.Operation]{@link\n   * external:\"google.longrunning.Operation\"}. The promise has a method named\n   * \"cancel\" which cancels the ongoing API call.\n   *\n   * @example\n   *\n   * const client = longrunning.operationsClient();\n   * const name = '';\n   * const [response] = await client.getOperation({name});\n   * // doThingsWith(response)\n   */\n  getOperation(request: {}, options: {}, callback?) {\n    if (options instanceof Function && callback === undefined) {\n      callback = options;\n      options = {};\n    }\n    options = options || {};\n    return this._getOperation(request, options, callback);\n  }\n\n  /**\n   * Lists operations that match the specified filter in the request. If the\n   * server doesn't support this method, it returns `UNIMPLEMENTED`.\n   *\n   * NOTE: the `name` binding below allows API services to override the binding\n   * to use different resource name schemes.\n   *\n   * @param {Object} request - The request object that will be sent.\n   * @param {string} request.name - The name of the operation collection.\n   * @param {string} request.filter - The standard list filter.\n   * @param {number=} request.pageSize\n   *   The maximum number of resources contained in the underlying API\n   *   response. If page streaming is performed per-resource, this\n   *   parameter does not affect the return value. If page streaming is\n   *   performed per-page, this determines the maximum number of\n   *   resources in a page.\n   * @param {Object=} options\n   *   Optional parameters. You can override the default settings for this call,\n   * e.g, timeout, retries, paginations, etc. See [gax.CallOptions]{@link\n   * https://googleapis.github.io/gax-nodejs/global.html#CallOptions} for the\n   * details.\n   * @param {function(?Error, ?Array, ?Object, ?Object)=} callback\n   *   The function which will be called with the result of the API call.\n   *\n   *   The second parameter to the callback is Array of\n   * [google.longrunning.Operation]{@link\n   * external:\"google.longrunning.Operation\"}.\n   *\n   *   When autoPaginate: false is specified through options, it contains the\n   * result in a single response. If the response indicates the next page\n   * exists, the third parameter is set to be used for the next request object.\n   * The fourth parameter keeps the raw response object of an object\n   * representing [google.longrunning.ListOperationsResponse]{@link\n   * external:\"google.longrunning.ListOperationsResponse\"}.\n   * @return {Promise} - The promise which resolves to an array.\n   *   The first element of the array is Array of\n   * [google.longrunning.Operation]{@link\n   * external:\"google.longrunning.Operation\"}.\n   *\n   *   When autoPaginate: false is specified through options, the array has\n   * three elements. The first element is Array of\n   * [google.longrunning.Operation]{@link\n   * external:\"google.longrunning.Operation\"} in a single response. The second\n   * element is the next request object if the response indicates the next page\n   * exists, or null. The third element is an object representing\n   * [google.longrunning.ListOperationsResponse]{@link\n   * external:\"google.longrunning.ListOperationsResponse\"}.\n   *\n   *   The promise has a method named \"cancel\" which cancels the ongoing API\n   * call.\n   *\n   * @example\n   *\n   * const client = longrunning.operationsClient();\n   * const request = {\n   *     name: '',\n   *     filter: ''\n   * };\n   * // Iterate over all elements.\n   * const [resources] = await client.listOperations(request);\n   * for (const resource of resources) {\n   *   console.log(resources);\n   * }\n   *\n   * // Or obtain the paged response.\n   * const options = {autoPaginate: false};\n   * let nextRequest = request;\n   * while(nextRequest) {\n   *   const response = await client.listOperations(nextRequest, options);\n   *   const resources = response[0];\n   *   nextRequest = response[1];\n   *   const rawResponse = response[2];\n   *   for (const resource of resources) {\n   *     // doThingsWith(resource);\n   *   }\n   * };\n   */\n  listOperations(request, options, callback) {\n    if (options instanceof Function && callback === undefined) {\n      callback = options;\n      options = {};\n    }\n    options = options || {};\n    return this['_listOperations'](request, options, callback);\n  }\n\n  /**\n   * Equivalent to {@link listOperations}, but returns a NodeJS Stream object.\n   *\n   * This fetches the paged responses for {@link listOperations} continuously\n   * and invokes the callback registered for 'data' event for each element in\n   * the responses.\n   *\n   * The returned object has 'end' method when no more elements are required.\n   *\n   * autoPaginate option will be ignored.\n   *\n   * @see {@link https://nodejs.org/api/stream.html}\n   *\n   * @param {Object} request - The request object that will be sent.\n   * @param {string} request.name - The name of the operation collection.\n   * @param {string} request.filter - The standard list filter.\n   * @param {number=} request.pageSize -\n   *   The maximum number of resources contained in the underlying API\n   *   response. If page streaming is performed per-resource, this\n   *   parameter does not affect the return value. If page streaming is\n   *   performed per-page, this determines the maximum number of\n   *   resources in a page.\n   * @param {Object=} options\n   *   Optional parameters. You can override the default settings for this call,\n   *   e.g, timeout, retries, paginations, etc. See [gax.CallOptions]{@link\n   *   https://googleapis.github.io/gax-nodejs/global.html#CallOptions} for the\n   *   details.\n   * @return {Stream} - An object stream which emits an object representing [google.longrunning.Operation]{@link external:\"google.longrunning.Operation\"} on 'data' event.\n   *\n   * @example\n   *\n   * const client = longrunning.operationsClient();\n   * const request = {\n   *   name: '',\n   *   filter: ''\n   * };\n   * client.listOperationsStream(request)\n   *   .on('data', element => {\n   *     // doThingsWith(element)\n   *   })\n   *   .on('error', err => {\n   *     console.error(err);\n   *   });\n   */\n  listOperationsStream(request: {}, options: gax.CallSettings) {\n    return PAGE_DESCRIPTORS.listOperations.createStream(\n      this._listOperations,\n      request,\n      options\n    );\n  }\n\n  /**\n   * Starts asynchronous cancellation on a long-running operation.  The server\n   * makes a best effort to cancel the operation, but success is not\n   * guaranteed.  If the server doesn't support this method, it returns\n   * `google.rpc.Code.UNIMPLEMENTED`.  Clients can use\n   * {@link Operations.GetOperation} or\n   * other methods to check whether the cancellation succeeded or whether the\n   * operation completed despite cancellation. On successful cancellation,\n   * the operation is not deleted; instead, it becomes an operation with\n   * an {@link Operation.error} value with a {@link google.rpc.Status.code} of\n   * 1, corresponding to `Code.CANCELLED`.\n   *\n   * @param {Object} request - The request object that will be sent.\n   * @param {string} request.name - The name of the operation resource to be cancelled.\n   * @param {Object=} options\n   *   Optional parameters. You can override the default settings for this call,\n   * e.g, timeout, retries, paginations, etc. See [gax.CallOptions]{@link\n   * https://googleapis.github.io/gax-nodejs/global.html#CallOptions} for the\n   * details.\n   * @param {function(?Error)=} callback\n   *   The function which will be called with the result of the API call.\n   * @return {Promise} - The promise which resolves when API call finishes.\n   *   The promise has a method named \"cancel\" which cancels the ongoing API\n   * call.\n   *\n   * @example\n   *\n   * const client = longrunning.operationsClient();\n   * await client.cancelOperation({name: ''});\n   */\n  cancelOperation(request, options?, callback?) {\n    if (options instanceof Function && callback === undefined) {\n      callback = options;\n      options = {};\n    }\n    options = options || {};\n    return this._cancelOperation(request, options, callback);\n  }\n\n  /**\n   * Deletes a long-running operation. This method indicates that the client is\n   * no longer interested in the operation result. It does not cancel the\n   * operation. If the server doesn't support this method, it returns\n   * `google.rpc.Code.UNIMPLEMENTED`.\n   *\n   * @param {Object} request - The request object that will be sent.\n   * @param {string} request.name - The name of the operation resource to be deleted.\n   * @param {Object=} options\n   *   Optional parameters. You can override the default settings for this call,\n   * e.g, timeout, retries, paginations, etc. See [gax.CallOptions]{@link\n   * https://googleapis.github.io/gax-nodejs/global.html#CallOptions} for the\n   * details.\n   * @param {function(?Error)=} callback\n   *   The function which will be called with the result of the API call.\n   * @return {Promise} - The promise which resolves when API call finishes.\n   *   The promise has a method named \"cancel\" which cancels the ongoing API\n   * call.\n   *\n   * @example\n   *\n   * const client = longrunning.operationsClient();\n   * await client.deleteOperation({name: ''});\n   */\n  deleteOperation(request, options, callback) {\n    if (options instanceof Function && callback === undefined) {\n      callback = options;\n      options = {};\n    }\n    options = options || {};\n    return this._deleteOperation(request, options, callback);\n  }\n}\n\nexport class OperationsClientBuilder {\n  operationsClient: (opts: OperationsClientOptions) => OperationsClient;\n\n  /**\n   * Builds a new Operations Client\n   * @param gaxGrpc {GrpcClient}\n   */\n  constructor(gaxGrpc: GrpcClient) {\n    const protoFilesRoot = path.join(__dirname, '..', '..');\n    // tslint:disable-next-line no-any\n    const operationsClient: any = gaxGrpc.loadProto(\n      protoFilesRoot,\n      'google/longrunning/operations.proto'\n    );\n    Object.assign(this, operationsClient.google.longrunning);\n\n    /**\n     * Build a new instance of {@link OperationsClient}.\n     *\n     * @param {Object=} opts - The optional parameters.\n     * @param {String=} opts.servicePath - Domain name of the API remote host.\n     * @param {number=} opts.port - The port on which to connect to the remote host.\n     * @param {grpc.ClientCredentials=} opts.sslCreds - A ClientCredentials for use with an SSL-enabled channel.\n     * @param {Object=} opts.clientConfig - The customized config to build the call settings. See {@link gax.constructSettings} for the format.\n     */\n    this.operationsClient = opts => {\n      return new OperationsClient(gaxGrpc, operationsClient, opts);\n    };\n    Object.assign(this.operationsClient, OperationsClient);\n  }\n}\n\n    \n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PageDescriptor.html":{"url":"classes/PageDescriptor.html","title":"class - PageDescriptor","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PageDescriptor\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/paginationCalls/pageDescriptor.ts\n        \n\n            \n                Description\n            \n            \n                A descriptor for methods that support pagination.\n\n            \n\n\n            \n                Implements\n            \n            \n                            Descriptor\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                requestPageSizeField\n                            \n                            \n                                requestPageTokenField\n                            \n                            \n                                resourceField\n                            \n                            \n                                responsePageTokenField\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                createStream\n                            \n                            \n                                getApiCaller\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(requestPageTokenField: string, responsePageTokenField: string, resourceField: string)\n                    \n                \n                        \n                            \n                                Defined in src/paginationCalls/pageDescriptor.ts:50\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        requestPageTokenField\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        responsePageTokenField\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        resourceField\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            requestPageSizeField\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/paginationCalls/pageDescriptor.ts:49\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            requestPageTokenField\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/paginationCalls/pageDescriptor.ts:47\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            resourceField\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/paginationCalls/pageDescriptor.ts:50\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            responsePageTokenField\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/paginationCalls/pageDescriptor.ts:48\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            createStream\n                        \n                        \n                    \n                \n            \n            \n                \ncreateStream(apiCall: GaxCall, request: literal type, options: CallSettings)\n                \n            \n\n\n            \n                \n                    Defined in src/paginationCalls/pageDescriptor.ts:65\n                \n            \n\n\n            \n                \n                    Creates a new object Stream which emits the resource on 'data' event.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    apiCall\n                                    \n                                                GaxCall\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    request\n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    options\n                                    \n                                                CallSettings\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Transform\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getApiCaller\n                        \n                        \n                    \n                \n            \n            \n                \ngetApiCaller(settings: CallSettings)\n                \n            \n\n\n            \n                \n                    Defined in src/paginationCalls/pageDescriptor.ts:121\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    settings\n                                    \n                                                CallSettings\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         APICaller\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import * as ended from 'is-stream-ended';\nimport {PassThrough, Transform} from 'stream';\n\nimport {APICaller} from '../apiCaller';\nimport {GaxCall} from '../apitypes';\nimport {Descriptor} from '../descriptor';\nimport {CallSettings} from '../gax';\nimport {NormalApiCaller} from '../normalCalls/normalApiCaller';\n\nimport {PagedApiCaller} from './pagedApiCaller';\n\n/**\n * A descriptor for methods that support pagination.\n */\nexport class PageDescriptor implements Descriptor {\n  requestPageTokenField: string;\n  responsePageTokenField: string;\n  requestPageSizeField?: string;\n  resourceField: string;\n\n  constructor(\n    requestPageTokenField: string,\n    responsePageTokenField: string,\n    resourceField: string\n  ) {\n    this.requestPageTokenField = requestPageTokenField;\n    this.responsePageTokenField = responsePageTokenField;\n    this.resourceField = resourceField;\n  }\n\n  /**\n   * Creates a new object Stream which emits the resource on 'data' event.\n   */\n  createStream(\n    apiCall: GaxCall,\n    request: {},\n    options: CallSettings\n  ): Transform {\n    const stream = new PassThrough({objectMode: true});\n    options = Object.assign({}, options, {autoPaginate: false});\n    const maxResults = 'maxResults' in options ? options.maxResults : -1;\n    let pushCount = 0;\n    let started = false;\n    function callback(err: Error | null, resources, next) {\n      if (err) {\n        stream.emit('error', err);\n        return;\n      }\n      for (let i = 0; i  {\n      if (!started) {\n        started = true;\n        apiCall(request, options, callback);\n      }\n    });\n    return stream;\n  }\n\n  getApiCaller(settings: CallSettings): APICaller {\n    if (!settings.autoPaginate) {\n      return new NormalApiCaller();\n    }\n    return new PagedApiCaller(this);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PagedApiCaller.html":{"url":"classes/PagedApiCaller.html","title":"class - PagedApiCaller","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PagedApiCaller\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/paginationCalls/pagedApiCaller.ts\n        \n\n\n\n            \n                Implements\n            \n            \n                            APICaller\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                pageDescriptor\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                call\n                            \n                            \n                                fail\n                            \n                            \n                                init\n                            \n                            \n                                result\n                            \n                            \n                                wrap\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(pageDescriptor: PageDescriptor)\n                    \n                \n                        \n                            \n                                Defined in src/paginationCalls/pagedApiCaller.ts:48\n                            \n                        \n\n                \n                    \n                            Creates an API caller that returns a stream to performs page-streaming.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        pageDescriptor\n                                                  \n                                                        \n                                                                        PageDescriptor\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nindicates the structure\nof page streaming to be performed.\n\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            pageDescriptor\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         PageDescriptor\n\n                        \n                    \n                        \n                            \n                                    Defined in src/paginationCalls/pagedApiCaller.ts:48\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            call\n                        \n                        \n                    \n                \n            \n            \n                \ncall(apiCall: SimpleCallbackFunction, argument: literal type, settings: CallOptions, canceller: OngoingCall)\n                \n            \n\n\n            \n                \n                    Defined in src/paginationCalls/pagedApiCaller.ts:110\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    apiCall\n                                    \n                                                SimpleCallbackFunction\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    argument\n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    settings\n                                    \n                                                CallOptions\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    canceller\n                                    \n                                                OngoingCall\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            fail\n                        \n                        \n                    \n                \n            \n            \n                \nfail(canceller: OngoingCallPromise, err: GoogleError)\n                \n            \n\n\n            \n                \n                    Defined in src/paginationCalls/pagedApiCaller.ts:154\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    canceller\n                                    \n                                                OngoingCallPromise\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    err\n                                    \n                                                GoogleError\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            init\n                        \n                        \n                    \n                \n            \n            \n                \ninit(settings: ApiCallerSettings, callback?: APICallback)\n                \n            \n\n\n            \n                \n                    Defined in src/paginationCalls/pagedApiCaller.ts:103\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    settings\n                                    \n                                                ApiCallerSettings\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    callback\n                                    \n                                                APICallback\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            result\n                        \n                        \n                    \n                \n            \n            \n                \nresult(canceller: OngoingCallPromise)\n                \n            \n\n\n            \n                \n                    Defined in src/paginationCalls/pagedApiCaller.ts:158\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    canceller\n                                    \n                                                OngoingCallPromise\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            wrap\n                        \n                        \n                    \n                \n            \n            \n                \nwrap(func: GRPCCall)\n                \n            \n\n\n            \n                \n                    Defined in src/paginationCalls/pagedApiCaller.ts:91\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    func\n                                    \n                                                GRPCCall\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         GRPCCall\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {APICaller, ApiCallerSettings} from '../apiCaller';\nimport {\n  GaxCall,\n  GRPCCall,\n  NextPageRequestType,\n  SimpleCallbackFunction,\n  UnaryCall,\n} from '../apitypes';\nimport {APICallback} from '../apitypes';\nimport {OngoingCall, OngoingCallPromise} from '../call';\nimport {CallOptions} from '../gax';\nimport {GoogleError} from '../googleError';\n\nimport {PageDescriptor} from './pageDescriptor';\n\nexport class PagedApiCaller implements APICaller {\n  pageDescriptor: PageDescriptor;\n  /**\n   * Creates an API caller that returns a stream to performs page-streaming.\n   *\n   * @private\n   * @constructor\n   * @param {PageDescriptor} pageDescriptor - indicates the structure\n   *   of page streaming to be performed.\n   */\n  constructor(pageDescriptor: PageDescriptor) {\n    this.pageDescriptor = pageDescriptor;\n  }\n\n  private createActualCallback(\n    request: NextPageRequestType,\n    callback: APICallback\n  ): APICallback {\n    const self = this;\n    return function fetchNextPageToken(\n      err: Error | null,\n      response: NextPageRequestType | undefined\n    ) {\n      if (err) {\n        callback(err);\n        return;\n      }\n      if (!response) {\n        callback(\n          new GoogleError('Undefined response in pagination method callback.')\n        );\n        return;\n      }\n      const resources = response[self.pageDescriptor.resourceField];\n      const pageToken = response[self.pageDescriptor.responsePageTokenField];\n      if (pageToken) {\n        request![self.pageDescriptor.requestPageTokenField] = pageToken;\n        callback(err, resources, request, response);\n      } else {\n        callback(err, resources, null, response);\n      }\n    };\n  }\n\n  wrap(func: GRPCCall): GRPCCall {\n    const self = this;\n    return function wrappedCall(argument, metadata, options, callback) {\n      return (func as UnaryCall)(\n        argument,\n        metadata,\n        options,\n        self.createActualCallback(argument, callback)\n      );\n    };\n  }\n\n  init(settings: ApiCallerSettings, callback?: APICallback) {\n    if (callback) {\n      return new OngoingCall(callback);\n    }\n    return new OngoingCallPromise(settings.promise);\n  }\n\n  call(\n    apiCall: SimpleCallbackFunction,\n    argument: {[index: string]: {}},\n    settings: CallOptions,\n    canceller: OngoingCall\n  ) {\n    argument = Object.assign({}, argument);\n    if (settings.pageToken) {\n      argument[this.pageDescriptor.requestPageTokenField] = settings.pageToken;\n    }\n    if (settings.pageSize) {\n      argument[this.pageDescriptor.requestPageSizeField!] = settings.pageSize;\n    }\n    if (!settings.autoPaginate) {\n      // they don't want auto-pagination this time - okay, just call once\n      canceller.call(apiCall, argument);\n      return;\n    }\n\n    const maxResults = settings.maxResults || -1;\n    const allResources: Array = [];\n    function pushResources(err, resources, next) {\n      if (err) {\n        canceller.callback!(err);\n        return;\n      }\n\n      for (let i = 0; i \n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ParseResult.html":{"url":"interfaces/ParseResult.html","title":"interface - ParseResult","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  ParseResult\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/pathTemplate.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        segments\n                                \n                                \n                                        size\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        segments\n                                    \n                                \n                                \n                                    \n                                        segments:         Segment[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Segment[]\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        size\n                                    \n                                \n                                \n                                    \n                                        size:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import has = require('lodash.has');\nimport * as util from 'util';\nimport * as extras from './parserExtras';\nconst parser = require('./pathTemplateParser');\n\nexport interface ParseResult {\n  size: number;\n  segments: Segment[];\n}\n\nexport interface Segment {\n  kind: number;\n  literal: string;\n}\n\nexport interface Bindings {\n  [index: string]: string;\n}\n\nexport class PathTemplate {\n  private readonly parseResult: ParseResult;\n\n  get size(): number {\n    return this.parseResult.size;\n  }\n\n  get segments(): Segment[] {\n    return this.parseResult.segments;\n  }\n\n  /**\n   * @param {String} data the of the template\n   *\n   * @constructor\n   */\n  constructor(data: string) {\n    this.parseResult = extras.finishParse(parser.parse(data));\n  }\n\n  /**\n   * Matches a fully-qualified path template string.\n   *\n   * @param {String} path a fully-qualified path template string\n   * @return {Object} contains const names matched to binding values\n   * @throws {TypeError} if path can't be matched to this template\n   */\n  match(path: string): Bindings {\n    const pathSegments = path.split('/');\n    const bindings: Bindings = {};\n    let segmentCount = this.size;\n    let current: string;\n    let index = 0;\n    this.segments.forEach(segment => {\n      if (index > pathSegments.length) {\n        return;\n      }\n      if (segment.kind === extras.BINDING) {\n        current = segment.literal;\n      } else if (segment.kind === extras.TERMINAL) {\n        if (segment.literal === '*') {\n          bindings[current] = pathSegments[index];\n          index += 1;\n        } else if (segment.literal === '**') {\n          const size = pathSegments.length - segmentCount + 1;\n          segmentCount += size - 1;\n          bindings[current] = pathSegments.slice(index, index + size).join('/');\n          index += size;\n        } else if (segment.literal === pathSegments[index]) {\n          index += 1;\n        } else {\n          const msg = util.format(\n            \"mismatched literal (index=%d): '%s' != '%s'\",\n            index,\n            segment.literal,\n            pathSegments[index]\n          );\n          throw new TypeError(msg);\n        }\n      }\n    });\n    if (index !== pathSegments.length || index !== segmentCount) {\n      const msg = util.format(\n        'match error: could not instantiate a path template from %s',\n        path\n      );\n      throw new TypeError(msg);\n    }\n    return bindings;\n  }\n\n  /**\n   * Renders a path template using the provided bindings.\n   *\n   * @param {Object} bindings a mapping of const names to binding strings\n   * @return {String} a rendered representation of the path template\n   * @throws {TypeError} if a key is missing, or if a sub-template cannot be\n   *   parsed\n   */\n  render(bindings: Bindings): string {\n    const out: Segment[] = [];\n    let inABinding = false;\n    this.segments.forEach(segment => {\n      if (segment.kind === extras.BINDING) {\n        if (!has(bindings, segment.literal)) {\n          const msg = util.format(\n            'Value for key %s is not provided in %s',\n            segment.literal,\n            bindings\n          );\n          throw new TypeError(msg);\n        }\n        const tmp = new PathTemplate(bindings[segment.literal]);\n        Array.prototype.push.apply(out, tmp.segments);\n        inABinding = true;\n      } else if (segment.kind === extras.END_BINDING) {\n        inABinding = false;\n      } else if (inABinding) {\n        return;\n      } else {\n        out.push(segment);\n      }\n    });\n\n    const result = formatSegments(out);\n    this.match(result);\n    return result;\n  }\n\n  /**\n   * Renders the path template.\n   *\n   * @return {string} contains const names matched to binding values\n   */\n  inspect() {\n    return formatSegments(this.segments);\n  }\n}\n\n/**\n * Creates the string representattion for the segments.\n * @param {Object[]} segments - The array of segments.\n * @return {string} - A string representing segments in the path template\n *   format.\n */\nfunction formatSegments(segments: Segment[]): string {\n  let out = '';\n  let slash = true;\n  segments.forEach(segment => {\n    if (segment.kind === extras.TERMINAL) {\n      if (slash) {\n        out += '/';\n      }\n      out += segment.literal;\n      return;\n    }\n    slash = true;\n    if (segment.kind === extras.BINDING) {\n      out += '/{' + segment.literal + '=';\n      slash = false;\n    } else {\n      out += segment.literal + '}';\n    }\n  });\n  return out.substring(1);\n}\n\n    \n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PathTemplate.html":{"url":"classes/PathTemplate.html","title":"class - PathTemplate","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PathTemplate\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/pathTemplate.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                inspect\n                            \n                            \n                                match\n                            \n                            \n                                render\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    size\n                                \n                                \n                                    segments\n                                \n                            \n                        \n                    \n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(data: string)\n                    \n                \n                        \n                            \n                                Defined in src/pathTemplate.ts:64\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        data\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                the of the template\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            inspect\n                        \n                        \n                    \n                \n            \n            \n                \ninspect()\n                \n            \n\n\n            \n                \n                    Defined in src/pathTemplate.ts:169\n                \n            \n\n\n            \n                \n                    Renders the path template.\n\n\n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        contains const names matched to binding values\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            match\n                        \n                        \n                    \n                \n            \n            \n                \nmatch(path: string)\n                \n            \n\n\n            \n                \n                    Defined in src/pathTemplate.ts:82\n                \n            \n\n\n            \n                \n                    Matches a fully-qualified path template string.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    path\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        a fully-qualified path template string\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Bindings\n\n                    \n                    \n                        contains const names matched to binding values\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            render\n                        \n                        \n                    \n                \n            \n            \n                \nrender(bindings: Bindings)\n                \n            \n\n\n            \n                \n                    Defined in src/pathTemplate.ts:134\n                \n            \n\n\n            \n                \n                    Renders a path template using the provided bindings.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    bindings\n                                    \n                                                Bindings\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        a mapping of const names to binding strings\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        a rendered representation of the path template\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        size\n                    \n                \n\n                \n                    \n                        getsize()\n                    \n                \n                            \n                                \n                                    Defined in src/pathTemplate.ts:58\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        segments\n                    \n                \n\n                \n                    \n                        getsegments()\n                    \n                \n                            \n                                \n                                    Defined in src/pathTemplate.ts:62\n                                \n                            \n\n            \n        \n\n    \n\n\n    \n        import has = require('lodash.has');\nimport * as util from 'util';\nimport * as extras from './parserExtras';\nconst parser = require('./pathTemplateParser');\n\nexport interface ParseResult {\n  size: number;\n  segments: Segment[];\n}\n\nexport interface Segment {\n  kind: number;\n  literal: string;\n}\n\nexport interface Bindings {\n  [index: string]: string;\n}\n\nexport class PathTemplate {\n  private readonly parseResult: ParseResult;\n\n  get size(): number {\n    return this.parseResult.size;\n  }\n\n  get segments(): Segment[] {\n    return this.parseResult.segments;\n  }\n\n  /**\n   * @param {String} data the of the template\n   *\n   * @constructor\n   */\n  constructor(data: string) {\n    this.parseResult = extras.finishParse(parser.parse(data));\n  }\n\n  /**\n   * Matches a fully-qualified path template string.\n   *\n   * @param {String} path a fully-qualified path template string\n   * @return {Object} contains const names matched to binding values\n   * @throws {TypeError} if path can't be matched to this template\n   */\n  match(path: string): Bindings {\n    const pathSegments = path.split('/');\n    const bindings: Bindings = {};\n    let segmentCount = this.size;\n    let current: string;\n    let index = 0;\n    this.segments.forEach(segment => {\n      if (index > pathSegments.length) {\n        return;\n      }\n      if (segment.kind === extras.BINDING) {\n        current = segment.literal;\n      } else if (segment.kind === extras.TERMINAL) {\n        if (segment.literal === '*') {\n          bindings[current] = pathSegments[index];\n          index += 1;\n        } else if (segment.literal === '**') {\n          const size = pathSegments.length - segmentCount + 1;\n          segmentCount += size - 1;\n          bindings[current] = pathSegments.slice(index, index + size).join('/');\n          index += size;\n        } else if (segment.literal === pathSegments[index]) {\n          index += 1;\n        } else {\n          const msg = util.format(\n            \"mismatched literal (index=%d): '%s' != '%s'\",\n            index,\n            segment.literal,\n            pathSegments[index]\n          );\n          throw new TypeError(msg);\n        }\n      }\n    });\n    if (index !== pathSegments.length || index !== segmentCount) {\n      const msg = util.format(\n        'match error: could not instantiate a path template from %s',\n        path\n      );\n      throw new TypeError(msg);\n    }\n    return bindings;\n  }\n\n  /**\n   * Renders a path template using the provided bindings.\n   *\n   * @param {Object} bindings a mapping of const names to binding strings\n   * @return {String} a rendered representation of the path template\n   * @throws {TypeError} if a key is missing, or if a sub-template cannot be\n   *   parsed\n   */\n  render(bindings: Bindings): string {\n    const out: Segment[] = [];\n    let inABinding = false;\n    this.segments.forEach(segment => {\n      if (segment.kind === extras.BINDING) {\n        if (!has(bindings, segment.literal)) {\n          const msg = util.format(\n            'Value for key %s is not provided in %s',\n            segment.literal,\n            bindings\n          );\n          throw new TypeError(msg);\n        }\n        const tmp = new PathTemplate(bindings[segment.literal]);\n        Array.prototype.push.apply(out, tmp.segments);\n        inABinding = true;\n      } else if (segment.kind === extras.END_BINDING) {\n        inABinding = false;\n      } else if (inABinding) {\n        return;\n      } else {\n        out.push(segment);\n      }\n    });\n\n    const result = formatSegments(out);\n    this.match(result);\n    return result;\n  }\n\n  /**\n   * Renders the path template.\n   *\n   * @return {string} contains const names matched to binding values\n   */\n  inspect() {\n    return formatSegments(this.segments);\n  }\n}\n\n/**\n * Creates the string representattion for the segments.\n * @param {Object[]} segments - The array of segments.\n * @return {string} - A string representing segments in the path template\n *   format.\n */\nfunction formatSegments(segments: Segment[]): string {\n  let out = '';\n  let slash = true;\n  segments.forEach(segment => {\n    if (segment.kind === extras.TERMINAL) {\n      if (slash) {\n        out += '/';\n      }\n      out += segment.literal;\n      return;\n    }\n    slash = true;\n    if (segment.kind === extras.BINDING) {\n      out += '/{' + segment.literal + '=';\n      slash = false;\n    } else {\n      out += segment.literal + '}';\n    }\n  });\n  return out.substring(1);\n}\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/RequestType.html":{"url":"interfaces/RequestType.html","title":"interface - RequestType","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  RequestType\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/apitypes.ts\n        \n\n\n\n\n\n\n    \n\n\n    \n        import {Duplex} from 'stream';\n\nimport {CancellablePromise} from './call';\nimport {CallOptions} from './gax';\nimport {GoogleError} from './googleError';\nimport {Operation} from './longRunningCalls/longrunning';\n\n// gRPC functions return object with `.cancel()` method that can be used for\n// canceling the ongoing call.\nexport interface GRPCCallResult {\n  cancel(): void;\n}\n\n// All GAX calls take RequestType and return ResultTuple, which can contain up\n// to three elements. The first element is always a response (post-processed for\n// special types of call such as pagination or long-running), the second\n// parameter is defined for paginated calls and stores the next page request\n// object, the third parameter stores raw (unprocessed) response object in cases\n// when it might be useful for users.\nexport interface RequestType {}\nexport type ResponseType = {} | null;\nexport type NextPageRequestType = {\n  [index: string]: string;\n} | null;\nexport type RawResponseType = Operation | {};\nexport type ResultTuple = [\n  ResponseType,\n  NextPageRequestType | undefined,\n  RawResponseType | undefined\n];\n\nexport interface SimpleCallbackFunction {\n  (argument: RequestType, callback: APICallback): GRPCCallResult;\n}\n\nexport type APICallback = (\n  err: GoogleError | null,\n  response?: ResponseType,\n  next?: NextPageRequestType,\n  rawResponse?: RawResponseType\n) => void;\n\n// The following five types mimic various gRPC calls (regular UnaryCall and\n// various streaming calls).\nexport type UnaryCall = (\n  argument: {},\n  metadata: {},\n  options: {},\n  callback: APICallback\n) => GRPCCallResult;\nexport type ServerStreamingCall = (\n  argument: {},\n  metadata: {},\n  options: {}\n) => Duplex & GRPCCallResult;\nexport type ClientStreamingCall = (\n  metadata: {},\n  options: {},\n  callback?: APICallback\n) => Duplex & GRPCCallResult;\nexport type BiDiStreamingCall = (\n  metadata: {},\n  options: {}\n) => Duplex & GRPCCallResult;\nexport type GRPCCall =\n  | UnaryCall\n  | ServerStreamingCall\n  | ClientStreamingCall\n  | BiDiStreamingCall;\n\n// GAX wraps gRPC calls so that the wrapper functions return either a\n// cancellable promise, or a stream (also cancellable!)\nexport type CancellableStream = Duplex & GRPCCallResult;\nexport type GaxCallResult = CancellablePromise | CancellableStream;\nexport interface GaxCallPromise {\n  (\n    argument: {},\n    callOptions?: CallOptions,\n    callback?: APICallback\n  ): CancellablePromise;\n}\nexport interface GaxCallStream {\n  (\n    argument: {},\n    callOptions?: CallOptions,\n    callback?: APICallback\n  ): CancellableStream;\n}\nexport interface GaxCall {\n  (\n    argument: {},\n    callOptions?: CallOptions,\n    callback?: APICallback\n  ): GaxCallResult;\n}\nexport interface GRPCCallOtherArgs {\n  options?: {deadline?: Date};\n  headers?: {};\n  metadataBuilder: (abTests?: {}, headers?: {}) => {};\n}\n\n    \n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/RetryOptions.html":{"url":"classes/RetryOptions.html","title":"class - RetryOptions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  RetryOptions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/gax.ts\n        \n\n            \n                Description\n            \n            \n                Encapsulates the overridable settings for a particular API call.\nCallOptions is an optional arg for all GAX API calls.  It is used to\nconfigure the settings of a specific API call.\nWhen provided, its values override the GAX service defaults for that\nparticular call.\nTypically the API clients will accept this as the second to the last\nargument. See the examples below.\n\n            \n\n\n\n            \n                Example\n            \n            \n                        \n                            // suppress bundling for bundled method.\napi.bundlingMethod(\nparam, {optParam: aValue, isBundling: false}, function(err, response) {\n// handle response.\n});\n                        \n                        \n                            // suppress streaming for page-streaming method.\napi.pageStreamingMethod(\nparam, {optParam: aValue, autoPaginate: false}, function(err, page) {\n// not returning a stream, but callback is called with the paged response.\n});\n                        \n            \n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                backoffSettings\n                            \n                            \n                                retryCodes\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(retryCodes: number[], backoffSettings: BackoffSettings)\n                    \n                \n                        \n                            \n                                Defined in src/gax.ts:91\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        retryCodes\n                                                  \n                                                        \n                                                                    number[]\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        backoffSettings\n                                                  \n                                                        \n                                                                        BackoffSettings\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            backoffSettings\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         BackoffSettings\n\n                        \n                    \n                        \n                            \n                                    Defined in src/gax.ts:91\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            retryCodes\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     number[]\n\n                        \n                    \n                        \n                            \n                                    Defined in src/gax.ts:90\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {BundleOptions} from './bundlingCalls/bundleExecutor';\n\n/**\n * Encapsulates the overridable settings for a particular API call.\n *\n * ``CallOptions`` is an optional arg for all GAX API calls.  It is used to\n * configure the settings of a specific API call.\n *\n * When provided, its values override the GAX service defaults for that\n * particular call.\n *\n * Typically the API clients will accept this as the second to the last\n * argument. See the examples below.\n * @typedef {Object} CallOptions\n * @property {number=} timeout - The client-side timeout for API calls.\n * @property {RetryOptions=} retry - determines whether and how to retry\n *   on transient errors. When set to null, the call will not retry.\n * @property {boolean=} autoPaginate - If set to false and the call is\n *   configured for paged iteration, page unrolling is not performed, instead\n *   the callback will be called with the response object.\n * @property {Object=} pageToken - If set and the call is configured for\n *   paged iteration, paged iteration is not performed and requested with this\n *   pageToken.\n * @property {number} maxResults - If set and the call is configured for\n *   paged iteration, the call will stop when the number of response elements\n *   reaches to the specified size. By default, it will unroll the page to\n *   the end of the list.\n * @property {boolean=} isBundling - If set to false and the call is configured\n *   for bundling, bundling is not performed.\n * @property {BackoffSettings=} longrunning - BackoffSettings used for polling.\n * @property {Function=} promise - A constructor for a promise that implements the ES6\n * specification of promise which will be used to create promises. If not\n * provided, native promises will be used.\n * @example\n * // suppress bundling for bundled method.\n * api.bundlingMethod(\n *     param, {optParam: aValue, isBundling: false}, function(err, response) {\n *   // handle response.\n * });\n * @example\n * // suppress streaming for page-streaming method.\n * api.pageStreamingMethod(\n *     param, {optParam: aValue, autoPaginate: false}, function(err, page) {\n *   // not returning a stream, but callback is called with the paged response.\n * });\n */\n\n/**\n * Per-call configurable settings for retrying upon transient failure.\n * @typedef {Object} RetryOptions\n * @property {String[]} retryCodes\n * @property {BackoffSettings} backoffSettings\n */\nexport class RetryOptions {\n  retryCodes: number[];\n  backoffSettings: BackoffSettings;\n  constructor(retryCodes: number[], backoffSettings: BackoffSettings) {\n    this.retryCodes = retryCodes;\n    this.backoffSettings = backoffSettings;\n  }\n}\n\n/**\n * Parameters to the exponential backoff algorithm for retrying.\n * @typedef {Object} BackoffSettings\n * @property {number} initialRetryDelayMillis - the initial delay time,\n *   in milliseconds, between the completion of the first failed request and the\n *   initiation of the first retrying request.\n * @property {number} retryDelayMultiplier - the multiplier by which to\n *   increase the delay time between the completion of failed requests, and the\n *   initiation of the subsequent retrying request.\n * @property {number} maxRetryDelayMillis - the maximum delay time, in\n *   milliseconds, between requests. When this value is reached,\n *   ``retryDelayMultiplier`` will no longer be used to increase delay time.\n * @property {number} initialRpcTimeoutMillis - the initial timeout parameter\n *   to the request.\n * @propetry {number} rpcTimeoutMultiplier - the multiplier by which to\n *   increase the timeout parameter between failed requests.\n * @property {number} maxRpcTimeoutMillis - the maximum timeout parameter, in\n *   milliseconds, for a request. When this value is reached,\n *   ``rpcTimeoutMultiplier`` will no longer be used to increase the timeout.\n * @property {number} totalTimeoutMillis - the total time, in milliseconds,\n *   starting from when the initial request is sent, after which an error will\n *   be returned, regardless of the retrying attempts made meanwhile.\n */\nexport interface BackoffSettings {\n  maxRetries?: number;\n  initialRetryDelayMillis: number;\n  retryDelayMultiplier: number;\n  maxRetryDelayMillis: number;\n  initialRpcTimeoutMillis?: number | null;\n  maxRpcTimeoutMillis?: number | null;\n  totalTimeoutMillis?: number | null;\n  rpcTimeoutMultiplier?: number | null;\n}\n\n/**\n * Parameter to configure bundling behavior.\n * @typedef {Object} BundleOptions\n * @property {number} elementCountThreshold -\n *   the bundled request will be sent once the count of outstanding elements\n *   in the repeated field reaches this value.\n * @property {number} elementCountLimit -\n *   represents a hard limit on the number of elements in the repeated field\n *   of the bundle; if adding a request to a bundle would exceed this value,\n *   the bundle is sent and the new request is added to a fresh bundle. It is\n *   invalid for a single request to exceed this limit.\n * @property {number} requestByteThreshold -\n *   the bundled request will be sent once the count of bytes in the request\n *   reaches this value. Note that this value is pessimistically approximated\n *   by summing the bytesizes of the elements in the repeated field, and\n *   therefore may be an under-approximation.\n * @property {number} requestByteLimit -\n *   represents a hard limit on the size of the bundled request; if adding\n *   a request to a bundle would exceed this value, the bundle is sent and\n *   the new request is added to a fresh bundle. It is invalid for a single\n *   request to exceed this limit. Note that this value is pessimistically\n *   approximated by summing the bytesizes of the elements in the repeated\n *   field, with a buffer applied to correspond to the resulting\n *   under-approximation.\n * @property {number} delayThreshold -\n *   the bundled request will be sent this amount of time after the first\n *   element in the bundle was added to it.\n */\n\nexport interface CallOptions {\n  timeout?: number;\n  retry?: RetryOptions | null;\n  autoPaginate?: boolean;\n  pageToken?: string;\n  pageSize?: number;\n  maxResults?: number;\n  maxRetries?: number;\n  // tslint:disable-next-line no-any\n  otherArgs?: {[index: string]: any};\n  bundleOptions?: BundleOptions | null;\n  isBundling?: boolean;\n  longrunning?: BackoffSettings;\n  promise?: PromiseConstructor;\n}\n\nexport class CallSettings {\n  timeout: number;\n  retry?: RetryOptions | null;\n  autoPaginate?: boolean;\n  pageToken?: string;\n  pageSize?: number;\n  maxResults?: number;\n  // tslint:disable-next-line no-any\n  otherArgs: {[index: string]: any};\n  bundleOptions?: BundleOptions | null;\n  isBundling: boolean;\n  longrunning?: BackoffSettings;\n  promise: PromiseConstructor;\n\n  /**\n   * @param {Object} settings - An object containing parameters of this settings.\n   * @param {number} settings.timeout - The client-side timeout for API calls.\n   *   This parameter is ignored for retrying calls.\n   * @param {RetryOptions} settings.retry - The configuration for retrying upon\n   *   transient error. If set to null, this call will not retry.\n   * @param {boolean} settings.autoPaginate - If there is no `pageDescriptor`,\n   *   this attrbute has no meaning. Otherwise, determines whether a page\n   * streamed response should make the page structure transparent to the user by\n   *   flattening the repeated field in the returned generator.\n   * @param {number} settings.pageToken - If there is no `pageDescriptor`,\n   *   this attribute has no meaning. Otherwise, determines the page token used\n   * in the page streaming request.\n   * @param {Object} settings.otherArgs - Additional arguments to be passed to\n   *   the API calls.\n   * @param {Function=} settings.promise - A constructor for a promise that\n   * implements the ES6 specification of promise. If not provided, native\n   * promises will be used.\n   *\n   * @constructor\n   */\n  constructor(settings?: CallOptions) {\n    settings = settings || {};\n    this.timeout = settings.timeout || 30 * 1000;\n    this.retry = settings.retry;\n    this.autoPaginate =\n      'autoPaginate' in settings ? settings.autoPaginate : true;\n    this.pageToken = settings.pageToken;\n    this.maxResults = settings.maxResults;\n    this.otherArgs = settings.otherArgs || {};\n    this.bundleOptions = settings.bundleOptions;\n    this.isBundling = 'isBundling' in settings ? settings.isBundling! : true;\n    this.longrunning =\n      'longrunning' in settings ? settings.longrunning : undefined;\n    this.promise = 'promise' in settings ? settings.promise! : Promise;\n  }\n\n  /**\n   * Returns a new CallSettings merged from this and a CallOptions object.\n   *\n   * @param {CallOptions} options - an instance whose values override\n   *   those in this object. If null, ``merge`` returns a copy of this\n   *   object\n   * @return {CallSettings} The merged CallSettings instance.\n   */\n  merge(options?: CallOptions | null) {\n    if (!options) {\n      return new CallSettings(this);\n    }\n    let timeout = this.timeout;\n    let retry = this.retry;\n    let autoPaginate = this.autoPaginate;\n    let pageToken = this.pageToken;\n    let pageSize = this.pageSize;\n    let maxResults = this.maxResults;\n    let otherArgs = this.otherArgs;\n    let isBundling = this.isBundling;\n    let longrunning = this.longrunning;\n    let promise = this.promise;\n    if ('timeout' in options) {\n      timeout = options.timeout!;\n    }\n    if ('retry' in options) {\n      retry = options.retry;\n    }\n\n    if ('autoPaginate' in options && !options.autoPaginate) {\n      autoPaginate = false;\n    }\n\n    if ('pageToken' in options) {\n      autoPaginate = false;\n      pageToken = options.pageToken;\n    }\n\n    if ('pageSize' in options) {\n      pageSize = options.pageSize;\n    }\n\n    if ('maxResults' in options) {\n      maxResults = options.maxResults;\n    }\n\n    if ('otherArgs' in options) {\n      otherArgs = {};\n      // tslint:disable-next-line forin\n      for (const key in this.otherArgs) {\n        otherArgs[key] = this.otherArgs[key];\n      }\n      // tslint:disable-next-line forin\n      for (const optionsKey in options.otherArgs!) {\n        otherArgs[optionsKey] = options.otherArgs![optionsKey];\n      }\n    }\n\n    if ('isBundling' in options) {\n      isBundling = options.isBundling!;\n    }\n\n    if ('maxRetries' in options) {\n      retry!.backoffSettings!.maxRetries = options.maxRetries;\n      delete retry!.backoffSettings!.totalTimeoutMillis;\n    }\n\n    if ('longrunning' in options) {\n      longrunning = options.longrunning;\n    }\n\n    if ('promise' in options) {\n      promise = options.promise!;\n    }\n\n    return new CallSettings({\n      timeout,\n      retry,\n      bundleOptions: this.bundleOptions,\n      longrunning,\n      autoPaginate,\n      pageToken,\n      pageSize,\n      maxResults,\n      otherArgs,\n      isBundling,\n      promise,\n    });\n  }\n}\n\n/**\n * Per-call configurable settings for retrying upon transient failure.\n *\n * @param {number[]} retryCodes - a list of Google API canonical error codes\n *   upon which a retry should be attempted.\n * @param {BackoffSettings} backoffSettings - configures the retry\n *   exponential backoff algorithm.\n * @return {RetryOptions} A new RetryOptions object.\n *\n */\nexport function createRetryOptions(\n  retryCodes: number[],\n  backoffSettings: BackoffSettings\n): RetryOptions {\n  return {\n    retryCodes,\n    backoffSettings,\n  };\n}\n\n/**\n * Parameters to the exponential backoff algorithm for retrying.\n *\n * @param {number} initialRetryDelayMillis - the initial delay time,\n *   in milliseconds, between the completion of the first failed request and the\n *   initiation of the first retrying request.\n * @param {number} retryDelayMultiplier - the multiplier by which to\n *   increase the delay time between the completion of failed requests, and the\n *   initiation of the subsequent retrying request.\n * @param {number} maxRetryDelayMillis - the maximum delay time, in\n *   milliseconds, between requests. When this value is reached,\n *   ``retryDelayMultiplier`` will no longer be used to increase delay time.\n * @param {number} initialRpcTimeoutMillis - the initial timeout parameter\n *   to the request.\n * @param {number} rpcTimeoutMultiplier - the multiplier by which to\n *   increase the timeout parameter between failed requests.\n * @param {number} maxRpcTimeoutMillis - the maximum timeout parameter, in\n *   milliseconds, for a request. When this value is reached,\n *   ``rpcTimeoutMultiplier`` will no longer be used to increase the timeout.\n * @param {number} totalTimeoutMillis - the total time, in milliseconds,\n *   starting from when the initial request is sent, after which an error will\n *   be returned, regardless of the retrying attempts made meanwhile.\n * @return {BackoffSettings} a new settings.\n *\n */\nexport function createBackoffSettings(\n  initialRetryDelayMillis: number,\n  retryDelayMultiplier: number,\n  maxRetryDelayMillis: number,\n  initialRpcTimeoutMillis: number | null,\n  rpcTimeoutMultiplier: number | null,\n  maxRpcTimeoutMillis: number | null,\n  totalTimeoutMillis: number | null\n): BackoffSettings {\n  return {\n    initialRetryDelayMillis,\n    retryDelayMultiplier,\n    maxRetryDelayMillis,\n    initialRpcTimeoutMillis,\n    rpcTimeoutMultiplier,\n    maxRpcTimeoutMillis,\n    totalTimeoutMillis,\n  };\n}\n\nexport function createDefaultBackoffSettings() {\n  return createBackoffSettings(100, 1.3, 60000, null, null, null, null);\n}\n\n/**\n * Parameters to the exponential backoff algorithm for retrying.\n * This function is unsupported, and intended for internal use only.\n *\n * @param {number} initialRetryDelayMillis - the initial delay time,\n *   in milliseconds, between the completion of the first failed request and the\n *   initiation of the first retrying request.\n * @param {number} retryDelayMultiplier - the multiplier by which to\n *   increase the delay time between the completion of failed requests, and the\n *   initiation of the subsequent retrying request.\n * @param {number} maxRetryDelayMillis - the maximum delay time, in\n *   milliseconds, between requests. When this value is reached,\n *   ``retryDelayMultiplier`` will no longer be used to increase delay time.\n * @param {number} initialRpcTimeoutMillis - the initial timeout parameter\n *   to the request.\n * @param {number} rpcTimeoutMultiplier - the multiplier by which to\n *   increase the timeout parameter between failed requests.\n * @param {number} maxRpcTimeoutMillis - the maximum timeout parameter, in\n *   milliseconds, for a request. When this value is reached,\n *   ``rpcTimeoutMultiplier`` will no longer be used to increase the timeout.\n * @param {number} maxRetries - the maximum number of retrying attempts that\n *   will be made. If reached, an error will be returned.\n * @return {BackoffSettings} a new settings.\n *\n */\nexport function createMaxRetriesBackoffSettings(\n  initialRetryDelayMillis: number,\n  retryDelayMultiplier: number,\n  maxRetryDelayMillis: number,\n  initialRpcTimeoutMillis: number,\n  rpcTimeoutMultiplier: number,\n  maxRpcTimeoutMillis: number,\n  maxRetries: number\n): BackoffSettings {\n  return {\n    initialRetryDelayMillis,\n    retryDelayMultiplier,\n    maxRetryDelayMillis,\n    initialRpcTimeoutMillis,\n    rpcTimeoutMultiplier,\n    maxRpcTimeoutMillis,\n    maxRetries,\n  };\n}\n\n/**\n * Creates a new {@link BundleOptions}.\n *\n * @private\n * @param {Object} options - An object to hold optional parameters. See\n *   properties for the content of options.\n * @return {BundleOptions} - A new options.\n */\nexport function createBundleOptions(options: BundlingConfig): BundleOptions {\n  const params = [\n    'element_count_threshold',\n    'element_count_limit',\n    'request_byte_threshold',\n    'request_byte_limit',\n    'delay_threshold_millis',\n  ];\n  params.forEach(param => {\n    if (param in options && typeof options[param] !== 'number') {\n      throw new Error(`${param} should be a number`);\n    }\n  });\n\n  const elementCountThreshold = options.element_count_threshold || 0;\n  const elementCountLimit = options.element_count_limit || 0;\n  const requestByteThreshold = options.request_byte_threshold || 0;\n  const requestByteLimit = options.request_byte_limit || 0;\n  const delayThreshold = options.delay_threshold_millis || 0;\n\n  if (\n    elementCountThreshold === 0 &&\n    requestByteThreshold === 0 &&\n    delayThreshold === 0\n  ) {\n    throw new Error('one threshold should be > 0');\n  }\n  return {\n    elementCountThreshold,\n    elementCountLimit,\n    requestByteThreshold,\n    requestByteLimit,\n    delayThreshold,\n  };\n}\n\n/**\n * Helper for {@link constructSettings}\n *\n * @private\n *\n * @param {Object} methodConfig - A dictionary representing a single\n *   `methods` entry of the standard API client config file. (See\n *   {@link constructSettings} for information on this yaml.)\n * @param {?Object} retryCodes - A dictionary parsed from the\n *   `retry_codes_def` entry of the standard API client config\n *   file. (See {@link constructSettings} for information on this yaml.)\n * @param {Object} retryParams - A dictionary parsed from the\n *   `retry_params` entry of the standard API client config\n *   file. (See {@link constructSettings} for information on this yaml.)\n * @param {Object} retryNames - A dictionary mapping the string names\n *   used in the standard API client config file to API response\n *   status codes.\n * @return {?RetryOptions} The new retry options.\n */\nfunction constructRetry(\n  methodConfig: MethodConfig,\n  retryCodes: {[index: string]: string[]},\n  retryParams: {[index: string]: {}},\n  retryNames: {[index: string]: {}}\n): RetryOptions | null | undefined {\n  if (!methodConfig) {\n    return null;\n  }\n\n  let codes: number[] | null = null;\n  if (retryCodes && 'retry_codes_name' in methodConfig) {\n    const retryCodesName = methodConfig['retry_codes_name'];\n    codes = (retryCodes[retryCodesName] || []).map(name => {\n      return Number(retryNames[name]);\n    });\n  }\n\n  let backoffSettings: BackoffSettings | null = null;\n  if (retryParams && 'retry_params_name' in methodConfig) {\n    const params = retryParams[\n      methodConfig.retry_params_name\n    ] as RetryParamsConfig;\n    backoffSettings = createBackoffSettings(\n      params.initial_retry_delay_millis,\n      params.retry_delay_multiplier,\n      params.max_retry_delay_millis,\n      params.initial_rpc_timeout_millis,\n      params.rpc_timeout_multiplier,\n      params.max_rpc_timeout_millis,\n      params.total_timeout_millis\n    );\n  }\n  return createRetryOptions(codes!, backoffSettings!);\n}\n\n/**\n * Helper for {@link constructSettings}\n *\n * Takes two retry options, and merges them into a single RetryOption instance.\n *\n * @private\n *\n * @param {RetryOptions} retry - The base RetryOptions.\n * @param {RetryOptions} overrides - The RetryOptions used for overriding\n *   `retry`. Use the values if it is not null. If entire `overrides` is null,\n *   ignore the base retry and return null.\n * @return {?RetryOptions} The merged RetryOptions.\n */\nfunction mergeRetryOptions(\n  retry: RetryOptions,\n  overrides: RetryOptions\n): RetryOptions | null {\n  if (!overrides) {\n    return null;\n  }\n\n  if (!overrides.retryCodes && !overrides.backoffSettings) {\n    return retry;\n  }\n\n  let codes = retry.retryCodes;\n  if (overrides.retryCodes) {\n    codes = overrides.retryCodes;\n  }\n  let backoffSettings = retry.backoffSettings;\n  if (overrides.backoffSettings) {\n    backoffSettings = overrides.backoffSettings;\n  }\n  return createRetryOptions(codes, backoffSettings);\n}\n\nexport interface ServiceConfig {\n  retry_codes: {[index: string]: string[]};\n  retry_params: {[index: string]: RetryParamsConfig};\n  methods: {[index: string]: MethodConfig};\n}\n\nexport interface RetryParamsConfig {\n  initial_retry_delay_millis: number;\n  retry_delay_multiplier: number;\n  max_retry_delay_millis: number;\n  initial_rpc_timeout_millis: number;\n  rpc_timeout_multiplier: number;\n  max_rpc_timeout_millis: number;\n  total_timeout_millis: number;\n}\n\nexport interface MethodConfig {\n  retry_codes_name: string;\n  retry_params_name: string;\n  bundling?: BundlingConfig;\n  timeout_millis?: number;\n}\n\nexport interface BundlingConfig {\n  [index: string]: number;\n  element_count_threshold: number;\n  element_count_limit: number;\n  request_byte_threshold: number;\n  request_byte_limit: number;\n  delay_threshold_millis: number;\n}\n\nexport interface ClientConfig {\n  interfaces?: {[index: string]: ServiceConfig};\n}\n\n/**\n * Constructs a dictionary mapping method names to {@link CallSettings}.\n *\n * The `clientConfig` parameter is parsed from a client configuration JSON\n * file of the form:\n *\n *     {\n *       \"interfaces\": {\n *         \"google.fake.v1.ServiceName\": {\n *           \"retry_codes\": {\n *             \"idempotent\": [\"UNAVAILABLE\", \"DEADLINE_EXCEEDED\"],\n *             \"non_idempotent\": []\n *           },\n *           \"retry_params\": {\n *             \"default\": {\n *               \"initial_retry_delay_millis\": 100,\n *               \"retry_delay_multiplier\": 1.2,\n *               \"max_retry_delay_millis\": 1000,\n *               \"initial_rpc_timeout_millis\": 2000,\n *               \"rpc_timeout_multiplier\": 1.5,\n *               \"max_rpc_timeout_millis\": 30000,\n *               \"total_timeout_millis\": 45000\n *             }\n *           },\n *           \"methods\": {\n *             \"CreateFoo\": {\n *               \"retry_codes_name\": \"idempotent\",\n *               \"retry_params_name\": \"default\"\n *             },\n *             \"Publish\": {\n *               \"retry_codes_name\": \"non_idempotent\",\n *               \"retry_params_name\": \"default\",\n *               \"bundling\": {\n *                 \"element_count_threshold\": 40,\n *                 \"element_count_limit\": 200,\n *                 \"request_byte_threshold\": 90000,\n *                 \"request_byte_limit\": 100000,\n *                 \"delay_threshold_millis\": 100\n *               }\n *             }\n *           }\n *         }\n *       }\n *     }\n *\n * @param {String} serviceName - The fully-qualified name of this\n *   service, used as a key into the client config file (in the\n *   example above, this value should be 'google.fake.v1.ServiceName').\n * @param {Object} clientConfig - A dictionary parsed from the\n *   standard API client config file.\n * @param {Object} configOverrides - A dictionary in the same structure of\n *   client_config to override the settings.\n * @param {Object.} retryNames - A dictionary mapping the strings\n *   referring to response status codes to objects representing\n *   those codes.\n * @param {Object} otherArgs - the non-request arguments to be passed to the API\n *   calls.\n * @param {Function=} promise - A constructor for a promise that implements the\n * ES6 specification of promise. If not provided, native promises will be used.\n * @return {Object} A mapping from method name to CallSettings, or null if the\n *   service is not found in the config.\n */\nexport function constructSettings(\n  serviceName: string,\n  clientConfig: ClientConfig,\n  configOverrides: ClientConfig,\n  retryNames: {},\n  otherArgs?: {},\n  promise?: PromiseConstructor\n) {\n  otherArgs = otherArgs || {};\n  // tslint:disable-next-line no-any\n  const defaults: any = {};\n\n  const serviceConfig = (clientConfig.interfaces || {})[serviceName];\n  if (!serviceConfig) {\n    return null;\n  }\n\n  const overrides = (configOverrides.interfaces || {})[serviceName] || {};\n  const methods = serviceConfig.methods;\n  const overridingMethods = overrides.methods || {};\n  // tslint:disable-next-line forin\n  for (const methodName in methods) {\n    const methodConfig = methods[methodName];\n    const jsName = methodName[0].toLowerCase() + methodName.slice(1);\n\n    let retry = constructRetry(\n      methodConfig,\n      serviceConfig.retry_codes,\n      serviceConfig.retry_params,\n      retryNames\n    );\n    let bundlingConfig = methodConfig.bundling;\n    let timeout = methodConfig.timeout_millis;\n    if (methodName in overridingMethods) {\n      const overridingMethod = overridingMethods[methodName];\n      if (overridingMethod) {\n        if ('bundling' in overridingMethod) {\n          bundlingConfig = overridingMethod.bundling;\n        }\n        if ('timeout_millis' in overridingMethod) {\n          timeout = overridingMethod.timeout_millis;\n        }\n      }\n      retry = mergeRetryOptions(\n        retry!,\n        constructRetry(\n          overridingMethod,\n          overrides.retry_codes,\n          overrides.retry_params,\n          retryNames\n        )!\n      );\n    }\n\n    defaults[jsName] = new CallSettings({\n      timeout,\n      retry,\n      bundleOptions: bundlingConfig\n        ? createBundleOptions(bundlingConfig)\n        : null,\n      otherArgs,\n      promise: promise || Promise,\n    });\n  }\n\n  return defaults;\n}\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/RetryParamsConfig.html":{"url":"interfaces/RetryParamsConfig.html","title":"interface - RetryParamsConfig","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  RetryParamsConfig\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/gax.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        initial_retry_delay_millis\n                                \n                                \n                                        initial_rpc_timeout_millis\n                                \n                                \n                                        max_retry_delay_millis\n                                \n                                \n                                        max_rpc_timeout_millis\n                                \n                                \n                                        retry_delay_multiplier\n                                \n                                \n                                        rpc_timeout_multiplier\n                                \n                                \n                                        total_timeout_millis\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        initial_retry_delay_millis\n                                    \n                                \n                                \n                                    \n                                        initial_retry_delay_millis:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        initial_rpc_timeout_millis\n                                    \n                                \n                                \n                                    \n                                        initial_rpc_timeout_millis:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        max_retry_delay_millis\n                                    \n                                \n                                \n                                    \n                                        max_retry_delay_millis:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        max_rpc_timeout_millis\n                                    \n                                \n                                \n                                    \n                                        max_rpc_timeout_millis:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        retry_delay_multiplier\n                                    \n                                \n                                \n                                    \n                                        retry_delay_multiplier:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        rpc_timeout_multiplier\n                                    \n                                \n                                \n                                    \n                                        rpc_timeout_multiplier:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        total_timeout_millis\n                                    \n                                \n                                \n                                    \n                                        total_timeout_millis:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import {BundleOptions} from './bundlingCalls/bundleExecutor';\n\n/**\n * Encapsulates the overridable settings for a particular API call.\n *\n * ``CallOptions`` is an optional arg for all GAX API calls.  It is used to\n * configure the settings of a specific API call.\n *\n * When provided, its values override the GAX service defaults for that\n * particular call.\n *\n * Typically the API clients will accept this as the second to the last\n * argument. See the examples below.\n * @typedef {Object} CallOptions\n * @property {number=} timeout - The client-side timeout for API calls.\n * @property {RetryOptions=} retry - determines whether and how to retry\n *   on transient errors. When set to null, the call will not retry.\n * @property {boolean=} autoPaginate - If set to false and the call is\n *   configured for paged iteration, page unrolling is not performed, instead\n *   the callback will be called with the response object.\n * @property {Object=} pageToken - If set and the call is configured for\n *   paged iteration, paged iteration is not performed and requested with this\n *   pageToken.\n * @property {number} maxResults - If set and the call is configured for\n *   paged iteration, the call will stop when the number of response elements\n *   reaches to the specified size. By default, it will unroll the page to\n *   the end of the list.\n * @property {boolean=} isBundling - If set to false and the call is configured\n *   for bundling, bundling is not performed.\n * @property {BackoffSettings=} longrunning - BackoffSettings used for polling.\n * @property {Function=} promise - A constructor for a promise that implements the ES6\n * specification of promise which will be used to create promises. If not\n * provided, native promises will be used.\n * @example\n * // suppress bundling for bundled method.\n * api.bundlingMethod(\n *     param, {optParam: aValue, isBundling: false}, function(err, response) {\n *   // handle response.\n * });\n * @example\n * // suppress streaming for page-streaming method.\n * api.pageStreamingMethod(\n *     param, {optParam: aValue, autoPaginate: false}, function(err, page) {\n *   // not returning a stream, but callback is called with the paged response.\n * });\n */\n\n/**\n * Per-call configurable settings for retrying upon transient failure.\n * @typedef {Object} RetryOptions\n * @property {String[]} retryCodes\n * @property {BackoffSettings} backoffSettings\n */\nexport class RetryOptions {\n  retryCodes: number[];\n  backoffSettings: BackoffSettings;\n  constructor(retryCodes: number[], backoffSettings: BackoffSettings) {\n    this.retryCodes = retryCodes;\n    this.backoffSettings = backoffSettings;\n  }\n}\n\n/**\n * Parameters to the exponential backoff algorithm for retrying.\n * @typedef {Object} BackoffSettings\n * @property {number} initialRetryDelayMillis - the initial delay time,\n *   in milliseconds, between the completion of the first failed request and the\n *   initiation of the first retrying request.\n * @property {number} retryDelayMultiplier - the multiplier by which to\n *   increase the delay time between the completion of failed requests, and the\n *   initiation of the subsequent retrying request.\n * @property {number} maxRetryDelayMillis - the maximum delay time, in\n *   milliseconds, between requests. When this value is reached,\n *   ``retryDelayMultiplier`` will no longer be used to increase delay time.\n * @property {number} initialRpcTimeoutMillis - the initial timeout parameter\n *   to the request.\n * @propetry {number} rpcTimeoutMultiplier - the multiplier by which to\n *   increase the timeout parameter between failed requests.\n * @property {number} maxRpcTimeoutMillis - the maximum timeout parameter, in\n *   milliseconds, for a request. When this value is reached,\n *   ``rpcTimeoutMultiplier`` will no longer be used to increase the timeout.\n * @property {number} totalTimeoutMillis - the total time, in milliseconds,\n *   starting from when the initial request is sent, after which an error will\n *   be returned, regardless of the retrying attempts made meanwhile.\n */\nexport interface BackoffSettings {\n  maxRetries?: number;\n  initialRetryDelayMillis: number;\n  retryDelayMultiplier: number;\n  maxRetryDelayMillis: number;\n  initialRpcTimeoutMillis?: number | null;\n  maxRpcTimeoutMillis?: number | null;\n  totalTimeoutMillis?: number | null;\n  rpcTimeoutMultiplier?: number | null;\n}\n\n/**\n * Parameter to configure bundling behavior.\n * @typedef {Object} BundleOptions\n * @property {number} elementCountThreshold -\n *   the bundled request will be sent once the count of outstanding elements\n *   in the repeated field reaches this value.\n * @property {number} elementCountLimit -\n *   represents a hard limit on the number of elements in the repeated field\n *   of the bundle; if adding a request to a bundle would exceed this value,\n *   the bundle is sent and the new request is added to a fresh bundle. It is\n *   invalid for a single request to exceed this limit.\n * @property {number} requestByteThreshold -\n *   the bundled request will be sent once the count of bytes in the request\n *   reaches this value. Note that this value is pessimistically approximated\n *   by summing the bytesizes of the elements in the repeated field, and\n *   therefore may be an under-approximation.\n * @property {number} requestByteLimit -\n *   represents a hard limit on the size of the bundled request; if adding\n *   a request to a bundle would exceed this value, the bundle is sent and\n *   the new request is added to a fresh bundle. It is invalid for a single\n *   request to exceed this limit. Note that this value is pessimistically\n *   approximated by summing the bytesizes of the elements in the repeated\n *   field, with a buffer applied to correspond to the resulting\n *   under-approximation.\n * @property {number} delayThreshold -\n *   the bundled request will be sent this amount of time after the first\n *   element in the bundle was added to it.\n */\n\nexport interface CallOptions {\n  timeout?: number;\n  retry?: RetryOptions | null;\n  autoPaginate?: boolean;\n  pageToken?: string;\n  pageSize?: number;\n  maxResults?: number;\n  maxRetries?: number;\n  // tslint:disable-next-line no-any\n  otherArgs?: {[index: string]: any};\n  bundleOptions?: BundleOptions | null;\n  isBundling?: boolean;\n  longrunning?: BackoffSettings;\n  promise?: PromiseConstructor;\n}\n\nexport class CallSettings {\n  timeout: number;\n  retry?: RetryOptions | null;\n  autoPaginate?: boolean;\n  pageToken?: string;\n  pageSize?: number;\n  maxResults?: number;\n  // tslint:disable-next-line no-any\n  otherArgs: {[index: string]: any};\n  bundleOptions?: BundleOptions | null;\n  isBundling: boolean;\n  longrunning?: BackoffSettings;\n  promise: PromiseConstructor;\n\n  /**\n   * @param {Object} settings - An object containing parameters of this settings.\n   * @param {number} settings.timeout - The client-side timeout for API calls.\n   *   This parameter is ignored for retrying calls.\n   * @param {RetryOptions} settings.retry - The configuration for retrying upon\n   *   transient error. If set to null, this call will not retry.\n   * @param {boolean} settings.autoPaginate - If there is no `pageDescriptor`,\n   *   this attrbute has no meaning. Otherwise, determines whether a page\n   * streamed response should make the page structure transparent to the user by\n   *   flattening the repeated field in the returned generator.\n   * @param {number} settings.pageToken - If there is no `pageDescriptor`,\n   *   this attribute has no meaning. Otherwise, determines the page token used\n   * in the page streaming request.\n   * @param {Object} settings.otherArgs - Additional arguments to be passed to\n   *   the API calls.\n   * @param {Function=} settings.promise - A constructor for a promise that\n   * implements the ES6 specification of promise. If not provided, native\n   * promises will be used.\n   *\n   * @constructor\n   */\n  constructor(settings?: CallOptions) {\n    settings = settings || {};\n    this.timeout = settings.timeout || 30 * 1000;\n    this.retry = settings.retry;\n    this.autoPaginate =\n      'autoPaginate' in settings ? settings.autoPaginate : true;\n    this.pageToken = settings.pageToken;\n    this.maxResults = settings.maxResults;\n    this.otherArgs = settings.otherArgs || {};\n    this.bundleOptions = settings.bundleOptions;\n    this.isBundling = 'isBundling' in settings ? settings.isBundling! : true;\n    this.longrunning =\n      'longrunning' in settings ? settings.longrunning : undefined;\n    this.promise = 'promise' in settings ? settings.promise! : Promise;\n  }\n\n  /**\n   * Returns a new CallSettings merged from this and a CallOptions object.\n   *\n   * @param {CallOptions} options - an instance whose values override\n   *   those in this object. If null, ``merge`` returns a copy of this\n   *   object\n   * @return {CallSettings} The merged CallSettings instance.\n   */\n  merge(options?: CallOptions | null) {\n    if (!options) {\n      return new CallSettings(this);\n    }\n    let timeout = this.timeout;\n    let retry = this.retry;\n    let autoPaginate = this.autoPaginate;\n    let pageToken = this.pageToken;\n    let pageSize = this.pageSize;\n    let maxResults = this.maxResults;\n    let otherArgs = this.otherArgs;\n    let isBundling = this.isBundling;\n    let longrunning = this.longrunning;\n    let promise = this.promise;\n    if ('timeout' in options) {\n      timeout = options.timeout!;\n    }\n    if ('retry' in options) {\n      retry = options.retry;\n    }\n\n    if ('autoPaginate' in options && !options.autoPaginate) {\n      autoPaginate = false;\n    }\n\n    if ('pageToken' in options) {\n      autoPaginate = false;\n      pageToken = options.pageToken;\n    }\n\n    if ('pageSize' in options) {\n      pageSize = options.pageSize;\n    }\n\n    if ('maxResults' in options) {\n      maxResults = options.maxResults;\n    }\n\n    if ('otherArgs' in options) {\n      otherArgs = {};\n      // tslint:disable-next-line forin\n      for (const key in this.otherArgs) {\n        otherArgs[key] = this.otherArgs[key];\n      }\n      // tslint:disable-next-line forin\n      for (const optionsKey in options.otherArgs!) {\n        otherArgs[optionsKey] = options.otherArgs![optionsKey];\n      }\n    }\n\n    if ('isBundling' in options) {\n      isBundling = options.isBundling!;\n    }\n\n    if ('maxRetries' in options) {\n      retry!.backoffSettings!.maxRetries = options.maxRetries;\n      delete retry!.backoffSettings!.totalTimeoutMillis;\n    }\n\n    if ('longrunning' in options) {\n      longrunning = options.longrunning;\n    }\n\n    if ('promise' in options) {\n      promise = options.promise!;\n    }\n\n    return new CallSettings({\n      timeout,\n      retry,\n      bundleOptions: this.bundleOptions,\n      longrunning,\n      autoPaginate,\n      pageToken,\n      pageSize,\n      maxResults,\n      otherArgs,\n      isBundling,\n      promise,\n    });\n  }\n}\n\n/**\n * Per-call configurable settings for retrying upon transient failure.\n *\n * @param {number[]} retryCodes - a list of Google API canonical error codes\n *   upon which a retry should be attempted.\n * @param {BackoffSettings} backoffSettings - configures the retry\n *   exponential backoff algorithm.\n * @return {RetryOptions} A new RetryOptions object.\n *\n */\nexport function createRetryOptions(\n  retryCodes: number[],\n  backoffSettings: BackoffSettings\n): RetryOptions {\n  return {\n    retryCodes,\n    backoffSettings,\n  };\n}\n\n/**\n * Parameters to the exponential backoff algorithm for retrying.\n *\n * @param {number} initialRetryDelayMillis - the initial delay time,\n *   in milliseconds, between the completion of the first failed request and the\n *   initiation of the first retrying request.\n * @param {number} retryDelayMultiplier - the multiplier by which to\n *   increase the delay time between the completion of failed requests, and the\n *   initiation of the subsequent retrying request.\n * @param {number} maxRetryDelayMillis - the maximum delay time, in\n *   milliseconds, between requests. When this value is reached,\n *   ``retryDelayMultiplier`` will no longer be used to increase delay time.\n * @param {number} initialRpcTimeoutMillis - the initial timeout parameter\n *   to the request.\n * @param {number} rpcTimeoutMultiplier - the multiplier by which to\n *   increase the timeout parameter between failed requests.\n * @param {number} maxRpcTimeoutMillis - the maximum timeout parameter, in\n *   milliseconds, for a request. When this value is reached,\n *   ``rpcTimeoutMultiplier`` will no longer be used to increase the timeout.\n * @param {number} totalTimeoutMillis - the total time, in milliseconds,\n *   starting from when the initial request is sent, after which an error will\n *   be returned, regardless of the retrying attempts made meanwhile.\n * @return {BackoffSettings} a new settings.\n *\n */\nexport function createBackoffSettings(\n  initialRetryDelayMillis: number,\n  retryDelayMultiplier: number,\n  maxRetryDelayMillis: number,\n  initialRpcTimeoutMillis: number | null,\n  rpcTimeoutMultiplier: number | null,\n  maxRpcTimeoutMillis: number | null,\n  totalTimeoutMillis: number | null\n): BackoffSettings {\n  return {\n    initialRetryDelayMillis,\n    retryDelayMultiplier,\n    maxRetryDelayMillis,\n    initialRpcTimeoutMillis,\n    rpcTimeoutMultiplier,\n    maxRpcTimeoutMillis,\n    totalTimeoutMillis,\n  };\n}\n\nexport function createDefaultBackoffSettings() {\n  return createBackoffSettings(100, 1.3, 60000, null, null, null, null);\n}\n\n/**\n * Parameters to the exponential backoff algorithm for retrying.\n * This function is unsupported, and intended for internal use only.\n *\n * @param {number} initialRetryDelayMillis - the initial delay time,\n *   in milliseconds, between the completion of the first failed request and the\n *   initiation of the first retrying request.\n * @param {number} retryDelayMultiplier - the multiplier by which to\n *   increase the delay time between the completion of failed requests, and the\n *   initiation of the subsequent retrying request.\n * @param {number} maxRetryDelayMillis - the maximum delay time, in\n *   milliseconds, between requests. When this value is reached,\n *   ``retryDelayMultiplier`` will no longer be used to increase delay time.\n * @param {number} initialRpcTimeoutMillis - the initial timeout parameter\n *   to the request.\n * @param {number} rpcTimeoutMultiplier - the multiplier by which to\n *   increase the timeout parameter between failed requests.\n * @param {number} maxRpcTimeoutMillis - the maximum timeout parameter, in\n *   milliseconds, for a request. When this value is reached,\n *   ``rpcTimeoutMultiplier`` will no longer be used to increase the timeout.\n * @param {number} maxRetries - the maximum number of retrying attempts that\n *   will be made. If reached, an error will be returned.\n * @return {BackoffSettings} a new settings.\n *\n */\nexport function createMaxRetriesBackoffSettings(\n  initialRetryDelayMillis: number,\n  retryDelayMultiplier: number,\n  maxRetryDelayMillis: number,\n  initialRpcTimeoutMillis: number,\n  rpcTimeoutMultiplier: number,\n  maxRpcTimeoutMillis: number,\n  maxRetries: number\n): BackoffSettings {\n  return {\n    initialRetryDelayMillis,\n    retryDelayMultiplier,\n    maxRetryDelayMillis,\n    initialRpcTimeoutMillis,\n    rpcTimeoutMultiplier,\n    maxRpcTimeoutMillis,\n    maxRetries,\n  };\n}\n\n/**\n * Creates a new {@link BundleOptions}.\n *\n * @private\n * @param {Object} options - An object to hold optional parameters. See\n *   properties for the content of options.\n * @return {BundleOptions} - A new options.\n */\nexport function createBundleOptions(options: BundlingConfig): BundleOptions {\n  const params = [\n    'element_count_threshold',\n    'element_count_limit',\n    'request_byte_threshold',\n    'request_byte_limit',\n    'delay_threshold_millis',\n  ];\n  params.forEach(param => {\n    if (param in options && typeof options[param] !== 'number') {\n      throw new Error(`${param} should be a number`);\n    }\n  });\n\n  const elementCountThreshold = options.element_count_threshold || 0;\n  const elementCountLimit = options.element_count_limit || 0;\n  const requestByteThreshold = options.request_byte_threshold || 0;\n  const requestByteLimit = options.request_byte_limit || 0;\n  const delayThreshold = options.delay_threshold_millis || 0;\n\n  if (\n    elementCountThreshold === 0 &&\n    requestByteThreshold === 0 &&\n    delayThreshold === 0\n  ) {\n    throw new Error('one threshold should be > 0');\n  }\n  return {\n    elementCountThreshold,\n    elementCountLimit,\n    requestByteThreshold,\n    requestByteLimit,\n    delayThreshold,\n  };\n}\n\n/**\n * Helper for {@link constructSettings}\n *\n * @private\n *\n * @param {Object} methodConfig - A dictionary representing a single\n *   `methods` entry of the standard API client config file. (See\n *   {@link constructSettings} for information on this yaml.)\n * @param {?Object} retryCodes - A dictionary parsed from the\n *   `retry_codes_def` entry of the standard API client config\n *   file. (See {@link constructSettings} for information on this yaml.)\n * @param {Object} retryParams - A dictionary parsed from the\n *   `retry_params` entry of the standard API client config\n *   file. (See {@link constructSettings} for information on this yaml.)\n * @param {Object} retryNames - A dictionary mapping the string names\n *   used in the standard API client config file to API response\n *   status codes.\n * @return {?RetryOptions} The new retry options.\n */\nfunction constructRetry(\n  methodConfig: MethodConfig,\n  retryCodes: {[index: string]: string[]},\n  retryParams: {[index: string]: {}},\n  retryNames: {[index: string]: {}}\n): RetryOptions | null | undefined {\n  if (!methodConfig) {\n    return null;\n  }\n\n  let codes: number[] | null = null;\n  if (retryCodes && 'retry_codes_name' in methodConfig) {\n    const retryCodesName = methodConfig['retry_codes_name'];\n    codes = (retryCodes[retryCodesName] || []).map(name => {\n      return Number(retryNames[name]);\n    });\n  }\n\n  let backoffSettings: BackoffSettings | null = null;\n  if (retryParams && 'retry_params_name' in methodConfig) {\n    const params = retryParams[\n      methodConfig.retry_params_name\n    ] as RetryParamsConfig;\n    backoffSettings = createBackoffSettings(\n      params.initial_retry_delay_millis,\n      params.retry_delay_multiplier,\n      params.max_retry_delay_millis,\n      params.initial_rpc_timeout_millis,\n      params.rpc_timeout_multiplier,\n      params.max_rpc_timeout_millis,\n      params.total_timeout_millis\n    );\n  }\n  return createRetryOptions(codes!, backoffSettings!);\n}\n\n/**\n * Helper for {@link constructSettings}\n *\n * Takes two retry options, and merges them into a single RetryOption instance.\n *\n * @private\n *\n * @param {RetryOptions} retry - The base RetryOptions.\n * @param {RetryOptions} overrides - The RetryOptions used for overriding\n *   `retry`. Use the values if it is not null. If entire `overrides` is null,\n *   ignore the base retry and return null.\n * @return {?RetryOptions} The merged RetryOptions.\n */\nfunction mergeRetryOptions(\n  retry: RetryOptions,\n  overrides: RetryOptions\n): RetryOptions | null {\n  if (!overrides) {\n    return null;\n  }\n\n  if (!overrides.retryCodes && !overrides.backoffSettings) {\n    return retry;\n  }\n\n  let codes = retry.retryCodes;\n  if (overrides.retryCodes) {\n    codes = overrides.retryCodes;\n  }\n  let backoffSettings = retry.backoffSettings;\n  if (overrides.backoffSettings) {\n    backoffSettings = overrides.backoffSettings;\n  }\n  return createRetryOptions(codes, backoffSettings);\n}\n\nexport interface ServiceConfig {\n  retry_codes: {[index: string]: string[]};\n  retry_params: {[index: string]: RetryParamsConfig};\n  methods: {[index: string]: MethodConfig};\n}\n\nexport interface RetryParamsConfig {\n  initial_retry_delay_millis: number;\n  retry_delay_multiplier: number;\n  max_retry_delay_millis: number;\n  initial_rpc_timeout_millis: number;\n  rpc_timeout_multiplier: number;\n  max_rpc_timeout_millis: number;\n  total_timeout_millis: number;\n}\n\nexport interface MethodConfig {\n  retry_codes_name: string;\n  retry_params_name: string;\n  bundling?: BundlingConfig;\n  timeout_millis?: number;\n}\n\nexport interface BundlingConfig {\n  [index: string]: number;\n  element_count_threshold: number;\n  element_count_limit: number;\n  request_byte_threshold: number;\n  request_byte_limit: number;\n  delay_threshold_millis: number;\n}\n\nexport interface ClientConfig {\n  interfaces?: {[index: string]: ServiceConfig};\n}\n\n/**\n * Constructs a dictionary mapping method names to {@link CallSettings}.\n *\n * The `clientConfig` parameter is parsed from a client configuration JSON\n * file of the form:\n *\n *     {\n *       \"interfaces\": {\n *         \"google.fake.v1.ServiceName\": {\n *           \"retry_codes\": {\n *             \"idempotent\": [\"UNAVAILABLE\", \"DEADLINE_EXCEEDED\"],\n *             \"non_idempotent\": []\n *           },\n *           \"retry_params\": {\n *             \"default\": {\n *               \"initial_retry_delay_millis\": 100,\n *               \"retry_delay_multiplier\": 1.2,\n *               \"max_retry_delay_millis\": 1000,\n *               \"initial_rpc_timeout_millis\": 2000,\n *               \"rpc_timeout_multiplier\": 1.5,\n *               \"max_rpc_timeout_millis\": 30000,\n *               \"total_timeout_millis\": 45000\n *             }\n *           },\n *           \"methods\": {\n *             \"CreateFoo\": {\n *               \"retry_codes_name\": \"idempotent\",\n *               \"retry_params_name\": \"default\"\n *             },\n *             \"Publish\": {\n *               \"retry_codes_name\": \"non_idempotent\",\n *               \"retry_params_name\": \"default\",\n *               \"bundling\": {\n *                 \"element_count_threshold\": 40,\n *                 \"element_count_limit\": 200,\n *                 \"request_byte_threshold\": 90000,\n *                 \"request_byte_limit\": 100000,\n *                 \"delay_threshold_millis\": 100\n *               }\n *             }\n *           }\n *         }\n *       }\n *     }\n *\n * @param {String} serviceName - The fully-qualified name of this\n *   service, used as a key into the client config file (in the\n *   example above, this value should be 'google.fake.v1.ServiceName').\n * @param {Object} clientConfig - A dictionary parsed from the\n *   standard API client config file.\n * @param {Object} configOverrides - A dictionary in the same structure of\n *   client_config to override the settings.\n * @param {Object.} retryNames - A dictionary mapping the strings\n *   referring to response status codes to objects representing\n *   those codes.\n * @param {Object} otherArgs - the non-request arguments to be passed to the API\n *   calls.\n * @param {Function=} promise - A constructor for a promise that implements the\n * ES6 specification of promise. If not provided, native promises will be used.\n * @return {Object} A mapping from method name to CallSettings, or null if the\n *   service is not found in the config.\n */\nexport function constructSettings(\n  serviceName: string,\n  clientConfig: ClientConfig,\n  configOverrides: ClientConfig,\n  retryNames: {},\n  otherArgs?: {},\n  promise?: PromiseConstructor\n) {\n  otherArgs = otherArgs || {};\n  // tslint:disable-next-line no-any\n  const defaults: any = {};\n\n  const serviceConfig = (clientConfig.interfaces || {})[serviceName];\n  if (!serviceConfig) {\n    return null;\n  }\n\n  const overrides = (configOverrides.interfaces || {})[serviceName] || {};\n  const methods = serviceConfig.methods;\n  const overridingMethods = overrides.methods || {};\n  // tslint:disable-next-line forin\n  for (const methodName in methods) {\n    const methodConfig = methods[methodName];\n    const jsName = methodName[0].toLowerCase() + methodName.slice(1);\n\n    let retry = constructRetry(\n      methodConfig,\n      serviceConfig.retry_codes,\n      serviceConfig.retry_params,\n      retryNames\n    );\n    let bundlingConfig = methodConfig.bundling;\n    let timeout = methodConfig.timeout_millis;\n    if (methodName in overridingMethods) {\n      const overridingMethod = overridingMethods[methodName];\n      if (overridingMethod) {\n        if ('bundling' in overridingMethod) {\n          bundlingConfig = overridingMethod.bundling;\n        }\n        if ('timeout_millis' in overridingMethod) {\n          timeout = overridingMethod.timeout_millis;\n        }\n      }\n      retry = mergeRetryOptions(\n        retry!,\n        constructRetry(\n          overridingMethod,\n          overrides.retry_codes,\n          overrides.retry_params,\n          retryNames\n        )!\n      );\n    }\n\n    defaults[jsName] = new CallSettings({\n      timeout,\n      retry,\n      bundleOptions: bundlingConfig\n        ? createBundleOptions(bundlingConfig)\n        : null,\n      otherArgs,\n      promise: promise || Promise,\n    });\n  }\n\n  return defaults;\n}\n\n    \n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Segment.html":{"url":"interfaces/Segment.html","title":"interface - Segment","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  Segment\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/pathTemplate.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        kind\n                                \n                                \n                                        literal\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        kind\n                                    \n                                \n                                \n                                    \n                                        kind:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        literal\n                                    \n                                \n                                \n                                    \n                                        literal:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import has = require('lodash.has');\nimport * as util from 'util';\nimport * as extras from './parserExtras';\nconst parser = require('./pathTemplateParser');\n\nexport interface ParseResult {\n  size: number;\n  segments: Segment[];\n}\n\nexport interface Segment {\n  kind: number;\n  literal: string;\n}\n\nexport interface Bindings {\n  [index: string]: string;\n}\n\nexport class PathTemplate {\n  private readonly parseResult: ParseResult;\n\n  get size(): number {\n    return this.parseResult.size;\n  }\n\n  get segments(): Segment[] {\n    return this.parseResult.segments;\n  }\n\n  /**\n   * @param {String} data the of the template\n   *\n   * @constructor\n   */\n  constructor(data: string) {\n    this.parseResult = extras.finishParse(parser.parse(data));\n  }\n\n  /**\n   * Matches a fully-qualified path template string.\n   *\n   * @param {String} path a fully-qualified path template string\n   * @return {Object} contains const names matched to binding values\n   * @throws {TypeError} if path can't be matched to this template\n   */\n  match(path: string): Bindings {\n    const pathSegments = path.split('/');\n    const bindings: Bindings = {};\n    let segmentCount = this.size;\n    let current: string;\n    let index = 0;\n    this.segments.forEach(segment => {\n      if (index > pathSegments.length) {\n        return;\n      }\n      if (segment.kind === extras.BINDING) {\n        current = segment.literal;\n      } else if (segment.kind === extras.TERMINAL) {\n        if (segment.literal === '*') {\n          bindings[current] = pathSegments[index];\n          index += 1;\n        } else if (segment.literal === '**') {\n          const size = pathSegments.length - segmentCount + 1;\n          segmentCount += size - 1;\n          bindings[current] = pathSegments.slice(index, index + size).join('/');\n          index += size;\n        } else if (segment.literal === pathSegments[index]) {\n          index += 1;\n        } else {\n          const msg = util.format(\n            \"mismatched literal (index=%d): '%s' != '%s'\",\n            index,\n            segment.literal,\n            pathSegments[index]\n          );\n          throw new TypeError(msg);\n        }\n      }\n    });\n    if (index !== pathSegments.length || index !== segmentCount) {\n      const msg = util.format(\n        'match error: could not instantiate a path template from %s',\n        path\n      );\n      throw new TypeError(msg);\n    }\n    return bindings;\n  }\n\n  /**\n   * Renders a path template using the provided bindings.\n   *\n   * @param {Object} bindings a mapping of const names to binding strings\n   * @return {String} a rendered representation of the path template\n   * @throws {TypeError} if a key is missing, or if a sub-template cannot be\n   *   parsed\n   */\n  render(bindings: Bindings): string {\n    const out: Segment[] = [];\n    let inABinding = false;\n    this.segments.forEach(segment => {\n      if (segment.kind === extras.BINDING) {\n        if (!has(bindings, segment.literal)) {\n          const msg = util.format(\n            'Value for key %s is not provided in %s',\n            segment.literal,\n            bindings\n          );\n          throw new TypeError(msg);\n        }\n        const tmp = new PathTemplate(bindings[segment.literal]);\n        Array.prototype.push.apply(out, tmp.segments);\n        inABinding = true;\n      } else if (segment.kind === extras.END_BINDING) {\n        inABinding = false;\n      } else if (inABinding) {\n        return;\n      } else {\n        out.push(segment);\n      }\n    });\n\n    const result = formatSegments(out);\n    this.match(result);\n    return result;\n  }\n\n  /**\n   * Renders the path template.\n   *\n   * @return {string} contains const names matched to binding values\n   */\n  inspect() {\n    return formatSegments(this.segments);\n  }\n}\n\n/**\n * Creates the string representattion for the segments.\n * @param {Object[]} segments - The array of segments.\n * @return {string} - A string representing segments in the path template\n *   format.\n */\nfunction formatSegments(segments: Segment[]): string {\n  let out = '';\n  let slash = true;\n  segments.forEach(segment => {\n    if (segment.kind === extras.TERMINAL) {\n      if (slash) {\n        out += '/';\n      }\n      out += segment.literal;\n      return;\n    }\n    slash = true;\n    if (segment.kind === extras.BINDING) {\n      out += '/{' + segment.literal + '=';\n      slash = false;\n    } else {\n      out += segment.literal + '}';\n    }\n  });\n  return out.substring(1);\n}\n\n    \n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ServiceConfig.html":{"url":"interfaces/ServiceConfig.html","title":"interface - ServiceConfig","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  ServiceConfig\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/gax.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        methods\n                                \n                                \n                                        retry_codes\n                                \n                                \n                                        retry_params\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        methods\n                                    \n                                \n                                \n                                    \n                                        methods:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        retry_codes\n                                    \n                                \n                                \n                                    \n                                        retry_codes:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        retry_params\n                                    \n                                \n                                \n                                    \n                                        retry_params:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import {BundleOptions} from './bundlingCalls/bundleExecutor';\n\n/**\n * Encapsulates the overridable settings for a particular API call.\n *\n * ``CallOptions`` is an optional arg for all GAX API calls.  It is used to\n * configure the settings of a specific API call.\n *\n * When provided, its values override the GAX service defaults for that\n * particular call.\n *\n * Typically the API clients will accept this as the second to the last\n * argument. See the examples below.\n * @typedef {Object} CallOptions\n * @property {number=} timeout - The client-side timeout for API calls.\n * @property {RetryOptions=} retry - determines whether and how to retry\n *   on transient errors. When set to null, the call will not retry.\n * @property {boolean=} autoPaginate - If set to false and the call is\n *   configured for paged iteration, page unrolling is not performed, instead\n *   the callback will be called with the response object.\n * @property {Object=} pageToken - If set and the call is configured for\n *   paged iteration, paged iteration is not performed and requested with this\n *   pageToken.\n * @property {number} maxResults - If set and the call is configured for\n *   paged iteration, the call will stop when the number of response elements\n *   reaches to the specified size. By default, it will unroll the page to\n *   the end of the list.\n * @property {boolean=} isBundling - If set to false and the call is configured\n *   for bundling, bundling is not performed.\n * @property {BackoffSettings=} longrunning - BackoffSettings used for polling.\n * @property {Function=} promise - A constructor for a promise that implements the ES6\n * specification of promise which will be used to create promises. If not\n * provided, native promises will be used.\n * @example\n * // suppress bundling for bundled method.\n * api.bundlingMethod(\n *     param, {optParam: aValue, isBundling: false}, function(err, response) {\n *   // handle response.\n * });\n * @example\n * // suppress streaming for page-streaming method.\n * api.pageStreamingMethod(\n *     param, {optParam: aValue, autoPaginate: false}, function(err, page) {\n *   // not returning a stream, but callback is called with the paged response.\n * });\n */\n\n/**\n * Per-call configurable settings for retrying upon transient failure.\n * @typedef {Object} RetryOptions\n * @property {String[]} retryCodes\n * @property {BackoffSettings} backoffSettings\n */\nexport class RetryOptions {\n  retryCodes: number[];\n  backoffSettings: BackoffSettings;\n  constructor(retryCodes: number[], backoffSettings: BackoffSettings) {\n    this.retryCodes = retryCodes;\n    this.backoffSettings = backoffSettings;\n  }\n}\n\n/**\n * Parameters to the exponential backoff algorithm for retrying.\n * @typedef {Object} BackoffSettings\n * @property {number} initialRetryDelayMillis - the initial delay time,\n *   in milliseconds, between the completion of the first failed request and the\n *   initiation of the first retrying request.\n * @property {number} retryDelayMultiplier - the multiplier by which to\n *   increase the delay time between the completion of failed requests, and the\n *   initiation of the subsequent retrying request.\n * @property {number} maxRetryDelayMillis - the maximum delay time, in\n *   milliseconds, between requests. When this value is reached,\n *   ``retryDelayMultiplier`` will no longer be used to increase delay time.\n * @property {number} initialRpcTimeoutMillis - the initial timeout parameter\n *   to the request.\n * @propetry {number} rpcTimeoutMultiplier - the multiplier by which to\n *   increase the timeout parameter between failed requests.\n * @property {number} maxRpcTimeoutMillis - the maximum timeout parameter, in\n *   milliseconds, for a request. When this value is reached,\n *   ``rpcTimeoutMultiplier`` will no longer be used to increase the timeout.\n * @property {number} totalTimeoutMillis - the total time, in milliseconds,\n *   starting from when the initial request is sent, after which an error will\n *   be returned, regardless of the retrying attempts made meanwhile.\n */\nexport interface BackoffSettings {\n  maxRetries?: number;\n  initialRetryDelayMillis: number;\n  retryDelayMultiplier: number;\n  maxRetryDelayMillis: number;\n  initialRpcTimeoutMillis?: number | null;\n  maxRpcTimeoutMillis?: number | null;\n  totalTimeoutMillis?: number | null;\n  rpcTimeoutMultiplier?: number | null;\n}\n\n/**\n * Parameter to configure bundling behavior.\n * @typedef {Object} BundleOptions\n * @property {number} elementCountThreshold -\n *   the bundled request will be sent once the count of outstanding elements\n *   in the repeated field reaches this value.\n * @property {number} elementCountLimit -\n *   represents a hard limit on the number of elements in the repeated field\n *   of the bundle; if adding a request to a bundle would exceed this value,\n *   the bundle is sent and the new request is added to a fresh bundle. It is\n *   invalid for a single request to exceed this limit.\n * @property {number} requestByteThreshold -\n *   the bundled request will be sent once the count of bytes in the request\n *   reaches this value. Note that this value is pessimistically approximated\n *   by summing the bytesizes of the elements in the repeated field, and\n *   therefore may be an under-approximation.\n * @property {number} requestByteLimit -\n *   represents a hard limit on the size of the bundled request; if adding\n *   a request to a bundle would exceed this value, the bundle is sent and\n *   the new request is added to a fresh bundle. It is invalid for a single\n *   request to exceed this limit. Note that this value is pessimistically\n *   approximated by summing the bytesizes of the elements in the repeated\n *   field, with a buffer applied to correspond to the resulting\n *   under-approximation.\n * @property {number} delayThreshold -\n *   the bundled request will be sent this amount of time after the first\n *   element in the bundle was added to it.\n */\n\nexport interface CallOptions {\n  timeout?: number;\n  retry?: RetryOptions | null;\n  autoPaginate?: boolean;\n  pageToken?: string;\n  pageSize?: number;\n  maxResults?: number;\n  maxRetries?: number;\n  // tslint:disable-next-line no-any\n  otherArgs?: {[index: string]: any};\n  bundleOptions?: BundleOptions | null;\n  isBundling?: boolean;\n  longrunning?: BackoffSettings;\n  promise?: PromiseConstructor;\n}\n\nexport class CallSettings {\n  timeout: number;\n  retry?: RetryOptions | null;\n  autoPaginate?: boolean;\n  pageToken?: string;\n  pageSize?: number;\n  maxResults?: number;\n  // tslint:disable-next-line no-any\n  otherArgs: {[index: string]: any};\n  bundleOptions?: BundleOptions | null;\n  isBundling: boolean;\n  longrunning?: BackoffSettings;\n  promise: PromiseConstructor;\n\n  /**\n   * @param {Object} settings - An object containing parameters of this settings.\n   * @param {number} settings.timeout - The client-side timeout for API calls.\n   *   This parameter is ignored for retrying calls.\n   * @param {RetryOptions} settings.retry - The configuration for retrying upon\n   *   transient error. If set to null, this call will not retry.\n   * @param {boolean} settings.autoPaginate - If there is no `pageDescriptor`,\n   *   this attrbute has no meaning. Otherwise, determines whether a page\n   * streamed response should make the page structure transparent to the user by\n   *   flattening the repeated field in the returned generator.\n   * @param {number} settings.pageToken - If there is no `pageDescriptor`,\n   *   this attribute has no meaning. Otherwise, determines the page token used\n   * in the page streaming request.\n   * @param {Object} settings.otherArgs - Additional arguments to be passed to\n   *   the API calls.\n   * @param {Function=} settings.promise - A constructor for a promise that\n   * implements the ES6 specification of promise. If not provided, native\n   * promises will be used.\n   *\n   * @constructor\n   */\n  constructor(settings?: CallOptions) {\n    settings = settings || {};\n    this.timeout = settings.timeout || 30 * 1000;\n    this.retry = settings.retry;\n    this.autoPaginate =\n      'autoPaginate' in settings ? settings.autoPaginate : true;\n    this.pageToken = settings.pageToken;\n    this.maxResults = settings.maxResults;\n    this.otherArgs = settings.otherArgs || {};\n    this.bundleOptions = settings.bundleOptions;\n    this.isBundling = 'isBundling' in settings ? settings.isBundling! : true;\n    this.longrunning =\n      'longrunning' in settings ? settings.longrunning : undefined;\n    this.promise = 'promise' in settings ? settings.promise! : Promise;\n  }\n\n  /**\n   * Returns a new CallSettings merged from this and a CallOptions object.\n   *\n   * @param {CallOptions} options - an instance whose values override\n   *   those in this object. If null, ``merge`` returns a copy of this\n   *   object\n   * @return {CallSettings} The merged CallSettings instance.\n   */\n  merge(options?: CallOptions | null) {\n    if (!options) {\n      return new CallSettings(this);\n    }\n    let timeout = this.timeout;\n    let retry = this.retry;\n    let autoPaginate = this.autoPaginate;\n    let pageToken = this.pageToken;\n    let pageSize = this.pageSize;\n    let maxResults = this.maxResults;\n    let otherArgs = this.otherArgs;\n    let isBundling = this.isBundling;\n    let longrunning = this.longrunning;\n    let promise = this.promise;\n    if ('timeout' in options) {\n      timeout = options.timeout!;\n    }\n    if ('retry' in options) {\n      retry = options.retry;\n    }\n\n    if ('autoPaginate' in options && !options.autoPaginate) {\n      autoPaginate = false;\n    }\n\n    if ('pageToken' in options) {\n      autoPaginate = false;\n      pageToken = options.pageToken;\n    }\n\n    if ('pageSize' in options) {\n      pageSize = options.pageSize;\n    }\n\n    if ('maxResults' in options) {\n      maxResults = options.maxResults;\n    }\n\n    if ('otherArgs' in options) {\n      otherArgs = {};\n      // tslint:disable-next-line forin\n      for (const key in this.otherArgs) {\n        otherArgs[key] = this.otherArgs[key];\n      }\n      // tslint:disable-next-line forin\n      for (const optionsKey in options.otherArgs!) {\n        otherArgs[optionsKey] = options.otherArgs![optionsKey];\n      }\n    }\n\n    if ('isBundling' in options) {\n      isBundling = options.isBundling!;\n    }\n\n    if ('maxRetries' in options) {\n      retry!.backoffSettings!.maxRetries = options.maxRetries;\n      delete retry!.backoffSettings!.totalTimeoutMillis;\n    }\n\n    if ('longrunning' in options) {\n      longrunning = options.longrunning;\n    }\n\n    if ('promise' in options) {\n      promise = options.promise!;\n    }\n\n    return new CallSettings({\n      timeout,\n      retry,\n      bundleOptions: this.bundleOptions,\n      longrunning,\n      autoPaginate,\n      pageToken,\n      pageSize,\n      maxResults,\n      otherArgs,\n      isBundling,\n      promise,\n    });\n  }\n}\n\n/**\n * Per-call configurable settings for retrying upon transient failure.\n *\n * @param {number[]} retryCodes - a list of Google API canonical error codes\n *   upon which a retry should be attempted.\n * @param {BackoffSettings} backoffSettings - configures the retry\n *   exponential backoff algorithm.\n * @return {RetryOptions} A new RetryOptions object.\n *\n */\nexport function createRetryOptions(\n  retryCodes: number[],\n  backoffSettings: BackoffSettings\n): RetryOptions {\n  return {\n    retryCodes,\n    backoffSettings,\n  };\n}\n\n/**\n * Parameters to the exponential backoff algorithm for retrying.\n *\n * @param {number} initialRetryDelayMillis - the initial delay time,\n *   in milliseconds, between the completion of the first failed request and the\n *   initiation of the first retrying request.\n * @param {number} retryDelayMultiplier - the multiplier by which to\n *   increase the delay time between the completion of failed requests, and the\n *   initiation of the subsequent retrying request.\n * @param {number} maxRetryDelayMillis - the maximum delay time, in\n *   milliseconds, between requests. When this value is reached,\n *   ``retryDelayMultiplier`` will no longer be used to increase delay time.\n * @param {number} initialRpcTimeoutMillis - the initial timeout parameter\n *   to the request.\n * @param {number} rpcTimeoutMultiplier - the multiplier by which to\n *   increase the timeout parameter between failed requests.\n * @param {number} maxRpcTimeoutMillis - the maximum timeout parameter, in\n *   milliseconds, for a request. When this value is reached,\n *   ``rpcTimeoutMultiplier`` will no longer be used to increase the timeout.\n * @param {number} totalTimeoutMillis - the total time, in milliseconds,\n *   starting from when the initial request is sent, after which an error will\n *   be returned, regardless of the retrying attempts made meanwhile.\n * @return {BackoffSettings} a new settings.\n *\n */\nexport function createBackoffSettings(\n  initialRetryDelayMillis: number,\n  retryDelayMultiplier: number,\n  maxRetryDelayMillis: number,\n  initialRpcTimeoutMillis: number | null,\n  rpcTimeoutMultiplier: number | null,\n  maxRpcTimeoutMillis: number | null,\n  totalTimeoutMillis: number | null\n): BackoffSettings {\n  return {\n    initialRetryDelayMillis,\n    retryDelayMultiplier,\n    maxRetryDelayMillis,\n    initialRpcTimeoutMillis,\n    rpcTimeoutMultiplier,\n    maxRpcTimeoutMillis,\n    totalTimeoutMillis,\n  };\n}\n\nexport function createDefaultBackoffSettings() {\n  return createBackoffSettings(100, 1.3, 60000, null, null, null, null);\n}\n\n/**\n * Parameters to the exponential backoff algorithm for retrying.\n * This function is unsupported, and intended for internal use only.\n *\n * @param {number} initialRetryDelayMillis - the initial delay time,\n *   in milliseconds, between the completion of the first failed request and the\n *   initiation of the first retrying request.\n * @param {number} retryDelayMultiplier - the multiplier by which to\n *   increase the delay time between the completion of failed requests, and the\n *   initiation of the subsequent retrying request.\n * @param {number} maxRetryDelayMillis - the maximum delay time, in\n *   milliseconds, between requests. When this value is reached,\n *   ``retryDelayMultiplier`` will no longer be used to increase delay time.\n * @param {number} initialRpcTimeoutMillis - the initial timeout parameter\n *   to the request.\n * @param {number} rpcTimeoutMultiplier - the multiplier by which to\n *   increase the timeout parameter between failed requests.\n * @param {number} maxRpcTimeoutMillis - the maximum timeout parameter, in\n *   milliseconds, for a request. When this value is reached,\n *   ``rpcTimeoutMultiplier`` will no longer be used to increase the timeout.\n * @param {number} maxRetries - the maximum number of retrying attempts that\n *   will be made. If reached, an error will be returned.\n * @return {BackoffSettings} a new settings.\n *\n */\nexport function createMaxRetriesBackoffSettings(\n  initialRetryDelayMillis: number,\n  retryDelayMultiplier: number,\n  maxRetryDelayMillis: number,\n  initialRpcTimeoutMillis: number,\n  rpcTimeoutMultiplier: number,\n  maxRpcTimeoutMillis: number,\n  maxRetries: number\n): BackoffSettings {\n  return {\n    initialRetryDelayMillis,\n    retryDelayMultiplier,\n    maxRetryDelayMillis,\n    initialRpcTimeoutMillis,\n    rpcTimeoutMultiplier,\n    maxRpcTimeoutMillis,\n    maxRetries,\n  };\n}\n\n/**\n * Creates a new {@link BundleOptions}.\n *\n * @private\n * @param {Object} options - An object to hold optional parameters. See\n *   properties for the content of options.\n * @return {BundleOptions} - A new options.\n */\nexport function createBundleOptions(options: BundlingConfig): BundleOptions {\n  const params = [\n    'element_count_threshold',\n    'element_count_limit',\n    'request_byte_threshold',\n    'request_byte_limit',\n    'delay_threshold_millis',\n  ];\n  params.forEach(param => {\n    if (param in options && typeof options[param] !== 'number') {\n      throw new Error(`${param} should be a number`);\n    }\n  });\n\n  const elementCountThreshold = options.element_count_threshold || 0;\n  const elementCountLimit = options.element_count_limit || 0;\n  const requestByteThreshold = options.request_byte_threshold || 0;\n  const requestByteLimit = options.request_byte_limit || 0;\n  const delayThreshold = options.delay_threshold_millis || 0;\n\n  if (\n    elementCountThreshold === 0 &&\n    requestByteThreshold === 0 &&\n    delayThreshold === 0\n  ) {\n    throw new Error('one threshold should be > 0');\n  }\n  return {\n    elementCountThreshold,\n    elementCountLimit,\n    requestByteThreshold,\n    requestByteLimit,\n    delayThreshold,\n  };\n}\n\n/**\n * Helper for {@link constructSettings}\n *\n * @private\n *\n * @param {Object} methodConfig - A dictionary representing a single\n *   `methods` entry of the standard API client config file. (See\n *   {@link constructSettings} for information on this yaml.)\n * @param {?Object} retryCodes - A dictionary parsed from the\n *   `retry_codes_def` entry of the standard API client config\n *   file. (See {@link constructSettings} for information on this yaml.)\n * @param {Object} retryParams - A dictionary parsed from the\n *   `retry_params` entry of the standard API client config\n *   file. (See {@link constructSettings} for information on this yaml.)\n * @param {Object} retryNames - A dictionary mapping the string names\n *   used in the standard API client config file to API response\n *   status codes.\n * @return {?RetryOptions} The new retry options.\n */\nfunction constructRetry(\n  methodConfig: MethodConfig,\n  retryCodes: {[index: string]: string[]},\n  retryParams: {[index: string]: {}},\n  retryNames: {[index: string]: {}}\n): RetryOptions | null | undefined {\n  if (!methodConfig) {\n    return null;\n  }\n\n  let codes: number[] | null = null;\n  if (retryCodes && 'retry_codes_name' in methodConfig) {\n    const retryCodesName = methodConfig['retry_codes_name'];\n    codes = (retryCodes[retryCodesName] || []).map(name => {\n      return Number(retryNames[name]);\n    });\n  }\n\n  let backoffSettings: BackoffSettings | null = null;\n  if (retryParams && 'retry_params_name' in methodConfig) {\n    const params = retryParams[\n      methodConfig.retry_params_name\n    ] as RetryParamsConfig;\n    backoffSettings = createBackoffSettings(\n      params.initial_retry_delay_millis,\n      params.retry_delay_multiplier,\n      params.max_retry_delay_millis,\n      params.initial_rpc_timeout_millis,\n      params.rpc_timeout_multiplier,\n      params.max_rpc_timeout_millis,\n      params.total_timeout_millis\n    );\n  }\n  return createRetryOptions(codes!, backoffSettings!);\n}\n\n/**\n * Helper for {@link constructSettings}\n *\n * Takes two retry options, and merges them into a single RetryOption instance.\n *\n * @private\n *\n * @param {RetryOptions} retry - The base RetryOptions.\n * @param {RetryOptions} overrides - The RetryOptions used for overriding\n *   `retry`. Use the values if it is not null. If entire `overrides` is null,\n *   ignore the base retry and return null.\n * @return {?RetryOptions} The merged RetryOptions.\n */\nfunction mergeRetryOptions(\n  retry: RetryOptions,\n  overrides: RetryOptions\n): RetryOptions | null {\n  if (!overrides) {\n    return null;\n  }\n\n  if (!overrides.retryCodes && !overrides.backoffSettings) {\n    return retry;\n  }\n\n  let codes = retry.retryCodes;\n  if (overrides.retryCodes) {\n    codes = overrides.retryCodes;\n  }\n  let backoffSettings = retry.backoffSettings;\n  if (overrides.backoffSettings) {\n    backoffSettings = overrides.backoffSettings;\n  }\n  return createRetryOptions(codes, backoffSettings);\n}\n\nexport interface ServiceConfig {\n  retry_codes: {[index: string]: string[]};\n  retry_params: {[index: string]: RetryParamsConfig};\n  methods: {[index: string]: MethodConfig};\n}\n\nexport interface RetryParamsConfig {\n  initial_retry_delay_millis: number;\n  retry_delay_multiplier: number;\n  max_retry_delay_millis: number;\n  initial_rpc_timeout_millis: number;\n  rpc_timeout_multiplier: number;\n  max_rpc_timeout_millis: number;\n  total_timeout_millis: number;\n}\n\nexport interface MethodConfig {\n  retry_codes_name: string;\n  retry_params_name: string;\n  bundling?: BundlingConfig;\n  timeout_millis?: number;\n}\n\nexport interface BundlingConfig {\n  [index: string]: number;\n  element_count_threshold: number;\n  element_count_limit: number;\n  request_byte_threshold: number;\n  request_byte_limit: number;\n  delay_threshold_millis: number;\n}\n\nexport interface ClientConfig {\n  interfaces?: {[index: string]: ServiceConfig};\n}\n\n/**\n * Constructs a dictionary mapping method names to {@link CallSettings}.\n *\n * The `clientConfig` parameter is parsed from a client configuration JSON\n * file of the form:\n *\n *     {\n *       \"interfaces\": {\n *         \"google.fake.v1.ServiceName\": {\n *           \"retry_codes\": {\n *             \"idempotent\": [\"UNAVAILABLE\", \"DEADLINE_EXCEEDED\"],\n *             \"non_idempotent\": []\n *           },\n *           \"retry_params\": {\n *             \"default\": {\n *               \"initial_retry_delay_millis\": 100,\n *               \"retry_delay_multiplier\": 1.2,\n *               \"max_retry_delay_millis\": 1000,\n *               \"initial_rpc_timeout_millis\": 2000,\n *               \"rpc_timeout_multiplier\": 1.5,\n *               \"max_rpc_timeout_millis\": 30000,\n *               \"total_timeout_millis\": 45000\n *             }\n *           },\n *           \"methods\": {\n *             \"CreateFoo\": {\n *               \"retry_codes_name\": \"idempotent\",\n *               \"retry_params_name\": \"default\"\n *             },\n *             \"Publish\": {\n *               \"retry_codes_name\": \"non_idempotent\",\n *               \"retry_params_name\": \"default\",\n *               \"bundling\": {\n *                 \"element_count_threshold\": 40,\n *                 \"element_count_limit\": 200,\n *                 \"request_byte_threshold\": 90000,\n *                 \"request_byte_limit\": 100000,\n *                 \"delay_threshold_millis\": 100\n *               }\n *             }\n *           }\n *         }\n *       }\n *     }\n *\n * @param {String} serviceName - The fully-qualified name of this\n *   service, used as a key into the client config file (in the\n *   example above, this value should be 'google.fake.v1.ServiceName').\n * @param {Object} clientConfig - A dictionary parsed from the\n *   standard API client config file.\n * @param {Object} configOverrides - A dictionary in the same structure of\n *   client_config to override the settings.\n * @param {Object.} retryNames - A dictionary mapping the strings\n *   referring to response status codes to objects representing\n *   those codes.\n * @param {Object} otherArgs - the non-request arguments to be passed to the API\n *   calls.\n * @param {Function=} promise - A constructor for a promise that implements the\n * ES6 specification of promise. If not provided, native promises will be used.\n * @return {Object} A mapping from method name to CallSettings, or null if the\n *   service is not found in the config.\n */\nexport function constructSettings(\n  serviceName: string,\n  clientConfig: ClientConfig,\n  configOverrides: ClientConfig,\n  retryNames: {},\n  otherArgs?: {},\n  promise?: PromiseConstructor\n) {\n  otherArgs = otherArgs || {};\n  // tslint:disable-next-line no-any\n  const defaults: any = {};\n\n  const serviceConfig = (clientConfig.interfaces || {})[serviceName];\n  if (!serviceConfig) {\n    return null;\n  }\n\n  const overrides = (configOverrides.interfaces || {})[serviceName] || {};\n  const methods = serviceConfig.methods;\n  const overridingMethods = overrides.methods || {};\n  // tslint:disable-next-line forin\n  for (const methodName in methods) {\n    const methodConfig = methods[methodName];\n    const jsName = methodName[0].toLowerCase() + methodName.slice(1);\n\n    let retry = constructRetry(\n      methodConfig,\n      serviceConfig.retry_codes,\n      serviceConfig.retry_params,\n      retryNames\n    );\n    let bundlingConfig = methodConfig.bundling;\n    let timeout = methodConfig.timeout_millis;\n    if (methodName in overridingMethods) {\n      const overridingMethod = overridingMethods[methodName];\n      if (overridingMethod) {\n        if ('bundling' in overridingMethod) {\n          bundlingConfig = overridingMethod.bundling;\n        }\n        if ('timeout_millis' in overridingMethod) {\n          timeout = overridingMethod.timeout_millis;\n        }\n      }\n      retry = mergeRetryOptions(\n        retry!,\n        constructRetry(\n          overridingMethod,\n          overrides.retry_codes,\n          overrides.retry_params,\n          retryNames\n        )!\n      );\n    }\n\n    defaults[jsName] = new CallSettings({\n      timeout,\n      retry,\n      bundleOptions: bundlingConfig\n        ? createBundleOptions(bundlingConfig)\n        : null,\n      otherArgs,\n      promise: promise || Promise,\n    });\n  }\n\n  return defaults;\n}\n\n    \n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/SimpleCallbackFunction.html":{"url":"interfaces/SimpleCallbackFunction.html","title":"interface - SimpleCallbackFunction","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  SimpleCallbackFunction\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/apitypes.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Unamed property\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n\n                                    \n                                        \n                                            Signature :\n                                            \n                                            \n                                                \n                                                    [argument: RequestType, callback: APICallback]\n                                            \n                                        \n                                    \n\n\n                                    \n                                        \n                                            Returns :         GRPCCallResult\n\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import {Duplex} from 'stream';\n\nimport {CancellablePromise} from './call';\nimport {CallOptions} from './gax';\nimport {GoogleError} from './googleError';\nimport {Operation} from './longRunningCalls/longrunning';\n\n// gRPC functions return object with `.cancel()` method that can be used for\n// canceling the ongoing call.\nexport interface GRPCCallResult {\n  cancel(): void;\n}\n\n// All GAX calls take RequestType and return ResultTuple, which can contain up\n// to three elements. The first element is always a response (post-processed for\n// special types of call such as pagination or long-running), the second\n// parameter is defined for paginated calls and stores the next page request\n// object, the third parameter stores raw (unprocessed) response object in cases\n// when it might be useful for users.\nexport interface RequestType {}\nexport type ResponseType = {} | null;\nexport type NextPageRequestType = {\n  [index: string]: string;\n} | null;\nexport type RawResponseType = Operation | {};\nexport type ResultTuple = [\n  ResponseType,\n  NextPageRequestType | undefined,\n  RawResponseType | undefined\n];\n\nexport interface SimpleCallbackFunction {\n  (argument: RequestType, callback: APICallback): GRPCCallResult;\n}\n\nexport type APICallback = (\n  err: GoogleError | null,\n  response?: ResponseType,\n  next?: NextPageRequestType,\n  rawResponse?: RawResponseType\n) => void;\n\n// The following five types mimic various gRPC calls (regular UnaryCall and\n// various streaming calls).\nexport type UnaryCall = (\n  argument: {},\n  metadata: {},\n  options: {},\n  callback: APICallback\n) => GRPCCallResult;\nexport type ServerStreamingCall = (\n  argument: {},\n  metadata: {},\n  options: {}\n) => Duplex & GRPCCallResult;\nexport type ClientStreamingCall = (\n  metadata: {},\n  options: {},\n  callback?: APICallback\n) => Duplex & GRPCCallResult;\nexport type BiDiStreamingCall = (\n  metadata: {},\n  options: {}\n) => Duplex & GRPCCallResult;\nexport type GRPCCall =\n  | UnaryCall\n  | ServerStreamingCall\n  | ClientStreamingCall\n  | BiDiStreamingCall;\n\n// GAX wraps gRPC calls so that the wrapper functions return either a\n// cancellable promise, or a stream (also cancellable!)\nexport type CancellableStream = Duplex & GRPCCallResult;\nexport type GaxCallResult = CancellablePromise | CancellableStream;\nexport interface GaxCallPromise {\n  (\n    argument: {},\n    callOptions?: CallOptions,\n    callback?: APICallback\n  ): CancellablePromise;\n}\nexport interface GaxCallStream {\n  (\n    argument: {},\n    callOptions?: CallOptions,\n    callback?: APICallback\n  ): CancellableStream;\n}\nexport interface GaxCall {\n  (\n    argument: {},\n    callOptions?: CallOptions,\n    callback?: APICallback\n  ): GaxCallResult;\n}\nexport interface GRPCCallOtherArgs {\n  options?: {deadline?: Date};\n  headers?: {};\n  metadataBuilder: (abTests?: {}, headers?: {}) => {};\n}\n\n    \n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/StreamDescriptor.html":{"url":"classes/StreamDescriptor.html","title":"class - StreamDescriptor","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  StreamDescriptor\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/streamingCalls/streamDescriptor.ts\n        \n\n            \n                Description\n            \n            \n                A descriptor for streaming calls.\n\n            \n\n\n            \n                Implements\n            \n            \n                            Descriptor\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                type\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getApiCaller\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(streamType: StreamType)\n                    \n                \n                        \n                            \n                                Defined in src/streamingCalls/streamDescriptor.ts:43\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        streamType\n                                                  \n                                                        \n                                                                        StreamType\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            type\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         StreamType\n\n                        \n                    \n                        \n                            \n                                    Defined in src/streamingCalls/streamDescriptor.ts:43\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getApiCaller\n                        \n                        \n                    \n                \n            \n            \n                \ngetApiCaller(settings: CallSettings)\n                \n            \n\n\n            \n                \n                    Defined in src/streamingCalls/streamDescriptor.ts:49\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    settings\n                                    \n                                                CallSettings\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         APICaller\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {APICaller} from '../apiCaller';\nimport {Descriptor} from '../descriptor';\nimport {CallSettings} from '../gax';\n\nimport {StreamType} from './streaming';\nimport {StreamingApiCaller} from './streamingApiCaller';\n\n/**\n * A descriptor for streaming calls.\n */\nexport class StreamDescriptor implements Descriptor {\n  type: StreamType;\n\n  constructor(streamType: StreamType) {\n    this.type = streamType;\n  }\n\n  getApiCaller(settings: CallSettings): APICaller {\n    // Right now retrying does not work with gRPC-streaming, because retryable\n    // assumes an API call returns an event emitter while gRPC-streaming methods\n    // return Stream.\n    // TODO: support retrying.\n    settings.retry = null;\n    return new StreamingApiCaller(this);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/StreamProxy.html":{"url":"classes/StreamProxy.html","title":"class - StreamProxy","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  StreamProxy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/streamingCalls/streaming.ts\n        \n\n\n            \n                Extends\n            \n            \n                        duplexify\n            \n\n            \n                Implements\n            \n            \n                            GRPCCallResult\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                stream\n                            \n                            \n                                type\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                cancel\n                            \n                            \n                                forwardEvents\n                            \n                            \n                                setStream\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(type: StreamType, callback: APICallback)\n                    \n                \n                        \n                            \n                                Defined in src/streamingCalls/streaming.ts:95\n                            \n                        \n\n                \n                    \n                            StreamProxy is a proxy to gRPC-streaming method.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        type\n                                                  \n                                                        \n                                                                        StreamType\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nthe type of gRPC stream.\n\n\n                                                        \n                                                \n                                                \n                                                        callback\n                                                  \n                                                        \n                                                                        APICallback\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nthe callback for further API call.\n\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            stream\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         CancellableStream\n\n                        \n                    \n                        \n                            \n                                    Defined in src/streamingCalls/streaming.ts:95\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            type\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         StreamType\n\n                        \n                    \n                        \n                            \n                                    Defined in src/streamingCalls/streaming.ts:92\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            cancel\n                        \n                        \n                    \n                \n            \n            \n                \ncancel()\n                \n            \n\n\n            \n                \n                    Defined in src/streamingCalls/streaming.ts:115\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            forwardEvents\n                        \n                        \n                    \n                \n            \n            \n                \nforwardEvents(stream: Stream)\n                \n            \n\n\n            \n                \n                    Defined in src/streamingCalls/streaming.ts:127\n                \n            \n\n\n            \n                \n                    Forward events from an API request stream to the user's stream.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    stream\n                                    \n                                            Stream\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nThe API request stream.\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            setStream\n                        \n                        \n                    \n                \n            \n            \n                \nsetStream(apiCall: SimpleCallbackFunction, argument: literal type)\n                \n            \n\n\n            \n                \n                    Defined in src/streamingCalls/streaming.ts:157\n                \n            \n\n\n            \n                \n                    Specifies the target stream.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    apiCall\n                                    \n                                                SimpleCallbackFunction\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nthe API function to be called.\n\n\n                                    \n                                \n                                \n                                    argument\n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nthe argument to be passed to the apiCall.\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {Duplex, DuplexOptions, Readable, Stream, Writable} from 'stream';\n\nimport {\n  APICallback,\n  CancellableStream,\n  GRPCCallResult,\n  SimpleCallbackFunction,\n} from '../apitypes';\n\nconst duplexify: DuplexifyConstructor = require('duplexify');\nconst retryRequest = require('retry-request');\n\n// Directly copy over Duplexify interfaces\nexport interface DuplexifyOptions extends DuplexOptions {\n  autoDestroy?: boolean;\n  end?: boolean;\n}\n\nexport interface Duplexify extends Duplex {\n  readonly destroyed: boolean;\n  setWritable(writable: Writable | false | null): void;\n  setReadable(readable: Readable | false | null): void;\n}\n\nexport interface DuplexifyConstructor {\n  obj(\n    writable?: Writable | false | null,\n    readable?: Readable | false | null,\n    options?: DuplexifyOptions\n  ): Duplexify;\n  new (\n    writable?: Writable | false | null,\n    readable?: Readable | false | null,\n    options?: DuplexifyOptions\n  ): Duplexify;\n  (\n    writable?: Writable | false | null,\n    readable?: Readable | false | null,\n    options?: DuplexifyOptions\n  ): Duplexify;\n}\n\n/**\n * The type of gRPC streaming.\n * @enum {number}\n */\nexport enum StreamType {\n  /** Client sends a single request, server streams responses. */\n  SERVER_STREAMING = 1,\n\n  /** Client streams requests, server returns a single response. */\n  CLIENT_STREAMING = 2,\n\n  /** Both client and server stream objects. */\n  BIDI_STREAMING = 3,\n}\n\nexport class StreamProxy extends duplexify implements GRPCCallResult {\n  type: StreamType;\n  private _callback: APICallback;\n  private _isCancelCalled: boolean;\n  stream?: CancellableStream;\n  /**\n   * StreamProxy is a proxy to gRPC-streaming method.\n   *\n   * @private\n   * @constructor\n   * @param {StreamType} type - the type of gRPC stream.\n   * @param {ApiCallback} callback - the callback for further API call.\n   */\n  constructor(type: StreamType, callback: APICallback) {\n    super(undefined, undefined, {\n      objectMode: true,\n      readable: type !== StreamType.CLIENT_STREAMING,\n      writable: type !== StreamType.SERVER_STREAMING,\n    } as DuplexOptions);\n    this.type = type;\n    this._callback = callback;\n    this._isCancelCalled = false;\n  }\n\n  cancel() {\n    if (this.stream) {\n      this.stream.cancel();\n    } else {\n      this._isCancelCalled = true;\n    }\n  }\n\n  /**\n   * Forward events from an API request stream to the user's stream.\n   * @param {Stream} stream - The API request stream.\n   */\n  forwardEvents(stream: Stream) {\n    const eventsToForward = ['metadata', 'response', 'status'];\n\n    eventsToForward.forEach(event => {\n      stream.on(event, this.emit.bind(this, event));\n    });\n\n    // We also want to supply the status data as 'response' event to support\n    // the behavior of google-cloud-node expects.\n    // see:\n    // https://github.com/GoogleCloudPlatform/google-cloud-node/pull/1775#issuecomment-259141029\n    // https://github.com/GoogleCloudPlatform/google-cloud-node/blob/116436fa789d8b0f7fc5100b19b424e3ec63e6bf/packages/common/src/grpc-service.js#L355\n    stream.on('metadata', metadata => {\n      // Create a response object with succeeds.\n      // TODO: unify this logic with the decoration of gRPC response when it's\n      // added. see: https://github.com/googleapis/gax-nodejs/issues/65\n      stream.emit('response', {\n        code: 200,\n        details: '',\n        message: 'OK',\n        metadata,\n      });\n    });\n  }\n\n  /**\n   * Specifies the target stream.\n   * @param {ApiCall} apiCall - the API function to be called.\n   * @param {Object} argument - the argument to be passed to the apiCall.\n   */\n  setStream(apiCall: SimpleCallbackFunction, argument: {}) {\n    if (this.type === StreamType.SERVER_STREAMING) {\n      const retryStream = retryRequest(null, {\n        objectMode: true,\n        request: () => {\n          if (this._isCancelCalled) {\n            if (this.stream) {\n              this.stream.cancel();\n            }\n            return;\n          }\n          const stream = apiCall(argument, this._callback) as CancellableStream;\n          this.stream = stream;\n          this.forwardEvents(stream);\n          return stream;\n        },\n      });\n      this.setReadable(retryStream);\n      return;\n    }\n\n    const stream = apiCall(argument, this._callback) as CancellableStream;\n    this.stream = stream;\n    this.forwardEvents(stream);\n\n    if (this.type === StreamType.CLIENT_STREAMING) {\n      this.setWritable(stream);\n    }\n\n    if (this.type === StreamType.BIDI_STREAMING) {\n      this.setReadable(stream);\n      this.setWritable(stream);\n    }\n\n    if (this._isCancelCalled && this.stream) {\n      this.stream.cancel();\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/StreamingApiCaller.html":{"url":"classes/StreamingApiCaller.html","title":"class - StreamingApiCaller","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  StreamingApiCaller\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/streamingCalls/streamingApiCaller.ts\n        \n\n\n\n            \n                Implements\n            \n            \n                            APICaller\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                descriptor\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                call\n                            \n                            \n                                fail\n                            \n                            \n                                init\n                            \n                            \n                                result\n                            \n                            \n                                wrap\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(descriptor: StreamDescriptor)\n                    \n                \n                        \n                            \n                                Defined in src/streamingCalls/streamingApiCaller.ts:48\n                            \n                        \n\n                \n                    \n                            An API caller for methods of gRPC streaming.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        descriptor\n                                                  \n                                                        \n                                                                        StreamDescriptor\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nthe descriptor of the method structure.\n\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            descriptor\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         StreamDescriptor\n\n                        \n                    \n                        \n                            \n                                    Defined in src/streamingCalls/streamingApiCaller.ts:48\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            call\n                        \n                        \n                    \n                \n            \n            \n                \ncall(apiCall: SimpleCallbackFunction, argument: literal type, settings: literal type, stream: StreamProxy)\n                \n            \n\n\n            \n                \n                    Defined in src/streamingCalls/streamingApiCaller.ts:92\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    apiCall\n                                    \n                                                SimpleCallbackFunction\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    argument\n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    settings\n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    stream\n                                    \n                                                StreamProxy\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            fail\n                        \n                        \n                    \n                \n            \n            \n                \nfail(stream: CancellableStream, err: Error)\n                \n            \n\n\n            \n                \n                    Defined in src/streamingCalls/streamingApiCaller.ts:101\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    stream\n                                    \n                                                CancellableStream\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    err\n                                    \n                                            Error\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            init\n                        \n                        \n                    \n                \n            \n            \n                \ninit(settings: ApiCallerSettings, callback: APICallback)\n                \n            \n\n\n            \n                \n                    Defined in src/streamingCalls/streamingApiCaller.ts:60\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    settings\n                                    \n                                                ApiCallerSettings\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    callback\n                                    \n                                                APICallback\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         StreamProxy\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            result\n                        \n                        \n                    \n                \n            \n            \n                \nresult(stream: CancellableStream)\n                \n            \n\n\n            \n                \n                    Defined in src/streamingCalls/streamingApiCaller.ts:105\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    stream\n                                    \n                                                CancellableStream\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            wrap\n                        \n                        \n                    \n                \n            \n            \n                \nwrap(func: GRPCCall)\n                \n            \n\n\n            \n                \n                    Defined in src/streamingCalls/streamingApiCaller.ts:64\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    func\n                                    \n                                                GRPCCall\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         GRPCCall\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {APICaller, ApiCallerSettings} from '../apiCaller';\nimport {\n  APICallback,\n  BiDiStreamingCall,\n  CancellableStream,\n  ClientStreamingCall,\n  GRPCCall,\n  ServerStreamingCall,\n  SimpleCallbackFunction,\n} from '../apitypes';\nimport {warn} from '../warnings';\n\nimport {StreamDescriptor} from './streamDescriptor';\nimport {StreamProxy, StreamType} from './streaming';\n\nexport class StreamingApiCaller implements APICaller {\n  descriptor: StreamDescriptor;\n\n  /**\n   * An API caller for methods of gRPC streaming.\n   * @private\n   * @constructor\n   * @param {StreamDescriptor} descriptor - the descriptor of the method structure.\n   */\n  constructor(descriptor: StreamDescriptor) {\n    this.descriptor = descriptor;\n  }\n\n  init(settings: ApiCallerSettings, callback: APICallback): StreamProxy {\n    return new StreamProxy(this.descriptor.type, callback);\n  }\n\n  wrap(func: GRPCCall): GRPCCall {\n    switch (this.descriptor.type) {\n      case StreamType.SERVER_STREAMING:\n        return (argument: {}, metadata: {}, options: {}) => {\n          return (func as ServerStreamingCall)(argument, metadata, options);\n        };\n      case StreamType.CLIENT_STREAMING:\n        return (\n          argument: {},\n          metadata: {},\n          options: {},\n          callback?: APICallback\n        ) => {\n          return (func as ClientStreamingCall)(metadata, options, callback);\n        };\n      case StreamType.BIDI_STREAMING:\n        return (argument: {}, metadata: {}, options: {}) => {\n          return (func as BiDiStreamingCall)(metadata, options);\n        };\n      default:\n        warn(\n          'streaming_wrap_unknown_stream_type',\n          `Unknown stream type: ${this.descriptor.type}`\n        );\n    }\n    return func;\n  }\n\n  call(\n    apiCall: SimpleCallbackFunction,\n    argument: {},\n    settings: {},\n    stream: StreamProxy\n  ) {\n    stream.setStream(apiCall, argument);\n  }\n\n  fail(stream: CancellableStream, err: Error) {\n    stream.emit('error', err);\n  }\n\n  result(stream: CancellableStream) {\n    return stream;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/SubResponseInfo.html":{"url":"interfaces/SubResponseInfo.html","title":"interface - SubResponseInfo","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  SubResponseInfo\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/bundlingCalls/task.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        end\n                                \n                                \n                                        field\n                                \n                                \n                                            Optional\n                                        start\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        end\n                                    \n                                \n                                \n                                    \n                                        end:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        field\n                                    \n                                \n                                \n                                    \n                                        field:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        start\n                                    \n                                \n                                \n                                    \n                                        start:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import {status} from '@grpc/grpc-js';\n\nimport {APICallback, GRPCCallResult, SimpleCallbackFunction} from '../apitypes';\nimport {GoogleError} from '../googleError';\n\nexport interface SubResponseInfo {\n  field: string;\n  start?: number;\n  end?: number;\n}\n\nexport interface TaskElement {}\n\nexport interface TaskData {\n  elements: TaskElement[];\n  bytes: number;\n  callback: TaskCallback;\n  cancelled?: boolean;\n}\n\nexport interface TaskCallback extends APICallback {\n  id?: string;\n}\n\n/**\n * Creates a deep copy of the object with the consideration of subresponse\n * fields for bundling.\n *\n * @param {Object} obj - The source object.\n * @param {Object?} subresponseInfo - The information to copy the subset of\n *   the field for the response. Do nothing if it's null.\n * @param {String} subresponseInfo.field - The field name.\n * @param {number} subresponseInfo.start - The offset where the copying\n *   element should starts with.\n * @param {number} subresponseInfo.end - The ending index where the copying\n *   region of the elements ends.\n * @return {Object} The copied object.\n * @private\n */\nexport function deepCopyForResponse(\n  // tslint:disable-next-line no-any\n  obj: any,\n  subresponseInfo: SubResponseInfo | null\n) {\n  // tslint:disable-next-line no-any\n  let result: any;\n  if (obj === null) {\n    return null;\n  }\n  if (obj === undefined) {\n    return undefined;\n  }\n  if (Array.isArray(obj)) {\n    result = [];\n    obj.forEach(element => {\n      result.push(deepCopyForResponse(element, null));\n    });\n    return result;\n  }\n  // Some objects (such as ByteBuffer) have copy method.\n  if (obj.copy !== undefined) {\n    return obj.copy();\n  }\n  // ArrayBuffer should be copied through slice().\n  if (obj instanceof ArrayBuffer) {\n    return (obj as ArrayBuffer).slice(0);\n  }\n  if (typeof obj === 'object') {\n    result = {};\n    Object.keys(obj).forEach(key => {\n      if (\n        subresponseInfo &&\n        key === subresponseInfo.field &&\n        Array.isArray(obj[key])\n      ) {\n        // Note that subresponses are not deep-copied. This is safe because\n        // those subresponses are not shared among callbacks.\n        result[key] = obj[key].slice(\n          subresponseInfo.start,\n          subresponseInfo.end\n        );\n      } else {\n        result[key] = deepCopyForResponse(obj[key], null);\n      }\n    });\n    return result;\n  }\n  return obj;\n}\n\nexport class Task {\n  _apiCall: SimpleCallbackFunction;\n  _request: {[index: string]: TaskElement[]};\n  _bundledField: string;\n  _subresponseField?: string | null;\n  _data: TaskData[];\n  callCanceller?: GRPCCallResult;\n  /**\n   * A task coordinates the execution of a single bundle.\n   *\n   * @param {function} apiCall - The function to conduct calling API.\n   * @param {Object} bundlingRequest - The base request object to be used\n   *   for the actual API call.\n   * @param {string} bundledField - The name of the field in bundlingRequest\n   *   to be bundled.\n   * @param {string=} subresponseField - The name of the field in the response\n   *   to be passed to the callback.\n   * @constructor\n   * @private\n   */\n  constructor(\n    apiCall: SimpleCallbackFunction,\n    bundlingRequest: {},\n    bundledField: string,\n    subresponseField?: string | null\n  ) {\n    this._apiCall = apiCall;\n    this._request = bundlingRequest;\n    this._bundledField = bundledField;\n    this._subresponseField = subresponseField;\n    this._data = [];\n  }\n  /**\n   * Returns the number of elements in a task.\n   * @return {number} The number of elements.\n   */\n  getElementCount() {\n    let count = 0;\n    for (let i = 0; i  {\n        const responses: Array = [];\n        if (err) {\n          self._data.forEach(() => {\n            responses.push(undefined);\n          });\n        } else {\n          let subresponseInfo: SubResponseInfo | null = null;\n          if (self._subresponseField) {\n            subresponseInfo = {\n              field: self._subresponseField,\n              start: 0,\n            };\n          }\n          self._data.forEach(data => {\n            if (subresponseInfo) {\n              subresponseInfo.end =\n                subresponseInfo.start! + data.elements.length;\n            }\n            responses.push(deepCopyForResponse(response, subresponseInfo));\n            if (subresponseInfo) {\n              subresponseInfo.start = subresponseInfo.end;\n            }\n          });\n        }\n        for (let i = 0; i  {\n        if (d.callback.id === id) {\n          d.cancelled = true;\n        }\n        if (!d.cancelled) {\n          allCancelled = false;\n        }\n      });\n      if (allCancelled) {\n        this.callCanceller.cancel();\n      }\n      return allCancelled;\n    }\n    for (let i = 0; i \n    \n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Task.html":{"url":"classes/Task.html","title":"class - Task","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Task\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/bundlingCalls/task.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                _apiCall\n                            \n                            \n                                _bundledField\n                            \n                            \n                                _data\n                            \n                            \n                                _request\n                            \n                            \n                                    Optional\n                                _subresponseField\n                            \n                            \n                                    Optional\n                                callCanceller\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                cancel\n                            \n                            \n                                extend\n                            \n                            \n                                getElementCount\n                            \n                            \n                                getRequestByteSize\n                            \n                            \n                                run\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(apiCall: SimpleCallbackFunction, bundlingRequest: literal type, bundledField: string, subresponseField?: string | null)\n                    \n                \n                        \n                            \n                                Defined in src/bundlingCalls/task.ts:128\n                            \n                        \n\n                \n                    \n                            A task coordinates the execution of a single bundle.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        apiCall\n                                                  \n                                                        \n                                                                        SimpleCallbackFunction\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nThe function to conduct calling API.\n\n\n                                                        \n                                                \n                                                \n                                                        bundlingRequest\n                                                  \n                                                        \n                                                                    literal type\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nThe base request object to be used\nfor the actual API call.\n\n\n                                                        \n                                                \n                                                \n                                                        bundledField\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nThe name of the field in bundlingRequest\nto be bundled.\n\n\n                                                        \n                                                \n                                                \n                                                        subresponseField\n                                                  \n                                                        \n                                                                    string | null\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                        \n                                                                \nThe name of the field in the response\nto be passed to the callback.\n\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            _apiCall\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         SimpleCallbackFunction\n\n                        \n                    \n                        \n                            \n                                    Defined in src/bundlingCalls/task.ts:123\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            _bundledField\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/bundlingCalls/task.ts:125\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            _data\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         TaskData[]\n\n                        \n                    \n                        \n                            \n                                    Defined in src/bundlingCalls/task.ts:127\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            _request\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     literal type\n\n                        \n                    \n                        \n                            \n                                    Defined in src/bundlingCalls/task.ts:124\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            _subresponseField\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     string | null\n\n                        \n                    \n                        \n                            \n                                    Defined in src/bundlingCalls/task.ts:126\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            callCanceller\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         GRPCCallResult\n\n                        \n                    \n                        \n                            \n                                    Defined in src/bundlingCalls/task.ts:128\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            cancel\n                        \n                        \n                    \n                \n            \n            \n                \ncancel(id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/bundlingCalls/task.ts:251\n                \n            \n\n\n            \n                \n                    Cancels a part of elements.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nThe identifier of the part of elements.\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        Whether the entire task will be canceled or not.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            extend\n                        \n                        \n                    \n                \n            \n            \n                \nextend(elements: TaskElement[], bytes: number, callback: TaskCallback)\n                \n            \n\n\n            \n                \n                    Defined in src/bundlingCalls/task.ts:239\n                \n            \n\n\n            \n                \n                    Appends the list of elements into the task.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    elements\n                                    \n                                                TaskElement[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nthe new list of elements.\n\n\n                                    \n                                \n                                \n                                    bytes\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nthe byte size required to encode elements in the API.\n\n\n                                    \n                                \n                                \n                                    callback\n                                    \n                                                TaskCallback\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nthe callback of the method call.\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getElementCount\n                        \n                        \n                    \n                \n            \n            \n                \ngetElementCount()\n                \n            \n\n\n            \n                \n                    Defined in src/bundlingCalls/task.ts:158\n                \n            \n\n\n            \n                \n                    Returns the number of elements in a task.\n\n\n                    \n                    \n                    \n                        Returns :         number\n\n                    \n                    \n                        The number of elements.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getRequestByteSize\n                        \n                        \n                    \n                \n            \n            \n                \ngetRequestByteSize()\n                \n            \n\n\n            \n                \n                    Defined in src/bundlingCalls/task.ts:169\n                \n            \n\n\n            \n                \n                    Returns the total byte size of the elements in a task.\n\n\n                    \n                    \n                    \n                        Returns :         number\n\n                    \n                    \n                        The byte size.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            run\n                        \n                        \n                    \n                \n            \n            \n                \nrun()\n                \n            \n\n\n            \n                \n                    Defined in src/bundlingCalls/task.ts:180\n                \n            \n\n\n            \n                \n                    Invokes the actual API call with current elements.\n\n\n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \nthe list of ids for invocations to be run.\n\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {status} from '@grpc/grpc-js';\n\nimport {APICallback, GRPCCallResult, SimpleCallbackFunction} from '../apitypes';\nimport {GoogleError} from '../googleError';\n\nexport interface SubResponseInfo {\n  field: string;\n  start?: number;\n  end?: number;\n}\n\nexport interface TaskElement {}\n\nexport interface TaskData {\n  elements: TaskElement[];\n  bytes: number;\n  callback: TaskCallback;\n  cancelled?: boolean;\n}\n\nexport interface TaskCallback extends APICallback {\n  id?: string;\n}\n\n/**\n * Creates a deep copy of the object with the consideration of subresponse\n * fields for bundling.\n *\n * @param {Object} obj - The source object.\n * @param {Object?} subresponseInfo - The information to copy the subset of\n *   the field for the response. Do nothing if it's null.\n * @param {String} subresponseInfo.field - The field name.\n * @param {number} subresponseInfo.start - The offset where the copying\n *   element should starts with.\n * @param {number} subresponseInfo.end - The ending index where the copying\n *   region of the elements ends.\n * @return {Object} The copied object.\n * @private\n */\nexport function deepCopyForResponse(\n  // tslint:disable-next-line no-any\n  obj: any,\n  subresponseInfo: SubResponseInfo | null\n) {\n  // tslint:disable-next-line no-any\n  let result: any;\n  if (obj === null) {\n    return null;\n  }\n  if (obj === undefined) {\n    return undefined;\n  }\n  if (Array.isArray(obj)) {\n    result = [];\n    obj.forEach(element => {\n      result.push(deepCopyForResponse(element, null));\n    });\n    return result;\n  }\n  // Some objects (such as ByteBuffer) have copy method.\n  if (obj.copy !== undefined) {\n    return obj.copy();\n  }\n  // ArrayBuffer should be copied through slice().\n  if (obj instanceof ArrayBuffer) {\n    return (obj as ArrayBuffer).slice(0);\n  }\n  if (typeof obj === 'object') {\n    result = {};\n    Object.keys(obj).forEach(key => {\n      if (\n        subresponseInfo &&\n        key === subresponseInfo.field &&\n        Array.isArray(obj[key])\n      ) {\n        // Note that subresponses are not deep-copied. This is safe because\n        // those subresponses are not shared among callbacks.\n        result[key] = obj[key].slice(\n          subresponseInfo.start,\n          subresponseInfo.end\n        );\n      } else {\n        result[key] = deepCopyForResponse(obj[key], null);\n      }\n    });\n    return result;\n  }\n  return obj;\n}\n\nexport class Task {\n  _apiCall: SimpleCallbackFunction;\n  _request: {[index: string]: TaskElement[]};\n  _bundledField: string;\n  _subresponseField?: string | null;\n  _data: TaskData[];\n  callCanceller?: GRPCCallResult;\n  /**\n   * A task coordinates the execution of a single bundle.\n   *\n   * @param {function} apiCall - The function to conduct calling API.\n   * @param {Object} bundlingRequest - The base request object to be used\n   *   for the actual API call.\n   * @param {string} bundledField - The name of the field in bundlingRequest\n   *   to be bundled.\n   * @param {string=} subresponseField - The name of the field in the response\n   *   to be passed to the callback.\n   * @constructor\n   * @private\n   */\n  constructor(\n    apiCall: SimpleCallbackFunction,\n    bundlingRequest: {},\n    bundledField: string,\n    subresponseField?: string | null\n  ) {\n    this._apiCall = apiCall;\n    this._request = bundlingRequest;\n    this._bundledField = bundledField;\n    this._subresponseField = subresponseField;\n    this._data = [];\n  }\n  /**\n   * Returns the number of elements in a task.\n   * @return {number} The number of elements.\n   */\n  getElementCount() {\n    let count = 0;\n    for (let i = 0; i  {\n        const responses: Array = [];\n        if (err) {\n          self._data.forEach(() => {\n            responses.push(undefined);\n          });\n        } else {\n          let subresponseInfo: SubResponseInfo | null = null;\n          if (self._subresponseField) {\n            subresponseInfo = {\n              field: self._subresponseField,\n              start: 0,\n            };\n          }\n          self._data.forEach(data => {\n            if (subresponseInfo) {\n              subresponseInfo.end =\n                subresponseInfo.start! + data.elements.length;\n            }\n            responses.push(deepCopyForResponse(response, subresponseInfo));\n            if (subresponseInfo) {\n              subresponseInfo.start = subresponseInfo.end;\n            }\n          });\n        }\n        for (let i = 0; i  {\n        if (d.callback.id === id) {\n          d.cancelled = true;\n        }\n        if (!d.cancelled) {\n          allCancelled = false;\n        }\n      });\n      if (allCancelled) {\n        this.callCanceller.cancel();\n      }\n      return allCancelled;\n    }\n    for (let i = 0; i \n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/TaskCallback.html":{"url":"interfaces/TaskCallback.html","title":"interface - TaskCallback","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  TaskCallback\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/bundlingCalls/task.ts\n        \n\n\n            \n                Extends\n            \n            \n                        APICallback\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        id\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        id\n                                    \n                                \n                                \n                                    \n                                        id:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import {status} from '@grpc/grpc-js';\n\nimport {APICallback, GRPCCallResult, SimpleCallbackFunction} from '../apitypes';\nimport {GoogleError} from '../googleError';\n\nexport interface SubResponseInfo {\n  field: string;\n  start?: number;\n  end?: number;\n}\n\nexport interface TaskElement {}\n\nexport interface TaskData {\n  elements: TaskElement[];\n  bytes: number;\n  callback: TaskCallback;\n  cancelled?: boolean;\n}\n\nexport interface TaskCallback extends APICallback {\n  id?: string;\n}\n\n/**\n * Creates a deep copy of the object with the consideration of subresponse\n * fields for bundling.\n *\n * @param {Object} obj - The source object.\n * @param {Object?} subresponseInfo - The information to copy the subset of\n *   the field for the response. Do nothing if it's null.\n * @param {String} subresponseInfo.field - The field name.\n * @param {number} subresponseInfo.start - The offset where the copying\n *   element should starts with.\n * @param {number} subresponseInfo.end - The ending index where the copying\n *   region of the elements ends.\n * @return {Object} The copied object.\n * @private\n */\nexport function deepCopyForResponse(\n  // tslint:disable-next-line no-any\n  obj: any,\n  subresponseInfo: SubResponseInfo | null\n) {\n  // tslint:disable-next-line no-any\n  let result: any;\n  if (obj === null) {\n    return null;\n  }\n  if (obj === undefined) {\n    return undefined;\n  }\n  if (Array.isArray(obj)) {\n    result = [];\n    obj.forEach(element => {\n      result.push(deepCopyForResponse(element, null));\n    });\n    return result;\n  }\n  // Some objects (such as ByteBuffer) have copy method.\n  if (obj.copy !== undefined) {\n    return obj.copy();\n  }\n  // ArrayBuffer should be copied through slice().\n  if (obj instanceof ArrayBuffer) {\n    return (obj as ArrayBuffer).slice(0);\n  }\n  if (typeof obj === 'object') {\n    result = {};\n    Object.keys(obj).forEach(key => {\n      if (\n        subresponseInfo &&\n        key === subresponseInfo.field &&\n        Array.isArray(obj[key])\n      ) {\n        // Note that subresponses are not deep-copied. This is safe because\n        // those subresponses are not shared among callbacks.\n        result[key] = obj[key].slice(\n          subresponseInfo.start,\n          subresponseInfo.end\n        );\n      } else {\n        result[key] = deepCopyForResponse(obj[key], null);\n      }\n    });\n    return result;\n  }\n  return obj;\n}\n\nexport class Task {\n  _apiCall: SimpleCallbackFunction;\n  _request: {[index: string]: TaskElement[]};\n  _bundledField: string;\n  _subresponseField?: string | null;\n  _data: TaskData[];\n  callCanceller?: GRPCCallResult;\n  /**\n   * A task coordinates the execution of a single bundle.\n   *\n   * @param {function} apiCall - The function to conduct calling API.\n   * @param {Object} bundlingRequest - The base request object to be used\n   *   for the actual API call.\n   * @param {string} bundledField - The name of the field in bundlingRequest\n   *   to be bundled.\n   * @param {string=} subresponseField - The name of the field in the response\n   *   to be passed to the callback.\n   * @constructor\n   * @private\n   */\n  constructor(\n    apiCall: SimpleCallbackFunction,\n    bundlingRequest: {},\n    bundledField: string,\n    subresponseField?: string | null\n  ) {\n    this._apiCall = apiCall;\n    this._request = bundlingRequest;\n    this._bundledField = bundledField;\n    this._subresponseField = subresponseField;\n    this._data = [];\n  }\n  /**\n   * Returns the number of elements in a task.\n   * @return {number} The number of elements.\n   */\n  getElementCount() {\n    let count = 0;\n    for (let i = 0; i  {\n        const responses: Array = [];\n        if (err) {\n          self._data.forEach(() => {\n            responses.push(undefined);\n          });\n        } else {\n          let subresponseInfo: SubResponseInfo | null = null;\n          if (self._subresponseField) {\n            subresponseInfo = {\n              field: self._subresponseField,\n              start: 0,\n            };\n          }\n          self._data.forEach(data => {\n            if (subresponseInfo) {\n              subresponseInfo.end =\n                subresponseInfo.start! + data.elements.length;\n            }\n            responses.push(deepCopyForResponse(response, subresponseInfo));\n            if (subresponseInfo) {\n              subresponseInfo.start = subresponseInfo.end;\n            }\n          });\n        }\n        for (let i = 0; i  {\n        if (d.callback.id === id) {\n          d.cancelled = true;\n        }\n        if (!d.cancelled) {\n          allCancelled = false;\n        }\n      });\n      if (allCancelled) {\n        this.callCanceller.cancel();\n      }\n      return allCancelled;\n    }\n    for (let i = 0; i \n    \n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/TaskData.html":{"url":"interfaces/TaskData.html","title":"interface - TaskData","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  TaskData\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/bundlingCalls/task.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        bytes\n                                \n                                \n                                        callback\n                                \n                                \n                                            Optional\n                                        cancelled\n                                \n                                \n                                        elements\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        bytes\n                                    \n                                \n                                \n                                    \n                                        bytes:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        callback\n                                    \n                                \n                                \n                                    \n                                        callback:         TaskCallback\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         TaskCallback\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        cancelled\n                                    \n                                \n                                \n                                    \n                                        cancelled:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        elements\n                                    \n                                \n                                \n                                    \n                                        elements:         TaskElement[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         TaskElement[]\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import {status} from '@grpc/grpc-js';\n\nimport {APICallback, GRPCCallResult, SimpleCallbackFunction} from '../apitypes';\nimport {GoogleError} from '../googleError';\n\nexport interface SubResponseInfo {\n  field: string;\n  start?: number;\n  end?: number;\n}\n\nexport interface TaskElement {}\n\nexport interface TaskData {\n  elements: TaskElement[];\n  bytes: number;\n  callback: TaskCallback;\n  cancelled?: boolean;\n}\n\nexport interface TaskCallback extends APICallback {\n  id?: string;\n}\n\n/**\n * Creates a deep copy of the object with the consideration of subresponse\n * fields for bundling.\n *\n * @param {Object} obj - The source object.\n * @param {Object?} subresponseInfo - The information to copy the subset of\n *   the field for the response. Do nothing if it's null.\n * @param {String} subresponseInfo.field - The field name.\n * @param {number} subresponseInfo.start - The offset where the copying\n *   element should starts with.\n * @param {number} subresponseInfo.end - The ending index where the copying\n *   region of the elements ends.\n * @return {Object} The copied object.\n * @private\n */\nexport function deepCopyForResponse(\n  // tslint:disable-next-line no-any\n  obj: any,\n  subresponseInfo: SubResponseInfo | null\n) {\n  // tslint:disable-next-line no-any\n  let result: any;\n  if (obj === null) {\n    return null;\n  }\n  if (obj === undefined) {\n    return undefined;\n  }\n  if (Array.isArray(obj)) {\n    result = [];\n    obj.forEach(element => {\n      result.push(deepCopyForResponse(element, null));\n    });\n    return result;\n  }\n  // Some objects (such as ByteBuffer) have copy method.\n  if (obj.copy !== undefined) {\n    return obj.copy();\n  }\n  // ArrayBuffer should be copied through slice().\n  if (obj instanceof ArrayBuffer) {\n    return (obj as ArrayBuffer).slice(0);\n  }\n  if (typeof obj === 'object') {\n    result = {};\n    Object.keys(obj).forEach(key => {\n      if (\n        subresponseInfo &&\n        key === subresponseInfo.field &&\n        Array.isArray(obj[key])\n      ) {\n        // Note that subresponses are not deep-copied. This is safe because\n        // those subresponses are not shared among callbacks.\n        result[key] = obj[key].slice(\n          subresponseInfo.start,\n          subresponseInfo.end\n        );\n      } else {\n        result[key] = deepCopyForResponse(obj[key], null);\n      }\n    });\n    return result;\n  }\n  return obj;\n}\n\nexport class Task {\n  _apiCall: SimpleCallbackFunction;\n  _request: {[index: string]: TaskElement[]};\n  _bundledField: string;\n  _subresponseField?: string | null;\n  _data: TaskData[];\n  callCanceller?: GRPCCallResult;\n  /**\n   * A task coordinates the execution of a single bundle.\n   *\n   * @param {function} apiCall - The function to conduct calling API.\n   * @param {Object} bundlingRequest - The base request object to be used\n   *   for the actual API call.\n   * @param {string} bundledField - The name of the field in bundlingRequest\n   *   to be bundled.\n   * @param {string=} subresponseField - The name of the field in the response\n   *   to be passed to the callback.\n   * @constructor\n   * @private\n   */\n  constructor(\n    apiCall: SimpleCallbackFunction,\n    bundlingRequest: {},\n    bundledField: string,\n    subresponseField?: string | null\n  ) {\n    this._apiCall = apiCall;\n    this._request = bundlingRequest;\n    this._bundledField = bundledField;\n    this._subresponseField = subresponseField;\n    this._data = [];\n  }\n  /**\n   * Returns the number of elements in a task.\n   * @return {number} The number of elements.\n   */\n  getElementCount() {\n    let count = 0;\n    for (let i = 0; i  {\n        const responses: Array = [];\n        if (err) {\n          self._data.forEach(() => {\n            responses.push(undefined);\n          });\n        } else {\n          let subresponseInfo: SubResponseInfo | null = null;\n          if (self._subresponseField) {\n            subresponseInfo = {\n              field: self._subresponseField,\n              start: 0,\n            };\n          }\n          self._data.forEach(data => {\n            if (subresponseInfo) {\n              subresponseInfo.end =\n                subresponseInfo.start! + data.elements.length;\n            }\n            responses.push(deepCopyForResponse(response, subresponseInfo));\n            if (subresponseInfo) {\n              subresponseInfo.start = subresponseInfo.end;\n            }\n          });\n        }\n        for (let i = 0; i  {\n        if (d.callback.id === id) {\n          d.cancelled = true;\n        }\n        if (!d.cancelled) {\n          allCancelled = false;\n        }\n      });\n      if (allCancelled) {\n        this.callCanceller.cancel();\n      }\n      return allCancelled;\n    }\n    for (let i = 0; i \n    \n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/TaskElement.html":{"url":"interfaces/TaskElement.html","title":"interface - TaskElement","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  TaskElement\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/bundlingCalls/task.ts\n        \n\n\n\n\n\n\n    \n\n\n    \n        import {status} from '@grpc/grpc-js';\n\nimport {APICallback, GRPCCallResult, SimpleCallbackFunction} from '../apitypes';\nimport {GoogleError} from '../googleError';\n\nexport interface SubResponseInfo {\n  field: string;\n  start?: number;\n  end?: number;\n}\n\nexport interface TaskElement {}\n\nexport interface TaskData {\n  elements: TaskElement[];\n  bytes: number;\n  callback: TaskCallback;\n  cancelled?: boolean;\n}\n\nexport interface TaskCallback extends APICallback {\n  id?: string;\n}\n\n/**\n * Creates a deep copy of the object with the consideration of subresponse\n * fields for bundling.\n *\n * @param {Object} obj - The source object.\n * @param {Object?} subresponseInfo - The information to copy the subset of\n *   the field for the response. Do nothing if it's null.\n * @param {String} subresponseInfo.field - The field name.\n * @param {number} subresponseInfo.start - The offset where the copying\n *   element should starts with.\n * @param {number} subresponseInfo.end - The ending index where the copying\n *   region of the elements ends.\n * @return {Object} The copied object.\n * @private\n */\nexport function deepCopyForResponse(\n  // tslint:disable-next-line no-any\n  obj: any,\n  subresponseInfo: SubResponseInfo | null\n) {\n  // tslint:disable-next-line no-any\n  let result: any;\n  if (obj === null) {\n    return null;\n  }\n  if (obj === undefined) {\n    return undefined;\n  }\n  if (Array.isArray(obj)) {\n    result = [];\n    obj.forEach(element => {\n      result.push(deepCopyForResponse(element, null));\n    });\n    return result;\n  }\n  // Some objects (such as ByteBuffer) have copy method.\n  if (obj.copy !== undefined) {\n    return obj.copy();\n  }\n  // ArrayBuffer should be copied through slice().\n  if (obj instanceof ArrayBuffer) {\n    return (obj as ArrayBuffer).slice(0);\n  }\n  if (typeof obj === 'object') {\n    result = {};\n    Object.keys(obj).forEach(key => {\n      if (\n        subresponseInfo &&\n        key === subresponseInfo.field &&\n        Array.isArray(obj[key])\n      ) {\n        // Note that subresponses are not deep-copied. This is safe because\n        // those subresponses are not shared among callbacks.\n        result[key] = obj[key].slice(\n          subresponseInfo.start,\n          subresponseInfo.end\n        );\n      } else {\n        result[key] = deepCopyForResponse(obj[key], null);\n      }\n    });\n    return result;\n  }\n  return obj;\n}\n\nexport class Task {\n  _apiCall: SimpleCallbackFunction;\n  _request: {[index: string]: TaskElement[]};\n  _bundledField: string;\n  _subresponseField?: string | null;\n  _data: TaskData[];\n  callCanceller?: GRPCCallResult;\n  /**\n   * A task coordinates the execution of a single bundle.\n   *\n   * @param {function} apiCall - The function to conduct calling API.\n   * @param {Object} bundlingRequest - The base request object to be used\n   *   for the actual API call.\n   * @param {string} bundledField - The name of the field in bundlingRequest\n   *   to be bundled.\n   * @param {string=} subresponseField - The name of the field in the response\n   *   to be passed to the callback.\n   * @constructor\n   * @private\n   */\n  constructor(\n    apiCall: SimpleCallbackFunction,\n    bundlingRequest: {},\n    bundledField: string,\n    subresponseField?: string | null\n  ) {\n    this._apiCall = apiCall;\n    this._request = bundlingRequest;\n    this._bundledField = bundledField;\n    this._subresponseField = subresponseField;\n    this._data = [];\n  }\n  /**\n   * Returns the number of elements in a task.\n   * @return {number} The number of elements.\n   */\n  getElementCount() {\n    let count = 0;\n    for (let i = 0; i  {\n        const responses: Array = [];\n        if (err) {\n          self._data.forEach(() => {\n            responses.push(undefined);\n          });\n        } else {\n          let subresponseInfo: SubResponseInfo | null = null;\n          if (self._subresponseField) {\n            subresponseInfo = {\n              field: self._subresponseField,\n              start: 0,\n            };\n          }\n          self._data.forEach(data => {\n            if (subresponseInfo) {\n              subresponseInfo.end =\n                subresponseInfo.start! + data.elements.length;\n            }\n            responses.push(deepCopyForResponse(response, subresponseInfo));\n            if (subresponseInfo) {\n              subresponseInfo.start = subresponseInfo.end;\n            }\n          });\n        }\n        for (let i = 0; i  {\n        if (d.callback.id === id) {\n          d.cancelled = true;\n        }\n        if (!d.cancelled) {\n          allCancelled = false;\n        }\n      });\n      if (allCancelled) {\n        this.callCanceller.cancel();\n      }\n      return allCancelled;\n    }\n    for (let i = 0; i \n    \n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"changelog.html":{"url":"changelog.html","title":"getting-started - changelog","body":"\n                   \n\nChangelog\nnpm history\n1.0.0 (2019-05-09)\nBug Fixes\n\ndeps: update dependency @grpc/grpc-js to ^0.4.0 (#487 (981b1ed)\ndeps: update dependency google-auth-library to v4 (#493 (03236f4)\n\nBuild System\n\nupgrade engines field to >=8.10.0 (#483 (728678a)\n\nFeatures\n\nuse @grpc/grpc-js instead of grpc (#484 (b872f2b)\n\nBREAKING CHANGES\n\nuse @grpc/grpc-js instead of grpc (#484)\nupgrade engines field to >=8.10.0 (#483)\n\nv0.26.0\n04-30-2019 20:45 PDT\nImplementation Changes\n\nrefactor: a huge refactor of call handling (#467)\nfeat: do not use legacy grpc loadObject (#477)\n\nNew Features\n\nfeat: turned google-proto-files into a dev dependency (#470)\n\nDependencies\n\nchore(deps): unpin grpc (#475)\nfix: pin grpc 1.20.0 (#474)\nchore(deps): update dependency nyc to v14 (#468)\nfix(deps): update dependency @grpc/proto-loader to ^0.5.0 (#466)\nchore(deps): update dependency mocha to ~6.1.0 (#464)\nchore(deps): update dependency typescript to ~3.4.0\nchore(deps): update dependency @types/semver to v6\n\nInternal / Testing Changes\n\ntest: end-to-end system test (#471)\nupdate to .nycrc with --all enabled (#476)\ntest: better return type for typescript 3.4.0 (#463)\n\nv0.25.6\n03-28-2019 21:27 PDT\nFixes\n\nfix(deps): update dependency semver to v6\nfix: bundling is optional in MethodConfig (#459)\nfix(ts): drop dependency on @types/duplexify (#458)\n\nInternal / Testing Changes\n\nchore: publish to npm using wombat (#453)\nbuild: use per-repo publish token (#449)\n\nv0.25.5\n03-15-2019 14:01 PDT\nImplementation Changes\n\nfix: includes @types/duplexify in package (#441)\n\nDependencies\n\nfix(deps): update dependency google-proto-files to ^0.19.0\nchore(deps): update dependency @types/source-map-support to ^0.5.0 (#442)\n\nInternal / Testing Changes\n\nbuild: Add docuploader credentials to node publish jobs (#444)\nbuild: use node10 to run samples-test, system-test etc (#443)\nbuild: update kokoro config (#440)\ntest: longer timeout for Pub/Sub system tests (#451)\n\nv0.25.4\n02-28-2019 17:51 PST\nImplementation Changes\n\nfix: do not hang in LRO forever if API returned nothing (#436)\n\nv0.25.3\n02-26-2019 12:08 PST\nImplementation Changes\n\nfix: monitoring could be a common proto (#434)\nrefactor: cleanup unused files (#422)\nchore(typescript): export common API call types (#433)\n\nDependencies\n\nchore(deps): update dependency mocha to v6 (#430)\n\nDocumentation\n\ndocs: update links in contrib guide (#429)\n\nInternal / Testing Changes\n\nbuild: use linkinator for docs test (#428)\n\nv0.25.2\n02-12-2019 01:16 PST\n\nfix: do not fail if bundledField is missing (#424)\nfix: do not use console.warn or console.error (#426)\n\nImplementation Changes\n\nrefactor: snake case savagery is for pythonistas &#x1F645;‍♂️&#x1F40D; (#421)\nrefactor: clean up operations client (#420)\n\nInternal / Testing Changes\n\ntest: do not use grpc-js in regular system test (#425)\nbuild: create docs test npm scripts (#423)\n\nv0.25.1\n02-08-2019 18:01 PST\nThis is a patch release that fixes the code working with grpc-js (#400).\nIt's not supposed to be used in production (yet), so it's hidden behind a secret environment variable.\nWe'll let you know when it's ready to use!\nDependencies\n\nfix(deps): update dependency walkdir to v0.3.2 (#413)\nfix(deps): update dependency walkdir to v0.2.0 (#410)\nfix(deps): update dependency walkdir to v0.1.0 (#407)\n\nDocumentation\n\ndocs: update contributing guide (#414)\ndocs: add lint/fix example to contributing guide (#409)\ndocs: fix type for retryCodes (#404)\n\nInternal / Testing Changes\n\nbuild: test using @grpc/grpc-js in CI (#418)\nchore: don't run system tests with grpc-js (#417)\ntest: enable testing of grpc-js (#400)\n\nv0.25.0\n01-28-2019 23:31 PST\nNew Features\n\nAdd grpc-gcp support in gax (#396)\n\nDependencies\n\nchore(deps): update dependency eslint-config-prettier to v4 (#399)\n\nv0.24.0\n01-24-2019 08:49 PST\nDependencies\n\nfix(deps): update dependency @grpc/proto-loader to ^0.4.0 (#395)\nfix(deps): update dependency google-auth-library to v3 (#394)\n\nv0.23.0\n01-11-2019 13:32 PST\nImplementation Changes\n\nfix: include status code on errors (#390)\nfix: Change to \"greater than\" for limit on number of elements (#386)\nfix(ts): export CallSettings and RetryOptions (#360)\n\nDependencies\n\nchore(deps): update dependency @types/sinon to v7 (#385)\nchore(deps): update dependency typescript to ~3.2.0 (#364)\nchore(deps): update dependency gts to ^0.9.0 (#355)\n\nDocumentation\n\nbuild: check broken links in generated docs (#387)\n\nInternal / Testing Changes\n\nchore(build): inject yoshi automation key (#384)\nchore: update nyc and eslint configs (#383)\nchore: npm-install-retry is not a thing anymore (#381)\nchore: fix publish.sh permission +x (#380)\nfix(build): fix Kokoro release script (#379)\nbuild: add Kokoro configs for autorelease (#378)\nchore: always nyc report before calling codecov (#375)\nchore: nyc ignore build/test by default (#374)\nchore: update synth metadata (#372)\nchore: fix openssl decrypt (#367)\ntest: enable pub/sub system tests (#366)\nchore: don't say operations_client.ts is autogen'd (#361)\ntest: don't run Pub/Sub system tests (#362)\nchore: include format and lint tools for samples (#359)\nchore: add a synth.metadata\n\nv0.22.1\n11-12-2018 16:56 PST\nDependencies\n\nUpdate grpc dependency (#353)\n\nInternal / Testing Changes\n\nUpdate eslintignore config (#352)\n\nv0.22.0\n11-12-2018 15:05 PST\nNew Features\n\nfeat: to support GRPC-GCP Extension, include additional options in grpcOptions (#328)\n\nv0.21.0\n11-10-2018 11:27 PST\nThis is a minor service release that largely contains updates to other modules.  The upgrade to google-proto-files and walkdir in particular should improve load time of the module by at least ~100ms.\nDependencies\n\nfix(deps): update dependency google-proto-files to ^0.18.0 (#348)\nfix: use walkdir instead of globby (#346)\nchore(deps): update dependency through2 to v3 (#343)\nchore: update grpc to ^1.15.1 (#316)\nfix(deps): update dependency @grpc/grpc-js to ^0.3.0 (#308)\n\nInternal / Testing Changes\n\nfix: improve types, remove dead code (#340)\nrefactor: enable noImplicitThis in the tsconfig (#347)\nrefactor: drop extend and lodash.flatten (#345)\nchore: remove temporary folder (#339)\nchore: use latest npm on Windows (#344)\nrefactor: clean up lodash and use strict (#342)\nchore: include build in eslintignore (#337)\nchore: system tests for gax (#334)\nchore: update issue templates (#333)\nUpdate issue templates\nchore: remove old issue template (#329)\nbuild: run tests on node11 (#327)\nfix: better types for GAPIC clients (#326)\nchores(build): do not collect sponge.xml from windows builds (#325)\nchores(build): run codecov on continuous builds (#324)\nchore: update new issue template (#323)\nbuild: fix codecov uploading on Kokoro (#320)\nfix(deps): update dependency google-proto-files to ^0.17.0 (#317)\nchore(deps): update dependency sinon to v7 (#319)\nUpdate kokoro config (#315)\nchore(deps): update dependency typescript to ~3.1.0 (#313)\nUpdate CI config (#312)\nbuild: prevent system/sample-test from leaking credentials\nUpdate the kokoro config (#309)\ntest: remove appveyor config (#307)\nUpdate CI config (#306)\nEnable prefer-const in the eslint config (#304)\nEnable no-var in eslint (#303)\n\nv0.18.0\nImplementation Changes\nBREAKING CHANGE:\n- fix: drop support for node.js 4.x and 9.x (#262)\nNew Features\nDependencies\n\nrefactor: add dependency on @grpc/proto-loader (#229)\nchore(deps): update dependency typescript to v3 (#275)\nfix(deps): update dependency @grpc/proto-loader to ^0.3.0 (#269)\nchore(deps): update dependency gts to ^0.8.0 (#266)\nchore(package): Update gts to the latest version &#x1F680; (#255)\nchore(package): update @types/globby to version 8.0.0 (#257)\n\nDocumentation\n\nAdd Code of Conduct\n\nInternal / Testing Changes\n\nchore: move mocha options to mocha.opts (#274)\ntest: fixing timeouts (#264)\nConfigure Renovate (#258)\nfix: fix typo in a test (#260)\nfix: update linking for samples (#259)\nrefactor: remove prettier, eslint, jshint (#254)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"contributing.html":{"url":"contributing.html","title":"getting-started - contributing","body":"\n                   \n\nHow to become a contributor and submit your own code\nTable of contents\n\nContributor License Agreements\nContributing a patch\nRunning the tests\nReleasing the library\n\nContributor License Agreements\nWe'd love to accept your sample apps and patches! Before we can take them, we\nhave to jump a couple of legal hurdles.\nPlease fill out either the individual or corporate Contributor License Agreement\n(CLA).\n\nIf you are an individual writing original source code and you're sure you\nown the intellectual property, then you'll need to sign an individual CLA.\nIf you work for a company that wants to allow you to contribute your work,\nthen you'll need to sign a corporate CLA.\n\nFollow either of the two links above to access the appropriate CLA and\ninstructions for how to sign and return it. Once we receive it, we'll be able to\naccept your pull requests.\nContributing A Patch\n\nSubmit an issue describing your proposed change to the repo in question.\nThe repo owner will respond to your issue promptly.\nIf your proposed change is accepted, and you haven't already done so, sign a\nContributor License Agreement (see details above).\nFork the desired repo, develop and test your code changes.\nEnsure that your code adheres to the existing style in the code to which\nyou are contributing.\nEnsure that your code has an appropriate set of tests which all pass.\nSubmit a pull request.\n\nRunning the tests\n\nPrepare your environment for Node.js setup.\n\nInstall dependencies:\nnpm install\nRun the tests:\nnpm test\nLint (and maybe fix) any changes:\nnpm run fix\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @grpc/grpc-js : ^0.4.0\n        \n            @grpc/proto-loader : ^0.5.0\n        \n            duplexify : ^3.6.0\n        \n            google-auth-library : ^4.0.0\n        \n            is-stream-ended : ^0.1.4\n        \n            lodash.at : ^4.6.0\n        \n            lodash.has : ^4.5.2\n        \n            protobufjs : ^6.8.8\n        \n            retry-request : ^4.0.0\n        \n            semver : ^6.0.0\n        \n            walkdir : ^0.4.0\n    \n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            StreamType   (src/.../streaming.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/streamingCalls/streaming.ts\n    \n        \n            \n                \n                    \n                        \n                        StreamType\n                    \n                \n                    \n                        \n                            The type of gRPC streaming.\n\n                        \n                    \n                        \n                            \n                                 SERVER_STREAMING\n                            \n                        \n                        \n                            \n                                Value : 1\n                            \n                        \n                        \n                            \n                                 CLIENT_STREAMING\n                            \n                        \n                        \n                            \n                                Value : 2\n                            \n                        \n                        \n                            \n                                 BIDI_STREAMING\n                            \n                        \n                        \n                            \n                                Value : 3\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            computeBundleId   (src/.../bundlingUtils.ts)\n                        \n                        \n                            constructSettings   (src/.../gax.ts)\n                        \n                        \n                            createApiCall   (src/.../createApiCall.ts)\n                        \n                        \n                            createAPICaller   (src/.../apiCaller.ts)\n                        \n                        \n                            createBackoffSettings   (src/.../gax.ts)\n                        \n                        \n                            createDefaultBackoffSettings   (src/.../gax.ts)\n                        \n                        \n                            createMaxRetriesBackoffSettings   (src/.../gax.ts)\n                        \n                        \n                            createRetryOptions   (src/.../gax.ts)\n                        \n                        \n                            formatSegments   (src/.../pathTemplate.ts)\n                        \n                        \n                            fromParams   (src/.../routingHeader.ts)\n                        \n                        \n                            isBrowser   (src/.../isbrowser.ts)\n                        \n                        \n                            lro   (src/.../index.ts)\n                        \n                        \n                            noop   (src/.../bundleExecutor.ts)\n                        \n                        \n                            operation   (src/.../longrunning.ts)\n                        \n                        \n                            warn   (src/.../warnings.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/bundlingCalls/bundlingUtils.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        \n                            computeBundleId\n                        \n                        \n                    \n                \n            \n            \n                \ncomputeBundleId(obj, discriminatorFields)\n                \n            \n\n\n\n\n            \n                \n                    Compute the identifier of the obj. The objects of the same ID\nwill be bundled together.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    obj\n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nThe request object.\n\n\n                                    \n                                \n                                \n                                    discriminatorFields\n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nThe array of field names.\nA field name may include '.' as a separator, which is used to\nindicate object traversal.\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    src/gax.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        \n                            constructSettings\n                        \n                        \n                    \n                \n            \n            \n                \nconstructSettings(serviceName, clientConfig, configOverrides, retryNames, otherArgs?, promise?)\n                \n            \n\n\n\n\n            \n                \n                    Constructs a dictionary mapping method names to CallSettings.\nThe clientConfig parameter is parsed from a client configuration JSON\nfile of the form:\n {\n   \"interfaces\": {\n     \"google.fake.v1.ServiceName\": {\n       \"retry_codes\": {\n         \"idempotent\": [\"UNAVAILABLE\", \"DEADLINE_EXCEEDED\"],\n         \"non_idempotent\": []\n       },\n       \"retry_params\": {\n         \"default\": {\n           \"initial_retry_delay_millis\": 100,\n           \"retry_delay_multiplier\": 1.2,\n           \"max_retry_delay_millis\": 1000,\n           \"initial_rpc_timeout_millis\": 2000,\n           \"rpc_timeout_multiplier\": 1.5,\n           \"max_rpc_timeout_millis\": 30000,\n           \"total_timeout_millis\": 45000\n         }\n       },\n       \"methods\": {\n         \"CreateFoo\": {\n           \"retry_codes_name\": \"idempotent\",\n           \"retry_params_name\": \"default\"\n         },\n         \"Publish\": {\n           \"retry_codes_name\": \"non_idempotent\",\n           \"retry_params_name\": \"default\",\n           \"bundling\": {\n             \"element_count_threshold\": 40,\n             \"element_count_limit\": 200,\n             \"request_byte_threshold\": 90000,\n             \"request_byte_limit\": 100000,\n             \"delay_threshold_millis\": 100\n           }\n         }\n       }\n     }\n   }\n }\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    serviceName\n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nThe fully-qualified name of this\nservice, used as a key into the client config file (in the\nexample above, this value should be 'google.fake.v1.ServiceName').\n\n\n                                    \n                                \n                                \n                                    clientConfig\n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nA dictionary parsed from the\nstandard API client config file.\n\n\n                                    \n                                \n                                \n                                    configOverrides\n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nA dictionary in the same structure of\nclient_config to override the settings.\n\n\n                                    \n                                \n                                \n                                    retryNames\n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nA dictionary mapping the strings\nreferring to response status codes to objects representing\nthose codes.\n\n\n                                    \n                                \n                                \n                                    otherArgs\n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        \nthe non-request arguments to be passed to the API\ncalls.\n\n\n                                    \n                                \n                                \n                                    promise\n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        \nA constructor for a promise that implements the\nES6 specification of promise. If not provided, native promises will be used.\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            createBackoffSettings\n                        \n                        \n                    \n                \n            \n            \n                \ncreateBackoffSettings(initialRetryDelayMillis, retryDelayMultiplier, maxRetryDelayMillis, initialRpcTimeoutMillis, rpcTimeoutMultiplier, maxRpcTimeoutMillis, totalTimeoutMillis)\n                \n            \n\n\n\n\n            \n                \n                    Parameters to the exponential backoff algorithm for retrying.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    initialRetryDelayMillis\n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nthe initial delay time,\nin milliseconds, between the completion of the first failed request and the\ninitiation of the first retrying request.\n\n\n                                    \n                                \n                                \n                                    retryDelayMultiplier\n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nthe multiplier by which to\nincrease the delay time between the completion of failed requests, and the\ninitiation of the subsequent retrying request.\n\n\n                                    \n                                \n                                \n                                    maxRetryDelayMillis\n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nthe maximum delay time, in\nmilliseconds, between requests. When this value is reached,\nretryDelayMultiplier will no longer be used to increase delay time.\n\n\n                                    \n                                \n                                \n                                    initialRpcTimeoutMillis\n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nthe initial timeout parameter\nto the request.\n\n\n                                    \n                                \n                                \n                                    rpcTimeoutMultiplier\n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nthe multiplier by which to\nincrease the timeout parameter between failed requests.\n\n\n                                    \n                                \n                                \n                                    maxRpcTimeoutMillis\n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nthe maximum timeout parameter, in\nmilliseconds, for a request. When this value is reached,\nrpcTimeoutMultiplier will no longer be used to increase the timeout.\n\n\n                                    \n                                \n                                \n                                    totalTimeoutMillis\n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nthe total time, in milliseconds,\nstarting from when the initial request is sent, after which an error will\nbe returned, regardless of the retrying attempts made meanwhile.\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         BackoffSettings\n\n                    \n                    \n                        a new settings.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            createDefaultBackoffSettings\n                        \n                        \n                    \n                \n            \n            \n                \ncreateDefaultBackoffSettings()\n                \n            \n\n\n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            createMaxRetriesBackoffSettings\n                        \n                        \n                    \n                \n            \n            \n                \ncreateMaxRetriesBackoffSettings(initialRetryDelayMillis, retryDelayMultiplier, maxRetryDelayMillis, initialRpcTimeoutMillis, rpcTimeoutMultiplier, maxRpcTimeoutMillis, maxRetries)\n                \n            \n\n\n\n\n            \n                \n                    Parameters to the exponential backoff algorithm for retrying.\nThis function is unsupported, and intended for internal use only.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    initialRetryDelayMillis\n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nthe initial delay time,\nin milliseconds, between the completion of the first failed request and the\ninitiation of the first retrying request.\n\n\n                                    \n                                \n                                \n                                    retryDelayMultiplier\n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nthe multiplier by which to\nincrease the delay time between the completion of failed requests, and the\ninitiation of the subsequent retrying request.\n\n\n                                    \n                                \n                                \n                                    maxRetryDelayMillis\n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nthe maximum delay time, in\nmilliseconds, between requests. When this value is reached,\nretryDelayMultiplier will no longer be used to increase delay time.\n\n\n                                    \n                                \n                                \n                                    initialRpcTimeoutMillis\n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nthe initial timeout parameter\nto the request.\n\n\n                                    \n                                \n                                \n                                    rpcTimeoutMultiplier\n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nthe multiplier by which to\nincrease the timeout parameter between failed requests.\n\n\n                                    \n                                \n                                \n                                    maxRpcTimeoutMillis\n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nthe maximum timeout parameter, in\nmilliseconds, for a request. When this value is reached,\nrpcTimeoutMultiplier will no longer be used to increase the timeout.\n\n\n                                    \n                                \n                                \n                                    maxRetries\n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nthe maximum number of retrying attempts that\nwill be made. If reached, an error will be returned.\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         BackoffSettings\n\n                    \n                    \n                        a new settings.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            createRetryOptions\n                        \n                        \n                    \n                \n            \n            \n                \ncreateRetryOptions(retryCodes, backoffSettings)\n                \n            \n\n\n\n\n            \n                \n                    Per-call configurable settings for retrying upon transient failure.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    retryCodes\n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \na list of Google API canonical error codes\nupon which a retry should be attempted.\n\n\n                                    \n                                \n                                \n                                    backoffSettings\n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nconfigures the retry\nexponential backoff algorithm.\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         RetryOptions\n\n                    \n                    \n                        A new RetryOptions object.\n\n                    \n                \n            \n        \n    \n    src/createApiCall.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        \n                            createApiCall\n                        \n                        \n                    \n                \n            \n            \n                \ncreateApiCall(func, settings, descriptor?)\n                \n            \n\n\n\n\n            \n                \n                    Converts an rpc call into an API call governed by the settings.\nIn typical usage, func will be a promise to a callable used to make an rpc\nrequest. This will mostly likely be a bound method from a request stub used\nto make an rpc call. It is not a direct function but a Promise instance,\nbecause of its asynchronism (typically, obtaining the auth information).\nThe result is a function which manages the API call with the given settings\nand the options on the invocation.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    func\n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nis either a promise to be used to make\na bare RPC call, or just a bare RPC call.\n\n\n                                    \n                                \n                                \n                                    settings\n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nprovides the settings for this call\n\n\n                                    \n                                \n                                \n                                    descriptor\n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        \noptionally specify the descriptor for\nthe method call.\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         GaxCall\n\n                    \n                    \n                        func - a bound method on a request stub used\nto make an rpc call.\n\n                    \n                \n            \n        \n    \n    src/apiCaller.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        \n                            createAPICaller\n                        \n                        \n                    \n                \n            \n            \n                \ncreateAPICaller(settings, descriptor)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    settings\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    descriptor\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         APICaller\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    src/pathTemplate.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        \n                            formatSegments\n                        \n                        \n                    \n                \n            \n            \n                \nformatSegments(segments)\n                \n            \n\n\n\n\n            \n                \n                    Creates the string representattion for the segments.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    segments\n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nThe array of segments.\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \nA string representing segments in the path template\nformat.\n\n\n                    \n                \n            \n        \n    \n    src/routingHeader.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        \n                            fromParams\n                        \n                        \n                    \n                \n            \n            \n                \nfromParams(params)\n                \n            \n\n\n\n\n            \n                \n                    Helpers for constructing routing headers.\nThese headers are used by Google infrastructure to determine how to route\nrequests, especially for services that are regional.\nGenerally, these headers are specified as gRPC metadata.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    params\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    src/isbrowser.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        \n                            isBrowser\n                        \n                        \n                    \n                \n            \n            \n                \nisBrowser()\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Returns :         boolean\n\n                    \n                \n            \n        \n    \n    src/index.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        \n                            lro\n                        \n                        \n                    \n                \n            \n            \n                \nlro(options)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    options\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    src/bundlingCalls/bundleExecutor.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        \n                            noop\n                        \n                        \n                    \n                \n            \n            \n                \nnoop()\n                \n            \n\n\n\n\n        \n    \n    src/longRunningCalls/longrunning.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        \n                            operation\n                        \n                        \n                    \n                \n            \n            \n                \noperation(op, longrunningDescriptor, backoffSettings, callOptions?)\n                \n            \n\n\n\n\n            \n                \n                    Method used to create Operation objects.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    op\n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nThe operation to be wrapped.\n\n\n                                    \n                                \n                                \n                                    longrunningDescriptor\n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nThis defines the\noperations service client and unpacking mechanisms for the operation.\n\n\n                                    \n                                \n                                \n                                    backoffSettings\n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nThe backoff settings used in\nin polling the operation.\n\n\n                                    \n                                \n                                \n                                    callOptions\n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        \nCallOptions used in making get operation\nrequests.\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    src/warnings.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        \n                            warn\n                        \n                        \n                    \n                \n            \n            \n                \nwarn(code, message)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    code\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    message\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\n\n\nGoogle API Extensions for Node.js\n\n\n\nGoogle API Extensions for Node.js (gax-nodejs) is a set of modules which aids the development of APIs for clients and servers based on gRPC and Google API conventions.\nApplication code will rarely need to use most of the classes within this library directly, but code generated automatically from the API definition files in Google APIs can use services such as page streaming and request bundling to provide a more convenient and idiomatic API surface to callers.\nInstallation\nsh\n$ npm install google-gax\nSupporting older version of Node.js\nThis library uses grpc-js package for communicating with API server, and it uses HTTP/2 functionality\nthat is only available in Node.js v8.13.0 or newer. If you need to use this library with older versions of Node.js, you need to make your code depend\non a legacy gRPC library (grpc) and pass the instance of gRPC to the client constructor:\njs\nconst grpc = require('grpc');\nconst client = new APIClient({ grpc }); // APIClient is the client class you use, e.g. SpeechClient, etc.\nContributing\nContributions to this library are always welcome and highly encouraged.  See the CONTRIBUTING documentation for more information on how to get started.\nDetails\nFor detailed documentation of the modules in gax-nodejs, please check out the docs.\nLicense\nBSD - See LICENSE for more information.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"license.html":{"url":"license.html","title":"getting-started - license","body":"\n                   \n\nCopyright 2016, Google Inc.\nAll rights reserved.\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions are\nmet:\n    * Redistributions of source code must retain the above copyright\nnotice, this list of conditions and the following disclaimer.\n    * Redistributions in binary form must reproduce the above\ncopyright notice, this list of conditions and the following disclaimer\nin the documentation and/or other materials provided with the\ndistribution.\n    * Neither the name of Google Inc. nor the names of its\ncontributors may be used to endorse or promote products derived from\nthis software without specific prior written permission.\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n\"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\nLIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\nA PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\nOWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\nSPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\nLIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\nDATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\nTHEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\nOF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n\n\n    \n        \n            \n                \n                    \n                    24 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    36 Interfaces\n                \n            \n        \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/typealiases.html":{"url":"miscellaneous/typealiases.html","title":"miscellaneous-typealiases - typealiases","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Type aliases\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            APICallback   (src/.../apitypes.ts)\n                        \n                        \n                            BiDiStreamingCall   (src/.../apitypes.ts)\n                        \n                        \n                            CancellableStream   (src/.../apitypes.ts)\n                        \n                        \n                            ClientStreamingCall   (src/.../apitypes.ts)\n                        \n                        \n                            GaxCallResult   (src/.../apitypes.ts)\n                        \n                        \n                            GRPCCall   (src/.../apitypes.ts)\n                        \n                        \n                            GrpcModule   (src/.../grpc.ts)\n                        \n                        \n                            NextPageRequestType   (src/.../apitypes.ts)\n                        \n                        \n                            RawResponseType   (src/.../apitypes.ts)\n                        \n                        \n                            ResponseType   (src/.../apitypes.ts)\n                        \n                        \n                            ResultTuple   (src/.../apitypes.ts)\n                        \n                        \n                            ServerStreamingCall   (src/.../apitypes.ts)\n                        \n                        \n                            UnaryCall   (src/.../apitypes.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/apitypes.ts\n    \n    \n        \n            \n                \n                    \n                    APICallback\n                \n            \n            \n                \n                            function\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    BiDiStreamingCall\n                \n            \n            \n                \n                            function\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    CancellableStream\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    ClientStreamingCall\n                \n            \n            \n                \n                            function\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    GaxCallResult\n                \n            \n            \n                \n                            CancellablePromise | CancellableStream\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    GRPCCall\n                \n            \n            \n                \n                        UnaryCall | ServerStreamingCall | ClientStreamingCall | BiDiStreamingCall\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    NextPageRequestType\n                \n            \n            \n                \n                        literal type | null\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    RawResponseType\n                \n            \n            \n                \n                            Operation | literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    ResponseType\n                \n            \n            \n                \n                        literal type | null\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    ResultTuple\n                \n            \n            \n                \n                            [ResponseType, , ]\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    ServerStreamingCall\n                \n            \n            \n                \n                            function\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    UnaryCall\n                \n            \n            \n                \n                            function\n\n                \n            \n        \n    \n    src/grpc.ts\n    \n    \n        \n            \n                \n                    \n                    GrpcModule\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            ALL_SCOPES   (src/.../operationsClient.ts)\n                        \n                        \n                            BINDING   (src/.../parserExtras.ts)\n                        \n                        \n                            CODE_GEN_NAME_VERSION   (src/.../operationsClient.ts)\n                        \n                        \n                            COMMON_PROTO_FILES   (src/.../grpc.ts)\n                        \n                        \n                            configData   (src/.../operationsClient.ts)\n                        \n                        \n                            createByteLengthFunction   (src/.../index.ts)\n                        \n                        \n                            DEFAULT_SERVICE_PORT   (src/.../operationsClient.ts)\n                        \n                        \n                            duplexify   (src/.../streaming.ts)\n                        \n                        \n                            emittedWarnings   (src/.../warnings.ts)\n                        \n                        \n                            END_BINDING   (src/.../parserExtras.ts)\n                        \n                        \n                            googleProtoFilesDir   (src/.../grpc.ts)\n                        \n                        \n                            INCLUDE_DIRS   (src/.../grpc.ts)\n                        \n                        \n                            PAGE_DESCRIPTORS   (src/.../operationsClient.ts)\n                        \n                        \n                            parser   (src/.../pathTemplate.ts)\n                        \n                        \n                            retryRequest   (src/.../streaming.ts)\n                        \n                        \n                            SERVICE_ADDRESS   (src/.../operationsClient.ts)\n                        \n                        \n                            TERMINAL   (src/.../parserExtras.ts)\n                        \n                        \n                            version   (src/.../index.ts)\n                        \n                        \n                            version   (src/.../operationsClient.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/operationsClient.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            ALL_SCOPES\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     string[]\n\n                        \n                    \n                    \n                        \n                            Default value : []\n                        \n                    \n\n                \n                    \n                        The scopes needed to make gRPC calls to all of the methods defined in\nthis service.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            CODE_GEN_NAME_VERSION\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : 'gapic/0.7.1'\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            configData\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : require('./operations_client_config')\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            DEFAULT_SERVICE_PORT\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Default value : 443\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            PAGE_DESCRIPTORS\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         object\n\n                        \n                    \n                    \n                        \n                            Default value : {\n  listOperations: new PageDescriptor(\n    'pageToken',\n    'nextPageToken',\n    'operations'\n  ),\n}\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            SERVICE_ADDRESS\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : 'longrunning.googleapis.com'\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            version\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : require('../../package.json').version\n                        \n                    \n\n\n            \n        \n\n    src/parserExtras.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            BINDING\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Default value : 1\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            END_BINDING\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Default value : 2\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            TERMINAL\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Default value : 3\n                        \n                    \n\n\n            \n        \n\n    src/grpc.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            COMMON_PROTO_FILES\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : walk\n  .sync(googleProtoFilesDir)\n  .filter(f => path.extname(f) === '.proto')\n  .map(f => path.normalize(f).substring(googleProtoFilesDir.length + 1))\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            googleProtoFilesDir\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : path.join(__dirname, '..', '..', 'protos')\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            INCLUDE_DIRS\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     string[]\n\n                        \n                    \n                    \n                        \n                            Default value : []\n                        \n                    \n\n\n            \n        \n\n    src/index.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            createByteLengthFunction\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : GrpcClient.createByteLengthFunction\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            version\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : require('../../package.json').version\n                        \n                    \n\n\n            \n        \n\n    src/streamingCalls/streaming.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            duplexify\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         DuplexifyConstructor\n\n                        \n                    \n                    \n                        \n                            Default value : require('duplexify')\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            retryRequest\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : require('retry-request')\n                        \n                    \n\n\n            \n        \n\n    src/warnings.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            emittedWarnings\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : new Set()\n                        \n                    \n\n\n            \n        \n\n    src/pathTemplate.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            parser\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : require('./pathTemplateParser')\n                        \n                    \n\n\n            \n        \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
